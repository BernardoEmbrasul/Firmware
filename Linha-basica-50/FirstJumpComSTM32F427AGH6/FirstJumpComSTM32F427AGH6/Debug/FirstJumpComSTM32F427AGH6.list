
FirstJumpComSTM32F427AGH6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000138c  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001538  08001538  00002538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001548  08001548  0000300c  2**0
                  CONTENTS
  4 .ARM          00000008  08001548  08001548  00002548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001550  08001550  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001550  08001550  00002550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001554  08001554  00002554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001558  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000300c  2**0
                  CONTENTS
 10 .bss          00000020  2000000c  2000000c  0000300c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  0000300c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000353b  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000e33  00000000  00000000  00006577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000408  00000000  00000000  000073b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002e7  00000000  00000000  000077b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020db4  00000000  00000000  00007a9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004f1f  00000000  00000000  00028853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c89ab  00000000  00000000  0002d772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f611d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000e64  00000000  00000000  000f6160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009e  00000000  00000000  000f6fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001520 	.word	0x08001520

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08001520 	.word	0x08001520

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <deinitEverything>:
    uint32_t		stack_addr;     // Stack Pointer
    application_t*	func_p;        // Program Counter
} JumpStruct;

void deinitEverything()
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	//-- reset peripherals to guarantee flawless start of user application
//	MX_GPIO_DeInit( );
	HAL_RCC_DeInit();
 800051c:	f000 fedc 	bl	80012d8 <HAL_RCC_DeInit>
	HAL_DeInit();
 8000520:	f000 f94c 	bl	80007bc <HAL_DeInit>
	SysTick->CTRL = 0;
 8000524:	4b05      	ldr	r3, [pc, #20]	@ (800053c <deinitEverything+0x24>)
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 800052a:	4b04      	ldr	r3, [pc, #16]	@ (800053c <deinitEverything+0x24>)
 800052c:	2200      	movs	r2, #0
 800052e:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000530:	4b02      	ldr	r3, [pc, #8]	@ (800053c <deinitEverything+0x24>)
 8000532:	2200      	movs	r2, #0
 8000534:	609a      	str	r2, [r3, #8]
}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	e000e010 	.word	0xe000e010

08000540 <jumpToApp>:

void jumpToApp(const uint32_t address)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	const JumpStruct* vector_p = (JumpStruct*)address;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	60fb      	str	r3, [r7, #12]

	deinitEverything();
 800054c:	f7ff ffe4 	bl	8000518 <deinitEverything>

	/* let's do The Jump! */
    /* Jump, used asm to avoid stack optimization */
    asm("msr msp, %0; bx %1;" : : "r"(vector_p->stack_addr), "r"(vector_p->func_p));
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	68fa      	ldr	r2, [r7, #12]
 8000556:	6852      	ldr	r2, [r2, #4]
 8000558:	f383 8808 	msr	MSP, r3
 800055c:	4710      	bx	r2
}
 800055e:	bf00      	nop
 8000560:	3710      	adds	r7, #16
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
	...

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f000 f904 	bl	8000778 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f808 	bl	8000584 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

  jumpToApp(FLASH_BOOTLOADER);
 8000574:	4802      	ldr	r0, [pc, #8]	@ (8000580 <main+0x18>)
 8000576:	f7ff ffe3 	bl	8000540 <jumpToApp>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800057a:	bf00      	nop
 800057c:	e7fd      	b.n	800057a <main+0x12>
 800057e:	bf00      	nop
 8000580:	08010000 	.word	0x08010000

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b094      	sub	sp, #80	@ 0x50
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	2230      	movs	r2, #48	@ 0x30
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f000 ff98 	bl	80014c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a8:	2300      	movs	r3, #0
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	4b23      	ldr	r3, [pc, #140]	@ (800063c <SystemClock_Config+0xb8>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b0:	4a22      	ldr	r2, [pc, #136]	@ (800063c <SystemClock_Config+0xb8>)
 80005b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005b8:	4b20      	ldr	r3, [pc, #128]	@ (800063c <SystemClock_Config+0xb8>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005c4:	2300      	movs	r3, #0
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000640 <SystemClock_Config+0xbc>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000640 <SystemClock_Config+0xbc>)
 80005d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005d6:	6013      	str	r3, [r2, #0]
 80005d8:	4b19      	ldr	r3, [pc, #100]	@ (8000640 <SystemClock_Config+0xbc>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e4:	2302      	movs	r3, #2
 80005e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e8:	2301      	movs	r3, #1
 80005ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ec:	2310      	movs	r3, #16
 80005ee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005f0:	2300      	movs	r3, #0
 80005f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f4:	f107 0320 	add.w	r3, r7, #32
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 fa49 	bl	8000a90 <HAL_RCC_OscConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000604:	f000 f81e 	bl	8000644 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000608:	230f      	movs	r3, #15
 800060a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800060c:	2300      	movs	r3, #0
 800060e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f000 fcac 	bl	8000f80 <HAL_RCC_ClockConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800062e:	f000 f809 	bl	8000644 <Error_Handler>
  }
}
 8000632:	bf00      	nop
 8000634:	3750      	adds	r7, #80	@ 0x50
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800
 8000640:	40007000 	.word	0x40007000

08000644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000648:	b672      	cpsid	i
}
 800064a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800064c:	bf00      	nop
 800064e:	e7fd      	b.n	800064c <Error_Handler+0x8>

08000650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	4b10      	ldr	r3, [pc, #64]	@ (800069c <HAL_MspInit+0x4c>)
 800065c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800065e:	4a0f      	ldr	r2, [pc, #60]	@ (800069c <HAL_MspInit+0x4c>)
 8000660:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000664:	6453      	str	r3, [r2, #68]	@ 0x44
 8000666:	4b0d      	ldr	r3, [pc, #52]	@ (800069c <HAL_MspInit+0x4c>)
 8000668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800066a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	603b      	str	r3, [r7, #0]
 8000676:	4b09      	ldr	r3, [pc, #36]	@ (800069c <HAL_MspInit+0x4c>)
 8000678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067a:	4a08      	ldr	r2, [pc, #32]	@ (800069c <HAL_MspInit+0x4c>)
 800067c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000680:	6413      	str	r3, [r2, #64]	@ 0x40
 8000682:	4b06      	ldr	r3, [pc, #24]	@ (800069c <HAL_MspInit+0x4c>)
 8000684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000686:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800

080006a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006a4:	bf00      	nop
 80006a6:	e7fd      	b.n	80006a4 <NMI_Handler+0x4>

080006a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ac:	bf00      	nop
 80006ae:	e7fd      	b.n	80006ac <HardFault_Handler+0x4>

080006b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006b4:	bf00      	nop
 80006b6:	e7fd      	b.n	80006b4 <MemManage_Handler+0x4>

080006b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006bc:	bf00      	nop
 80006be:	e7fd      	b.n	80006bc <BusFault_Handler+0x4>

080006c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006c4:	bf00      	nop
 80006c6:	e7fd      	b.n	80006c4 <UsageFault_Handler+0x4>

080006c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr

080006d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr

080006e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006f6:	f000 f8c5 	bl	8000884 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
	...

08000700 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000704:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <SystemInit+0x20>)
 8000706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800070a:	4a05      	ldr	r2, [pc, #20]	@ (8000720 <SystemInit+0x20>)
 800070c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000710:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000724:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800075c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000728:	480d      	ldr	r0, [pc, #52]	@ (8000760 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800072a:	490e      	ldr	r1, [pc, #56]	@ (8000764 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800072c:	4a0e      	ldr	r2, [pc, #56]	@ (8000768 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800072e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000730:	e002      	b.n	8000738 <LoopCopyDataInit>

08000732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000736:	3304      	adds	r3, #4

08000738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800073a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800073c:	d3f9      	bcc.n	8000732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800073e:	4a0b      	ldr	r2, [pc, #44]	@ (800076c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000740:	4c0b      	ldr	r4, [pc, #44]	@ (8000770 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000744:	e001      	b.n	800074a <LoopFillZerobss>

08000746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000748:	3204      	adds	r2, #4

0800074a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800074a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800074c:	d3fb      	bcc.n	8000746 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800074e:	f7ff ffd7 	bl	8000700 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000752:	f000 fec1 	bl	80014d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000756:	f7ff ff07 	bl	8000568 <main>
  bx  lr    
 800075a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800075c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000764:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000768:	08001558 	.word	0x08001558
  ldr r2, =_sbss
 800076c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000770:	2000002c 	.word	0x2000002c

08000774 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000774:	e7fe      	b.n	8000774 <ADC_IRQHandler>
	...

08000778 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800077c:	4b0e      	ldr	r3, [pc, #56]	@ (80007b8 <HAL_Init+0x40>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a0d      	ldr	r2, [pc, #52]	@ (80007b8 <HAL_Init+0x40>)
 8000782:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000786:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000788:	4b0b      	ldr	r3, [pc, #44]	@ (80007b8 <HAL_Init+0x40>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a0a      	ldr	r2, [pc, #40]	@ (80007b8 <HAL_Init+0x40>)
 800078e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000792:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000794:	4b08      	ldr	r3, [pc, #32]	@ (80007b8 <HAL_Init+0x40>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a07      	ldr	r2, [pc, #28]	@ (80007b8 <HAL_Init+0x40>)
 800079a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800079e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007a0:	2003      	movs	r0, #3
 80007a2:	f000 f941 	bl	8000a28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007a6:	200f      	movs	r0, #15
 80007a8:	f000 f83c 	bl	8000824 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007ac:	f7ff ff50 	bl	8000650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007b0:	2300      	movs	r3, #0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40023c00 	.word	0x40023c00

080007bc <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80007c0:	4b13      	ldr	r3, [pc, #76]	@ (8000810 <HAL_DeInit+0x54>)
 80007c2:	f04f 32ff 	mov.w	r2, #4294967295
 80007c6:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 80007c8:	4b11      	ldr	r3, [pc, #68]	@ (8000810 <HAL_DeInit+0x54>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 80007ce:	4b10      	ldr	r3, [pc, #64]	@ (8000810 <HAL_DeInit+0x54>)
 80007d0:	f04f 32ff 	mov.w	r2, #4294967295
 80007d4:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 80007d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <HAL_DeInit+0x54>)
 80007d8:	2200      	movs	r2, #0
 80007da:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 80007dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <HAL_DeInit+0x54>)
 80007de:	f04f 32ff 	mov.w	r2, #4294967295
 80007e2:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 80007e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000810 <HAL_DeInit+0x54>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 80007ea:	4b09      	ldr	r3, [pc, #36]	@ (8000810 <HAL_DeInit+0x54>)
 80007ec:	f04f 32ff 	mov.w	r2, #4294967295
 80007f0:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 80007f2:	4b07      	ldr	r3, [pc, #28]	@ (8000810 <HAL_DeInit+0x54>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 80007f8:	4b05      	ldr	r3, [pc, #20]	@ (8000810 <HAL_DeInit+0x54>)
 80007fa:	f04f 32ff 	mov.w	r2, #4294967295
 80007fe:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000800:	4b03      	ldr	r3, [pc, #12]	@ (8000810 <HAL_DeInit+0x54>)
 8000802:	2200      	movs	r2, #0
 8000804:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000806:	f000 f805 	bl	8000814 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 800080a:	2300      	movs	r3, #0
}
 800080c:	4618      	mov	r0, r3
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40023800 	.word	0x40023800

08000814 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
	...

08000824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800082c:	4b12      	ldr	r3, [pc, #72]	@ (8000878 <HAL_InitTick+0x54>)
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	4b12      	ldr	r3, [pc, #72]	@ (800087c <HAL_InitTick+0x58>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	4619      	mov	r1, r3
 8000836:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800083a:	fbb3 f3f1 	udiv	r3, r3, r1
 800083e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000842:	4618      	mov	r0, r3
 8000844:	f000 f917 	bl	8000a76 <HAL_SYSTICK_Config>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800084e:	2301      	movs	r3, #1
 8000850:	e00e      	b.n	8000870 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2b0f      	cmp	r3, #15
 8000856:	d80a      	bhi.n	800086e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000858:	2200      	movs	r2, #0
 800085a:	6879      	ldr	r1, [r7, #4]
 800085c:	f04f 30ff 	mov.w	r0, #4294967295
 8000860:	f000 f8ed 	bl	8000a3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000864:	4a06      	ldr	r2, [pc, #24]	@ (8000880 <HAL_InitTick+0x5c>)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800086a:	2300      	movs	r3, #0
 800086c:	e000      	b.n	8000870 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800086e:	2301      	movs	r3, #1
}
 8000870:	4618      	mov	r0, r3
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000000 	.word	0x20000000
 800087c:	20000008 	.word	0x20000008
 8000880:	20000004 	.word	0x20000004

08000884 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000888:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <HAL_IncTick+0x20>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	461a      	mov	r2, r3
 800088e:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <HAL_IncTick+0x24>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4413      	add	r3, r2
 8000894:	4a04      	ldr	r2, [pc, #16]	@ (80008a8 <HAL_IncTick+0x24>)
 8000896:	6013      	str	r3, [r2, #0]
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	20000008 	.word	0x20000008
 80008a8:	20000028 	.word	0x20000028

080008ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  return uwTick;
 80008b0:	4b03      	ldr	r3, [pc, #12]	@ (80008c0 <HAL_GetTick+0x14>)
 80008b2:	681b      	ldr	r3, [r3, #0]
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	20000028 	.word	0x20000028

080008c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f003 0307 	and.w	r3, r3, #7
 80008d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000908 <__NVIC_SetPriorityGrouping+0x44>)
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008da:	68ba      	ldr	r2, [r7, #8]
 80008dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008e0:	4013      	ands	r3, r2
 80008e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008f6:	4a04      	ldr	r2, [pc, #16]	@ (8000908 <__NVIC_SetPriorityGrouping+0x44>)
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	60d3      	str	r3, [r2, #12]
}
 80008fc:	bf00      	nop
 80008fe:	3714      	adds	r7, #20
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000910:	4b04      	ldr	r3, [pc, #16]	@ (8000924 <__NVIC_GetPriorityGrouping+0x18>)
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	0a1b      	lsrs	r3, r3, #8
 8000916:	f003 0307 	and.w	r3, r3, #7
}
 800091a:	4618      	mov	r0, r3
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	6039      	str	r1, [r7, #0]
 8000932:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000938:	2b00      	cmp	r3, #0
 800093a:	db0a      	blt.n	8000952 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	b2da      	uxtb	r2, r3
 8000940:	490c      	ldr	r1, [pc, #48]	@ (8000974 <__NVIC_SetPriority+0x4c>)
 8000942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000946:	0112      	lsls	r2, r2, #4
 8000948:	b2d2      	uxtb	r2, r2
 800094a:	440b      	add	r3, r1
 800094c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000950:	e00a      	b.n	8000968 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	b2da      	uxtb	r2, r3
 8000956:	4908      	ldr	r1, [pc, #32]	@ (8000978 <__NVIC_SetPriority+0x50>)
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	f003 030f 	and.w	r3, r3, #15
 800095e:	3b04      	subs	r3, #4
 8000960:	0112      	lsls	r2, r2, #4
 8000962:	b2d2      	uxtb	r2, r2
 8000964:	440b      	add	r3, r1
 8000966:	761a      	strb	r2, [r3, #24]
}
 8000968:	bf00      	nop
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	e000e100 	.word	0xe000e100
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800097c:	b480      	push	{r7}
 800097e:	b089      	sub	sp, #36	@ 0x24
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f003 0307 	and.w	r3, r3, #7
 800098e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	f1c3 0307 	rsb	r3, r3, #7
 8000996:	2b04      	cmp	r3, #4
 8000998:	bf28      	it	cs
 800099a:	2304      	movcs	r3, #4
 800099c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	3304      	adds	r3, #4
 80009a2:	2b06      	cmp	r3, #6
 80009a4:	d902      	bls.n	80009ac <NVIC_EncodePriority+0x30>
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	3b03      	subs	r3, #3
 80009aa:	e000      	b.n	80009ae <NVIC_EncodePriority+0x32>
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b0:	f04f 32ff 	mov.w	r2, #4294967295
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ba:	43da      	mvns	r2, r3
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	401a      	ands	r2, r3
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c4:	f04f 31ff 	mov.w	r1, #4294967295
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	fa01 f303 	lsl.w	r3, r1, r3
 80009ce:	43d9      	mvns	r1, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d4:	4313      	orrs	r3, r2
         );
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3724      	adds	r7, #36	@ 0x24
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
	...

080009e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3b01      	subs	r3, #1
 80009f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009f4:	d301      	bcc.n	80009fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009f6:	2301      	movs	r3, #1
 80009f8:	e00f      	b.n	8000a1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000a24 <SysTick_Config+0x40>)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3b01      	subs	r3, #1
 8000a00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a02:	210f      	movs	r1, #15
 8000a04:	f04f 30ff 	mov.w	r0, #4294967295
 8000a08:	f7ff ff8e 	bl	8000928 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a0c:	4b05      	ldr	r3, [pc, #20]	@ (8000a24 <SysTick_Config+0x40>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a12:	4b04      	ldr	r3, [pc, #16]	@ (8000a24 <SysTick_Config+0x40>)
 8000a14:	2207      	movs	r2, #7
 8000a16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a18:	2300      	movs	r3, #0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	e000e010 	.word	0xe000e010

08000a28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f7ff ff47 	bl	80008c4 <__NVIC_SetPriorityGrouping>
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b086      	sub	sp, #24
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	4603      	mov	r3, r0
 8000a46:	60b9      	str	r1, [r7, #8]
 8000a48:	607a      	str	r2, [r7, #4]
 8000a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a50:	f7ff ff5c 	bl	800090c <__NVIC_GetPriorityGrouping>
 8000a54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	68b9      	ldr	r1, [r7, #8]
 8000a5a:	6978      	ldr	r0, [r7, #20]
 8000a5c:	f7ff ff8e 	bl	800097c <NVIC_EncodePriority>
 8000a60:	4602      	mov	r2, r0
 8000a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a66:	4611      	mov	r1, r2
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ff5d 	bl	8000928 <__NVIC_SetPriority>
}
 8000a6e:	bf00      	nop
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b082      	sub	sp, #8
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff ffb0 	bl	80009e4 <SysTick_Config>
 8000a84:	4603      	mov	r3, r0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
	...

08000a90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d101      	bne.n	8000aa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e267      	b.n	8000f72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d075      	beq.n	8000b9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000aae:	4b88      	ldr	r3, [pc, #544]	@ (8000cd0 <HAL_RCC_OscConfig+0x240>)
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	f003 030c 	and.w	r3, r3, #12
 8000ab6:	2b04      	cmp	r3, #4
 8000ab8:	d00c      	beq.n	8000ad4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000aba:	4b85      	ldr	r3, [pc, #532]	@ (8000cd0 <HAL_RCC_OscConfig+0x240>)
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ac2:	2b08      	cmp	r3, #8
 8000ac4:	d112      	bne.n	8000aec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ac6:	4b82      	ldr	r3, [pc, #520]	@ (8000cd0 <HAL_RCC_OscConfig+0x240>)
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ace:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000ad2:	d10b      	bne.n	8000aec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ad4:	4b7e      	ldr	r3, [pc, #504]	@ (8000cd0 <HAL_RCC_OscConfig+0x240>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d05b      	beq.n	8000b98 <HAL_RCC_OscConfig+0x108>
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d157      	bne.n	8000b98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	e242      	b.n	8000f72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000af4:	d106      	bne.n	8000b04 <HAL_RCC_OscConfig+0x74>
 8000af6:	4b76      	ldr	r3, [pc, #472]	@ (8000cd0 <HAL_RCC_OscConfig+0x240>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a75      	ldr	r2, [pc, #468]	@ (8000cd0 <HAL_RCC_OscConfig+0x240>)
 8000afc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b00:	6013      	str	r3, [r2, #0]
 8000b02:	e01d      	b.n	8000b40 <HAL_RCC_OscConfig+0xb0>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000b0c:	d10c      	bne.n	8000b28 <HAL_RCC_OscConfig+0x98>
 8000b0e:	4b70      	ldr	r3, [pc, #448]	@ (8000cd0 <HAL_RCC_OscConfig+0x240>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a6f      	ldr	r2, [pc, #444]	@ (8000cd0 <HAL_RCC_OscConfig+0x240>)
 8000b14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b18:	6013      	str	r3, [r2, #0]
 8000b1a:	4b6d      	ldr	r3, [pc, #436]	@ (8000cd0 <HAL_RCC_OscConfig+0x240>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a6c      	ldr	r2, [pc, #432]	@ (8000cd0 <HAL_RCC_OscConfig+0x240>)
 8000b20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b24:	6013      	str	r3, [r2, #0]
 8000b26:	e00b      	b.n	8000b40 <HAL_RCC_OscConfig+0xb0>
 8000b28:	4b69      	ldr	r3, [pc, #420]	@ (8000cd0 <HAL_RCC_OscConfig+0x240>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a68      	ldr	r2, [pc, #416]	@ (8000cd0 <HAL_RCC_OscConfig+0x240>)
 8000b2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000b32:	6013      	str	r3, [r2, #0]
 8000b34:	4b66      	ldr	r3, [pc, #408]	@ (8000cd0 <HAL_RCC_OscConfig+0x240>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a65      	ldr	r2, [pc, #404]	@ (8000cd0 <HAL_RCC_OscConfig+0x240>)
 8000b3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d013      	beq.n	8000b70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b48:	f7ff feb0 	bl	80008ac <HAL_GetTick>
 8000b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b4e:	e008      	b.n	8000b62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b50:	f7ff feac 	bl	80008ac <HAL_GetTick>
 8000b54:	4602      	mov	r2, r0
 8000b56:	693b      	ldr	r3, [r7, #16]
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	2b64      	cmp	r3, #100	@ 0x64
 8000b5c:	d901      	bls.n	8000b62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000b5e:	2303      	movs	r3, #3
 8000b60:	e207      	b.n	8000f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b62:	4b5b      	ldr	r3, [pc, #364]	@ (8000cd0 <HAL_RCC_OscConfig+0x240>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d0f0      	beq.n	8000b50 <HAL_RCC_OscConfig+0xc0>
 8000b6e:	e014      	b.n	8000b9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b70:	f7ff fe9c 	bl	80008ac <HAL_GetTick>
 8000b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b76:	e008      	b.n	8000b8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b78:	f7ff fe98 	bl	80008ac <HAL_GetTick>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	2b64      	cmp	r3, #100	@ 0x64
 8000b84:	d901      	bls.n	8000b8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000b86:	2303      	movs	r3, #3
 8000b88:	e1f3      	b.n	8000f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b8a:	4b51      	ldr	r3, [pc, #324]	@ (8000cd0 <HAL_RCC_OscConfig+0x240>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d1f0      	bne.n	8000b78 <HAL_RCC_OscConfig+0xe8>
 8000b96:	e000      	b.n	8000b9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d063      	beq.n	8000c6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ba6:	4b4a      	ldr	r3, [pc, #296]	@ (8000cd0 <HAL_RCC_OscConfig+0x240>)
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	f003 030c 	and.w	r3, r3, #12
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d00b      	beq.n	8000bca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000bb2:	4b47      	ldr	r3, [pc, #284]	@ (8000cd0 <HAL_RCC_OscConfig+0x240>)
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000bba:	2b08      	cmp	r3, #8
 8000bbc:	d11c      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000bbe:	4b44      	ldr	r3, [pc, #272]	@ (8000cd0 <HAL_RCC_OscConfig+0x240>)
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d116      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bca:	4b41      	ldr	r3, [pc, #260]	@ (8000cd0 <HAL_RCC_OscConfig+0x240>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d005      	beq.n	8000be2 <HAL_RCC_OscConfig+0x152>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	68db      	ldr	r3, [r3, #12]
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d001      	beq.n	8000be2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	e1c7      	b.n	8000f72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000be2:	4b3b      	ldr	r3, [pc, #236]	@ (8000cd0 <HAL_RCC_OscConfig+0x240>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	691b      	ldr	r3, [r3, #16]
 8000bee:	00db      	lsls	r3, r3, #3
 8000bf0:	4937      	ldr	r1, [pc, #220]	@ (8000cd0 <HAL_RCC_OscConfig+0x240>)
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bf6:	e03a      	b.n	8000c6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d020      	beq.n	8000c42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c00:	4b34      	ldr	r3, [pc, #208]	@ (8000cd4 <HAL_RCC_OscConfig+0x244>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c06:	f7ff fe51 	bl	80008ac <HAL_GetTick>
 8000c0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c0c:	e008      	b.n	8000c20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c0e:	f7ff fe4d 	bl	80008ac <HAL_GetTick>
 8000c12:	4602      	mov	r2, r0
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	1ad3      	subs	r3, r2, r3
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d901      	bls.n	8000c20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	e1a8      	b.n	8000f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c20:	4b2b      	ldr	r3, [pc, #172]	@ (8000cd0 <HAL_RCC_OscConfig+0x240>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f003 0302 	and.w	r3, r3, #2
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d0f0      	beq.n	8000c0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c2c:	4b28      	ldr	r3, [pc, #160]	@ (8000cd0 <HAL_RCC_OscConfig+0x240>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	691b      	ldr	r3, [r3, #16]
 8000c38:	00db      	lsls	r3, r3, #3
 8000c3a:	4925      	ldr	r1, [pc, #148]	@ (8000cd0 <HAL_RCC_OscConfig+0x240>)
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	600b      	str	r3, [r1, #0]
 8000c40:	e015      	b.n	8000c6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c42:	4b24      	ldr	r3, [pc, #144]	@ (8000cd4 <HAL_RCC_OscConfig+0x244>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c48:	f7ff fe30 	bl	80008ac <HAL_GetTick>
 8000c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c4e:	e008      	b.n	8000c62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c50:	f7ff fe2c 	bl	80008ac <HAL_GetTick>
 8000c54:	4602      	mov	r2, r0
 8000c56:	693b      	ldr	r3, [r7, #16]
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	d901      	bls.n	8000c62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	e187      	b.n	8000f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c62:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd0 <HAL_RCC_OscConfig+0x240>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f003 0302 	and.w	r3, r3, #2
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d1f0      	bne.n	8000c50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f003 0308 	and.w	r3, r3, #8
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d036      	beq.n	8000ce8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	695b      	ldr	r3, [r3, #20]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d016      	beq.n	8000cb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c82:	4b15      	ldr	r3, [pc, #84]	@ (8000cd8 <HAL_RCC_OscConfig+0x248>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c88:	f7ff fe10 	bl	80008ac <HAL_GetTick>
 8000c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c8e:	e008      	b.n	8000ca2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c90:	f7ff fe0c 	bl	80008ac <HAL_GetTick>
 8000c94:	4602      	mov	r2, r0
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	2b02      	cmp	r3, #2
 8000c9c:	d901      	bls.n	8000ca2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	e167      	b.n	8000f72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd0 <HAL_RCC_OscConfig+0x240>)
 8000ca4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d0f0      	beq.n	8000c90 <HAL_RCC_OscConfig+0x200>
 8000cae:	e01b      	b.n	8000ce8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000cb0:	4b09      	ldr	r3, [pc, #36]	@ (8000cd8 <HAL_RCC_OscConfig+0x248>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cb6:	f7ff fdf9 	bl	80008ac <HAL_GetTick>
 8000cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cbc:	e00e      	b.n	8000cdc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cbe:	f7ff fdf5 	bl	80008ac <HAL_GetTick>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	1ad3      	subs	r3, r2, r3
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d907      	bls.n	8000cdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	e150      	b.n	8000f72 <HAL_RCC_OscConfig+0x4e2>
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	42470000 	.word	0x42470000
 8000cd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cdc:	4b88      	ldr	r3, [pc, #544]	@ (8000f00 <HAL_RCC_OscConfig+0x470>)
 8000cde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000ce0:	f003 0302 	and.w	r3, r3, #2
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d1ea      	bne.n	8000cbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f003 0304 	and.w	r3, r3, #4
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	f000 8097 	beq.w	8000e24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cfa:	4b81      	ldr	r3, [pc, #516]	@ (8000f00 <HAL_RCC_OscConfig+0x470>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d10f      	bne.n	8000d26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	4b7d      	ldr	r3, [pc, #500]	@ (8000f00 <HAL_RCC_OscConfig+0x470>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0e:	4a7c      	ldr	r2, [pc, #496]	@ (8000f00 <HAL_RCC_OscConfig+0x470>)
 8000d10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d16:	4b7a      	ldr	r3, [pc, #488]	@ (8000f00 <HAL_RCC_OscConfig+0x470>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d22:	2301      	movs	r3, #1
 8000d24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d26:	4b77      	ldr	r3, [pc, #476]	@ (8000f04 <HAL_RCC_OscConfig+0x474>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d118      	bne.n	8000d64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d32:	4b74      	ldr	r3, [pc, #464]	@ (8000f04 <HAL_RCC_OscConfig+0x474>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a73      	ldr	r2, [pc, #460]	@ (8000f04 <HAL_RCC_OscConfig+0x474>)
 8000d38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d3e:	f7ff fdb5 	bl	80008ac <HAL_GetTick>
 8000d42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d44:	e008      	b.n	8000d58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d46:	f7ff fdb1 	bl	80008ac <HAL_GetTick>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	1ad3      	subs	r3, r2, r3
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d901      	bls.n	8000d58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000d54:	2303      	movs	r3, #3
 8000d56:	e10c      	b.n	8000f72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d58:	4b6a      	ldr	r3, [pc, #424]	@ (8000f04 <HAL_RCC_OscConfig+0x474>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d0f0      	beq.n	8000d46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d106      	bne.n	8000d7a <HAL_RCC_OscConfig+0x2ea>
 8000d6c:	4b64      	ldr	r3, [pc, #400]	@ (8000f00 <HAL_RCC_OscConfig+0x470>)
 8000d6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000d70:	4a63      	ldr	r2, [pc, #396]	@ (8000f00 <HAL_RCC_OscConfig+0x470>)
 8000d72:	f043 0301 	orr.w	r3, r3, #1
 8000d76:	6713      	str	r3, [r2, #112]	@ 0x70
 8000d78:	e01c      	b.n	8000db4 <HAL_RCC_OscConfig+0x324>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	2b05      	cmp	r3, #5
 8000d80:	d10c      	bne.n	8000d9c <HAL_RCC_OscConfig+0x30c>
 8000d82:	4b5f      	ldr	r3, [pc, #380]	@ (8000f00 <HAL_RCC_OscConfig+0x470>)
 8000d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000d86:	4a5e      	ldr	r2, [pc, #376]	@ (8000f00 <HAL_RCC_OscConfig+0x470>)
 8000d88:	f043 0304 	orr.w	r3, r3, #4
 8000d8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8000d8e:	4b5c      	ldr	r3, [pc, #368]	@ (8000f00 <HAL_RCC_OscConfig+0x470>)
 8000d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000d92:	4a5b      	ldr	r2, [pc, #364]	@ (8000f00 <HAL_RCC_OscConfig+0x470>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6713      	str	r3, [r2, #112]	@ 0x70
 8000d9a:	e00b      	b.n	8000db4 <HAL_RCC_OscConfig+0x324>
 8000d9c:	4b58      	ldr	r3, [pc, #352]	@ (8000f00 <HAL_RCC_OscConfig+0x470>)
 8000d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000da0:	4a57      	ldr	r2, [pc, #348]	@ (8000f00 <HAL_RCC_OscConfig+0x470>)
 8000da2:	f023 0301 	bic.w	r3, r3, #1
 8000da6:	6713      	str	r3, [r2, #112]	@ 0x70
 8000da8:	4b55      	ldr	r3, [pc, #340]	@ (8000f00 <HAL_RCC_OscConfig+0x470>)
 8000daa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000dac:	4a54      	ldr	r2, [pc, #336]	@ (8000f00 <HAL_RCC_OscConfig+0x470>)
 8000dae:	f023 0304 	bic.w	r3, r3, #4
 8000db2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d015      	beq.n	8000de8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dbc:	f7ff fd76 	bl	80008ac <HAL_GetTick>
 8000dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dc2:	e00a      	b.n	8000dda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dc4:	f7ff fd72 	bl	80008ac <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d901      	bls.n	8000dda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	e0cb      	b.n	8000f72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dda:	4b49      	ldr	r3, [pc, #292]	@ (8000f00 <HAL_RCC_OscConfig+0x470>)
 8000ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d0ee      	beq.n	8000dc4 <HAL_RCC_OscConfig+0x334>
 8000de6:	e014      	b.n	8000e12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000de8:	f7ff fd60 	bl	80008ac <HAL_GetTick>
 8000dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dee:	e00a      	b.n	8000e06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000df0:	f7ff fd5c 	bl	80008ac <HAL_GetTick>
 8000df4:	4602      	mov	r2, r0
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d901      	bls.n	8000e06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000e02:	2303      	movs	r3, #3
 8000e04:	e0b5      	b.n	8000f72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e06:	4b3e      	ldr	r3, [pc, #248]	@ (8000f00 <HAL_RCC_OscConfig+0x470>)
 8000e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d1ee      	bne.n	8000df0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000e12:	7dfb      	ldrb	r3, [r7, #23]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d105      	bne.n	8000e24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e18:	4b39      	ldr	r3, [pc, #228]	@ (8000f00 <HAL_RCC_OscConfig+0x470>)
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1c:	4a38      	ldr	r2, [pc, #224]	@ (8000f00 <HAL_RCC_OscConfig+0x470>)
 8000e1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000e22:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	f000 80a1 	beq.w	8000f70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000e2e:	4b34      	ldr	r3, [pc, #208]	@ (8000f00 <HAL_RCC_OscConfig+0x470>)
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	f003 030c 	and.w	r3, r3, #12
 8000e36:	2b08      	cmp	r3, #8
 8000e38:	d05c      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d141      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e42:	4b31      	ldr	r3, [pc, #196]	@ (8000f08 <HAL_RCC_OscConfig+0x478>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e48:	f7ff fd30 	bl	80008ac <HAL_GetTick>
 8000e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e4e:	e008      	b.n	8000e62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e50:	f7ff fd2c 	bl	80008ac <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d901      	bls.n	8000e62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	e087      	b.n	8000f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e62:	4b27      	ldr	r3, [pc, #156]	@ (8000f00 <HAL_RCC_OscConfig+0x470>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d1f0      	bne.n	8000e50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	69da      	ldr	r2, [r3, #28]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6a1b      	ldr	r3, [r3, #32]
 8000e76:	431a      	orrs	r2, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e7c:	019b      	lsls	r3, r3, #6
 8000e7e:	431a      	orrs	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e84:	085b      	lsrs	r3, r3, #1
 8000e86:	3b01      	subs	r3, #1
 8000e88:	041b      	lsls	r3, r3, #16
 8000e8a:	431a      	orrs	r2, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e90:	061b      	lsls	r3, r3, #24
 8000e92:	491b      	ldr	r1, [pc, #108]	@ (8000f00 <HAL_RCC_OscConfig+0x470>)
 8000e94:	4313      	orrs	r3, r2
 8000e96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e98:	4b1b      	ldr	r3, [pc, #108]	@ (8000f08 <HAL_RCC_OscConfig+0x478>)
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e9e:	f7ff fd05 	bl	80008ac <HAL_GetTick>
 8000ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ea4:	e008      	b.n	8000eb8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ea6:	f7ff fd01 	bl	80008ac <HAL_GetTick>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	1ad3      	subs	r3, r2, r3
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d901      	bls.n	8000eb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	e05c      	b.n	8000f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000eb8:	4b11      	ldr	r3, [pc, #68]	@ (8000f00 <HAL_RCC_OscConfig+0x470>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d0f0      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x416>
 8000ec4:	e054      	b.n	8000f70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ec6:	4b10      	ldr	r3, [pc, #64]	@ (8000f08 <HAL_RCC_OscConfig+0x478>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ecc:	f7ff fcee 	bl	80008ac <HAL_GetTick>
 8000ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ed2:	e008      	b.n	8000ee6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ed4:	f7ff fcea 	bl	80008ac <HAL_GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d901      	bls.n	8000ee6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e045      	b.n	8000f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ee6:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <HAL_RCC_OscConfig+0x470>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d1f0      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x444>
 8000ef2:	e03d      	b.n	8000f70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d107      	bne.n	8000f0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	e038      	b.n	8000f72 <HAL_RCC_OscConfig+0x4e2>
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40007000 	.word	0x40007000
 8000f08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f7c <HAL_RCC_OscConfig+0x4ec>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	699b      	ldr	r3, [r3, #24]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d028      	beq.n	8000f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d121      	bne.n	8000f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d11a      	bne.n	8000f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8000f42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d111      	bne.n	8000f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f52:	085b      	lsrs	r3, r3, #1
 8000f54:	3b01      	subs	r3, #1
 8000f56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d107      	bne.n	8000f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d001      	beq.n	8000f70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e000      	b.n	8000f72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40023800 	.word	0x40023800

08000f80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d101      	bne.n	8000f94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e0cc      	b.n	800112e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f94:	4b68      	ldr	r3, [pc, #416]	@ (8001138 <HAL_RCC_ClockConfig+0x1b8>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 030f 	and.w	r3, r3, #15
 8000f9c:	683a      	ldr	r2, [r7, #0]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d90c      	bls.n	8000fbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fa2:	4b65      	ldr	r3, [pc, #404]	@ (8001138 <HAL_RCC_ClockConfig+0x1b8>)
 8000fa4:	683a      	ldr	r2, [r7, #0]
 8000fa6:	b2d2      	uxtb	r2, r2
 8000fa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000faa:	4b63      	ldr	r3, [pc, #396]	@ (8001138 <HAL_RCC_ClockConfig+0x1b8>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 030f 	and.w	r3, r3, #15
 8000fb2:	683a      	ldr	r2, [r7, #0]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d001      	beq.n	8000fbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e0b8      	b.n	800112e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f003 0302 	and.w	r3, r3, #2
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d020      	beq.n	800100a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 0304 	and.w	r3, r3, #4
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d005      	beq.n	8000fe0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fd4:	4b59      	ldr	r3, [pc, #356]	@ (800113c <HAL_RCC_ClockConfig+0x1bc>)
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	4a58      	ldr	r2, [pc, #352]	@ (800113c <HAL_RCC_ClockConfig+0x1bc>)
 8000fda:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8000fde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 0308 	and.w	r3, r3, #8
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d005      	beq.n	8000ff8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fec:	4b53      	ldr	r3, [pc, #332]	@ (800113c <HAL_RCC_ClockConfig+0x1bc>)
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	4a52      	ldr	r2, [pc, #328]	@ (800113c <HAL_RCC_ClockConfig+0x1bc>)
 8000ff2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8000ff6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ff8:	4b50      	ldr	r3, [pc, #320]	@ (800113c <HAL_RCC_ClockConfig+0x1bc>)
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	494d      	ldr	r1, [pc, #308]	@ (800113c <HAL_RCC_ClockConfig+0x1bc>)
 8001006:	4313      	orrs	r3, r2
 8001008:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	2b00      	cmp	r3, #0
 8001014:	d044      	beq.n	80010a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d107      	bne.n	800102e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800101e:	4b47      	ldr	r3, [pc, #284]	@ (800113c <HAL_RCC_ClockConfig+0x1bc>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d119      	bne.n	800105e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e07f      	b.n	800112e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	2b02      	cmp	r3, #2
 8001034:	d003      	beq.n	800103e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800103a:	2b03      	cmp	r3, #3
 800103c:	d107      	bne.n	800104e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800103e:	4b3f      	ldr	r3, [pc, #252]	@ (800113c <HAL_RCC_ClockConfig+0x1bc>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d109      	bne.n	800105e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e06f      	b.n	800112e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800104e:	4b3b      	ldr	r3, [pc, #236]	@ (800113c <HAL_RCC_ClockConfig+0x1bc>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	2b00      	cmp	r3, #0
 8001058:	d101      	bne.n	800105e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e067      	b.n	800112e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800105e:	4b37      	ldr	r3, [pc, #220]	@ (800113c <HAL_RCC_ClockConfig+0x1bc>)
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	f023 0203 	bic.w	r2, r3, #3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	4934      	ldr	r1, [pc, #208]	@ (800113c <HAL_RCC_ClockConfig+0x1bc>)
 800106c:	4313      	orrs	r3, r2
 800106e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001070:	f7ff fc1c 	bl	80008ac <HAL_GetTick>
 8001074:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001076:	e00a      	b.n	800108e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001078:	f7ff fc18 	bl	80008ac <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001086:	4293      	cmp	r3, r2
 8001088:	d901      	bls.n	800108e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e04f      	b.n	800112e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800108e:	4b2b      	ldr	r3, [pc, #172]	@ (800113c <HAL_RCC_ClockConfig+0x1bc>)
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	f003 020c 	and.w	r2, r3, #12
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	429a      	cmp	r2, r3
 800109e:	d1eb      	bne.n	8001078 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010a0:	4b25      	ldr	r3, [pc, #148]	@ (8001138 <HAL_RCC_ClockConfig+0x1b8>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 030f 	and.w	r3, r3, #15
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d20c      	bcs.n	80010c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ae:	4b22      	ldr	r3, [pc, #136]	@ (8001138 <HAL_RCC_ClockConfig+0x1b8>)
 80010b0:	683a      	ldr	r2, [r7, #0]
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010b6:	4b20      	ldr	r3, [pc, #128]	@ (8001138 <HAL_RCC_ClockConfig+0x1b8>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 030f 	and.w	r3, r3, #15
 80010be:	683a      	ldr	r2, [r7, #0]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d001      	beq.n	80010c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e032      	b.n	800112e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 0304 	and.w	r3, r3, #4
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d008      	beq.n	80010e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010d4:	4b19      	ldr	r3, [pc, #100]	@ (800113c <HAL_RCC_ClockConfig+0x1bc>)
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	4916      	ldr	r1, [pc, #88]	@ (800113c <HAL_RCC_ClockConfig+0x1bc>)
 80010e2:	4313      	orrs	r3, r2
 80010e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0308 	and.w	r3, r3, #8
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d009      	beq.n	8001106 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010f2:	4b12      	ldr	r3, [pc, #72]	@ (800113c <HAL_RCC_ClockConfig+0x1bc>)
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	490e      	ldr	r1, [pc, #56]	@ (800113c <HAL_RCC_ClockConfig+0x1bc>)
 8001102:	4313      	orrs	r3, r2
 8001104:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001106:	f000 f821 	bl	800114c <HAL_RCC_GetSysClockFreq>
 800110a:	4602      	mov	r2, r0
 800110c:	4b0b      	ldr	r3, [pc, #44]	@ (800113c <HAL_RCC_ClockConfig+0x1bc>)
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	091b      	lsrs	r3, r3, #4
 8001112:	f003 030f 	and.w	r3, r3, #15
 8001116:	490a      	ldr	r1, [pc, #40]	@ (8001140 <HAL_RCC_ClockConfig+0x1c0>)
 8001118:	5ccb      	ldrb	r3, [r1, r3]
 800111a:	fa22 f303 	lsr.w	r3, r2, r3
 800111e:	4a09      	ldr	r2, [pc, #36]	@ (8001144 <HAL_RCC_ClockConfig+0x1c4>)
 8001120:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001122:	4b09      	ldr	r3, [pc, #36]	@ (8001148 <HAL_RCC_ClockConfig+0x1c8>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff fb7c 	bl	8000824 <HAL_InitTick>

  return HAL_OK;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40023c00 	.word	0x40023c00
 800113c:	40023800 	.word	0x40023800
 8001140:	08001538 	.word	0x08001538
 8001144:	20000000 	.word	0x20000000
 8001148:	20000004 	.word	0x20000004

0800114c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800114c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001150:	b090      	sub	sp, #64	@ 0x40
 8001152:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001154:	2300      	movs	r3, #0
 8001156:	637b      	str	r3, [r7, #52]	@ 0x34
 8001158:	2300      	movs	r3, #0
 800115a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800115c:	2300      	movs	r3, #0
 800115e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001160:	2300      	movs	r3, #0
 8001162:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001164:	4b59      	ldr	r3, [pc, #356]	@ (80012cc <HAL_RCC_GetSysClockFreq+0x180>)
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	f003 030c 	and.w	r3, r3, #12
 800116c:	2b08      	cmp	r3, #8
 800116e:	d00d      	beq.n	800118c <HAL_RCC_GetSysClockFreq+0x40>
 8001170:	2b08      	cmp	r3, #8
 8001172:	f200 80a1 	bhi.w	80012b8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001176:	2b00      	cmp	r3, #0
 8001178:	d002      	beq.n	8001180 <HAL_RCC_GetSysClockFreq+0x34>
 800117a:	2b04      	cmp	r3, #4
 800117c:	d003      	beq.n	8001186 <HAL_RCC_GetSysClockFreq+0x3a>
 800117e:	e09b      	b.n	80012b8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001180:	4b53      	ldr	r3, [pc, #332]	@ (80012d0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001182:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8001184:	e09b      	b.n	80012be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001186:	4b53      	ldr	r3, [pc, #332]	@ (80012d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001188:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800118a:	e098      	b.n	80012be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800118c:	4b4f      	ldr	r3, [pc, #316]	@ (80012cc <HAL_RCC_GetSysClockFreq+0x180>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001194:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001196:	4b4d      	ldr	r3, [pc, #308]	@ (80012cc <HAL_RCC_GetSysClockFreq+0x180>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d028      	beq.n	80011f4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011a2:	4b4a      	ldr	r3, [pc, #296]	@ (80012cc <HAL_RCC_GetSysClockFreq+0x180>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	099b      	lsrs	r3, r3, #6
 80011a8:	2200      	movs	r2, #0
 80011aa:	623b      	str	r3, [r7, #32]
 80011ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80011ae:	6a3b      	ldr	r3, [r7, #32]
 80011b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80011b4:	2100      	movs	r1, #0
 80011b6:	4b47      	ldr	r3, [pc, #284]	@ (80012d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80011b8:	fb03 f201 	mul.w	r2, r3, r1
 80011bc:	2300      	movs	r3, #0
 80011be:	fb00 f303 	mul.w	r3, r0, r3
 80011c2:	4413      	add	r3, r2
 80011c4:	4a43      	ldr	r2, [pc, #268]	@ (80012d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80011c6:	fba0 1202 	umull	r1, r2, r0, r2
 80011ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80011cc:	460a      	mov	r2, r1
 80011ce:	62ba      	str	r2, [r7, #40]	@ 0x28
 80011d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80011d2:	4413      	add	r3, r2
 80011d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011d8:	2200      	movs	r2, #0
 80011da:	61bb      	str	r3, [r7, #24]
 80011dc:	61fa      	str	r2, [r7, #28]
 80011de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80011e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80011e6:	f7ff f801 	bl	80001ec <__aeabi_uldivmod>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	4613      	mov	r3, r2
 80011f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80011f2:	e053      	b.n	800129c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011f4:	4b35      	ldr	r3, [pc, #212]	@ (80012cc <HAL_RCC_GetSysClockFreq+0x180>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	099b      	lsrs	r3, r3, #6
 80011fa:	2200      	movs	r2, #0
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	617a      	str	r2, [r7, #20]
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001206:	f04f 0b00 	mov.w	fp, #0
 800120a:	4652      	mov	r2, sl
 800120c:	465b      	mov	r3, fp
 800120e:	f04f 0000 	mov.w	r0, #0
 8001212:	f04f 0100 	mov.w	r1, #0
 8001216:	0159      	lsls	r1, r3, #5
 8001218:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800121c:	0150      	lsls	r0, r2, #5
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	ebb2 080a 	subs.w	r8, r2, sl
 8001226:	eb63 090b 	sbc.w	r9, r3, fp
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	f04f 0300 	mov.w	r3, #0
 8001232:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001236:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800123a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800123e:	ebb2 0408 	subs.w	r4, r2, r8
 8001242:	eb63 0509 	sbc.w	r5, r3, r9
 8001246:	f04f 0200 	mov.w	r2, #0
 800124a:	f04f 0300 	mov.w	r3, #0
 800124e:	00eb      	lsls	r3, r5, #3
 8001250:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001254:	00e2      	lsls	r2, r4, #3
 8001256:	4614      	mov	r4, r2
 8001258:	461d      	mov	r5, r3
 800125a:	eb14 030a 	adds.w	r3, r4, sl
 800125e:	603b      	str	r3, [r7, #0]
 8001260:	eb45 030b 	adc.w	r3, r5, fp
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	f04f 0200 	mov.w	r2, #0
 800126a:	f04f 0300 	mov.w	r3, #0
 800126e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001272:	4629      	mov	r1, r5
 8001274:	028b      	lsls	r3, r1, #10
 8001276:	4621      	mov	r1, r4
 8001278:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800127c:	4621      	mov	r1, r4
 800127e:	028a      	lsls	r2, r1, #10
 8001280:	4610      	mov	r0, r2
 8001282:	4619      	mov	r1, r3
 8001284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001286:	2200      	movs	r2, #0
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	60fa      	str	r2, [r7, #12]
 800128c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001290:	f7fe ffac 	bl	80001ec <__aeabi_uldivmod>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	4613      	mov	r3, r2
 800129a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800129c:	4b0b      	ldr	r3, [pc, #44]	@ (80012cc <HAL_RCC_GetSysClockFreq+0x180>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	0c1b      	lsrs	r3, r3, #16
 80012a2:	f003 0303 	and.w	r3, r3, #3
 80012a6:	3301      	adds	r3, #1
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80012ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80012ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80012b6:	e002      	b.n	80012be <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80012b8:	4b05      	ldr	r3, [pc, #20]	@ (80012d0 <HAL_RCC_GetSysClockFreq+0x184>)
 80012ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80012bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3740      	adds	r7, #64	@ 0x40
 80012c4:	46bd      	mov	sp, r7
 80012c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80012ca:	bf00      	nop
 80012cc:	40023800 	.word	0x40023800
 80012d0:	00f42400 	.word	0x00f42400
 80012d4:	017d7840 	.word	0x017d7840

080012d8 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80012de:	f7ff fae5 	bl	80008ac <HAL_GetTick>
 80012e2:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80012e4:	4b72      	ldr	r3, [pc, #456]	@ (80014b0 <HAL_RCC_DeInit+0x1d8>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a71      	ldr	r2, [pc, #452]	@ (80014b0 <HAL_RCC_DeInit+0x1d8>)
 80012ea:	f043 0301 	orr.w	r3, r3, #1
 80012ee:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80012f0:	e008      	b.n	8001304 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012f2:	f7ff fadb 	bl	80008ac <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d901      	bls.n	8001304 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e0d0      	b.n	80014a6 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001304:	4b6a      	ldr	r3, [pc, #424]	@ (80014b0 <HAL_RCC_DeInit+0x1d8>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d0f0      	beq.n	80012f2 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8001310:	4b67      	ldr	r3, [pc, #412]	@ (80014b0 <HAL_RCC_DeInit+0x1d8>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a66      	ldr	r2, [pc, #408]	@ (80014b0 <HAL_RCC_DeInit+0x1d8>)
 8001316:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800131a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800131c:	f7ff fac6 	bl	80008ac <HAL_GetTick>
 8001320:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8001322:	4b63      	ldr	r3, [pc, #396]	@ (80014b0 <HAL_RCC_DeInit+0x1d8>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001328:	e00a      	b.n	8001340 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800132a:	f7ff fabf 	bl	80008ac <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001338:	4293      	cmp	r3, r2
 800133a:	d901      	bls.n	8001340 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e0b2      	b.n	80014a6 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001340:	4b5b      	ldr	r3, [pc, #364]	@ (80014b0 <HAL_RCC_DeInit+0x1d8>)
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f003 030c 	and.w	r3, r3, #12
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1ee      	bne.n	800132a <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800134c:	f7ff faae 	bl	80008ac <HAL_GetTick>
 8001350:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8001352:	4b57      	ldr	r3, [pc, #348]	@ (80014b0 <HAL_RCC_DeInit+0x1d8>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a56      	ldr	r2, [pc, #344]	@ (80014b0 <HAL_RCC_DeInit+0x1d8>)
 8001358:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 800135c:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800135e:	e008      	b.n	8001372 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001360:	f7ff faa4 	bl	80008ac <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b64      	cmp	r3, #100	@ 0x64
 800136c:	d901      	bls.n	8001372 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e099      	b.n	80014a6 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001372:	4b4f      	ldr	r3, [pc, #316]	@ (80014b0 <HAL_RCC_DeInit+0x1d8>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f0      	bne.n	8001360 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800137e:	f7ff fa95 	bl	80008ac <HAL_GetTick>
 8001382:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001384:	4b4a      	ldr	r3, [pc, #296]	@ (80014b0 <HAL_RCC_DeInit+0x1d8>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a49      	ldr	r2, [pc, #292]	@ (80014b0 <HAL_RCC_DeInit+0x1d8>)
 800138a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800138e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001390:	e008      	b.n	80013a4 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001392:	f7ff fa8b 	bl	80008ac <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e080      	b.n	80014a6 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80013a4:	4b42      	ldr	r3, [pc, #264]	@ (80014b0 <HAL_RCC_DeInit+0x1d8>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1f0      	bne.n	8001392 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80013b0:	f7ff fa7c 	bl	80008ac <HAL_GetTick>
 80013b4:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 80013b6:	4b3e      	ldr	r3, [pc, #248]	@ (80014b0 <HAL_RCC_DeInit+0x1d8>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a3d      	ldr	r2, [pc, #244]	@ (80014b0 <HAL_RCC_DeInit+0x1d8>)
 80013bc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80013c0:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80013c4:	f7ff fa72 	bl	80008ac <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e067      	b.n	80014a6 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80013d6:	4b36      	ldr	r3, [pc, #216]	@ (80014b0 <HAL_RCC_DeInit+0x1d8>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1f0      	bne.n	80013c4 <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80013e2:	f7ff fa63 	bl	80008ac <HAL_GetTick>
 80013e6:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 80013e8:	4b31      	ldr	r3, [pc, #196]	@ (80014b0 <HAL_RCC_DeInit+0x1d8>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a30      	ldr	r2, [pc, #192]	@ (80014b0 <HAL_RCC_DeInit+0x1d8>)
 80013ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013f2:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 80013f4:	e008      	b.n	8001408 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80013f6:	f7ff fa59 	bl	80008ac <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d901      	bls.n	8001408 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e04e      	b.n	80014a6 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8001408:	4b29      	ldr	r3, [pc, #164]	@ (80014b0 <HAL_RCC_DeInit+0x1d8>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d1f0      	bne.n	80013f6 <HAL_RCC_DeInit+0x11e>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8001414:	4b26      	ldr	r3, [pc, #152]	@ (80014b0 <HAL_RCC_DeInit+0x1d8>)
 8001416:	4a27      	ldr	r2, [pc, #156]	@ (80014b4 <HAL_RCC_DeInit+0x1dc>)
 8001418:	605a      	str	r2, [r3, #4]
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 800141a:	4b25      	ldr	r3, [pc, #148]	@ (80014b0 <HAL_RCC_DeInit+0x1d8>)
 800141c:	4a26      	ldr	r2, [pc, #152]	@ (80014b8 <HAL_RCC_DeInit+0x1e0>)
 800141e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx */

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
 8001422:	4b23      	ldr	r3, [pc, #140]	@ (80014b0 <HAL_RCC_DeInit+0x1d8>)
 8001424:	4a24      	ldr	r2, [pc, #144]	@ (80014b8 <HAL_RCC_DeInit+0x1e0>)
 8001426:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 800142a:	4b21      	ldr	r3, [pc, #132]	@ (80014b0 <HAL_RCC_DeInit+0x1d8>)
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	4a20      	ldr	r2, [pc, #128]	@ (80014b0 <HAL_RCC_DeInit+0x1d8>)
 8001430:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8001434:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8001436:	4b1e      	ldr	r3, [pc, #120]	@ (80014b0 <HAL_RCC_DeInit+0x1d8>)
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	4a1d      	ldr	r2, [pc, #116]	@ (80014b0 <HAL_RCC_DeInit+0x1d8>)
 800143c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001440:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 8001442:	4b1b      	ldr	r3, [pc, #108]	@ (80014b0 <HAL_RCC_DeInit+0x1d8>)
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	4a1a      	ldr	r2, [pc, #104]	@ (80014b0 <HAL_RCC_DeInit+0x1d8>)
 8001448:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800144c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 800144e:	4b18      	ldr	r3, [pc, #96]	@ (80014b0 <HAL_RCC_DeInit+0x1d8>)
 8001450:	68db      	ldr	r3, [r3, #12]
 8001452:	4a17      	ldr	r2, [pc, #92]	@ (80014b0 <HAL_RCC_DeInit+0x1d8>)
 8001454:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 8001458:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 800145a:	4b15      	ldr	r3, [pc, #84]	@ (80014b0 <HAL_RCC_DeInit+0x1d8>)
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	4a14      	ldr	r2, [pc, #80]	@ (80014b0 <HAL_RCC_DeInit+0x1d8>)
 8001460:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001464:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 8001466:	4b12      	ldr	r3, [pc, #72]	@ (80014b0 <HAL_RCC_DeInit+0x1d8>)
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	4a11      	ldr	r2, [pc, #68]	@ (80014b0 <HAL_RCC_DeInit+0x1d8>)
 800146c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001470:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001472:	4b0f      	ldr	r3, [pc, #60]	@ (80014b0 <HAL_RCC_DeInit+0x1d8>)
 8001474:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001476:	4a0e      	ldr	r2, [pc, #56]	@ (80014b0 <HAL_RCC_DeInit+0x1d8>)
 8001478:	f023 0301 	bic.w	r3, r3, #1
 800147c:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800147e:	4b0c      	ldr	r3, [pc, #48]	@ (80014b0 <HAL_RCC_DeInit+0x1d8>)
 8001480:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001482:	4a0b      	ldr	r2, [pc, #44]	@ (80014b0 <HAL_RCC_DeInit+0x1d8>)
 8001484:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001488:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 800148a:	4b0c      	ldr	r3, [pc, #48]	@ (80014bc <HAL_RCC_DeInit+0x1e4>)
 800148c:	4a0c      	ldr	r2, [pc, #48]	@ (80014c0 <HAL_RCC_DeInit+0x1e8>)
 800148e:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8001490:	4b0c      	ldr	r3, [pc, #48]	@ (80014c4 <HAL_RCC_DeInit+0x1ec>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff f9c5 	bl	8000824 <HAL_InitTick>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e000      	b.n	80014a6 <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 80014a4:	2300      	movs	r3, #0
  }
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40023800 	.word	0x40023800
 80014b4:	04003010 	.word	0x04003010
 80014b8:	24003000 	.word	0x24003000
 80014bc:	20000000 	.word	0x20000000
 80014c0:	00f42400 	.word	0x00f42400
 80014c4:	20000004 	.word	0x20000004

080014c8 <memset>:
 80014c8:	4402      	add	r2, r0
 80014ca:	4603      	mov	r3, r0
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d100      	bne.n	80014d2 <memset+0xa>
 80014d0:	4770      	bx	lr
 80014d2:	f803 1b01 	strb.w	r1, [r3], #1
 80014d6:	e7f9      	b.n	80014cc <memset+0x4>

080014d8 <__libc_init_array>:
 80014d8:	b570      	push	{r4, r5, r6, lr}
 80014da:	4d0d      	ldr	r5, [pc, #52]	@ (8001510 <__libc_init_array+0x38>)
 80014dc:	4c0d      	ldr	r4, [pc, #52]	@ (8001514 <__libc_init_array+0x3c>)
 80014de:	1b64      	subs	r4, r4, r5
 80014e0:	10a4      	asrs	r4, r4, #2
 80014e2:	2600      	movs	r6, #0
 80014e4:	42a6      	cmp	r6, r4
 80014e6:	d109      	bne.n	80014fc <__libc_init_array+0x24>
 80014e8:	4d0b      	ldr	r5, [pc, #44]	@ (8001518 <__libc_init_array+0x40>)
 80014ea:	4c0c      	ldr	r4, [pc, #48]	@ (800151c <__libc_init_array+0x44>)
 80014ec:	f000 f818 	bl	8001520 <_init>
 80014f0:	1b64      	subs	r4, r4, r5
 80014f2:	10a4      	asrs	r4, r4, #2
 80014f4:	2600      	movs	r6, #0
 80014f6:	42a6      	cmp	r6, r4
 80014f8:	d105      	bne.n	8001506 <__libc_init_array+0x2e>
 80014fa:	bd70      	pop	{r4, r5, r6, pc}
 80014fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001500:	4798      	blx	r3
 8001502:	3601      	adds	r6, #1
 8001504:	e7ee      	b.n	80014e4 <__libc_init_array+0xc>
 8001506:	f855 3b04 	ldr.w	r3, [r5], #4
 800150a:	4798      	blx	r3
 800150c:	3601      	adds	r6, #1
 800150e:	e7f2      	b.n	80014f6 <__libc_init_array+0x1e>
 8001510:	08001550 	.word	0x08001550
 8001514:	08001550 	.word	0x08001550
 8001518:	08001550 	.word	0x08001550
 800151c:	08001554 	.word	0x08001554

08001520 <_init>:
 8001520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001522:	bf00      	nop
 8001524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001526:	bc08      	pop	{r3}
 8001528:	469e      	mov	lr, r3
 800152a:	4770      	bx	lr

0800152c <_fini>:
 800152c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800152e:	bf00      	nop
 8001530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001532:	bc08      	pop	{r3}
 8001534:	469e      	mov	lr, r3
 8001536:	4770      	bx	lr
