
blink_rtc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cb8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08002e68  08002e68  00012e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ecc  08002ecc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002ecc  08002ecc  00012ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ed4  08002ed4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ed4  08002ed4  00012ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ed8  08002ed8  00012ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002edc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000074  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000e4  200000e4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007ed2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001892  00000000  00000000  00027f72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000710  00000000  00000000  00029808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000638  00000000  00000000  00029f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000220bc  00000000  00000000  0002a550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009820  00000000  00000000  0004c60c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0de4  00000000  00000000  00055e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00126c10  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001efc  00000000  00000000  00126c64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002e50 	.word	0x08002e50

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08002e50 	.word	0x08002e50

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <set_time>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void set_time (void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef sDate;
  sTime.Hours = 0x13; // set hours
 800058e:	2313      	movs	r3, #19
 8000590:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x59; // set minutes
 8000592:	2359      	movs	r3, #89	; 0x59
 8000594:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x30; // set seconds
 8000596:	2330      	movs	r3, #48	; 0x30
 8000598:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800059a:	2300      	movs	r3, #0
 800059c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	2201      	movs	r2, #1
 80005a6:	4619      	mov	r1, r3
 80005a8:	4812      	ldr	r0, [pc, #72]	; (80005f4 <set_time+0x6c>)
 80005aa:	f001 fcd4 	bl	8001f56 <HAL_RTC_SetTime>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <set_time+0x30>
  {
	  Error_Handler();
 80005b4:	f000 f9a0 	bl	80008f8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY; // day
 80005b8:	2303      	movs	r3, #3
 80005ba:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;         // month
 80005bc:	2304      	movs	r3, #4
 80005be:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x27; 				  	 // date
 80005c0:	2327      	movs	r3, #39	; 0x27
 80005c2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22; 					 // year
 80005c4:	2322      	movs	r3, #34	; 0x22
 80005c6:	70fb      	strb	r3, [r7, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80005c8:	463b      	mov	r3, r7
 80005ca:	2201      	movs	r2, #1
 80005cc:	4619      	mov	r1, r3
 80005ce:	4809      	ldr	r0, [pc, #36]	; (80005f4 <set_time+0x6c>)
 80005d0:	f001 fddc 	bl	800218c <HAL_RTC_SetDate>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <set_time+0x56>
  {
	  Error_Handler();
 80005da:	f000 f98d 	bl	80008f8 <Error_Handler>
  }
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, KEY); // backup register
 80005de:	f243 22f4 	movw	r2, #13044	; 0x32f4
 80005e2:	2101      	movs	r1, #1
 80005e4:	4803      	ldr	r0, [pc, #12]	; (80005f4 <set_time+0x6c>)
 80005e6:	f001 ff57 	bl	8002498 <HAL_RTCEx_BKUPWrite>
}
 80005ea:	bf00      	nop
 80005ec:	3718      	adds	r7, #24
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000098 	.word	0x20000098

080005f8 <get_time>:

void get_time(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af02      	add	r7, sp, #8
 RTC_DateTypeDef gDate;
 RTC_TimeTypeDef gTime;
/* Get the RTC current Time */
 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80005fe:	463b      	mov	r3, r7
 8000600:	2200      	movs	r2, #0
 8000602:	4619      	mov	r1, r3
 8000604:	4812      	ldr	r0, [pc, #72]	; (8000650 <get_time+0x58>)
 8000606:	f001 fd63 	bl	80020d0 <HAL_RTC_GetTime>
/* Get the RTC current Date */
 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	2200      	movs	r2, #0
 8000610:	4619      	mov	r1, r3
 8000612:	480f      	ldr	r0, [pc, #60]	; (8000650 <get_time+0x58>)
 8000614:	f001 fe61 	bl	80022da <HAL_RTC_GetDate>
/* Display time Format: hh:mm:ss */
 sprintf((char*)time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8000618:	783b      	ldrb	r3, [r7, #0]
 800061a:	461a      	mov	r2, r3
 800061c:	787b      	ldrb	r3, [r7, #1]
 800061e:	4619      	mov	r1, r3
 8000620:	78bb      	ldrb	r3, [r7, #2]
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	460b      	mov	r3, r1
 8000626:	490b      	ldr	r1, [pc, #44]	; (8000654 <get_time+0x5c>)
 8000628:	480b      	ldr	r0, [pc, #44]	; (8000658 <get_time+0x60>)
 800062a:	f001 ffdb 	bl	80025e4 <siprintf>
/* Display date Format: dd-mm-yy */
 sprintf((char*)date,"%02d-%02d-%2d",gDate.Date, gDate.Month, 2000 + gDate.Year);
 800062e:	7dbb      	ldrb	r3, [r7, #22]
 8000630:	461a      	mov	r2, r3
 8000632:	7d7b      	ldrb	r3, [r7, #21]
 8000634:	4619      	mov	r1, r3
 8000636:	7dfb      	ldrb	r3, [r7, #23]
 8000638:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	460b      	mov	r3, r1
 8000640:	4906      	ldr	r1, [pc, #24]	; (800065c <get_time+0x64>)
 8000642:	4807      	ldr	r0, [pc, #28]	; (8000660 <get_time+0x68>)
 8000644:	f001 ffce 	bl	80025e4 <siprintf>
}
 8000648:	bf00      	nop
 800064a:	3718      	adds	r7, #24
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000098 	.word	0x20000098
 8000654:	08002e68 	.word	0x08002e68
 8000658:	200000b8 	.word	0x200000b8
 800065c:	08002e78 	.word	0x08002e78
 8000660:	200000c4 	.word	0x200000c4

08000664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b088      	sub	sp, #32
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066a:	f000 fa39 	bl	8000ae0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066e:	f000 f82d 	bl	80006cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000672:	f000 f8ff 	bl	8000874 <MX_GPIO_Init>
  MX_RTC_Init();
 8000676:	f000 f89b 	bl	80007b0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  uint32_t leitura = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1);
 800067a:	2101      	movs	r1, #1
 800067c:	480f      	ldr	r0, [pc, #60]	; (80006bc <main+0x58>)
 800067e:	f001 ff25 	bl	80024cc <HAL_RTCEx_BKUPRead>
 8000682:	61f8      	str	r0, [r7, #28]

  if(leitura != KEY)
 8000684:	69fb      	ldr	r3, [r7, #28]
 8000686:	f243 22f4 	movw	r2, #13044	; 0x32f4
 800068a:	4293      	cmp	r3, r2
 800068c:	d001      	beq.n	8000692 <main+0x2e>
	{
	//   Set the time
	  set_time();
 800068e:	f7ff ff7b 	bl	8000588 <set_time>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8000692:	2140      	movs	r1, #64	; 0x40
 8000694:	480a      	ldr	r0, [pc, #40]	; (80006c0 <main+0x5c>)
 8000696:	f000 fd64 	bl	8001162 <HAL_GPIO_TogglePin>
	  get_time();
 800069a:	f7ff ffad 	bl	80005f8 <get_time>
	  strcpy(&date_local, &date);
 800069e:	f107 0310 	add.w	r3, r7, #16
 80006a2:	4908      	ldr	r1, [pc, #32]	; (80006c4 <main+0x60>)
 80006a4:	4618      	mov	r0, r3
 80006a6:	f001 ffbd 	bl	8002624 <strcpy>
	  strcpy(&time_local, &time);
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	4906      	ldr	r1, [pc, #24]	; (80006c8 <main+0x64>)
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 ffb8 	bl	8002624 <strcpy>

	  HAL_Delay(100);
 80006b4:	2064      	movs	r0, #100	; 0x64
 80006b6:	f000 fa85 	bl	8000bc4 <HAL_Delay>
  {
 80006ba:	e7ea      	b.n	8000692 <main+0x2e>
 80006bc:	20000098 	.word	0x20000098
 80006c0:	40020800 	.word	0x40020800
 80006c4:	200000c4 	.word	0x200000c4
 80006c8:	200000b8 	.word	0x200000b8

080006cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b094      	sub	sp, #80	; 0x50
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 0320 	add.w	r3, r7, #32
 80006d6:	2230      	movs	r2, #48	; 0x30
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 ff7a 	bl	80025d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f0:	2300      	movs	r3, #0
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	4b2c      	ldr	r3, [pc, #176]	; (80007a8 <SystemClock_Config+0xdc>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	4a2b      	ldr	r2, [pc, #172]	; (80007a8 <SystemClock_Config+0xdc>)
 80006fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000700:	4b29      	ldr	r3, [pc, #164]	; (80007a8 <SystemClock_Config+0xdc>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800070c:	2300      	movs	r3, #0
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	4b26      	ldr	r3, [pc, #152]	; (80007ac <SystemClock_Config+0xe0>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a25      	ldr	r2, [pc, #148]	; (80007ac <SystemClock_Config+0xe0>)
 8000716:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b23      	ldr	r3, [pc, #140]	; (80007ac <SystemClock_Config+0xe0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000728:	2305      	movs	r3, #5
 800072a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800072c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000730:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000732:	2301      	movs	r3, #1
 8000734:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000736:	2302      	movs	r3, #2
 8000738:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800073a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800073e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000740:	2304      	movs	r3, #4
 8000742:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000744:	23b4      	movs	r3, #180	; 0xb4
 8000746:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000748:	2302      	movs	r3, #2
 800074a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800074c:	2304      	movs	r3, #4
 800074e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000750:	f107 0320 	add.w	r3, r7, #32
 8000754:	4618      	mov	r0, r3
 8000756:	f000 fd6f 	bl	8001238 <HAL_RCC_OscConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000760:	f000 f8ca 	bl	80008f8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000764:	f000 fd18 	bl	8001198 <HAL_PWREx_EnableOverDrive>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800076e:	f000 f8c3 	bl	80008f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000772:	230f      	movs	r3, #15
 8000774:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000776:	2302      	movs	r3, #2
 8000778:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800077e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000782:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000788:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800078a:	f107 030c 	add.w	r3, r7, #12
 800078e:	2105      	movs	r1, #5
 8000790:	4618      	mov	r0, r3
 8000792:	f000 ffc9 	bl	8001728 <HAL_RCC_ClockConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800079c:	f000 f8ac 	bl	80008f8 <Error_Handler>
  }
}
 80007a0:	bf00      	nop
 80007a2:	3750      	adds	r7, #80	; 0x50
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40007000 	.word	0x40007000

080007b0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80007c4:	2300      	movs	r3, #0
 80007c6:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007c8:	4b28      	ldr	r3, [pc, #160]	; (800086c <MX_RTC_Init+0xbc>)
 80007ca:	4a29      	ldr	r2, [pc, #164]	; (8000870 <MX_RTC_Init+0xc0>)
 80007cc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007ce:	4b27      	ldr	r3, [pc, #156]	; (800086c <MX_RTC_Init+0xbc>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007d4:	4b25      	ldr	r3, [pc, #148]	; (800086c <MX_RTC_Init+0xbc>)
 80007d6:	227f      	movs	r2, #127	; 0x7f
 80007d8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80007da:	4b24      	ldr	r3, [pc, #144]	; (800086c <MX_RTC_Init+0xbc>)
 80007dc:	22ff      	movs	r2, #255	; 0xff
 80007de:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007e0:	4b22      	ldr	r3, [pc, #136]	; (800086c <MX_RTC_Init+0xbc>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007e6:	4b21      	ldr	r3, [pc, #132]	; (800086c <MX_RTC_Init+0xbc>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007ec:	4b1f      	ldr	r3, [pc, #124]	; (800086c <MX_RTC_Init+0xbc>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007f2:	481e      	ldr	r0, [pc, #120]	; (800086c <MX_RTC_Init+0xbc>)
 80007f4:	f001 fb1e 	bl	8001e34 <HAL_RTC_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80007fe:	f000 f87b 	bl	80008f8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000802:	2300      	movs	r3, #0
 8000804:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000806:	2300      	movs	r3, #0
 8000808:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800080a:	2300      	movs	r3, #0
 800080c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	2201      	movs	r2, #1
 800081a:	4619      	mov	r1, r3
 800081c:	4813      	ldr	r0, [pc, #76]	; (800086c <MX_RTC_Init+0xbc>)
 800081e:	f001 fb9a 	bl	8001f56 <HAL_RTC_SetTime>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000828:	f000 f866 	bl	80008f8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800082c:	2301      	movs	r3, #1
 800082e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000830:	2301      	movs	r3, #1
 8000832:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000834:	2301      	movs	r3, #1
 8000836:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000838:	2300      	movs	r3, #0
 800083a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800083c:	463b      	mov	r3, r7
 800083e:	2201      	movs	r2, #1
 8000840:	4619      	mov	r1, r3
 8000842:	480a      	ldr	r0, [pc, #40]	; (800086c <MX_RTC_Init+0xbc>)
 8000844:	f001 fca2 	bl	800218c <HAL_RTC_SetDate>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800084e:	f000 f853 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /** Enable Calibrartion
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 8000852:	2100      	movs	r1, #0
 8000854:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_RTC_Init+0xbc>)
 8000856:	f001 fe51 	bl	80024fc <HAL_RTCEx_SetCalibrationOutPut>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 8000860:	f000 f84a 	bl	80008f8 <Error_Handler>



  /* USER CODE END RTC_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	3718      	adds	r7, #24
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000098 	.word	0x20000098
 8000870:	40002800 	.word	0x40002800

08000874 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b088      	sub	sp, #32
 8000878:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087a:	f107 030c 	add.w	r3, r7, #12
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <MX_GPIO_Init+0x7c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a17      	ldr	r2, [pc, #92]	; (80008f0 <MX_GPIO_Init+0x7c>)
 8000894:	f043 0304 	orr.w	r3, r3, #4
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <MX_GPIO_Init+0x7c>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0304 	and.w	r3, r3, #4
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_GPIO_Init+0x7c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a10      	ldr	r2, [pc, #64]	; (80008f0 <MX_GPIO_Init+0x7c>)
 80008b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_GPIO_Init+0x7c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2140      	movs	r1, #64	; 0x40
 80008c6:	480b      	ldr	r0, [pc, #44]	; (80008f4 <MX_GPIO_Init+0x80>)
 80008c8:	f000 fc32 	bl	8001130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008cc:	2340      	movs	r3, #64	; 0x40
 80008ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	2301      	movs	r3, #1
 80008d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	4619      	mov	r1, r3
 80008e2:	4804      	ldr	r0, [pc, #16]	; (80008f4 <MX_GPIO_Init+0x80>)
 80008e4:	f000 fa78 	bl	8000dd8 <HAL_GPIO_Init>

}
 80008e8:	bf00      	nop
 80008ea:	3720      	adds	r7, #32
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40020800 	.word	0x40020800

080008f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fc:	b672      	cpsid	i
}
 80008fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000900:	e7fe      	b.n	8000900 <Error_Handler+0x8>
	...

08000904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	4b10      	ldr	r3, [pc, #64]	; (8000950 <HAL_MspInit+0x4c>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000912:	4a0f      	ldr	r2, [pc, #60]	; (8000950 <HAL_MspInit+0x4c>)
 8000914:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000918:	6453      	str	r3, [r2, #68]	; 0x44
 800091a:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <HAL_MspInit+0x4c>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	603b      	str	r3, [r7, #0]
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <HAL_MspInit+0x4c>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092e:	4a08      	ldr	r2, [pc, #32]	; (8000950 <HAL_MspInit+0x4c>)
 8000930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000934:	6413      	str	r3, [r2, #64]	; 0x40
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <HAL_MspInit+0x4c>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800

08000954 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08e      	sub	sp, #56	; 0x38
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800095c:	f107 0308 	add.w	r3, r7, #8
 8000960:	2230      	movs	r2, #48	; 0x30
 8000962:	2100      	movs	r1, #0
 8000964:	4618      	mov	r0, r3
 8000966:	f001 fe35 	bl	80025d4 <memset>
  if(hrtc->Instance==RTC)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a0c      	ldr	r2, [pc, #48]	; (80009a0 <HAL_RTC_MspInit+0x4c>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d111      	bne.n	8000998 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000974:	2320      	movs	r3, #32
 8000976:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000978:	f44f 7380 	mov.w	r3, #256	; 0x100
 800097c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800097e:	f107 0308 	add.w	r3, r7, #8
 8000982:	4618      	mov	r0, r3
 8000984:	f001 f898 	bl	8001ab8 <HAL_RCCEx_PeriphCLKConfig>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800098e:	f7ff ffb3 	bl	80008f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000992:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <HAL_RTC_MspInit+0x50>)
 8000994:	2201      	movs	r2, #1
 8000996:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000998:	bf00      	nop
 800099a:	3738      	adds	r7, #56	; 0x38
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40002800 	.word	0x40002800
 80009a4:	42470e3c 	.word	0x42470e3c

080009a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <NMI_Handler+0x4>

080009ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <HardFault_Handler+0x4>

080009b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <MemManage_Handler+0x4>

080009ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009be:	e7fe      	b.n	80009be <BusFault_Handler+0x4>

080009c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <UsageFault_Handler+0x4>

080009c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr

080009d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f4:	f000 f8c6 	bl	8000b84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}

080009fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a04:	4a14      	ldr	r2, [pc, #80]	; (8000a58 <_sbrk+0x5c>)
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <_sbrk+0x60>)
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a10:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <_sbrk+0x64>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d102      	bne.n	8000a1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a18:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <_sbrk+0x64>)
 8000a1a:	4a12      	ldr	r2, [pc, #72]	; (8000a64 <_sbrk+0x68>)
 8000a1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a1e:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <_sbrk+0x64>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4413      	add	r3, r2
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d207      	bcs.n	8000a3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a2c:	f001 fda8 	bl	8002580 <__errno>
 8000a30:	4603      	mov	r3, r0
 8000a32:	220c      	movs	r2, #12
 8000a34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a36:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3a:	e009      	b.n	8000a50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <_sbrk+0x64>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a42:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <_sbrk+0x64>)
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4413      	add	r3, r2
 8000a4a:	4a05      	ldr	r2, [pc, #20]	; (8000a60 <_sbrk+0x64>)
 8000a4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3718      	adds	r7, #24
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20030000 	.word	0x20030000
 8000a5c:	00000400 	.word	0x00000400
 8000a60:	2000008c 	.word	0x2000008c
 8000a64:	200000e8 	.word	0x200000e8

08000a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <SystemInit+0x20>)
 8000a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a72:	4a05      	ldr	r2, [pc, #20]	; (8000a88 <SystemInit+0x20>)
 8000a74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ac4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a90:	480d      	ldr	r0, [pc, #52]	; (8000ac8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a92:	490e      	ldr	r1, [pc, #56]	; (8000acc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a94:	4a0e      	ldr	r2, [pc, #56]	; (8000ad0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a98:	e002      	b.n	8000aa0 <LoopCopyDataInit>

08000a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a9e:	3304      	adds	r3, #4

08000aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa4:	d3f9      	bcc.n	8000a9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aa6:	4a0b      	ldr	r2, [pc, #44]	; (8000ad4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000aa8:	4c0b      	ldr	r4, [pc, #44]	; (8000ad8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aac:	e001      	b.n	8000ab2 <LoopFillZerobss>

08000aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab0:	3204      	adds	r2, #4

08000ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab4:	d3fb      	bcc.n	8000aae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ab6:	f7ff ffd7 	bl	8000a68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aba:	f001 fd67 	bl	800258c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000abe:	f7ff fdd1 	bl	8000664 <main>
  bx  lr    
 8000ac2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ac4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000ac8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000acc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ad0:	08002edc 	.word	0x08002edc
  ldr r2, =_sbss
 8000ad4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ad8:	200000e4 	.word	0x200000e4

08000adc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000adc:	e7fe      	b.n	8000adc <ADC_IRQHandler>
	...

08000ae0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ae4:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <HAL_Init+0x40>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a0d      	ldr	r2, [pc, #52]	; (8000b20 <HAL_Init+0x40>)
 8000aea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000af0:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <HAL_Init+0x40>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <HAL_Init+0x40>)
 8000af6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000afa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <HAL_Init+0x40>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a07      	ldr	r2, [pc, #28]	; (8000b20 <HAL_Init+0x40>)
 8000b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b08:	2003      	movs	r0, #3
 8000b0a:	f000 f931 	bl	8000d70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b0e:	200f      	movs	r0, #15
 8000b10:	f000 f808 	bl	8000b24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b14:	f7ff fef6 	bl	8000904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40023c00 	.word	0x40023c00

08000b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_InitTick+0x54>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <HAL_InitTick+0x58>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	4619      	mov	r1, r3
 8000b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 f93b 	bl	8000dbe <HAL_SYSTICK_Config>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e00e      	b.n	8000b70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2b0f      	cmp	r3, #15
 8000b56:	d80a      	bhi.n	8000b6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b60:	f000 f911 	bl	8000d86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b64:	4a06      	ldr	r2, [pc, #24]	; (8000b80 <HAL_InitTick+0x5c>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e000      	b.n	8000b70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000000 	.word	0x20000000
 8000b7c:	20000008 	.word	0x20000008
 8000b80:	20000004 	.word	0x20000004

08000b84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_IncTick+0x20>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_IncTick+0x24>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4413      	add	r3, r2
 8000b94:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <HAL_IncTick+0x24>)
 8000b96:	6013      	str	r3, [r2, #0]
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	200000d0 	.word	0x200000d0

08000bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb0:	4b03      	ldr	r3, [pc, #12]	; (8000bc0 <HAL_GetTick+0x14>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	200000d0 	.word	0x200000d0

08000bc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bcc:	f7ff ffee 	bl	8000bac <HAL_GetTick>
 8000bd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bdc:	d005      	beq.n	8000bea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bde:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <HAL_Delay+0x44>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	461a      	mov	r2, r3
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	4413      	add	r3, r2
 8000be8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bea:	bf00      	nop
 8000bec:	f7ff ffde 	bl	8000bac <HAL_GetTick>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d8f7      	bhi.n	8000bec <HAL_Delay+0x28>
  {
  }
}
 8000bfc:	bf00      	nop
 8000bfe:	bf00      	nop
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000008 	.word	0x20000008

08000c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <__NVIC_SetPriorityGrouping+0x44>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c3e:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <__NVIC_SetPriorityGrouping+0x44>)
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	60d3      	str	r3, [r2, #12]
}
 8000c44:	bf00      	nop
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c58:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <__NVIC_GetPriorityGrouping+0x18>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	0a1b      	lsrs	r3, r3, #8
 8000c5e:	f003 0307 	and.w	r3, r3, #7
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	6039      	str	r1, [r7, #0]
 8000c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	db0a      	blt.n	8000c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	490c      	ldr	r1, [pc, #48]	; (8000cbc <__NVIC_SetPriority+0x4c>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	0112      	lsls	r2, r2, #4
 8000c90:	b2d2      	uxtb	r2, r2
 8000c92:	440b      	add	r3, r1
 8000c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c98:	e00a      	b.n	8000cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	4908      	ldr	r1, [pc, #32]	; (8000cc0 <__NVIC_SetPriority+0x50>)
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	f003 030f 	and.w	r3, r3, #15
 8000ca6:	3b04      	subs	r3, #4
 8000ca8:	0112      	lsls	r2, r2, #4
 8000caa:	b2d2      	uxtb	r2, r2
 8000cac:	440b      	add	r3, r1
 8000cae:	761a      	strb	r2, [r3, #24]
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000e100 	.word	0xe000e100
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b089      	sub	sp, #36	; 0x24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	f1c3 0307 	rsb	r3, r3, #7
 8000cde:	2b04      	cmp	r3, #4
 8000ce0:	bf28      	it	cs
 8000ce2:	2304      	movcs	r3, #4
 8000ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3304      	adds	r3, #4
 8000cea:	2b06      	cmp	r3, #6
 8000cec:	d902      	bls.n	8000cf4 <NVIC_EncodePriority+0x30>
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3b03      	subs	r3, #3
 8000cf2:	e000      	b.n	8000cf6 <NVIC_EncodePriority+0x32>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43da      	mvns	r2, r3
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	401a      	ands	r2, r3
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	fa01 f303 	lsl.w	r3, r1, r3
 8000d16:	43d9      	mvns	r1, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	4313      	orrs	r3, r2
         );
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3724      	adds	r7, #36	; 0x24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
	...

08000d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d3c:	d301      	bcc.n	8000d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e00f      	b.n	8000d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d42:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <SysTick_Config+0x40>)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d4a:	210f      	movs	r1, #15
 8000d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d50:	f7ff ff8e 	bl	8000c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <SysTick_Config+0x40>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d5a:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <SysTick_Config+0x40>)
 8000d5c:	2207      	movs	r2, #7
 8000d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	e000e010 	.word	0xe000e010

08000d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f7ff ff47 	bl	8000c0c <__NVIC_SetPriorityGrouping>
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b086      	sub	sp, #24
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
 8000d92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d98:	f7ff ff5c 	bl	8000c54 <__NVIC_GetPriorityGrouping>
 8000d9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	68b9      	ldr	r1, [r7, #8]
 8000da2:	6978      	ldr	r0, [r7, #20]
 8000da4:	f7ff ff8e 	bl	8000cc4 <NVIC_EncodePriority>
 8000da8:	4602      	mov	r2, r0
 8000daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dae:	4611      	mov	r1, r2
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff5d 	bl	8000c70 <__NVIC_SetPriority>
}
 8000db6:	bf00      	nop
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff ffb0 	bl	8000d2c <SysTick_Config>
 8000dcc:	4603      	mov	r3, r0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b089      	sub	sp, #36	; 0x24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
 8000df2:	e177      	b.n	80010e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000df4:	2201      	movs	r2, #1
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	697a      	ldr	r2, [r7, #20]
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	f040 8166 	bne.w	80010de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f003 0303 	and.w	r3, r3, #3
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d005      	beq.n	8000e2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d130      	bne.n	8000e8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	2203      	movs	r2, #3
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	68da      	ldr	r2, [r3, #12]
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e60:	2201      	movs	r2, #1
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	091b      	lsrs	r3, r3, #4
 8000e76:	f003 0201 	and.w	r2, r3, #1
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 0303 	and.w	r3, r3, #3
 8000e94:	2b03      	cmp	r3, #3
 8000e96:	d017      	beq.n	8000ec8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	689a      	ldr	r2, [r3, #8]
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f003 0303 	and.w	r3, r3, #3
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d123      	bne.n	8000f1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	08da      	lsrs	r2, r3, #3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3208      	adds	r2, #8
 8000edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	f003 0307 	and.w	r3, r3, #7
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	220f      	movs	r2, #15
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	691a      	ldr	r2, [r3, #16]
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	08da      	lsrs	r2, r3, #3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	3208      	adds	r2, #8
 8000f16:	69b9      	ldr	r1, [r7, #24]
 8000f18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	2203      	movs	r2, #3
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 0203 	and.w	r2, r3, #3
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	f000 80c0 	beq.w	80010de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	4b66      	ldr	r3, [pc, #408]	; (80010fc <HAL_GPIO_Init+0x324>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	4a65      	ldr	r2, [pc, #404]	; (80010fc <HAL_GPIO_Init+0x324>)
 8000f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f6e:	4b63      	ldr	r3, [pc, #396]	; (80010fc <HAL_GPIO_Init+0x324>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f7a:	4a61      	ldr	r2, [pc, #388]	; (8001100 <HAL_GPIO_Init+0x328>)
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	089b      	lsrs	r3, r3, #2
 8000f80:	3302      	adds	r3, #2
 8000f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f003 0303 	and.w	r3, r3, #3
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	220f      	movs	r2, #15
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a58      	ldr	r2, [pc, #352]	; (8001104 <HAL_GPIO_Init+0x32c>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d037      	beq.n	8001016 <HAL_GPIO_Init+0x23e>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a57      	ldr	r2, [pc, #348]	; (8001108 <HAL_GPIO_Init+0x330>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d031      	beq.n	8001012 <HAL_GPIO_Init+0x23a>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a56      	ldr	r2, [pc, #344]	; (800110c <HAL_GPIO_Init+0x334>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d02b      	beq.n	800100e <HAL_GPIO_Init+0x236>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a55      	ldr	r2, [pc, #340]	; (8001110 <HAL_GPIO_Init+0x338>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d025      	beq.n	800100a <HAL_GPIO_Init+0x232>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a54      	ldr	r2, [pc, #336]	; (8001114 <HAL_GPIO_Init+0x33c>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d01f      	beq.n	8001006 <HAL_GPIO_Init+0x22e>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a53      	ldr	r2, [pc, #332]	; (8001118 <HAL_GPIO_Init+0x340>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d019      	beq.n	8001002 <HAL_GPIO_Init+0x22a>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a52      	ldr	r2, [pc, #328]	; (800111c <HAL_GPIO_Init+0x344>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d013      	beq.n	8000ffe <HAL_GPIO_Init+0x226>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a51      	ldr	r2, [pc, #324]	; (8001120 <HAL_GPIO_Init+0x348>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d00d      	beq.n	8000ffa <HAL_GPIO_Init+0x222>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a50      	ldr	r2, [pc, #320]	; (8001124 <HAL_GPIO_Init+0x34c>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d007      	beq.n	8000ff6 <HAL_GPIO_Init+0x21e>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a4f      	ldr	r2, [pc, #316]	; (8001128 <HAL_GPIO_Init+0x350>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d101      	bne.n	8000ff2 <HAL_GPIO_Init+0x21a>
 8000fee:	2309      	movs	r3, #9
 8000ff0:	e012      	b.n	8001018 <HAL_GPIO_Init+0x240>
 8000ff2:	230a      	movs	r3, #10
 8000ff4:	e010      	b.n	8001018 <HAL_GPIO_Init+0x240>
 8000ff6:	2308      	movs	r3, #8
 8000ff8:	e00e      	b.n	8001018 <HAL_GPIO_Init+0x240>
 8000ffa:	2307      	movs	r3, #7
 8000ffc:	e00c      	b.n	8001018 <HAL_GPIO_Init+0x240>
 8000ffe:	2306      	movs	r3, #6
 8001000:	e00a      	b.n	8001018 <HAL_GPIO_Init+0x240>
 8001002:	2305      	movs	r3, #5
 8001004:	e008      	b.n	8001018 <HAL_GPIO_Init+0x240>
 8001006:	2304      	movs	r3, #4
 8001008:	e006      	b.n	8001018 <HAL_GPIO_Init+0x240>
 800100a:	2303      	movs	r3, #3
 800100c:	e004      	b.n	8001018 <HAL_GPIO_Init+0x240>
 800100e:	2302      	movs	r3, #2
 8001010:	e002      	b.n	8001018 <HAL_GPIO_Init+0x240>
 8001012:	2301      	movs	r3, #1
 8001014:	e000      	b.n	8001018 <HAL_GPIO_Init+0x240>
 8001016:	2300      	movs	r3, #0
 8001018:	69fa      	ldr	r2, [r7, #28]
 800101a:	f002 0203 	and.w	r2, r2, #3
 800101e:	0092      	lsls	r2, r2, #2
 8001020:	4093      	lsls	r3, r2
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4313      	orrs	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001028:	4935      	ldr	r1, [pc, #212]	; (8001100 <HAL_GPIO_Init+0x328>)
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	089b      	lsrs	r3, r3, #2
 800102e:	3302      	adds	r3, #2
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001036:	4b3d      	ldr	r3, [pc, #244]	; (800112c <HAL_GPIO_Init+0x354>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	43db      	mvns	r3, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4013      	ands	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800105a:	4a34      	ldr	r2, [pc, #208]	; (800112c <HAL_GPIO_Init+0x354>)
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001060:	4b32      	ldr	r3, [pc, #200]	; (800112c <HAL_GPIO_Init+0x354>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001084:	4a29      	ldr	r2, [pc, #164]	; (800112c <HAL_GPIO_Init+0x354>)
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800108a:	4b28      	ldr	r3, [pc, #160]	; (800112c <HAL_GPIO_Init+0x354>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ae:	4a1f      	ldr	r2, [pc, #124]	; (800112c <HAL_GPIO_Init+0x354>)
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010b4:	4b1d      	ldr	r3, [pc, #116]	; (800112c <HAL_GPIO_Init+0x354>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d003      	beq.n	80010d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010d8:	4a14      	ldr	r2, [pc, #80]	; (800112c <HAL_GPIO_Init+0x354>)
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3301      	adds	r3, #1
 80010e2:	61fb      	str	r3, [r7, #28]
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	2b0f      	cmp	r3, #15
 80010e8:	f67f ae84 	bls.w	8000df4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	3724      	adds	r7, #36	; 0x24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	40023800 	.word	0x40023800
 8001100:	40013800 	.word	0x40013800
 8001104:	40020000 	.word	0x40020000
 8001108:	40020400 	.word	0x40020400
 800110c:	40020800 	.word	0x40020800
 8001110:	40020c00 	.word	0x40020c00
 8001114:	40021000 	.word	0x40021000
 8001118:	40021400 	.word	0x40021400
 800111c:	40021800 	.word	0x40021800
 8001120:	40021c00 	.word	0x40021c00
 8001124:	40022000 	.word	0x40022000
 8001128:	40022400 	.word	0x40022400
 800112c:	40013c00 	.word	0x40013c00

08001130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	807b      	strh	r3, [r7, #2]
 800113c:	4613      	mov	r3, r2
 800113e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001140:	787b      	ldrb	r3, [r7, #1]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001146:	887a      	ldrh	r2, [r7, #2]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800114c:	e003      	b.n	8001156 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800114e:	887b      	ldrh	r3, [r7, #2]
 8001150:	041a      	lsls	r2, r3, #16
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	619a      	str	r2, [r3, #24]
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001162:	b480      	push	{r7}
 8001164:	b085      	sub	sp, #20
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
 800116a:	460b      	mov	r3, r1
 800116c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001174:	887a      	ldrh	r2, [r7, #2]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	4013      	ands	r3, r2
 800117a:	041a      	lsls	r2, r3, #16
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	43d9      	mvns	r1, r3
 8001180:	887b      	ldrh	r3, [r7, #2]
 8001182:	400b      	ands	r3, r1
 8001184:	431a      	orrs	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	619a      	str	r2, [r3, #24]
}
 800118a:	bf00      	nop
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
	...

08001198 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800119e:	2300      	movs	r3, #0
 80011a0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	603b      	str	r3, [r7, #0]
 80011a6:	4b20      	ldr	r3, [pc, #128]	; (8001228 <HAL_PWREx_EnableOverDrive+0x90>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	4a1f      	ldr	r2, [pc, #124]	; (8001228 <HAL_PWREx_EnableOverDrive+0x90>)
 80011ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b0:	6413      	str	r3, [r2, #64]	; 0x40
 80011b2:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <HAL_PWREx_EnableOverDrive+0x90>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ba:	603b      	str	r3, [r7, #0]
 80011bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80011be:	4b1b      	ldr	r3, [pc, #108]	; (800122c <HAL_PWREx_EnableOverDrive+0x94>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011c4:	f7ff fcf2 	bl	8000bac <HAL_GetTick>
 80011c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011ca:	e009      	b.n	80011e0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80011cc:	f7ff fcee 	bl	8000bac <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011da:	d901      	bls.n	80011e0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	e01f      	b.n	8001220 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011e0:	4b13      	ldr	r3, [pc, #76]	; (8001230 <HAL_PWREx_EnableOverDrive+0x98>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011ec:	d1ee      	bne.n	80011cc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80011ee:	4b11      	ldr	r3, [pc, #68]	; (8001234 <HAL_PWREx_EnableOverDrive+0x9c>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011f4:	f7ff fcda 	bl	8000bac <HAL_GetTick>
 80011f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80011fa:	e009      	b.n	8001210 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80011fc:	f7ff fcd6 	bl	8000bac <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800120a:	d901      	bls.n	8001210 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e007      	b.n	8001220 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001210:	4b07      	ldr	r3, [pc, #28]	; (8001230 <HAL_PWREx_EnableOverDrive+0x98>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001218:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800121c:	d1ee      	bne.n	80011fc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800121e:	2300      	movs	r3, #0
}
 8001220:	4618      	mov	r0, r3
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40023800 	.word	0x40023800
 800122c:	420e0040 	.word	0x420e0040
 8001230:	40007000 	.word	0x40007000
 8001234:	420e0044 	.word	0x420e0044

08001238 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e264      	b.n	8001714 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	2b00      	cmp	r3, #0
 8001254:	d075      	beq.n	8001342 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001256:	4ba3      	ldr	r3, [pc, #652]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 030c 	and.w	r3, r3, #12
 800125e:	2b04      	cmp	r3, #4
 8001260:	d00c      	beq.n	800127c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001262:	4ba0      	ldr	r3, [pc, #640]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800126a:	2b08      	cmp	r3, #8
 800126c:	d112      	bne.n	8001294 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800126e:	4b9d      	ldr	r3, [pc, #628]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001276:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800127a:	d10b      	bne.n	8001294 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800127c:	4b99      	ldr	r3, [pc, #612]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d05b      	beq.n	8001340 <HAL_RCC_OscConfig+0x108>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d157      	bne.n	8001340 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e23f      	b.n	8001714 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800129c:	d106      	bne.n	80012ac <HAL_RCC_OscConfig+0x74>
 800129e:	4b91      	ldr	r3, [pc, #580]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a90      	ldr	r2, [pc, #576]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 80012a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	e01d      	b.n	80012e8 <HAL_RCC_OscConfig+0xb0>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012b4:	d10c      	bne.n	80012d0 <HAL_RCC_OscConfig+0x98>
 80012b6:	4b8b      	ldr	r3, [pc, #556]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a8a      	ldr	r2, [pc, #552]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 80012bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	4b88      	ldr	r3, [pc, #544]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a87      	ldr	r2, [pc, #540]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 80012c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	e00b      	b.n	80012e8 <HAL_RCC_OscConfig+0xb0>
 80012d0:	4b84      	ldr	r3, [pc, #528]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a83      	ldr	r2, [pc, #524]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 80012d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	4b81      	ldr	r3, [pc, #516]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a80      	ldr	r2, [pc, #512]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 80012e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d013      	beq.n	8001318 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f0:	f7ff fc5c 	bl	8000bac <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f8:	f7ff fc58 	bl	8000bac <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b64      	cmp	r3, #100	; 0x64
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e204      	b.n	8001714 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130a:	4b76      	ldr	r3, [pc, #472]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0f0      	beq.n	80012f8 <HAL_RCC_OscConfig+0xc0>
 8001316:	e014      	b.n	8001342 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7ff fc48 	bl	8000bac <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001320:	f7ff fc44 	bl	8000bac <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b64      	cmp	r3, #100	; 0x64
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e1f0      	b.n	8001714 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001332:	4b6c      	ldr	r3, [pc, #432]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f0      	bne.n	8001320 <HAL_RCC_OscConfig+0xe8>
 800133e:	e000      	b.n	8001342 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d063      	beq.n	8001416 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800134e:	4b65      	ldr	r3, [pc, #404]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f003 030c 	and.w	r3, r3, #12
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00b      	beq.n	8001372 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800135a:	4b62      	ldr	r3, [pc, #392]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001362:	2b08      	cmp	r3, #8
 8001364:	d11c      	bne.n	80013a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001366:	4b5f      	ldr	r3, [pc, #380]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d116      	bne.n	80013a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001372:	4b5c      	ldr	r3, [pc, #368]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d005      	beq.n	800138a <HAL_RCC_OscConfig+0x152>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d001      	beq.n	800138a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e1c4      	b.n	8001714 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138a:	4b56      	ldr	r3, [pc, #344]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	4952      	ldr	r1, [pc, #328]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 800139a:	4313      	orrs	r3, r2
 800139c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139e:	e03a      	b.n	8001416 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d020      	beq.n	80013ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a8:	4b4f      	ldr	r3, [pc, #316]	; (80014e8 <HAL_RCC_OscConfig+0x2b0>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ae:	f7ff fbfd 	bl	8000bac <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013b6:	f7ff fbf9 	bl	8000bac <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e1a5      	b.n	8001714 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c8:	4b46      	ldr	r3, [pc, #280]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0f0      	beq.n	80013b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d4:	4b43      	ldr	r3, [pc, #268]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	4940      	ldr	r1, [pc, #256]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	600b      	str	r3, [r1, #0]
 80013e8:	e015      	b.n	8001416 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ea:	4b3f      	ldr	r3, [pc, #252]	; (80014e8 <HAL_RCC_OscConfig+0x2b0>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f0:	f7ff fbdc 	bl	8000bac <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f8:	f7ff fbd8 	bl	8000bac <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e184      	b.n	8001714 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140a:	4b36      	ldr	r3, [pc, #216]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f0      	bne.n	80013f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	2b00      	cmp	r3, #0
 8001420:	d030      	beq.n	8001484 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d016      	beq.n	8001458 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800142a:	4b30      	ldr	r3, [pc, #192]	; (80014ec <HAL_RCC_OscConfig+0x2b4>)
 800142c:	2201      	movs	r2, #1
 800142e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001430:	f7ff fbbc 	bl	8000bac <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001438:	f7ff fbb8 	bl	8000bac <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e164      	b.n	8001714 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144a:	4b26      	ldr	r3, [pc, #152]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 800144c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f0      	beq.n	8001438 <HAL_RCC_OscConfig+0x200>
 8001456:	e015      	b.n	8001484 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001458:	4b24      	ldr	r3, [pc, #144]	; (80014ec <HAL_RCC_OscConfig+0x2b4>)
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145e:	f7ff fba5 	bl	8000bac <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001464:	e008      	b.n	8001478 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001466:	f7ff fba1 	bl	8000bac <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e14d      	b.n	8001714 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001478:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 800147a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1f0      	bne.n	8001466 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0304 	and.w	r3, r3, #4
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 80a0 	beq.w	80015d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001492:	2300      	movs	r3, #0
 8001494:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001496:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d10f      	bne.n	80014c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	4a0e      	ldr	r2, [pc, #56]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 80014ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b0:	6413      	str	r3, [r2, #64]	; 0x40
 80014b2:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014be:	2301      	movs	r3, #1
 80014c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <HAL_RCC_OscConfig+0x2b8>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d121      	bne.n	8001512 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ce:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <HAL_RCC_OscConfig+0x2b8>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a07      	ldr	r2, [pc, #28]	; (80014f0 <HAL_RCC_OscConfig+0x2b8>)
 80014d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014da:	f7ff fb67 	bl	8000bac <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e0:	e011      	b.n	8001506 <HAL_RCC_OscConfig+0x2ce>
 80014e2:	bf00      	nop
 80014e4:	40023800 	.word	0x40023800
 80014e8:	42470000 	.word	0x42470000
 80014ec:	42470e80 	.word	0x42470e80
 80014f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014f4:	f7ff fb5a 	bl	8000bac <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e106      	b.n	8001714 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001506:	4b85      	ldr	r3, [pc, #532]	; (800171c <HAL_RCC_OscConfig+0x4e4>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0f0      	beq.n	80014f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d106      	bne.n	8001528 <HAL_RCC_OscConfig+0x2f0>
 800151a:	4b81      	ldr	r3, [pc, #516]	; (8001720 <HAL_RCC_OscConfig+0x4e8>)
 800151c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151e:	4a80      	ldr	r2, [pc, #512]	; (8001720 <HAL_RCC_OscConfig+0x4e8>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6713      	str	r3, [r2, #112]	; 0x70
 8001526:	e01c      	b.n	8001562 <HAL_RCC_OscConfig+0x32a>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	2b05      	cmp	r3, #5
 800152e:	d10c      	bne.n	800154a <HAL_RCC_OscConfig+0x312>
 8001530:	4b7b      	ldr	r3, [pc, #492]	; (8001720 <HAL_RCC_OscConfig+0x4e8>)
 8001532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001534:	4a7a      	ldr	r2, [pc, #488]	; (8001720 <HAL_RCC_OscConfig+0x4e8>)
 8001536:	f043 0304 	orr.w	r3, r3, #4
 800153a:	6713      	str	r3, [r2, #112]	; 0x70
 800153c:	4b78      	ldr	r3, [pc, #480]	; (8001720 <HAL_RCC_OscConfig+0x4e8>)
 800153e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001540:	4a77      	ldr	r2, [pc, #476]	; (8001720 <HAL_RCC_OscConfig+0x4e8>)
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	6713      	str	r3, [r2, #112]	; 0x70
 8001548:	e00b      	b.n	8001562 <HAL_RCC_OscConfig+0x32a>
 800154a:	4b75      	ldr	r3, [pc, #468]	; (8001720 <HAL_RCC_OscConfig+0x4e8>)
 800154c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154e:	4a74      	ldr	r2, [pc, #464]	; (8001720 <HAL_RCC_OscConfig+0x4e8>)
 8001550:	f023 0301 	bic.w	r3, r3, #1
 8001554:	6713      	str	r3, [r2, #112]	; 0x70
 8001556:	4b72      	ldr	r3, [pc, #456]	; (8001720 <HAL_RCC_OscConfig+0x4e8>)
 8001558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155a:	4a71      	ldr	r2, [pc, #452]	; (8001720 <HAL_RCC_OscConfig+0x4e8>)
 800155c:	f023 0304 	bic.w	r3, r3, #4
 8001560:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d015      	beq.n	8001596 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800156a:	f7ff fb1f 	bl	8000bac <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001570:	e00a      	b.n	8001588 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001572:	f7ff fb1b 	bl	8000bac <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001580:	4293      	cmp	r3, r2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e0c5      	b.n	8001714 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001588:	4b65      	ldr	r3, [pc, #404]	; (8001720 <HAL_RCC_OscConfig+0x4e8>)
 800158a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0ee      	beq.n	8001572 <HAL_RCC_OscConfig+0x33a>
 8001594:	e014      	b.n	80015c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001596:	f7ff fb09 	bl	8000bac <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800159c:	e00a      	b.n	80015b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800159e:	f7ff fb05 	bl	8000bac <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e0af      	b.n	8001714 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b4:	4b5a      	ldr	r3, [pc, #360]	; (8001720 <HAL_RCC_OscConfig+0x4e8>)
 80015b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1ee      	bne.n	800159e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015c0:	7dfb      	ldrb	r3, [r7, #23]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d105      	bne.n	80015d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015c6:	4b56      	ldr	r3, [pc, #344]	; (8001720 <HAL_RCC_OscConfig+0x4e8>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	4a55      	ldr	r2, [pc, #340]	; (8001720 <HAL_RCC_OscConfig+0x4e8>)
 80015cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f000 809b 	beq.w	8001712 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015dc:	4b50      	ldr	r3, [pc, #320]	; (8001720 <HAL_RCC_OscConfig+0x4e8>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f003 030c 	and.w	r3, r3, #12
 80015e4:	2b08      	cmp	r3, #8
 80015e6:	d05c      	beq.n	80016a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d141      	bne.n	8001674 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015f0:	4b4c      	ldr	r3, [pc, #304]	; (8001724 <HAL_RCC_OscConfig+0x4ec>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f6:	f7ff fad9 	bl	8000bac <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015fe:	f7ff fad5 	bl	8000bac <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e081      	b.n	8001714 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001610:	4b43      	ldr	r3, [pc, #268]	; (8001720 <HAL_RCC_OscConfig+0x4e8>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1f0      	bne.n	80015fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69da      	ldr	r2, [r3, #28]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	431a      	orrs	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162a:	019b      	lsls	r3, r3, #6
 800162c:	431a      	orrs	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001632:	085b      	lsrs	r3, r3, #1
 8001634:	3b01      	subs	r3, #1
 8001636:	041b      	lsls	r3, r3, #16
 8001638:	431a      	orrs	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163e:	061b      	lsls	r3, r3, #24
 8001640:	4937      	ldr	r1, [pc, #220]	; (8001720 <HAL_RCC_OscConfig+0x4e8>)
 8001642:	4313      	orrs	r3, r2
 8001644:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001646:	4b37      	ldr	r3, [pc, #220]	; (8001724 <HAL_RCC_OscConfig+0x4ec>)
 8001648:	2201      	movs	r2, #1
 800164a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164c:	f7ff faae 	bl	8000bac <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001654:	f7ff faaa 	bl	8000bac <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e056      	b.n	8001714 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001666:	4b2e      	ldr	r3, [pc, #184]	; (8001720 <HAL_RCC_OscConfig+0x4e8>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0f0      	beq.n	8001654 <HAL_RCC_OscConfig+0x41c>
 8001672:	e04e      	b.n	8001712 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001674:	4b2b      	ldr	r3, [pc, #172]	; (8001724 <HAL_RCC_OscConfig+0x4ec>)
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167a:	f7ff fa97 	bl	8000bac <HAL_GetTick>
 800167e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001680:	e008      	b.n	8001694 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001682:	f7ff fa93 	bl	8000bac <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e03f      	b.n	8001714 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001694:	4b22      	ldr	r3, [pc, #136]	; (8001720 <HAL_RCC_OscConfig+0x4e8>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1f0      	bne.n	8001682 <HAL_RCC_OscConfig+0x44a>
 80016a0:	e037      	b.n	8001712 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d101      	bne.n	80016ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e032      	b.n	8001714 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016ae:	4b1c      	ldr	r3, [pc, #112]	; (8001720 <HAL_RCC_OscConfig+0x4e8>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d028      	beq.n	800170e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d121      	bne.n	800170e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d11a      	bne.n	800170e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016d8:	68fa      	ldr	r2, [r7, #12]
 80016da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016de:	4013      	ands	r3, r2
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016e4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d111      	bne.n	800170e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f4:	085b      	lsrs	r3, r3, #1
 80016f6:	3b01      	subs	r3, #1
 80016f8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d107      	bne.n	800170e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001708:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800170a:	429a      	cmp	r2, r3
 800170c:	d001      	beq.n	8001712 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e000      	b.n	8001714 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40007000 	.word	0x40007000
 8001720:	40023800 	.word	0x40023800
 8001724:	42470060 	.word	0x42470060

08001728 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e0cc      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800173c:	4b68      	ldr	r3, [pc, #416]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 030f 	and.w	r3, r3, #15
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	429a      	cmp	r2, r3
 8001748:	d90c      	bls.n	8001764 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174a:	4b65      	ldr	r3, [pc, #404]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001752:	4b63      	ldr	r3, [pc, #396]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	429a      	cmp	r2, r3
 800175e:	d001      	beq.n	8001764 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e0b8      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d020      	beq.n	80017b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b00      	cmp	r3, #0
 800177a:	d005      	beq.n	8001788 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800177c:	4b59      	ldr	r3, [pc, #356]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	4a58      	ldr	r2, [pc, #352]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001786:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0308 	and.w	r3, r3, #8
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001794:	4b53      	ldr	r3, [pc, #332]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	4a52      	ldr	r2, [pc, #328]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800179e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a0:	4b50      	ldr	r3, [pc, #320]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	494d      	ldr	r1, [pc, #308]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d044      	beq.n	8001848 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d107      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c6:	4b47      	ldr	r3, [pc, #284]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d119      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e07f      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d003      	beq.n	80017e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	d107      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e6:	4b3f      	ldr	r3, [pc, #252]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d109      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e06f      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f6:	4b3b      	ldr	r3, [pc, #236]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e067      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001806:	4b37      	ldr	r3, [pc, #220]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f023 0203 	bic.w	r2, r3, #3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	4934      	ldr	r1, [pc, #208]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	4313      	orrs	r3, r2
 8001816:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001818:	f7ff f9c8 	bl	8000bac <HAL_GetTick>
 800181c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181e:	e00a      	b.n	8001836 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001820:	f7ff f9c4 	bl	8000bac <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	f241 3288 	movw	r2, #5000	; 0x1388
 800182e:	4293      	cmp	r3, r2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e04f      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001836:	4b2b      	ldr	r3, [pc, #172]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 020c 	and.w	r2, r3, #12
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	429a      	cmp	r2, r3
 8001846:	d1eb      	bne.n	8001820 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001848:	4b25      	ldr	r3, [pc, #148]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 030f 	and.w	r3, r3, #15
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	429a      	cmp	r2, r3
 8001854:	d20c      	bcs.n	8001870 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001856:	4b22      	ldr	r3, [pc, #136]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800185e:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	429a      	cmp	r2, r3
 800186a:	d001      	beq.n	8001870 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e032      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	2b00      	cmp	r3, #0
 800187a:	d008      	beq.n	800188e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800187c:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	4916      	ldr	r1, [pc, #88]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	4313      	orrs	r3, r2
 800188c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0308 	and.w	r3, r3, #8
 8001896:	2b00      	cmp	r3, #0
 8001898:	d009      	beq.n	80018ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800189a:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	490e      	ldr	r1, [pc, #56]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ae:	f000 f821 	bl	80018f4 <HAL_RCC_GetSysClockFreq>
 80018b2:	4602      	mov	r2, r0
 80018b4:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	091b      	lsrs	r3, r3, #4
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	490a      	ldr	r1, [pc, #40]	; (80018e8 <HAL_RCC_ClockConfig+0x1c0>)
 80018c0:	5ccb      	ldrb	r3, [r1, r3]
 80018c2:	fa22 f303 	lsr.w	r3, r2, r3
 80018c6:	4a09      	ldr	r2, [pc, #36]	; (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 80018c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018ca:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <HAL_RCC_ClockConfig+0x1c8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff f928 	bl	8000b24 <HAL_InitTick>

  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40023c00 	.word	0x40023c00
 80018e4:	40023800 	.word	0x40023800
 80018e8:	08002e88 	.word	0x08002e88
 80018ec:	20000000 	.word	0x20000000
 80018f0:	20000004 	.word	0x20000004

080018f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018f8:	b084      	sub	sp, #16
 80018fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	607b      	str	r3, [r7, #4]
 8001900:	2300      	movs	r3, #0
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	2300      	movs	r3, #0
 8001906:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001908:	2300      	movs	r3, #0
 800190a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800190c:	4b67      	ldr	r3, [pc, #412]	; (8001aac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 030c 	and.w	r3, r3, #12
 8001914:	2b08      	cmp	r3, #8
 8001916:	d00d      	beq.n	8001934 <HAL_RCC_GetSysClockFreq+0x40>
 8001918:	2b08      	cmp	r3, #8
 800191a:	f200 80bd 	bhi.w	8001a98 <HAL_RCC_GetSysClockFreq+0x1a4>
 800191e:	2b00      	cmp	r3, #0
 8001920:	d002      	beq.n	8001928 <HAL_RCC_GetSysClockFreq+0x34>
 8001922:	2b04      	cmp	r3, #4
 8001924:	d003      	beq.n	800192e <HAL_RCC_GetSysClockFreq+0x3a>
 8001926:	e0b7      	b.n	8001a98 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001928:	4b61      	ldr	r3, [pc, #388]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800192a:	60bb      	str	r3, [r7, #8]
       break;
 800192c:	e0b7      	b.n	8001a9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800192e:	4b61      	ldr	r3, [pc, #388]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001930:	60bb      	str	r3, [r7, #8]
      break;
 8001932:	e0b4      	b.n	8001a9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001934:	4b5d      	ldr	r3, [pc, #372]	; (8001aac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800193c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800193e:	4b5b      	ldr	r3, [pc, #364]	; (8001aac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d04d      	beq.n	80019e6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800194a:	4b58      	ldr	r3, [pc, #352]	; (8001aac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	099b      	lsrs	r3, r3, #6
 8001950:	461a      	mov	r2, r3
 8001952:	f04f 0300 	mov.w	r3, #0
 8001956:	f240 10ff 	movw	r0, #511	; 0x1ff
 800195a:	f04f 0100 	mov.w	r1, #0
 800195e:	ea02 0800 	and.w	r8, r2, r0
 8001962:	ea03 0901 	and.w	r9, r3, r1
 8001966:	4640      	mov	r0, r8
 8001968:	4649      	mov	r1, r9
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	f04f 0300 	mov.w	r3, #0
 8001972:	014b      	lsls	r3, r1, #5
 8001974:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001978:	0142      	lsls	r2, r0, #5
 800197a:	4610      	mov	r0, r2
 800197c:	4619      	mov	r1, r3
 800197e:	ebb0 0008 	subs.w	r0, r0, r8
 8001982:	eb61 0109 	sbc.w	r1, r1, r9
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	f04f 0300 	mov.w	r3, #0
 800198e:	018b      	lsls	r3, r1, #6
 8001990:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001994:	0182      	lsls	r2, r0, #6
 8001996:	1a12      	subs	r2, r2, r0
 8001998:	eb63 0301 	sbc.w	r3, r3, r1
 800199c:	f04f 0000 	mov.w	r0, #0
 80019a0:	f04f 0100 	mov.w	r1, #0
 80019a4:	00d9      	lsls	r1, r3, #3
 80019a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019aa:	00d0      	lsls	r0, r2, #3
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	eb12 0208 	adds.w	r2, r2, r8
 80019b4:	eb43 0309 	adc.w	r3, r3, r9
 80019b8:	f04f 0000 	mov.w	r0, #0
 80019bc:	f04f 0100 	mov.w	r1, #0
 80019c0:	0259      	lsls	r1, r3, #9
 80019c2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80019c6:	0250      	lsls	r0, r2, #9
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4610      	mov	r0, r2
 80019ce:	4619      	mov	r1, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	461a      	mov	r2, r3
 80019d4:	f04f 0300 	mov.w	r3, #0
 80019d8:	f7fe fc5a 	bl	8000290 <__aeabi_uldivmod>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4613      	mov	r3, r2
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	e04a      	b.n	8001a7c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e6:	4b31      	ldr	r3, [pc, #196]	; (8001aac <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	099b      	lsrs	r3, r3, #6
 80019ec:	461a      	mov	r2, r3
 80019ee:	f04f 0300 	mov.w	r3, #0
 80019f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80019f6:	f04f 0100 	mov.w	r1, #0
 80019fa:	ea02 0400 	and.w	r4, r2, r0
 80019fe:	ea03 0501 	and.w	r5, r3, r1
 8001a02:	4620      	mov	r0, r4
 8001a04:	4629      	mov	r1, r5
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	f04f 0300 	mov.w	r3, #0
 8001a0e:	014b      	lsls	r3, r1, #5
 8001a10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a14:	0142      	lsls	r2, r0, #5
 8001a16:	4610      	mov	r0, r2
 8001a18:	4619      	mov	r1, r3
 8001a1a:	1b00      	subs	r0, r0, r4
 8001a1c:	eb61 0105 	sbc.w	r1, r1, r5
 8001a20:	f04f 0200 	mov.w	r2, #0
 8001a24:	f04f 0300 	mov.w	r3, #0
 8001a28:	018b      	lsls	r3, r1, #6
 8001a2a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a2e:	0182      	lsls	r2, r0, #6
 8001a30:	1a12      	subs	r2, r2, r0
 8001a32:	eb63 0301 	sbc.w	r3, r3, r1
 8001a36:	f04f 0000 	mov.w	r0, #0
 8001a3a:	f04f 0100 	mov.w	r1, #0
 8001a3e:	00d9      	lsls	r1, r3, #3
 8001a40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a44:	00d0      	lsls	r0, r2, #3
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	1912      	adds	r2, r2, r4
 8001a4c:	eb45 0303 	adc.w	r3, r5, r3
 8001a50:	f04f 0000 	mov.w	r0, #0
 8001a54:	f04f 0100 	mov.w	r1, #0
 8001a58:	0299      	lsls	r1, r3, #10
 8001a5a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001a5e:	0290      	lsls	r0, r2, #10
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	f04f 0300 	mov.w	r3, #0
 8001a70:	f7fe fc0e 	bl	8000290 <__aeabi_uldivmod>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4613      	mov	r3, r2
 8001a7a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	0c1b      	lsrs	r3, r3, #16
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	3301      	adds	r3, #1
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a94:	60bb      	str	r3, [r7, #8]
      break;
 8001a96:	e002      	b.n	8001a9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a98:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a9a:	60bb      	str	r3, [r7, #8]
      break;
 8001a9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a9e:	68bb      	ldr	r3, [r7, #8]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	00f42400 	.word	0x00f42400
 8001ab4:	007a1200 	.word	0x007a1200

08001ab8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d10b      	bne.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d105      	bne.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d075      	beq.n	8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001aec:	4bad      	ldr	r3, [pc, #692]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001af2:	f7ff f85b 	bl	8000bac <HAL_GetTick>
 8001af6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001af8:	e008      	b.n	8001b0c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001afa:	f7ff f857 	bl	8000bac <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e18b      	b.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001b0c:	4ba6      	ldr	r3, [pc, #664]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1f0      	bne.n	8001afa <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d009      	beq.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	019a      	lsls	r2, r3, #6
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	071b      	lsls	r3, r3, #28
 8001b30:	499d      	ldr	r1, [pc, #628]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d01f      	beq.n	8001b84 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001b44:	4b98      	ldr	r3, [pc, #608]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b4a:	0f1b      	lsrs	r3, r3, #28
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	019a      	lsls	r2, r3, #6
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	061b      	lsls	r3, r3, #24
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	071b      	lsls	r3, r3, #28
 8001b64:	4990      	ldr	r1, [pc, #576]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001b6c:	4b8e      	ldr	r3, [pc, #568]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b72:	f023 021f 	bic.w	r2, r3, #31
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	498a      	ldr	r1, [pc, #552]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d00d      	beq.n	8001bac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	019a      	lsls	r2, r3, #6
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	061b      	lsls	r3, r3, #24
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	071b      	lsls	r3, r3, #28
 8001ba4:	4980      	ldr	r1, [pc, #512]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001bac:	4b7d      	ldr	r3, [pc, #500]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001bb2:	f7fe fffb 	bl	8000bac <HAL_GetTick>
 8001bb6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001bb8:	e008      	b.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001bba:	f7fe fff7 	bl	8000bac <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e12b      	b.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001bcc:	4b76      	ldr	r3, [pc, #472]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0f0      	beq.n	8001bba <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d105      	bne.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d079      	beq.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001bf0:	4b6e      	ldr	r3, [pc, #440]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001bf6:	f7fe ffd9 	bl	8000bac <HAL_GetTick>
 8001bfa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001bfe:	f7fe ffd5 	bl	8000bac <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e109      	b.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001c10:	4b65      	ldr	r3, [pc, #404]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c1c:	d0ef      	beq.n	8001bfe <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0304 	and.w	r3, r3, #4
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d020      	beq.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001c2a:	4b5f      	ldr	r3, [pc, #380]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c30:	0f1b      	lsrs	r3, r3, #28
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	019a      	lsls	r2, r3, #6
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	061b      	lsls	r3, r3, #24
 8001c44:	431a      	orrs	r2, r3
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	071b      	lsls	r3, r3, #28
 8001c4a:	4957      	ldr	r1, [pc, #348]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001c52:	4b55      	ldr	r3, [pc, #340]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c58:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	3b01      	subs	r3, #1
 8001c62:	021b      	lsls	r3, r3, #8
 8001c64:	4950      	ldr	r1, [pc, #320]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0308 	and.w	r3, r3, #8
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d01e      	beq.n	8001cb6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001c78:	4b4b      	ldr	r3, [pc, #300]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c7e:	0e1b      	lsrs	r3, r3, #24
 8001c80:	f003 030f 	and.w	r3, r3, #15
 8001c84:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	019a      	lsls	r2, r3, #6
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	061b      	lsls	r3, r3, #24
 8001c90:	431a      	orrs	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	071b      	lsls	r3, r3, #28
 8001c98:	4943      	ldr	r1, [pc, #268]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001ca0:	4b41      	ldr	r3, [pc, #260]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ca2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ca6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	493e      	ldr	r1, [pc, #248]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001cb6:	4b3d      	ldr	r3, [pc, #244]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001cb8:	2201      	movs	r2, #1
 8001cba:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001cbc:	f7fe ff76 	bl	8000bac <HAL_GetTick>
 8001cc0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001cc4:	f7fe ff72 	bl	8000bac <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e0a6      	b.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001cd6:	4b34      	ldr	r3, [pc, #208]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ce2:	d1ef      	bne.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0320 	and.w	r3, r3, #32
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f000 808d 	beq.w	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	4b2c      	ldr	r3, [pc, #176]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	4a2b      	ldr	r2, [pc, #172]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d00:	6413      	str	r3, [r2, #64]	; 0x40
 8001d02:	4b29      	ldr	r3, [pc, #164]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001d0e:	4b28      	ldr	r3, [pc, #160]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a27      	ldr	r2, [pc, #156]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d18:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d1a:	f7fe ff47 	bl	8000bac <HAL_GetTick>
 8001d1e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001d20:	e008      	b.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001d22:	f7fe ff43 	bl	8000bac <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e077      	b.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001d34:	4b1e      	ldr	r3, [pc, #120]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0f0      	beq.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d40:	4b19      	ldr	r3, [pc, #100]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d48:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d039      	beq.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d032      	beq.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d5e:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d66:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d68:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d6e:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001d74:	4a0c      	ldr	r2, [pc, #48]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001d7a:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d11e      	bne.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001d86:	f7fe ff11 	bl	8000bac <HAL_GetTick>
 8001d8a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d8c:	e014      	b.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d8e:	f7fe ff0d 	bl	8000bac <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d90b      	bls.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e03f      	b.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8001da4:	42470068 	.word	0x42470068
 8001da8:	40023800 	.word	0x40023800
 8001dac:	42470070 	.word	0x42470070
 8001db0:	40007000 	.word	0x40007000
 8001db4:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db8:	4b1c      	ldr	r3, [pc, #112]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0e4      	beq.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001dd0:	d10d      	bne.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x336>
 8001dd2:	4b16      	ldr	r3, [pc, #88]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dde:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001de6:	4911      	ldr	r1, [pc, #68]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	608b      	str	r3, [r1, #8]
 8001dec:	e005      	b.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x342>
 8001dee:	4b0f      	ldr	r3, [pc, #60]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	4a0e      	ldr	r2, [pc, #56]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001df4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001df8:	6093      	str	r3, [r2, #8]
 8001dfa:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001dfc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e06:	4909      	ldr	r1, [pc, #36]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0310 	and.w	r3, r3, #16
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d004      	beq.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8001e1e:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8001e20:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	424711e0 	.word	0x424711e0

08001e34 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e083      	b.n	8001f4e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	7f5b      	ldrb	r3, [r3, #29]
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d105      	bne.n	8001e5c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7fe fd7c 	bl	8000954 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2202      	movs	r2, #2
 8001e60:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	22ca      	movs	r2, #202	; 0xca
 8001e68:	625a      	str	r2, [r3, #36]	; 0x24
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2253      	movs	r2, #83	; 0x53
 8001e70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 faa8 	bl	80023c8 <RTC_EnterInitMode>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d008      	beq.n	8001e90 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	22ff      	movs	r2, #255	; 0xff
 8001e84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2204      	movs	r2, #4
 8001e8a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e05e      	b.n	8001f4e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6812      	ldr	r2, [r2, #0]
 8001e9a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001e9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ea2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6899      	ldr	r1, [r3, #8]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	68d2      	ldr	r2, [r2, #12]
 8001eca:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6919      	ldr	r1, [r3, #16]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	041a      	lsls	r2, r3, #16
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eee:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f003 0320 	and.w	r3, r3, #32
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10e      	bne.n	8001f1c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 fa3a 	bl	8002378 <HAL_RTC_WaitForSynchro>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d008      	beq.n	8001f1c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	22ff      	movs	r2, #255	; 0xff
 8001f10:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2204      	movs	r2, #4
 8001f16:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e018      	b.n	8001f4e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f2a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	699a      	ldr	r2, [r3, #24]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	22ff      	movs	r2, #255	; 0xff
 8001f44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
  }
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001f56:	b590      	push	{r4, r7, lr}
 8001f58:	b087      	sub	sp, #28
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	60f8      	str	r0, [r7, #12]
 8001f5e:	60b9      	str	r1, [r7, #8]
 8001f60:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	7f1b      	ldrb	r3, [r3, #28]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d101      	bne.n	8001f72 <HAL_RTC_SetTime+0x1c>
 8001f6e:	2302      	movs	r3, #2
 8001f70:	e0aa      	b.n	80020c8 <HAL_RTC_SetTime+0x172>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2201      	movs	r2, #1
 8001f76:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d126      	bne.n	8001fd2 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d102      	bne.n	8001f98 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	2200      	movs	r2, #0
 8001f96:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f000 fa3f 	bl	8002420 <RTC_ByteToBcd2>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	785b      	ldrb	r3, [r3, #1]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 fa38 	bl	8002420 <RTC_ByteToBcd2>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001fb4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	789b      	ldrb	r3, [r3, #2]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 fa30 	bl	8002420 <RTC_ByteToBcd2>
 8001fc0:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001fc2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	78db      	ldrb	r3, [r3, #3]
 8001fca:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	617b      	str	r3, [r7, #20]
 8001fd0:	e018      	b.n	8002004 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d102      	bne.n	8001fe6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	785b      	ldrb	r3, [r3, #1]
 8001ff0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001ff2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8001ff4:	68ba      	ldr	r2, [r7, #8]
 8001ff6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001ff8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	78db      	ldrb	r3, [r3, #3]
 8001ffe:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002000:	4313      	orrs	r3, r2
 8002002:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	22ca      	movs	r2, #202	; 0xca
 800200a:	625a      	str	r2, [r3, #36]	; 0x24
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2253      	movs	r2, #83	; 0x53
 8002012:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	f000 f9d7 	bl	80023c8 <RTC_EnterInitMode>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00b      	beq.n	8002038 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	22ff      	movs	r2, #255	; 0xff
 8002026:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2204      	movs	r2, #4
 800202c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e047      	b.n	80020c8 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002042:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002046:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689a      	ldr	r2, [r3, #8]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002056:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6899      	ldr	r1, [r3, #8]
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	68da      	ldr	r2, [r3, #12]
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	431a      	orrs	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	430a      	orrs	r2, r1
 800206e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800207e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 0320 	and.w	r3, r3, #32
 800208a:	2b00      	cmp	r3, #0
 800208c:	d111      	bne.n	80020b2 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f000 f972 	bl	8002378 <HAL_RTC_WaitForSynchro>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00b      	beq.n	80020b2 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	22ff      	movs	r2, #255	; 0xff
 80020a0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2204      	movs	r2, #4
 80020a6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e00a      	b.n	80020c8 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	22ff      	movs	r2, #255	; 0xff
 80020b8:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2201      	movs	r2, #1
 80020be:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80020c6:	2300      	movs	r3, #0
  }
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	371c      	adds	r7, #28
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd90      	pop	{r4, r7, pc}

080020d0 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002102:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002106:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	0c1b      	lsrs	r3, r3, #16
 800210c:	b2db      	uxtb	r3, r3
 800210e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002112:	b2da      	uxtb	r2, r3
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	0a1b      	lsrs	r3, r3, #8
 800211c:	b2db      	uxtb	r3, r3
 800211e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002122:	b2da      	uxtb	r2, r3
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	b2db      	uxtb	r3, r3
 800212c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002130:	b2da      	uxtb	r2, r3
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	0c1b      	lsrs	r3, r3, #16
 800213a:	b2db      	uxtb	r3, r3
 800213c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002140:	b2da      	uxtb	r2, r3
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d11a      	bne.n	8002182 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f000 f983 	bl	800245c <RTC_Bcd2ToByte>
 8002156:	4603      	mov	r3, r0
 8002158:	461a      	mov	r2, r3
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	785b      	ldrb	r3, [r3, #1]
 8002162:	4618      	mov	r0, r3
 8002164:	f000 f97a 	bl	800245c <RTC_Bcd2ToByte>
 8002168:	4603      	mov	r3, r0
 800216a:	461a      	mov	r2, r3
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	789b      	ldrb	r3, [r3, #2]
 8002174:	4618      	mov	r0, r3
 8002176:	f000 f971 	bl	800245c <RTC_Bcd2ToByte>
 800217a:	4603      	mov	r3, r0
 800217c:	461a      	mov	r2, r3
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3718      	adds	r7, #24
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800218c:	b590      	push	{r4, r7, lr}
 800218e:	b087      	sub	sp, #28
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	7f1b      	ldrb	r3, [r3, #28]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d101      	bne.n	80021a8 <HAL_RTC_SetDate+0x1c>
 80021a4:	2302      	movs	r3, #2
 80021a6:	e094      	b.n	80022d2 <HAL_RTC_SetDate+0x146>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2201      	movs	r2, #1
 80021ac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2202      	movs	r2, #2
 80021b2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10e      	bne.n	80021d8 <HAL_RTC_SetDate+0x4c>
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	785b      	ldrb	r3, [r3, #1]
 80021be:	f003 0310 	and.w	r3, r3, #16
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d008      	beq.n	80021d8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	785b      	ldrb	r3, [r3, #1]
 80021ca:	f023 0310 	bic.w	r3, r3, #16
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	330a      	adds	r3, #10
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d11c      	bne.n	8002218 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	78db      	ldrb	r3, [r3, #3]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 f91c 	bl	8002420 <RTC_ByteToBcd2>
 80021e8:	4603      	mov	r3, r0
 80021ea:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	785b      	ldrb	r3, [r3, #1]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f000 f915 	bl	8002420 <RTC_ByteToBcd2>
 80021f6:	4603      	mov	r3, r0
 80021f8:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80021fa:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	789b      	ldrb	r3, [r3, #2]
 8002200:	4618      	mov	r0, r3
 8002202:	f000 f90d 	bl	8002420 <RTC_ByteToBcd2>
 8002206:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002208:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002212:	4313      	orrs	r3, r2
 8002214:	617b      	str	r3, [r7, #20]
 8002216:	e00e      	b.n	8002236 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	78db      	ldrb	r3, [r3, #3]
 800221c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	785b      	ldrb	r3, [r3, #1]
 8002222:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002224:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800222a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002232:	4313      	orrs	r3, r2
 8002234:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	22ca      	movs	r2, #202	; 0xca
 800223c:	625a      	str	r2, [r3, #36]	; 0x24
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2253      	movs	r2, #83	; 0x53
 8002244:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f000 f8be 	bl	80023c8 <RTC_EnterInitMode>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00b      	beq.n	800226a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	22ff      	movs	r2, #255	; 0xff
 8002258:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2204      	movs	r2, #4
 800225e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e033      	b.n	80022d2 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002274:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002278:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68da      	ldr	r2, [r3, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002288:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 0320 	and.w	r3, r3, #32
 8002294:	2b00      	cmp	r3, #0
 8002296:	d111      	bne.n	80022bc <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f000 f86d 	bl	8002378 <HAL_RTC_WaitForSynchro>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00b      	beq.n	80022bc <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	22ff      	movs	r2, #255	; 0xff
 80022aa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2204      	movs	r2, #4
 80022b0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e00a      	b.n	80022d2 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	22ff      	movs	r2, #255	; 0xff
 80022c2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2201      	movs	r2, #1
 80022c8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80022d0:	2300      	movs	r3, #0
  }
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	371c      	adds	r7, #28
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd90      	pop	{r4, r7, pc}

080022da <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b086      	sub	sp, #24
 80022de:	af00      	add	r7, sp, #0
 80022e0:	60f8      	str	r0, [r7, #12]
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80022f4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80022f8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	0c1b      	lsrs	r3, r3, #16
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	0a1b      	lsrs	r3, r3, #8
 8002308:	b2db      	uxtb	r3, r3
 800230a:	f003 031f 	and.w	r3, r3, #31
 800230e:	b2da      	uxtb	r2, r3
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	b2db      	uxtb	r3, r3
 8002318:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800231c:	b2da      	uxtb	r2, r3
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	0b5b      	lsrs	r3, r3, #13
 8002326:	b2db      	uxtb	r3, r3
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	b2da      	uxtb	r2, r3
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d11a      	bne.n	800236e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	78db      	ldrb	r3, [r3, #3]
 800233c:	4618      	mov	r0, r3
 800233e:	f000 f88d 	bl	800245c <RTC_Bcd2ToByte>
 8002342:	4603      	mov	r3, r0
 8002344:	461a      	mov	r2, r3
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	785b      	ldrb	r3, [r3, #1]
 800234e:	4618      	mov	r0, r3
 8002350:	f000 f884 	bl	800245c <RTC_Bcd2ToByte>
 8002354:	4603      	mov	r3, r0
 8002356:	461a      	mov	r2, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	789b      	ldrb	r3, [r3, #2]
 8002360:	4618      	mov	r0, r3
 8002362:	f000 f87b 	bl	800245c <RTC_Bcd2ToByte>
 8002366:	4603      	mov	r3, r0
 8002368:	461a      	mov	r2, r3
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002380:	2300      	movs	r3, #0
 8002382:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68da      	ldr	r2, [r3, #12]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002392:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002394:	f7fe fc0a 	bl	8000bac <HAL_GetTick>
 8002398:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800239a:	e009      	b.n	80023b0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800239c:	f7fe fc06 	bl	8000bac <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023aa:	d901      	bls.n	80023b0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e007      	b.n	80023c0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	f003 0320 	and.w	r3, r3, #32
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0ee      	beq.n	800239c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d119      	bne.n	8002416 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f04f 32ff 	mov.w	r2, #4294967295
 80023ea:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80023ec:	f7fe fbde 	bl	8000bac <HAL_GetTick>
 80023f0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80023f2:	e009      	b.n	8002408 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80023f4:	f7fe fbda 	bl	8000bac <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002402:	d901      	bls.n	8002408 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e007      	b.n	8002418 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0ee      	beq.n	80023f4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800242a:	2300      	movs	r3, #0
 800242c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800242e:	e005      	b.n	800243c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	3301      	adds	r3, #1
 8002434:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002436:	79fb      	ldrb	r3, [r7, #7]
 8002438:	3b0a      	subs	r3, #10
 800243a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	2b09      	cmp	r3, #9
 8002440:	d8f6      	bhi.n	8002430 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	b2db      	uxtb	r3, r3
 8002446:	011b      	lsls	r3, r3, #4
 8002448:	b2da      	uxtb	r2, r3
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	4313      	orrs	r3, r2
 800244e:	b2db      	uxtb	r3, r3
}
 8002450:	4618      	mov	r0, r3
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	091b      	lsrs	r3, r3, #4
 800246e:	b2db      	uxtb	r3, r3
 8002470:	461a      	mov	r2, r3
 8002472:	4613      	mov	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800247c:	79fb      	ldrb	r3, [r7, #7]
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	b2da      	uxtb	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	b2db      	uxtb	r3, r3
 8002488:	4413      	add	r3, r2
 800248a:	b2db      	uxtb	r3, r3
}
 800248c:	4618      	mov	r0, r3
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8002498:	b480      	push	{r7}
 800249a:	b087      	sub	sp, #28
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	3350      	adds	r3, #80	; 0x50
 80024ae:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	4413      	add	r3, r2
 80024b8:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	601a      	str	r2, [r3, #0]
}
 80024c0:	bf00      	nop
 80024c2:	371c      	adds	r7, #28
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	3350      	adds	r3, #80	; 0x50
 80024e0:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	4413      	add	r3, r2
 80024ea:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	7f1b      	ldrb	r3, [r3, #28]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d101      	bne.n	8002512 <HAL_RTCEx_SetCalibrationOutPut+0x16>
 800250e:	2302      	movs	r3, #2
 8002510:	e030      	b.n	8002574 <HAL_RTCEx_SetCalibrationOutPut+0x78>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2201      	movs	r2, #1
 8002516:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2202      	movs	r2, #2
 800251c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	22ca      	movs	r2, #202	; 0xca
 8002524:	625a      	str	r2, [r3, #36]	; 0x24
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2253      	movs	r2, #83	; 0x53
 800252c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 800253c:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6899      	ldr	r1, [r3, #8]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	609a      	str	r2, [r3, #8]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800255c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	22ff      	movs	r2, #255	; 0xff
 8002564:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <__errno>:
 8002580:	4b01      	ldr	r3, [pc, #4]	; (8002588 <__errno+0x8>)
 8002582:	6818      	ldr	r0, [r3, #0]
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	2000000c 	.word	0x2000000c

0800258c <__libc_init_array>:
 800258c:	b570      	push	{r4, r5, r6, lr}
 800258e:	4d0d      	ldr	r5, [pc, #52]	; (80025c4 <__libc_init_array+0x38>)
 8002590:	4c0d      	ldr	r4, [pc, #52]	; (80025c8 <__libc_init_array+0x3c>)
 8002592:	1b64      	subs	r4, r4, r5
 8002594:	10a4      	asrs	r4, r4, #2
 8002596:	2600      	movs	r6, #0
 8002598:	42a6      	cmp	r6, r4
 800259a:	d109      	bne.n	80025b0 <__libc_init_array+0x24>
 800259c:	4d0b      	ldr	r5, [pc, #44]	; (80025cc <__libc_init_array+0x40>)
 800259e:	4c0c      	ldr	r4, [pc, #48]	; (80025d0 <__libc_init_array+0x44>)
 80025a0:	f000 fc56 	bl	8002e50 <_init>
 80025a4:	1b64      	subs	r4, r4, r5
 80025a6:	10a4      	asrs	r4, r4, #2
 80025a8:	2600      	movs	r6, #0
 80025aa:	42a6      	cmp	r6, r4
 80025ac:	d105      	bne.n	80025ba <__libc_init_array+0x2e>
 80025ae:	bd70      	pop	{r4, r5, r6, pc}
 80025b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80025b4:	4798      	blx	r3
 80025b6:	3601      	adds	r6, #1
 80025b8:	e7ee      	b.n	8002598 <__libc_init_array+0xc>
 80025ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80025be:	4798      	blx	r3
 80025c0:	3601      	adds	r6, #1
 80025c2:	e7f2      	b.n	80025aa <__libc_init_array+0x1e>
 80025c4:	08002ed4 	.word	0x08002ed4
 80025c8:	08002ed4 	.word	0x08002ed4
 80025cc:	08002ed4 	.word	0x08002ed4
 80025d0:	08002ed8 	.word	0x08002ed8

080025d4 <memset>:
 80025d4:	4402      	add	r2, r0
 80025d6:	4603      	mov	r3, r0
 80025d8:	4293      	cmp	r3, r2
 80025da:	d100      	bne.n	80025de <memset+0xa>
 80025dc:	4770      	bx	lr
 80025de:	f803 1b01 	strb.w	r1, [r3], #1
 80025e2:	e7f9      	b.n	80025d8 <memset+0x4>

080025e4 <siprintf>:
 80025e4:	b40e      	push	{r1, r2, r3}
 80025e6:	b500      	push	{lr}
 80025e8:	b09c      	sub	sp, #112	; 0x70
 80025ea:	ab1d      	add	r3, sp, #116	; 0x74
 80025ec:	9002      	str	r0, [sp, #8]
 80025ee:	9006      	str	r0, [sp, #24]
 80025f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80025f4:	4809      	ldr	r0, [pc, #36]	; (800261c <siprintf+0x38>)
 80025f6:	9107      	str	r1, [sp, #28]
 80025f8:	9104      	str	r1, [sp, #16]
 80025fa:	4909      	ldr	r1, [pc, #36]	; (8002620 <siprintf+0x3c>)
 80025fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8002600:	9105      	str	r1, [sp, #20]
 8002602:	6800      	ldr	r0, [r0, #0]
 8002604:	9301      	str	r3, [sp, #4]
 8002606:	a902      	add	r1, sp, #8
 8002608:	f000 f870 	bl	80026ec <_svfiprintf_r>
 800260c:	9b02      	ldr	r3, [sp, #8]
 800260e:	2200      	movs	r2, #0
 8002610:	701a      	strb	r2, [r3, #0]
 8002612:	b01c      	add	sp, #112	; 0x70
 8002614:	f85d eb04 	ldr.w	lr, [sp], #4
 8002618:	b003      	add	sp, #12
 800261a:	4770      	bx	lr
 800261c:	2000000c 	.word	0x2000000c
 8002620:	ffff0208 	.word	0xffff0208

08002624 <strcpy>:
 8002624:	4603      	mov	r3, r0
 8002626:	f811 2b01 	ldrb.w	r2, [r1], #1
 800262a:	f803 2b01 	strb.w	r2, [r3], #1
 800262e:	2a00      	cmp	r2, #0
 8002630:	d1f9      	bne.n	8002626 <strcpy+0x2>
 8002632:	4770      	bx	lr

08002634 <__ssputs_r>:
 8002634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002638:	688e      	ldr	r6, [r1, #8]
 800263a:	429e      	cmp	r6, r3
 800263c:	4682      	mov	sl, r0
 800263e:	460c      	mov	r4, r1
 8002640:	4690      	mov	r8, r2
 8002642:	461f      	mov	r7, r3
 8002644:	d838      	bhi.n	80026b8 <__ssputs_r+0x84>
 8002646:	898a      	ldrh	r2, [r1, #12]
 8002648:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800264c:	d032      	beq.n	80026b4 <__ssputs_r+0x80>
 800264e:	6825      	ldr	r5, [r4, #0]
 8002650:	6909      	ldr	r1, [r1, #16]
 8002652:	eba5 0901 	sub.w	r9, r5, r1
 8002656:	6965      	ldr	r5, [r4, #20]
 8002658:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800265c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002660:	3301      	adds	r3, #1
 8002662:	444b      	add	r3, r9
 8002664:	106d      	asrs	r5, r5, #1
 8002666:	429d      	cmp	r5, r3
 8002668:	bf38      	it	cc
 800266a:	461d      	movcc	r5, r3
 800266c:	0553      	lsls	r3, r2, #21
 800266e:	d531      	bpl.n	80026d4 <__ssputs_r+0xa0>
 8002670:	4629      	mov	r1, r5
 8002672:	f000 fb47 	bl	8002d04 <_malloc_r>
 8002676:	4606      	mov	r6, r0
 8002678:	b950      	cbnz	r0, 8002690 <__ssputs_r+0x5c>
 800267a:	230c      	movs	r3, #12
 800267c:	f8ca 3000 	str.w	r3, [sl]
 8002680:	89a3      	ldrh	r3, [r4, #12]
 8002682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002686:	81a3      	strh	r3, [r4, #12]
 8002688:	f04f 30ff 	mov.w	r0, #4294967295
 800268c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002690:	6921      	ldr	r1, [r4, #16]
 8002692:	464a      	mov	r2, r9
 8002694:	f000 fabe 	bl	8002c14 <memcpy>
 8002698:	89a3      	ldrh	r3, [r4, #12]
 800269a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800269e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026a2:	81a3      	strh	r3, [r4, #12]
 80026a4:	6126      	str	r6, [r4, #16]
 80026a6:	6165      	str	r5, [r4, #20]
 80026a8:	444e      	add	r6, r9
 80026aa:	eba5 0509 	sub.w	r5, r5, r9
 80026ae:	6026      	str	r6, [r4, #0]
 80026b0:	60a5      	str	r5, [r4, #8]
 80026b2:	463e      	mov	r6, r7
 80026b4:	42be      	cmp	r6, r7
 80026b6:	d900      	bls.n	80026ba <__ssputs_r+0x86>
 80026b8:	463e      	mov	r6, r7
 80026ba:	4632      	mov	r2, r6
 80026bc:	6820      	ldr	r0, [r4, #0]
 80026be:	4641      	mov	r1, r8
 80026c0:	f000 fab6 	bl	8002c30 <memmove>
 80026c4:	68a3      	ldr	r3, [r4, #8]
 80026c6:	6822      	ldr	r2, [r4, #0]
 80026c8:	1b9b      	subs	r3, r3, r6
 80026ca:	4432      	add	r2, r6
 80026cc:	60a3      	str	r3, [r4, #8]
 80026ce:	6022      	str	r2, [r4, #0]
 80026d0:	2000      	movs	r0, #0
 80026d2:	e7db      	b.n	800268c <__ssputs_r+0x58>
 80026d4:	462a      	mov	r2, r5
 80026d6:	f000 fb6f 	bl	8002db8 <_realloc_r>
 80026da:	4606      	mov	r6, r0
 80026dc:	2800      	cmp	r0, #0
 80026de:	d1e1      	bne.n	80026a4 <__ssputs_r+0x70>
 80026e0:	6921      	ldr	r1, [r4, #16]
 80026e2:	4650      	mov	r0, sl
 80026e4:	f000 fabe 	bl	8002c64 <_free_r>
 80026e8:	e7c7      	b.n	800267a <__ssputs_r+0x46>
	...

080026ec <_svfiprintf_r>:
 80026ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026f0:	4698      	mov	r8, r3
 80026f2:	898b      	ldrh	r3, [r1, #12]
 80026f4:	061b      	lsls	r3, r3, #24
 80026f6:	b09d      	sub	sp, #116	; 0x74
 80026f8:	4607      	mov	r7, r0
 80026fa:	460d      	mov	r5, r1
 80026fc:	4614      	mov	r4, r2
 80026fe:	d50e      	bpl.n	800271e <_svfiprintf_r+0x32>
 8002700:	690b      	ldr	r3, [r1, #16]
 8002702:	b963      	cbnz	r3, 800271e <_svfiprintf_r+0x32>
 8002704:	2140      	movs	r1, #64	; 0x40
 8002706:	f000 fafd 	bl	8002d04 <_malloc_r>
 800270a:	6028      	str	r0, [r5, #0]
 800270c:	6128      	str	r0, [r5, #16]
 800270e:	b920      	cbnz	r0, 800271a <_svfiprintf_r+0x2e>
 8002710:	230c      	movs	r3, #12
 8002712:	603b      	str	r3, [r7, #0]
 8002714:	f04f 30ff 	mov.w	r0, #4294967295
 8002718:	e0d1      	b.n	80028be <_svfiprintf_r+0x1d2>
 800271a:	2340      	movs	r3, #64	; 0x40
 800271c:	616b      	str	r3, [r5, #20]
 800271e:	2300      	movs	r3, #0
 8002720:	9309      	str	r3, [sp, #36]	; 0x24
 8002722:	2320      	movs	r3, #32
 8002724:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002728:	f8cd 800c 	str.w	r8, [sp, #12]
 800272c:	2330      	movs	r3, #48	; 0x30
 800272e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80028d8 <_svfiprintf_r+0x1ec>
 8002732:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002736:	f04f 0901 	mov.w	r9, #1
 800273a:	4623      	mov	r3, r4
 800273c:	469a      	mov	sl, r3
 800273e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002742:	b10a      	cbz	r2, 8002748 <_svfiprintf_r+0x5c>
 8002744:	2a25      	cmp	r2, #37	; 0x25
 8002746:	d1f9      	bne.n	800273c <_svfiprintf_r+0x50>
 8002748:	ebba 0b04 	subs.w	fp, sl, r4
 800274c:	d00b      	beq.n	8002766 <_svfiprintf_r+0x7a>
 800274e:	465b      	mov	r3, fp
 8002750:	4622      	mov	r2, r4
 8002752:	4629      	mov	r1, r5
 8002754:	4638      	mov	r0, r7
 8002756:	f7ff ff6d 	bl	8002634 <__ssputs_r>
 800275a:	3001      	adds	r0, #1
 800275c:	f000 80aa 	beq.w	80028b4 <_svfiprintf_r+0x1c8>
 8002760:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002762:	445a      	add	r2, fp
 8002764:	9209      	str	r2, [sp, #36]	; 0x24
 8002766:	f89a 3000 	ldrb.w	r3, [sl]
 800276a:	2b00      	cmp	r3, #0
 800276c:	f000 80a2 	beq.w	80028b4 <_svfiprintf_r+0x1c8>
 8002770:	2300      	movs	r3, #0
 8002772:	f04f 32ff 	mov.w	r2, #4294967295
 8002776:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800277a:	f10a 0a01 	add.w	sl, sl, #1
 800277e:	9304      	str	r3, [sp, #16]
 8002780:	9307      	str	r3, [sp, #28]
 8002782:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002786:	931a      	str	r3, [sp, #104]	; 0x68
 8002788:	4654      	mov	r4, sl
 800278a:	2205      	movs	r2, #5
 800278c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002790:	4851      	ldr	r0, [pc, #324]	; (80028d8 <_svfiprintf_r+0x1ec>)
 8002792:	f7fd fd2d 	bl	80001f0 <memchr>
 8002796:	9a04      	ldr	r2, [sp, #16]
 8002798:	b9d8      	cbnz	r0, 80027d2 <_svfiprintf_r+0xe6>
 800279a:	06d0      	lsls	r0, r2, #27
 800279c:	bf44      	itt	mi
 800279e:	2320      	movmi	r3, #32
 80027a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80027a4:	0711      	lsls	r1, r2, #28
 80027a6:	bf44      	itt	mi
 80027a8:	232b      	movmi	r3, #43	; 0x2b
 80027aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80027ae:	f89a 3000 	ldrb.w	r3, [sl]
 80027b2:	2b2a      	cmp	r3, #42	; 0x2a
 80027b4:	d015      	beq.n	80027e2 <_svfiprintf_r+0xf6>
 80027b6:	9a07      	ldr	r2, [sp, #28]
 80027b8:	4654      	mov	r4, sl
 80027ba:	2000      	movs	r0, #0
 80027bc:	f04f 0c0a 	mov.w	ip, #10
 80027c0:	4621      	mov	r1, r4
 80027c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80027c6:	3b30      	subs	r3, #48	; 0x30
 80027c8:	2b09      	cmp	r3, #9
 80027ca:	d94e      	bls.n	800286a <_svfiprintf_r+0x17e>
 80027cc:	b1b0      	cbz	r0, 80027fc <_svfiprintf_r+0x110>
 80027ce:	9207      	str	r2, [sp, #28]
 80027d0:	e014      	b.n	80027fc <_svfiprintf_r+0x110>
 80027d2:	eba0 0308 	sub.w	r3, r0, r8
 80027d6:	fa09 f303 	lsl.w	r3, r9, r3
 80027da:	4313      	orrs	r3, r2
 80027dc:	9304      	str	r3, [sp, #16]
 80027de:	46a2      	mov	sl, r4
 80027e0:	e7d2      	b.n	8002788 <_svfiprintf_r+0x9c>
 80027e2:	9b03      	ldr	r3, [sp, #12]
 80027e4:	1d19      	adds	r1, r3, #4
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	9103      	str	r1, [sp, #12]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	bfbb      	ittet	lt
 80027ee:	425b      	neglt	r3, r3
 80027f0:	f042 0202 	orrlt.w	r2, r2, #2
 80027f4:	9307      	strge	r3, [sp, #28]
 80027f6:	9307      	strlt	r3, [sp, #28]
 80027f8:	bfb8      	it	lt
 80027fa:	9204      	strlt	r2, [sp, #16]
 80027fc:	7823      	ldrb	r3, [r4, #0]
 80027fe:	2b2e      	cmp	r3, #46	; 0x2e
 8002800:	d10c      	bne.n	800281c <_svfiprintf_r+0x130>
 8002802:	7863      	ldrb	r3, [r4, #1]
 8002804:	2b2a      	cmp	r3, #42	; 0x2a
 8002806:	d135      	bne.n	8002874 <_svfiprintf_r+0x188>
 8002808:	9b03      	ldr	r3, [sp, #12]
 800280a:	1d1a      	adds	r2, r3, #4
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	9203      	str	r2, [sp, #12]
 8002810:	2b00      	cmp	r3, #0
 8002812:	bfb8      	it	lt
 8002814:	f04f 33ff 	movlt.w	r3, #4294967295
 8002818:	3402      	adds	r4, #2
 800281a:	9305      	str	r3, [sp, #20]
 800281c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80028e8 <_svfiprintf_r+0x1fc>
 8002820:	7821      	ldrb	r1, [r4, #0]
 8002822:	2203      	movs	r2, #3
 8002824:	4650      	mov	r0, sl
 8002826:	f7fd fce3 	bl	80001f0 <memchr>
 800282a:	b140      	cbz	r0, 800283e <_svfiprintf_r+0x152>
 800282c:	2340      	movs	r3, #64	; 0x40
 800282e:	eba0 000a 	sub.w	r0, r0, sl
 8002832:	fa03 f000 	lsl.w	r0, r3, r0
 8002836:	9b04      	ldr	r3, [sp, #16]
 8002838:	4303      	orrs	r3, r0
 800283a:	3401      	adds	r4, #1
 800283c:	9304      	str	r3, [sp, #16]
 800283e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002842:	4826      	ldr	r0, [pc, #152]	; (80028dc <_svfiprintf_r+0x1f0>)
 8002844:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002848:	2206      	movs	r2, #6
 800284a:	f7fd fcd1 	bl	80001f0 <memchr>
 800284e:	2800      	cmp	r0, #0
 8002850:	d038      	beq.n	80028c4 <_svfiprintf_r+0x1d8>
 8002852:	4b23      	ldr	r3, [pc, #140]	; (80028e0 <_svfiprintf_r+0x1f4>)
 8002854:	bb1b      	cbnz	r3, 800289e <_svfiprintf_r+0x1b2>
 8002856:	9b03      	ldr	r3, [sp, #12]
 8002858:	3307      	adds	r3, #7
 800285a:	f023 0307 	bic.w	r3, r3, #7
 800285e:	3308      	adds	r3, #8
 8002860:	9303      	str	r3, [sp, #12]
 8002862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002864:	4433      	add	r3, r6
 8002866:	9309      	str	r3, [sp, #36]	; 0x24
 8002868:	e767      	b.n	800273a <_svfiprintf_r+0x4e>
 800286a:	fb0c 3202 	mla	r2, ip, r2, r3
 800286e:	460c      	mov	r4, r1
 8002870:	2001      	movs	r0, #1
 8002872:	e7a5      	b.n	80027c0 <_svfiprintf_r+0xd4>
 8002874:	2300      	movs	r3, #0
 8002876:	3401      	adds	r4, #1
 8002878:	9305      	str	r3, [sp, #20]
 800287a:	4619      	mov	r1, r3
 800287c:	f04f 0c0a 	mov.w	ip, #10
 8002880:	4620      	mov	r0, r4
 8002882:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002886:	3a30      	subs	r2, #48	; 0x30
 8002888:	2a09      	cmp	r2, #9
 800288a:	d903      	bls.n	8002894 <_svfiprintf_r+0x1a8>
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0c5      	beq.n	800281c <_svfiprintf_r+0x130>
 8002890:	9105      	str	r1, [sp, #20]
 8002892:	e7c3      	b.n	800281c <_svfiprintf_r+0x130>
 8002894:	fb0c 2101 	mla	r1, ip, r1, r2
 8002898:	4604      	mov	r4, r0
 800289a:	2301      	movs	r3, #1
 800289c:	e7f0      	b.n	8002880 <_svfiprintf_r+0x194>
 800289e:	ab03      	add	r3, sp, #12
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	462a      	mov	r2, r5
 80028a4:	4b0f      	ldr	r3, [pc, #60]	; (80028e4 <_svfiprintf_r+0x1f8>)
 80028a6:	a904      	add	r1, sp, #16
 80028a8:	4638      	mov	r0, r7
 80028aa:	f3af 8000 	nop.w
 80028ae:	1c42      	adds	r2, r0, #1
 80028b0:	4606      	mov	r6, r0
 80028b2:	d1d6      	bne.n	8002862 <_svfiprintf_r+0x176>
 80028b4:	89ab      	ldrh	r3, [r5, #12]
 80028b6:	065b      	lsls	r3, r3, #25
 80028b8:	f53f af2c 	bmi.w	8002714 <_svfiprintf_r+0x28>
 80028bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80028be:	b01d      	add	sp, #116	; 0x74
 80028c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028c4:	ab03      	add	r3, sp, #12
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	462a      	mov	r2, r5
 80028ca:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <_svfiprintf_r+0x1f8>)
 80028cc:	a904      	add	r1, sp, #16
 80028ce:	4638      	mov	r0, r7
 80028d0:	f000 f87a 	bl	80029c8 <_printf_i>
 80028d4:	e7eb      	b.n	80028ae <_svfiprintf_r+0x1c2>
 80028d6:	bf00      	nop
 80028d8:	08002e98 	.word	0x08002e98
 80028dc:	08002ea2 	.word	0x08002ea2
 80028e0:	00000000 	.word	0x00000000
 80028e4:	08002635 	.word	0x08002635
 80028e8:	08002e9e 	.word	0x08002e9e

080028ec <_printf_common>:
 80028ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028f0:	4616      	mov	r6, r2
 80028f2:	4699      	mov	r9, r3
 80028f4:	688a      	ldr	r2, [r1, #8]
 80028f6:	690b      	ldr	r3, [r1, #16]
 80028f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80028fc:	4293      	cmp	r3, r2
 80028fe:	bfb8      	it	lt
 8002900:	4613      	movlt	r3, r2
 8002902:	6033      	str	r3, [r6, #0]
 8002904:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002908:	4607      	mov	r7, r0
 800290a:	460c      	mov	r4, r1
 800290c:	b10a      	cbz	r2, 8002912 <_printf_common+0x26>
 800290e:	3301      	adds	r3, #1
 8002910:	6033      	str	r3, [r6, #0]
 8002912:	6823      	ldr	r3, [r4, #0]
 8002914:	0699      	lsls	r1, r3, #26
 8002916:	bf42      	ittt	mi
 8002918:	6833      	ldrmi	r3, [r6, #0]
 800291a:	3302      	addmi	r3, #2
 800291c:	6033      	strmi	r3, [r6, #0]
 800291e:	6825      	ldr	r5, [r4, #0]
 8002920:	f015 0506 	ands.w	r5, r5, #6
 8002924:	d106      	bne.n	8002934 <_printf_common+0x48>
 8002926:	f104 0a19 	add.w	sl, r4, #25
 800292a:	68e3      	ldr	r3, [r4, #12]
 800292c:	6832      	ldr	r2, [r6, #0]
 800292e:	1a9b      	subs	r3, r3, r2
 8002930:	42ab      	cmp	r3, r5
 8002932:	dc26      	bgt.n	8002982 <_printf_common+0x96>
 8002934:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002938:	1e13      	subs	r3, r2, #0
 800293a:	6822      	ldr	r2, [r4, #0]
 800293c:	bf18      	it	ne
 800293e:	2301      	movne	r3, #1
 8002940:	0692      	lsls	r2, r2, #26
 8002942:	d42b      	bmi.n	800299c <_printf_common+0xb0>
 8002944:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002948:	4649      	mov	r1, r9
 800294a:	4638      	mov	r0, r7
 800294c:	47c0      	blx	r8
 800294e:	3001      	adds	r0, #1
 8002950:	d01e      	beq.n	8002990 <_printf_common+0xa4>
 8002952:	6823      	ldr	r3, [r4, #0]
 8002954:	68e5      	ldr	r5, [r4, #12]
 8002956:	6832      	ldr	r2, [r6, #0]
 8002958:	f003 0306 	and.w	r3, r3, #6
 800295c:	2b04      	cmp	r3, #4
 800295e:	bf08      	it	eq
 8002960:	1aad      	subeq	r5, r5, r2
 8002962:	68a3      	ldr	r3, [r4, #8]
 8002964:	6922      	ldr	r2, [r4, #16]
 8002966:	bf0c      	ite	eq
 8002968:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800296c:	2500      	movne	r5, #0
 800296e:	4293      	cmp	r3, r2
 8002970:	bfc4      	itt	gt
 8002972:	1a9b      	subgt	r3, r3, r2
 8002974:	18ed      	addgt	r5, r5, r3
 8002976:	2600      	movs	r6, #0
 8002978:	341a      	adds	r4, #26
 800297a:	42b5      	cmp	r5, r6
 800297c:	d11a      	bne.n	80029b4 <_printf_common+0xc8>
 800297e:	2000      	movs	r0, #0
 8002980:	e008      	b.n	8002994 <_printf_common+0xa8>
 8002982:	2301      	movs	r3, #1
 8002984:	4652      	mov	r2, sl
 8002986:	4649      	mov	r1, r9
 8002988:	4638      	mov	r0, r7
 800298a:	47c0      	blx	r8
 800298c:	3001      	adds	r0, #1
 800298e:	d103      	bne.n	8002998 <_printf_common+0xac>
 8002990:	f04f 30ff 	mov.w	r0, #4294967295
 8002994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002998:	3501      	adds	r5, #1
 800299a:	e7c6      	b.n	800292a <_printf_common+0x3e>
 800299c:	18e1      	adds	r1, r4, r3
 800299e:	1c5a      	adds	r2, r3, #1
 80029a0:	2030      	movs	r0, #48	; 0x30
 80029a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80029a6:	4422      	add	r2, r4
 80029a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80029ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80029b0:	3302      	adds	r3, #2
 80029b2:	e7c7      	b.n	8002944 <_printf_common+0x58>
 80029b4:	2301      	movs	r3, #1
 80029b6:	4622      	mov	r2, r4
 80029b8:	4649      	mov	r1, r9
 80029ba:	4638      	mov	r0, r7
 80029bc:	47c0      	blx	r8
 80029be:	3001      	adds	r0, #1
 80029c0:	d0e6      	beq.n	8002990 <_printf_common+0xa4>
 80029c2:	3601      	adds	r6, #1
 80029c4:	e7d9      	b.n	800297a <_printf_common+0x8e>
	...

080029c8 <_printf_i>:
 80029c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80029cc:	460c      	mov	r4, r1
 80029ce:	4691      	mov	r9, r2
 80029d0:	7e27      	ldrb	r7, [r4, #24]
 80029d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80029d4:	2f78      	cmp	r7, #120	; 0x78
 80029d6:	4680      	mov	r8, r0
 80029d8:	469a      	mov	sl, r3
 80029da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80029de:	d807      	bhi.n	80029f0 <_printf_i+0x28>
 80029e0:	2f62      	cmp	r7, #98	; 0x62
 80029e2:	d80a      	bhi.n	80029fa <_printf_i+0x32>
 80029e4:	2f00      	cmp	r7, #0
 80029e6:	f000 80d8 	beq.w	8002b9a <_printf_i+0x1d2>
 80029ea:	2f58      	cmp	r7, #88	; 0x58
 80029ec:	f000 80a3 	beq.w	8002b36 <_printf_i+0x16e>
 80029f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80029f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80029f8:	e03a      	b.n	8002a70 <_printf_i+0xa8>
 80029fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80029fe:	2b15      	cmp	r3, #21
 8002a00:	d8f6      	bhi.n	80029f0 <_printf_i+0x28>
 8002a02:	a001      	add	r0, pc, #4	; (adr r0, 8002a08 <_printf_i+0x40>)
 8002a04:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002a08:	08002a61 	.word	0x08002a61
 8002a0c:	08002a75 	.word	0x08002a75
 8002a10:	080029f1 	.word	0x080029f1
 8002a14:	080029f1 	.word	0x080029f1
 8002a18:	080029f1 	.word	0x080029f1
 8002a1c:	080029f1 	.word	0x080029f1
 8002a20:	08002a75 	.word	0x08002a75
 8002a24:	080029f1 	.word	0x080029f1
 8002a28:	080029f1 	.word	0x080029f1
 8002a2c:	080029f1 	.word	0x080029f1
 8002a30:	080029f1 	.word	0x080029f1
 8002a34:	08002b81 	.word	0x08002b81
 8002a38:	08002aa5 	.word	0x08002aa5
 8002a3c:	08002b63 	.word	0x08002b63
 8002a40:	080029f1 	.word	0x080029f1
 8002a44:	080029f1 	.word	0x080029f1
 8002a48:	08002ba3 	.word	0x08002ba3
 8002a4c:	080029f1 	.word	0x080029f1
 8002a50:	08002aa5 	.word	0x08002aa5
 8002a54:	080029f1 	.word	0x080029f1
 8002a58:	080029f1 	.word	0x080029f1
 8002a5c:	08002b6b 	.word	0x08002b6b
 8002a60:	680b      	ldr	r3, [r1, #0]
 8002a62:	1d1a      	adds	r2, r3, #4
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	600a      	str	r2, [r1, #0]
 8002a68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002a6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a70:	2301      	movs	r3, #1
 8002a72:	e0a3      	b.n	8002bbc <_printf_i+0x1f4>
 8002a74:	6825      	ldr	r5, [r4, #0]
 8002a76:	6808      	ldr	r0, [r1, #0]
 8002a78:	062e      	lsls	r6, r5, #24
 8002a7a:	f100 0304 	add.w	r3, r0, #4
 8002a7e:	d50a      	bpl.n	8002a96 <_printf_i+0xce>
 8002a80:	6805      	ldr	r5, [r0, #0]
 8002a82:	600b      	str	r3, [r1, #0]
 8002a84:	2d00      	cmp	r5, #0
 8002a86:	da03      	bge.n	8002a90 <_printf_i+0xc8>
 8002a88:	232d      	movs	r3, #45	; 0x2d
 8002a8a:	426d      	negs	r5, r5
 8002a8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a90:	485e      	ldr	r0, [pc, #376]	; (8002c0c <_printf_i+0x244>)
 8002a92:	230a      	movs	r3, #10
 8002a94:	e019      	b.n	8002aca <_printf_i+0x102>
 8002a96:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002a9a:	6805      	ldr	r5, [r0, #0]
 8002a9c:	600b      	str	r3, [r1, #0]
 8002a9e:	bf18      	it	ne
 8002aa0:	b22d      	sxthne	r5, r5
 8002aa2:	e7ef      	b.n	8002a84 <_printf_i+0xbc>
 8002aa4:	680b      	ldr	r3, [r1, #0]
 8002aa6:	6825      	ldr	r5, [r4, #0]
 8002aa8:	1d18      	adds	r0, r3, #4
 8002aaa:	6008      	str	r0, [r1, #0]
 8002aac:	0628      	lsls	r0, r5, #24
 8002aae:	d501      	bpl.n	8002ab4 <_printf_i+0xec>
 8002ab0:	681d      	ldr	r5, [r3, #0]
 8002ab2:	e002      	b.n	8002aba <_printf_i+0xf2>
 8002ab4:	0669      	lsls	r1, r5, #25
 8002ab6:	d5fb      	bpl.n	8002ab0 <_printf_i+0xe8>
 8002ab8:	881d      	ldrh	r5, [r3, #0]
 8002aba:	4854      	ldr	r0, [pc, #336]	; (8002c0c <_printf_i+0x244>)
 8002abc:	2f6f      	cmp	r7, #111	; 0x6f
 8002abe:	bf0c      	ite	eq
 8002ac0:	2308      	moveq	r3, #8
 8002ac2:	230a      	movne	r3, #10
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002aca:	6866      	ldr	r6, [r4, #4]
 8002acc:	60a6      	str	r6, [r4, #8]
 8002ace:	2e00      	cmp	r6, #0
 8002ad0:	bfa2      	ittt	ge
 8002ad2:	6821      	ldrge	r1, [r4, #0]
 8002ad4:	f021 0104 	bicge.w	r1, r1, #4
 8002ad8:	6021      	strge	r1, [r4, #0]
 8002ada:	b90d      	cbnz	r5, 8002ae0 <_printf_i+0x118>
 8002adc:	2e00      	cmp	r6, #0
 8002ade:	d04d      	beq.n	8002b7c <_printf_i+0x1b4>
 8002ae0:	4616      	mov	r6, r2
 8002ae2:	fbb5 f1f3 	udiv	r1, r5, r3
 8002ae6:	fb03 5711 	mls	r7, r3, r1, r5
 8002aea:	5dc7      	ldrb	r7, [r0, r7]
 8002aec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002af0:	462f      	mov	r7, r5
 8002af2:	42bb      	cmp	r3, r7
 8002af4:	460d      	mov	r5, r1
 8002af6:	d9f4      	bls.n	8002ae2 <_printf_i+0x11a>
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	d10b      	bne.n	8002b14 <_printf_i+0x14c>
 8002afc:	6823      	ldr	r3, [r4, #0]
 8002afe:	07df      	lsls	r7, r3, #31
 8002b00:	d508      	bpl.n	8002b14 <_printf_i+0x14c>
 8002b02:	6923      	ldr	r3, [r4, #16]
 8002b04:	6861      	ldr	r1, [r4, #4]
 8002b06:	4299      	cmp	r1, r3
 8002b08:	bfde      	ittt	le
 8002b0a:	2330      	movle	r3, #48	; 0x30
 8002b0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002b10:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002b14:	1b92      	subs	r2, r2, r6
 8002b16:	6122      	str	r2, [r4, #16]
 8002b18:	f8cd a000 	str.w	sl, [sp]
 8002b1c:	464b      	mov	r3, r9
 8002b1e:	aa03      	add	r2, sp, #12
 8002b20:	4621      	mov	r1, r4
 8002b22:	4640      	mov	r0, r8
 8002b24:	f7ff fee2 	bl	80028ec <_printf_common>
 8002b28:	3001      	adds	r0, #1
 8002b2a:	d14c      	bne.n	8002bc6 <_printf_i+0x1fe>
 8002b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b30:	b004      	add	sp, #16
 8002b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b36:	4835      	ldr	r0, [pc, #212]	; (8002c0c <_printf_i+0x244>)
 8002b38:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002b3c:	6823      	ldr	r3, [r4, #0]
 8002b3e:	680e      	ldr	r6, [r1, #0]
 8002b40:	061f      	lsls	r7, r3, #24
 8002b42:	f856 5b04 	ldr.w	r5, [r6], #4
 8002b46:	600e      	str	r6, [r1, #0]
 8002b48:	d514      	bpl.n	8002b74 <_printf_i+0x1ac>
 8002b4a:	07d9      	lsls	r1, r3, #31
 8002b4c:	bf44      	itt	mi
 8002b4e:	f043 0320 	orrmi.w	r3, r3, #32
 8002b52:	6023      	strmi	r3, [r4, #0]
 8002b54:	b91d      	cbnz	r5, 8002b5e <_printf_i+0x196>
 8002b56:	6823      	ldr	r3, [r4, #0]
 8002b58:	f023 0320 	bic.w	r3, r3, #32
 8002b5c:	6023      	str	r3, [r4, #0]
 8002b5e:	2310      	movs	r3, #16
 8002b60:	e7b0      	b.n	8002ac4 <_printf_i+0xfc>
 8002b62:	6823      	ldr	r3, [r4, #0]
 8002b64:	f043 0320 	orr.w	r3, r3, #32
 8002b68:	6023      	str	r3, [r4, #0]
 8002b6a:	2378      	movs	r3, #120	; 0x78
 8002b6c:	4828      	ldr	r0, [pc, #160]	; (8002c10 <_printf_i+0x248>)
 8002b6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002b72:	e7e3      	b.n	8002b3c <_printf_i+0x174>
 8002b74:	065e      	lsls	r6, r3, #25
 8002b76:	bf48      	it	mi
 8002b78:	b2ad      	uxthmi	r5, r5
 8002b7a:	e7e6      	b.n	8002b4a <_printf_i+0x182>
 8002b7c:	4616      	mov	r6, r2
 8002b7e:	e7bb      	b.n	8002af8 <_printf_i+0x130>
 8002b80:	680b      	ldr	r3, [r1, #0]
 8002b82:	6826      	ldr	r6, [r4, #0]
 8002b84:	6960      	ldr	r0, [r4, #20]
 8002b86:	1d1d      	adds	r5, r3, #4
 8002b88:	600d      	str	r5, [r1, #0]
 8002b8a:	0635      	lsls	r5, r6, #24
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	d501      	bpl.n	8002b94 <_printf_i+0x1cc>
 8002b90:	6018      	str	r0, [r3, #0]
 8002b92:	e002      	b.n	8002b9a <_printf_i+0x1d2>
 8002b94:	0671      	lsls	r1, r6, #25
 8002b96:	d5fb      	bpl.n	8002b90 <_printf_i+0x1c8>
 8002b98:	8018      	strh	r0, [r3, #0]
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	6123      	str	r3, [r4, #16]
 8002b9e:	4616      	mov	r6, r2
 8002ba0:	e7ba      	b.n	8002b18 <_printf_i+0x150>
 8002ba2:	680b      	ldr	r3, [r1, #0]
 8002ba4:	1d1a      	adds	r2, r3, #4
 8002ba6:	600a      	str	r2, [r1, #0]
 8002ba8:	681e      	ldr	r6, [r3, #0]
 8002baa:	6862      	ldr	r2, [r4, #4]
 8002bac:	2100      	movs	r1, #0
 8002bae:	4630      	mov	r0, r6
 8002bb0:	f7fd fb1e 	bl	80001f0 <memchr>
 8002bb4:	b108      	cbz	r0, 8002bba <_printf_i+0x1f2>
 8002bb6:	1b80      	subs	r0, r0, r6
 8002bb8:	6060      	str	r0, [r4, #4]
 8002bba:	6863      	ldr	r3, [r4, #4]
 8002bbc:	6123      	str	r3, [r4, #16]
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bc4:	e7a8      	b.n	8002b18 <_printf_i+0x150>
 8002bc6:	6923      	ldr	r3, [r4, #16]
 8002bc8:	4632      	mov	r2, r6
 8002bca:	4649      	mov	r1, r9
 8002bcc:	4640      	mov	r0, r8
 8002bce:	47d0      	blx	sl
 8002bd0:	3001      	adds	r0, #1
 8002bd2:	d0ab      	beq.n	8002b2c <_printf_i+0x164>
 8002bd4:	6823      	ldr	r3, [r4, #0]
 8002bd6:	079b      	lsls	r3, r3, #30
 8002bd8:	d413      	bmi.n	8002c02 <_printf_i+0x23a>
 8002bda:	68e0      	ldr	r0, [r4, #12]
 8002bdc:	9b03      	ldr	r3, [sp, #12]
 8002bde:	4298      	cmp	r0, r3
 8002be0:	bfb8      	it	lt
 8002be2:	4618      	movlt	r0, r3
 8002be4:	e7a4      	b.n	8002b30 <_printf_i+0x168>
 8002be6:	2301      	movs	r3, #1
 8002be8:	4632      	mov	r2, r6
 8002bea:	4649      	mov	r1, r9
 8002bec:	4640      	mov	r0, r8
 8002bee:	47d0      	blx	sl
 8002bf0:	3001      	adds	r0, #1
 8002bf2:	d09b      	beq.n	8002b2c <_printf_i+0x164>
 8002bf4:	3501      	adds	r5, #1
 8002bf6:	68e3      	ldr	r3, [r4, #12]
 8002bf8:	9903      	ldr	r1, [sp, #12]
 8002bfa:	1a5b      	subs	r3, r3, r1
 8002bfc:	42ab      	cmp	r3, r5
 8002bfe:	dcf2      	bgt.n	8002be6 <_printf_i+0x21e>
 8002c00:	e7eb      	b.n	8002bda <_printf_i+0x212>
 8002c02:	2500      	movs	r5, #0
 8002c04:	f104 0619 	add.w	r6, r4, #25
 8002c08:	e7f5      	b.n	8002bf6 <_printf_i+0x22e>
 8002c0a:	bf00      	nop
 8002c0c:	08002ea9 	.word	0x08002ea9
 8002c10:	08002eba 	.word	0x08002eba

08002c14 <memcpy>:
 8002c14:	440a      	add	r2, r1
 8002c16:	4291      	cmp	r1, r2
 8002c18:	f100 33ff 	add.w	r3, r0, #4294967295
 8002c1c:	d100      	bne.n	8002c20 <memcpy+0xc>
 8002c1e:	4770      	bx	lr
 8002c20:	b510      	push	{r4, lr}
 8002c22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002c26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002c2a:	4291      	cmp	r1, r2
 8002c2c:	d1f9      	bne.n	8002c22 <memcpy+0xe>
 8002c2e:	bd10      	pop	{r4, pc}

08002c30 <memmove>:
 8002c30:	4288      	cmp	r0, r1
 8002c32:	b510      	push	{r4, lr}
 8002c34:	eb01 0402 	add.w	r4, r1, r2
 8002c38:	d902      	bls.n	8002c40 <memmove+0x10>
 8002c3a:	4284      	cmp	r4, r0
 8002c3c:	4623      	mov	r3, r4
 8002c3e:	d807      	bhi.n	8002c50 <memmove+0x20>
 8002c40:	1e43      	subs	r3, r0, #1
 8002c42:	42a1      	cmp	r1, r4
 8002c44:	d008      	beq.n	8002c58 <memmove+0x28>
 8002c46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002c4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002c4e:	e7f8      	b.n	8002c42 <memmove+0x12>
 8002c50:	4402      	add	r2, r0
 8002c52:	4601      	mov	r1, r0
 8002c54:	428a      	cmp	r2, r1
 8002c56:	d100      	bne.n	8002c5a <memmove+0x2a>
 8002c58:	bd10      	pop	{r4, pc}
 8002c5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002c5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002c62:	e7f7      	b.n	8002c54 <memmove+0x24>

08002c64 <_free_r>:
 8002c64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002c66:	2900      	cmp	r1, #0
 8002c68:	d048      	beq.n	8002cfc <_free_r+0x98>
 8002c6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c6e:	9001      	str	r0, [sp, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f1a1 0404 	sub.w	r4, r1, #4
 8002c76:	bfb8      	it	lt
 8002c78:	18e4      	addlt	r4, r4, r3
 8002c7a:	f000 f8d3 	bl	8002e24 <__malloc_lock>
 8002c7e:	4a20      	ldr	r2, [pc, #128]	; (8002d00 <_free_r+0x9c>)
 8002c80:	9801      	ldr	r0, [sp, #4]
 8002c82:	6813      	ldr	r3, [r2, #0]
 8002c84:	4615      	mov	r5, r2
 8002c86:	b933      	cbnz	r3, 8002c96 <_free_r+0x32>
 8002c88:	6063      	str	r3, [r4, #4]
 8002c8a:	6014      	str	r4, [r2, #0]
 8002c8c:	b003      	add	sp, #12
 8002c8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002c92:	f000 b8cd 	b.w	8002e30 <__malloc_unlock>
 8002c96:	42a3      	cmp	r3, r4
 8002c98:	d90b      	bls.n	8002cb2 <_free_r+0x4e>
 8002c9a:	6821      	ldr	r1, [r4, #0]
 8002c9c:	1862      	adds	r2, r4, r1
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	bf04      	itt	eq
 8002ca2:	681a      	ldreq	r2, [r3, #0]
 8002ca4:	685b      	ldreq	r3, [r3, #4]
 8002ca6:	6063      	str	r3, [r4, #4]
 8002ca8:	bf04      	itt	eq
 8002caa:	1852      	addeq	r2, r2, r1
 8002cac:	6022      	streq	r2, [r4, #0]
 8002cae:	602c      	str	r4, [r5, #0]
 8002cb0:	e7ec      	b.n	8002c8c <_free_r+0x28>
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	b10b      	cbz	r3, 8002cbc <_free_r+0x58>
 8002cb8:	42a3      	cmp	r3, r4
 8002cba:	d9fa      	bls.n	8002cb2 <_free_r+0x4e>
 8002cbc:	6811      	ldr	r1, [r2, #0]
 8002cbe:	1855      	adds	r5, r2, r1
 8002cc0:	42a5      	cmp	r5, r4
 8002cc2:	d10b      	bne.n	8002cdc <_free_r+0x78>
 8002cc4:	6824      	ldr	r4, [r4, #0]
 8002cc6:	4421      	add	r1, r4
 8002cc8:	1854      	adds	r4, r2, r1
 8002cca:	42a3      	cmp	r3, r4
 8002ccc:	6011      	str	r1, [r2, #0]
 8002cce:	d1dd      	bne.n	8002c8c <_free_r+0x28>
 8002cd0:	681c      	ldr	r4, [r3, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	6053      	str	r3, [r2, #4]
 8002cd6:	4421      	add	r1, r4
 8002cd8:	6011      	str	r1, [r2, #0]
 8002cda:	e7d7      	b.n	8002c8c <_free_r+0x28>
 8002cdc:	d902      	bls.n	8002ce4 <_free_r+0x80>
 8002cde:	230c      	movs	r3, #12
 8002ce0:	6003      	str	r3, [r0, #0]
 8002ce2:	e7d3      	b.n	8002c8c <_free_r+0x28>
 8002ce4:	6825      	ldr	r5, [r4, #0]
 8002ce6:	1961      	adds	r1, r4, r5
 8002ce8:	428b      	cmp	r3, r1
 8002cea:	bf04      	itt	eq
 8002cec:	6819      	ldreq	r1, [r3, #0]
 8002cee:	685b      	ldreq	r3, [r3, #4]
 8002cf0:	6063      	str	r3, [r4, #4]
 8002cf2:	bf04      	itt	eq
 8002cf4:	1949      	addeq	r1, r1, r5
 8002cf6:	6021      	streq	r1, [r4, #0]
 8002cf8:	6054      	str	r4, [r2, #4]
 8002cfa:	e7c7      	b.n	8002c8c <_free_r+0x28>
 8002cfc:	b003      	add	sp, #12
 8002cfe:	bd30      	pop	{r4, r5, pc}
 8002d00:	20000090 	.word	0x20000090

08002d04 <_malloc_r>:
 8002d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d06:	1ccd      	adds	r5, r1, #3
 8002d08:	f025 0503 	bic.w	r5, r5, #3
 8002d0c:	3508      	adds	r5, #8
 8002d0e:	2d0c      	cmp	r5, #12
 8002d10:	bf38      	it	cc
 8002d12:	250c      	movcc	r5, #12
 8002d14:	2d00      	cmp	r5, #0
 8002d16:	4606      	mov	r6, r0
 8002d18:	db01      	blt.n	8002d1e <_malloc_r+0x1a>
 8002d1a:	42a9      	cmp	r1, r5
 8002d1c:	d903      	bls.n	8002d26 <_malloc_r+0x22>
 8002d1e:	230c      	movs	r3, #12
 8002d20:	6033      	str	r3, [r6, #0]
 8002d22:	2000      	movs	r0, #0
 8002d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d26:	f000 f87d 	bl	8002e24 <__malloc_lock>
 8002d2a:	4921      	ldr	r1, [pc, #132]	; (8002db0 <_malloc_r+0xac>)
 8002d2c:	680a      	ldr	r2, [r1, #0]
 8002d2e:	4614      	mov	r4, r2
 8002d30:	b99c      	cbnz	r4, 8002d5a <_malloc_r+0x56>
 8002d32:	4f20      	ldr	r7, [pc, #128]	; (8002db4 <_malloc_r+0xb0>)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	b923      	cbnz	r3, 8002d42 <_malloc_r+0x3e>
 8002d38:	4621      	mov	r1, r4
 8002d3a:	4630      	mov	r0, r6
 8002d3c:	f000 f862 	bl	8002e04 <_sbrk_r>
 8002d40:	6038      	str	r0, [r7, #0]
 8002d42:	4629      	mov	r1, r5
 8002d44:	4630      	mov	r0, r6
 8002d46:	f000 f85d 	bl	8002e04 <_sbrk_r>
 8002d4a:	1c43      	adds	r3, r0, #1
 8002d4c:	d123      	bne.n	8002d96 <_malloc_r+0x92>
 8002d4e:	230c      	movs	r3, #12
 8002d50:	6033      	str	r3, [r6, #0]
 8002d52:	4630      	mov	r0, r6
 8002d54:	f000 f86c 	bl	8002e30 <__malloc_unlock>
 8002d58:	e7e3      	b.n	8002d22 <_malloc_r+0x1e>
 8002d5a:	6823      	ldr	r3, [r4, #0]
 8002d5c:	1b5b      	subs	r3, r3, r5
 8002d5e:	d417      	bmi.n	8002d90 <_malloc_r+0x8c>
 8002d60:	2b0b      	cmp	r3, #11
 8002d62:	d903      	bls.n	8002d6c <_malloc_r+0x68>
 8002d64:	6023      	str	r3, [r4, #0]
 8002d66:	441c      	add	r4, r3
 8002d68:	6025      	str	r5, [r4, #0]
 8002d6a:	e004      	b.n	8002d76 <_malloc_r+0x72>
 8002d6c:	6863      	ldr	r3, [r4, #4]
 8002d6e:	42a2      	cmp	r2, r4
 8002d70:	bf0c      	ite	eq
 8002d72:	600b      	streq	r3, [r1, #0]
 8002d74:	6053      	strne	r3, [r2, #4]
 8002d76:	4630      	mov	r0, r6
 8002d78:	f000 f85a 	bl	8002e30 <__malloc_unlock>
 8002d7c:	f104 000b 	add.w	r0, r4, #11
 8002d80:	1d23      	adds	r3, r4, #4
 8002d82:	f020 0007 	bic.w	r0, r0, #7
 8002d86:	1ac2      	subs	r2, r0, r3
 8002d88:	d0cc      	beq.n	8002d24 <_malloc_r+0x20>
 8002d8a:	1a1b      	subs	r3, r3, r0
 8002d8c:	50a3      	str	r3, [r4, r2]
 8002d8e:	e7c9      	b.n	8002d24 <_malloc_r+0x20>
 8002d90:	4622      	mov	r2, r4
 8002d92:	6864      	ldr	r4, [r4, #4]
 8002d94:	e7cc      	b.n	8002d30 <_malloc_r+0x2c>
 8002d96:	1cc4      	adds	r4, r0, #3
 8002d98:	f024 0403 	bic.w	r4, r4, #3
 8002d9c:	42a0      	cmp	r0, r4
 8002d9e:	d0e3      	beq.n	8002d68 <_malloc_r+0x64>
 8002da0:	1a21      	subs	r1, r4, r0
 8002da2:	4630      	mov	r0, r6
 8002da4:	f000 f82e 	bl	8002e04 <_sbrk_r>
 8002da8:	3001      	adds	r0, #1
 8002daa:	d1dd      	bne.n	8002d68 <_malloc_r+0x64>
 8002dac:	e7cf      	b.n	8002d4e <_malloc_r+0x4a>
 8002dae:	bf00      	nop
 8002db0:	20000090 	.word	0x20000090
 8002db4:	20000094 	.word	0x20000094

08002db8 <_realloc_r>:
 8002db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dba:	4607      	mov	r7, r0
 8002dbc:	4614      	mov	r4, r2
 8002dbe:	460e      	mov	r6, r1
 8002dc0:	b921      	cbnz	r1, 8002dcc <_realloc_r+0x14>
 8002dc2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002dc6:	4611      	mov	r1, r2
 8002dc8:	f7ff bf9c 	b.w	8002d04 <_malloc_r>
 8002dcc:	b922      	cbnz	r2, 8002dd8 <_realloc_r+0x20>
 8002dce:	f7ff ff49 	bl	8002c64 <_free_r>
 8002dd2:	4625      	mov	r5, r4
 8002dd4:	4628      	mov	r0, r5
 8002dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dd8:	f000 f830 	bl	8002e3c <_malloc_usable_size_r>
 8002ddc:	42a0      	cmp	r0, r4
 8002dde:	d20f      	bcs.n	8002e00 <_realloc_r+0x48>
 8002de0:	4621      	mov	r1, r4
 8002de2:	4638      	mov	r0, r7
 8002de4:	f7ff ff8e 	bl	8002d04 <_malloc_r>
 8002de8:	4605      	mov	r5, r0
 8002dea:	2800      	cmp	r0, #0
 8002dec:	d0f2      	beq.n	8002dd4 <_realloc_r+0x1c>
 8002dee:	4631      	mov	r1, r6
 8002df0:	4622      	mov	r2, r4
 8002df2:	f7ff ff0f 	bl	8002c14 <memcpy>
 8002df6:	4631      	mov	r1, r6
 8002df8:	4638      	mov	r0, r7
 8002dfa:	f7ff ff33 	bl	8002c64 <_free_r>
 8002dfe:	e7e9      	b.n	8002dd4 <_realloc_r+0x1c>
 8002e00:	4635      	mov	r5, r6
 8002e02:	e7e7      	b.n	8002dd4 <_realloc_r+0x1c>

08002e04 <_sbrk_r>:
 8002e04:	b538      	push	{r3, r4, r5, lr}
 8002e06:	4d06      	ldr	r5, [pc, #24]	; (8002e20 <_sbrk_r+0x1c>)
 8002e08:	2300      	movs	r3, #0
 8002e0a:	4604      	mov	r4, r0
 8002e0c:	4608      	mov	r0, r1
 8002e0e:	602b      	str	r3, [r5, #0]
 8002e10:	f7fd fdf4 	bl	80009fc <_sbrk>
 8002e14:	1c43      	adds	r3, r0, #1
 8002e16:	d102      	bne.n	8002e1e <_sbrk_r+0x1a>
 8002e18:	682b      	ldr	r3, [r5, #0]
 8002e1a:	b103      	cbz	r3, 8002e1e <_sbrk_r+0x1a>
 8002e1c:	6023      	str	r3, [r4, #0]
 8002e1e:	bd38      	pop	{r3, r4, r5, pc}
 8002e20:	200000d4 	.word	0x200000d4

08002e24 <__malloc_lock>:
 8002e24:	4801      	ldr	r0, [pc, #4]	; (8002e2c <__malloc_lock+0x8>)
 8002e26:	f000 b811 	b.w	8002e4c <__retarget_lock_acquire_recursive>
 8002e2a:	bf00      	nop
 8002e2c:	200000dc 	.word	0x200000dc

08002e30 <__malloc_unlock>:
 8002e30:	4801      	ldr	r0, [pc, #4]	; (8002e38 <__malloc_unlock+0x8>)
 8002e32:	f000 b80c 	b.w	8002e4e <__retarget_lock_release_recursive>
 8002e36:	bf00      	nop
 8002e38:	200000dc 	.word	0x200000dc

08002e3c <_malloc_usable_size_r>:
 8002e3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e40:	1f18      	subs	r0, r3, #4
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	bfbc      	itt	lt
 8002e46:	580b      	ldrlt	r3, [r1, r0]
 8002e48:	18c0      	addlt	r0, r0, r3
 8002e4a:	4770      	bx	lr

08002e4c <__retarget_lock_acquire_recursive>:
 8002e4c:	4770      	bx	lr

08002e4e <__retarget_lock_release_recursive>:
 8002e4e:	4770      	bx	lr

08002e50 <_init>:
 8002e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e52:	bf00      	nop
 8002e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e56:	bc08      	pop	{r3}
 8002e58:	469e      	mov	lr, r3
 8002e5a:	4770      	bx	lr

08002e5c <_fini>:
 8002e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e5e:	bf00      	nop
 8002e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e62:	bc08      	pop	{r3}
 8002e64:	469e      	mov	lr, r3
 8002e66:	4770      	bx	lr
