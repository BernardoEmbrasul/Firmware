
BootloaderComSTM32F427AGH6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08010000  08010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af38  080101b0  080101b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016fc  0801b0e8  0801b0e8  0000c0e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c7e4  0801c7e4  0000e068  2**0
                  CONTENTS
  4 .ARM          00000008  0801c7e4  0801c7e4  0000d7e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c7ec  0801c7ec  0000e068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c7ec  0801c7ec  0000d7ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c7f0  0801c7f0  0000d7f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0801c7f4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e068  2**0
                  CONTENTS
 10 .bss          000164a4  20000068  20000068  0000e068  2**2
                  ALLOC
 11 ._user_heap_stack 00000a04  2001650c  2001650c  0000e068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017d32  00000000  00000000  0000e098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e6d  00000000  00000000  00025dca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001560  00000000  00000000  0002ac38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001052  00000000  00000000  0002c198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002de80  00000000  00000000  0002d1ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021dd3  00000000  00000000  0005b06a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ecf28  00000000  00000000  0007ce3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00169d65  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005f18  00000000  00000000  00169da8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000081  00000000  00000000  0016fcc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080101b0 <__do_global_dtors_aux>:
 80101b0:	b510      	push	{r4, lr}
 80101b2:	4c05      	ldr	r4, [pc, #20]	@ (80101c8 <__do_global_dtors_aux+0x18>)
 80101b4:	7823      	ldrb	r3, [r4, #0]
 80101b6:	b933      	cbnz	r3, 80101c6 <__do_global_dtors_aux+0x16>
 80101b8:	4b04      	ldr	r3, [pc, #16]	@ (80101cc <__do_global_dtors_aux+0x1c>)
 80101ba:	b113      	cbz	r3, 80101c2 <__do_global_dtors_aux+0x12>
 80101bc:	4804      	ldr	r0, [pc, #16]	@ (80101d0 <__do_global_dtors_aux+0x20>)
 80101be:	f3af 8000 	nop.w
 80101c2:	2301      	movs	r3, #1
 80101c4:	7023      	strb	r3, [r4, #0]
 80101c6:	bd10      	pop	{r4, pc}
 80101c8:	20000068 	.word	0x20000068
 80101cc:	00000000 	.word	0x00000000
 80101d0:	0801b0d0 	.word	0x0801b0d0

080101d4 <frame_dummy>:
 80101d4:	b508      	push	{r3, lr}
 80101d6:	4b03      	ldr	r3, [pc, #12]	@ (80101e4 <frame_dummy+0x10>)
 80101d8:	b11b      	cbz	r3, 80101e2 <frame_dummy+0xe>
 80101da:	4903      	ldr	r1, [pc, #12]	@ (80101e8 <frame_dummy+0x14>)
 80101dc:	4803      	ldr	r0, [pc, #12]	@ (80101ec <frame_dummy+0x18>)
 80101de:	f3af 8000 	nop.w
 80101e2:	bd08      	pop	{r3, pc}
 80101e4:	00000000 	.word	0x00000000
 80101e8:	2000006c 	.word	0x2000006c
 80101ec:	0801b0d0 	.word	0x0801b0d0

080101f0 <memchr>:
 80101f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80101f4:	2a10      	cmp	r2, #16
 80101f6:	db2b      	blt.n	8010250 <memchr+0x60>
 80101f8:	f010 0f07 	tst.w	r0, #7
 80101fc:	d008      	beq.n	8010210 <memchr+0x20>
 80101fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010202:	3a01      	subs	r2, #1
 8010204:	428b      	cmp	r3, r1
 8010206:	d02d      	beq.n	8010264 <memchr+0x74>
 8010208:	f010 0f07 	tst.w	r0, #7
 801020c:	b342      	cbz	r2, 8010260 <memchr+0x70>
 801020e:	d1f6      	bne.n	80101fe <memchr+0xe>
 8010210:	b4f0      	push	{r4, r5, r6, r7}
 8010212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801021a:	f022 0407 	bic.w	r4, r2, #7
 801021e:	f07f 0700 	mvns.w	r7, #0
 8010222:	2300      	movs	r3, #0
 8010224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010228:	3c08      	subs	r4, #8
 801022a:	ea85 0501 	eor.w	r5, r5, r1
 801022e:	ea86 0601 	eor.w	r6, r6, r1
 8010232:	fa85 f547 	uadd8	r5, r5, r7
 8010236:	faa3 f587 	sel	r5, r3, r7
 801023a:	fa86 f647 	uadd8	r6, r6, r7
 801023e:	faa5 f687 	sel	r6, r5, r7
 8010242:	b98e      	cbnz	r6, 8010268 <memchr+0x78>
 8010244:	d1ee      	bne.n	8010224 <memchr+0x34>
 8010246:	bcf0      	pop	{r4, r5, r6, r7}
 8010248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801024c:	f002 0207 	and.w	r2, r2, #7
 8010250:	b132      	cbz	r2, 8010260 <memchr+0x70>
 8010252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010256:	3a01      	subs	r2, #1
 8010258:	ea83 0301 	eor.w	r3, r3, r1
 801025c:	b113      	cbz	r3, 8010264 <memchr+0x74>
 801025e:	d1f8      	bne.n	8010252 <memchr+0x62>
 8010260:	2000      	movs	r0, #0
 8010262:	4770      	bx	lr
 8010264:	3801      	subs	r0, #1
 8010266:	4770      	bx	lr
 8010268:	2d00      	cmp	r5, #0
 801026a:	bf06      	itte	eq
 801026c:	4635      	moveq	r5, r6
 801026e:	3803      	subeq	r0, #3
 8010270:	3807      	subne	r0, #7
 8010272:	f015 0f01 	tst.w	r5, #1
 8010276:	d107      	bne.n	8010288 <memchr+0x98>
 8010278:	3001      	adds	r0, #1
 801027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 801027e:	bf02      	ittt	eq
 8010280:	3001      	addeq	r0, #1
 8010282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8010286:	3001      	addeq	r0, #1
 8010288:	bcf0      	pop	{r4, r5, r6, r7}
 801028a:	3801      	subs	r0, #1
 801028c:	4770      	bx	lr
 801028e:	bf00      	nop

08010290 <__aeabi_uldivmod>:
 8010290:	b953      	cbnz	r3, 80102a8 <__aeabi_uldivmod+0x18>
 8010292:	b94a      	cbnz	r2, 80102a8 <__aeabi_uldivmod+0x18>
 8010294:	2900      	cmp	r1, #0
 8010296:	bf08      	it	eq
 8010298:	2800      	cmpeq	r0, #0
 801029a:	bf1c      	itt	ne
 801029c:	f04f 31ff 	movne.w	r1, #4294967295
 80102a0:	f04f 30ff 	movne.w	r0, #4294967295
 80102a4:	f000 b988 	b.w	80105b8 <__aeabi_idiv0>
 80102a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80102ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80102b0:	f000 f806 	bl	80102c0 <__udivmoddi4>
 80102b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80102b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80102bc:	b004      	add	sp, #16
 80102be:	4770      	bx	lr

080102c0 <__udivmoddi4>:
 80102c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102c4:	9d08      	ldr	r5, [sp, #32]
 80102c6:	468e      	mov	lr, r1
 80102c8:	4604      	mov	r4, r0
 80102ca:	4688      	mov	r8, r1
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d14a      	bne.n	8010366 <__udivmoddi4+0xa6>
 80102d0:	428a      	cmp	r2, r1
 80102d2:	4617      	mov	r7, r2
 80102d4:	d962      	bls.n	801039c <__udivmoddi4+0xdc>
 80102d6:	fab2 f682 	clz	r6, r2
 80102da:	b14e      	cbz	r6, 80102f0 <__udivmoddi4+0x30>
 80102dc:	f1c6 0320 	rsb	r3, r6, #32
 80102e0:	fa01 f806 	lsl.w	r8, r1, r6
 80102e4:	fa20 f303 	lsr.w	r3, r0, r3
 80102e8:	40b7      	lsls	r7, r6
 80102ea:	ea43 0808 	orr.w	r8, r3, r8
 80102ee:	40b4      	lsls	r4, r6
 80102f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80102f4:	fa1f fc87 	uxth.w	ip, r7
 80102f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80102fc:	0c23      	lsrs	r3, r4, #16
 80102fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8010302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8010306:	fb01 f20c 	mul.w	r2, r1, ip
 801030a:	429a      	cmp	r2, r3
 801030c:	d909      	bls.n	8010322 <__udivmoddi4+0x62>
 801030e:	18fb      	adds	r3, r7, r3
 8010310:	f101 30ff 	add.w	r0, r1, #4294967295
 8010314:	f080 80ea 	bcs.w	80104ec <__udivmoddi4+0x22c>
 8010318:	429a      	cmp	r2, r3
 801031a:	f240 80e7 	bls.w	80104ec <__udivmoddi4+0x22c>
 801031e:	3902      	subs	r1, #2
 8010320:	443b      	add	r3, r7
 8010322:	1a9a      	subs	r2, r3, r2
 8010324:	b2a3      	uxth	r3, r4
 8010326:	fbb2 f0fe 	udiv	r0, r2, lr
 801032a:	fb0e 2210 	mls	r2, lr, r0, r2
 801032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010332:	fb00 fc0c 	mul.w	ip, r0, ip
 8010336:	459c      	cmp	ip, r3
 8010338:	d909      	bls.n	801034e <__udivmoddi4+0x8e>
 801033a:	18fb      	adds	r3, r7, r3
 801033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8010340:	f080 80d6 	bcs.w	80104f0 <__udivmoddi4+0x230>
 8010344:	459c      	cmp	ip, r3
 8010346:	f240 80d3 	bls.w	80104f0 <__udivmoddi4+0x230>
 801034a:	443b      	add	r3, r7
 801034c:	3802      	subs	r0, #2
 801034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8010352:	eba3 030c 	sub.w	r3, r3, ip
 8010356:	2100      	movs	r1, #0
 8010358:	b11d      	cbz	r5, 8010362 <__udivmoddi4+0xa2>
 801035a:	40f3      	lsrs	r3, r6
 801035c:	2200      	movs	r2, #0
 801035e:	e9c5 3200 	strd	r3, r2, [r5]
 8010362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010366:	428b      	cmp	r3, r1
 8010368:	d905      	bls.n	8010376 <__udivmoddi4+0xb6>
 801036a:	b10d      	cbz	r5, 8010370 <__udivmoddi4+0xb0>
 801036c:	e9c5 0100 	strd	r0, r1, [r5]
 8010370:	2100      	movs	r1, #0
 8010372:	4608      	mov	r0, r1
 8010374:	e7f5      	b.n	8010362 <__udivmoddi4+0xa2>
 8010376:	fab3 f183 	clz	r1, r3
 801037a:	2900      	cmp	r1, #0
 801037c:	d146      	bne.n	801040c <__udivmoddi4+0x14c>
 801037e:	4573      	cmp	r3, lr
 8010380:	d302      	bcc.n	8010388 <__udivmoddi4+0xc8>
 8010382:	4282      	cmp	r2, r0
 8010384:	f200 8105 	bhi.w	8010592 <__udivmoddi4+0x2d2>
 8010388:	1a84      	subs	r4, r0, r2
 801038a:	eb6e 0203 	sbc.w	r2, lr, r3
 801038e:	2001      	movs	r0, #1
 8010390:	4690      	mov	r8, r2
 8010392:	2d00      	cmp	r5, #0
 8010394:	d0e5      	beq.n	8010362 <__udivmoddi4+0xa2>
 8010396:	e9c5 4800 	strd	r4, r8, [r5]
 801039a:	e7e2      	b.n	8010362 <__udivmoddi4+0xa2>
 801039c:	2a00      	cmp	r2, #0
 801039e:	f000 8090 	beq.w	80104c2 <__udivmoddi4+0x202>
 80103a2:	fab2 f682 	clz	r6, r2
 80103a6:	2e00      	cmp	r6, #0
 80103a8:	f040 80a4 	bne.w	80104f4 <__udivmoddi4+0x234>
 80103ac:	1a8a      	subs	r2, r1, r2
 80103ae:	0c03      	lsrs	r3, r0, #16
 80103b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80103b4:	b280      	uxth	r0, r0
 80103b6:	b2bc      	uxth	r4, r7
 80103b8:	2101      	movs	r1, #1
 80103ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80103be:	fb0e 221c 	mls	r2, lr, ip, r2
 80103c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80103c6:	fb04 f20c 	mul.w	r2, r4, ip
 80103ca:	429a      	cmp	r2, r3
 80103cc:	d907      	bls.n	80103de <__udivmoddi4+0x11e>
 80103ce:	18fb      	adds	r3, r7, r3
 80103d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80103d4:	d202      	bcs.n	80103dc <__udivmoddi4+0x11c>
 80103d6:	429a      	cmp	r2, r3
 80103d8:	f200 80e0 	bhi.w	801059c <__udivmoddi4+0x2dc>
 80103dc:	46c4      	mov	ip, r8
 80103de:	1a9b      	subs	r3, r3, r2
 80103e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80103e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80103e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80103ec:	fb02 f404 	mul.w	r4, r2, r4
 80103f0:	429c      	cmp	r4, r3
 80103f2:	d907      	bls.n	8010404 <__udivmoddi4+0x144>
 80103f4:	18fb      	adds	r3, r7, r3
 80103f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80103fa:	d202      	bcs.n	8010402 <__udivmoddi4+0x142>
 80103fc:	429c      	cmp	r4, r3
 80103fe:	f200 80ca 	bhi.w	8010596 <__udivmoddi4+0x2d6>
 8010402:	4602      	mov	r2, r0
 8010404:	1b1b      	subs	r3, r3, r4
 8010406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 801040a:	e7a5      	b.n	8010358 <__udivmoddi4+0x98>
 801040c:	f1c1 0620 	rsb	r6, r1, #32
 8010410:	408b      	lsls	r3, r1
 8010412:	fa22 f706 	lsr.w	r7, r2, r6
 8010416:	431f      	orrs	r7, r3
 8010418:	fa0e f401 	lsl.w	r4, lr, r1
 801041c:	fa20 f306 	lsr.w	r3, r0, r6
 8010420:	fa2e fe06 	lsr.w	lr, lr, r6
 8010424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8010428:	4323      	orrs	r3, r4
 801042a:	fa00 f801 	lsl.w	r8, r0, r1
 801042e:	fa1f fc87 	uxth.w	ip, r7
 8010432:	fbbe f0f9 	udiv	r0, lr, r9
 8010436:	0c1c      	lsrs	r4, r3, #16
 8010438:	fb09 ee10 	mls	lr, r9, r0, lr
 801043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8010440:	fb00 fe0c 	mul.w	lr, r0, ip
 8010444:	45a6      	cmp	lr, r4
 8010446:	fa02 f201 	lsl.w	r2, r2, r1
 801044a:	d909      	bls.n	8010460 <__udivmoddi4+0x1a0>
 801044c:	193c      	adds	r4, r7, r4
 801044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8010452:	f080 809c 	bcs.w	801058e <__udivmoddi4+0x2ce>
 8010456:	45a6      	cmp	lr, r4
 8010458:	f240 8099 	bls.w	801058e <__udivmoddi4+0x2ce>
 801045c:	3802      	subs	r0, #2
 801045e:	443c      	add	r4, r7
 8010460:	eba4 040e 	sub.w	r4, r4, lr
 8010464:	fa1f fe83 	uxth.w	lr, r3
 8010468:	fbb4 f3f9 	udiv	r3, r4, r9
 801046c:	fb09 4413 	mls	r4, r9, r3, r4
 8010470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8010474:	fb03 fc0c 	mul.w	ip, r3, ip
 8010478:	45a4      	cmp	ip, r4
 801047a:	d908      	bls.n	801048e <__udivmoddi4+0x1ce>
 801047c:	193c      	adds	r4, r7, r4
 801047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8010482:	f080 8082 	bcs.w	801058a <__udivmoddi4+0x2ca>
 8010486:	45a4      	cmp	ip, r4
 8010488:	d97f      	bls.n	801058a <__udivmoddi4+0x2ca>
 801048a:	3b02      	subs	r3, #2
 801048c:	443c      	add	r4, r7
 801048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8010492:	eba4 040c 	sub.w	r4, r4, ip
 8010496:	fba0 ec02 	umull	lr, ip, r0, r2
 801049a:	4564      	cmp	r4, ip
 801049c:	4673      	mov	r3, lr
 801049e:	46e1      	mov	r9, ip
 80104a0:	d362      	bcc.n	8010568 <__udivmoddi4+0x2a8>
 80104a2:	d05f      	beq.n	8010564 <__udivmoddi4+0x2a4>
 80104a4:	b15d      	cbz	r5, 80104be <__udivmoddi4+0x1fe>
 80104a6:	ebb8 0203 	subs.w	r2, r8, r3
 80104aa:	eb64 0409 	sbc.w	r4, r4, r9
 80104ae:	fa04 f606 	lsl.w	r6, r4, r6
 80104b2:	fa22 f301 	lsr.w	r3, r2, r1
 80104b6:	431e      	orrs	r6, r3
 80104b8:	40cc      	lsrs	r4, r1
 80104ba:	e9c5 6400 	strd	r6, r4, [r5]
 80104be:	2100      	movs	r1, #0
 80104c0:	e74f      	b.n	8010362 <__udivmoddi4+0xa2>
 80104c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80104c6:	0c01      	lsrs	r1, r0, #16
 80104c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80104cc:	b280      	uxth	r0, r0
 80104ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80104d2:	463b      	mov	r3, r7
 80104d4:	4638      	mov	r0, r7
 80104d6:	463c      	mov	r4, r7
 80104d8:	46b8      	mov	r8, r7
 80104da:	46be      	mov	lr, r7
 80104dc:	2620      	movs	r6, #32
 80104de:	fbb1 f1f7 	udiv	r1, r1, r7
 80104e2:	eba2 0208 	sub.w	r2, r2, r8
 80104e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80104ea:	e766      	b.n	80103ba <__udivmoddi4+0xfa>
 80104ec:	4601      	mov	r1, r0
 80104ee:	e718      	b.n	8010322 <__udivmoddi4+0x62>
 80104f0:	4610      	mov	r0, r2
 80104f2:	e72c      	b.n	801034e <__udivmoddi4+0x8e>
 80104f4:	f1c6 0220 	rsb	r2, r6, #32
 80104f8:	fa2e f302 	lsr.w	r3, lr, r2
 80104fc:	40b7      	lsls	r7, r6
 80104fe:	40b1      	lsls	r1, r6
 8010500:	fa20 f202 	lsr.w	r2, r0, r2
 8010504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8010508:	430a      	orrs	r2, r1
 801050a:	fbb3 f8fe 	udiv	r8, r3, lr
 801050e:	b2bc      	uxth	r4, r7
 8010510:	fb0e 3318 	mls	r3, lr, r8, r3
 8010514:	0c11      	lsrs	r1, r2, #16
 8010516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801051a:	fb08 f904 	mul.w	r9, r8, r4
 801051e:	40b0      	lsls	r0, r6
 8010520:	4589      	cmp	r9, r1
 8010522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8010526:	b280      	uxth	r0, r0
 8010528:	d93e      	bls.n	80105a8 <__udivmoddi4+0x2e8>
 801052a:	1879      	adds	r1, r7, r1
 801052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8010530:	d201      	bcs.n	8010536 <__udivmoddi4+0x276>
 8010532:	4589      	cmp	r9, r1
 8010534:	d81f      	bhi.n	8010576 <__udivmoddi4+0x2b6>
 8010536:	eba1 0109 	sub.w	r1, r1, r9
 801053a:	fbb1 f9fe 	udiv	r9, r1, lr
 801053e:	fb09 f804 	mul.w	r8, r9, r4
 8010542:	fb0e 1119 	mls	r1, lr, r9, r1
 8010546:	b292      	uxth	r2, r2
 8010548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801054c:	4542      	cmp	r2, r8
 801054e:	d229      	bcs.n	80105a4 <__udivmoddi4+0x2e4>
 8010550:	18ba      	adds	r2, r7, r2
 8010552:	f109 31ff 	add.w	r1, r9, #4294967295
 8010556:	d2c4      	bcs.n	80104e2 <__udivmoddi4+0x222>
 8010558:	4542      	cmp	r2, r8
 801055a:	d2c2      	bcs.n	80104e2 <__udivmoddi4+0x222>
 801055c:	f1a9 0102 	sub.w	r1, r9, #2
 8010560:	443a      	add	r2, r7
 8010562:	e7be      	b.n	80104e2 <__udivmoddi4+0x222>
 8010564:	45f0      	cmp	r8, lr
 8010566:	d29d      	bcs.n	80104a4 <__udivmoddi4+0x1e4>
 8010568:	ebbe 0302 	subs.w	r3, lr, r2
 801056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8010570:	3801      	subs	r0, #1
 8010572:	46e1      	mov	r9, ip
 8010574:	e796      	b.n	80104a4 <__udivmoddi4+0x1e4>
 8010576:	eba7 0909 	sub.w	r9, r7, r9
 801057a:	4449      	add	r1, r9
 801057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8010580:	fbb1 f9fe 	udiv	r9, r1, lr
 8010584:	fb09 f804 	mul.w	r8, r9, r4
 8010588:	e7db      	b.n	8010542 <__udivmoddi4+0x282>
 801058a:	4673      	mov	r3, lr
 801058c:	e77f      	b.n	801048e <__udivmoddi4+0x1ce>
 801058e:	4650      	mov	r0, sl
 8010590:	e766      	b.n	8010460 <__udivmoddi4+0x1a0>
 8010592:	4608      	mov	r0, r1
 8010594:	e6fd      	b.n	8010392 <__udivmoddi4+0xd2>
 8010596:	443b      	add	r3, r7
 8010598:	3a02      	subs	r2, #2
 801059a:	e733      	b.n	8010404 <__udivmoddi4+0x144>
 801059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80105a0:	443b      	add	r3, r7
 80105a2:	e71c      	b.n	80103de <__udivmoddi4+0x11e>
 80105a4:	4649      	mov	r1, r9
 80105a6:	e79c      	b.n	80104e2 <__udivmoddi4+0x222>
 80105a8:	eba1 0109 	sub.w	r1, r1, r9
 80105ac:	46c4      	mov	ip, r8
 80105ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80105b2:	fb09 f804 	mul.w	r8, r9, r4
 80105b6:	e7c4      	b.n	8010542 <__udivmoddi4+0x282>

080105b8 <__aeabi_idiv0>:
 80105b8:	4770      	bx	lr
 80105ba:	bf00      	nop

080105bc <GetSector>:
/*Variable used for Erase procedure*/
static FLASH_EraseInitTypeDef EraseInitStruct;


static uint32_t GetSector(uint32_t Address)
{
 80105bc:	b480      	push	{r7}
 80105be:	b085      	sub	sp, #20
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 80105c4:	2300      	movs	r3, #0
 80105c6:	60fb      	str	r3, [r7, #12]

  if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	4a40      	ldr	r2, [pc, #256]	@ (80106cc <GetSector+0x110>)
 80105cc:	4293      	cmp	r3, r2
 80105ce:	d206      	bcs.n	80105de <GetSector+0x22>
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80105d6:	d302      	bcc.n	80105de <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 80105d8:	2300      	movs	r3, #0
 80105da:	60fb      	str	r3, [r7, #12]
 80105dc:	e06f      	b.n	80106be <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	4a3b      	ldr	r2, [pc, #236]	@ (80106d0 <GetSector+0x114>)
 80105e2:	4293      	cmp	r3, r2
 80105e4:	d206      	bcs.n	80105f4 <GetSector+0x38>
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	4a38      	ldr	r2, [pc, #224]	@ (80106cc <GetSector+0x110>)
 80105ea:	4293      	cmp	r3, r2
 80105ec:	d302      	bcc.n	80105f4 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 80105ee:	2301      	movs	r3, #1
 80105f0:	60fb      	str	r3, [r7, #12]
 80105f2:	e064      	b.n	80106be <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	4a37      	ldr	r2, [pc, #220]	@ (80106d4 <GetSector+0x118>)
 80105f8:	4293      	cmp	r3, r2
 80105fa:	d206      	bcs.n	801060a <GetSector+0x4e>
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	4a34      	ldr	r2, [pc, #208]	@ (80106d0 <GetSector+0x114>)
 8010600:	4293      	cmp	r3, r2
 8010602:	d302      	bcc.n	801060a <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8010604:	2302      	movs	r3, #2
 8010606:	60fb      	str	r3, [r7, #12]
 8010608:	e059      	b.n	80106be <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	4a32      	ldr	r2, [pc, #200]	@ (80106d8 <GetSector+0x11c>)
 801060e:	4293      	cmp	r3, r2
 8010610:	d806      	bhi.n	8010620 <GetSector+0x64>
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	4a2f      	ldr	r2, [pc, #188]	@ (80106d4 <GetSector+0x118>)
 8010616:	4293      	cmp	r3, r2
 8010618:	d302      	bcc.n	8010620 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 801061a:	2303      	movs	r3, #3
 801061c:	60fb      	str	r3, [r7, #12]
 801061e:	e04e      	b.n	80106be <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	4a2e      	ldr	r2, [pc, #184]	@ (80106dc <GetSector+0x120>)
 8010624:	4293      	cmp	r3, r2
 8010626:	d806      	bhi.n	8010636 <GetSector+0x7a>
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	4a2b      	ldr	r2, [pc, #172]	@ (80106d8 <GetSector+0x11c>)
 801062c:	4293      	cmp	r3, r2
 801062e:	d902      	bls.n	8010636 <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8010630:	2304      	movs	r3, #4
 8010632:	60fb      	str	r3, [r7, #12]
 8010634:	e043      	b.n	80106be <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	4a29      	ldr	r2, [pc, #164]	@ (80106e0 <GetSector+0x124>)
 801063a:	4293      	cmp	r3, r2
 801063c:	d806      	bhi.n	801064c <GetSector+0x90>
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	4a26      	ldr	r2, [pc, #152]	@ (80106dc <GetSector+0x120>)
 8010642:	4293      	cmp	r3, r2
 8010644:	d902      	bls.n	801064c <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 8010646:	2305      	movs	r3, #5
 8010648:	60fb      	str	r3, [r7, #12]
 801064a:	e038      	b.n	80106be <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	4a25      	ldr	r2, [pc, #148]	@ (80106e4 <GetSector+0x128>)
 8010650:	4293      	cmp	r3, r2
 8010652:	d806      	bhi.n	8010662 <GetSector+0xa6>
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	4a22      	ldr	r2, [pc, #136]	@ (80106e0 <GetSector+0x124>)
 8010658:	4293      	cmp	r3, r2
 801065a:	d902      	bls.n	8010662 <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 801065c:	2306      	movs	r3, #6
 801065e:	60fb      	str	r3, [r7, #12]
 8010660:	e02d      	b.n	80106be <GetSector+0x102>
	  sector = FLASH_SECTOR_7; //sector = FLASH_SECTOR_11;
  }
  return sector;
}
#else
	else if((Address < ADDR_FLASH_SECTOR_8) && (Address >= ADDR_FLASH_SECTOR_7))
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	4a20      	ldr	r2, [pc, #128]	@ (80106e8 <GetSector+0x12c>)
 8010666:	4293      	cmp	r3, r2
 8010668:	d806      	bhi.n	8010678 <GetSector+0xbc>
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	4a1d      	ldr	r2, [pc, #116]	@ (80106e4 <GetSector+0x128>)
 801066e:	4293      	cmp	r3, r2
 8010670:	d902      	bls.n	8010678 <GetSector+0xbc>
	{
	  sector = FLASH_SECTOR_7;
 8010672:	2307      	movs	r3, #7
 8010674:	60fb      	str	r3, [r7, #12]
 8010676:	e022      	b.n	80106be <GetSector+0x102>
	}
	else if((Address < ADDR_FLASH_SECTOR_9) && (Address >= ADDR_FLASH_SECTOR_8))
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	4a1c      	ldr	r2, [pc, #112]	@ (80106ec <GetSector+0x130>)
 801067c:	4293      	cmp	r3, r2
 801067e:	d806      	bhi.n	801068e <GetSector+0xd2>
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	4a19      	ldr	r2, [pc, #100]	@ (80106e8 <GetSector+0x12c>)
 8010684:	4293      	cmp	r3, r2
 8010686:	d902      	bls.n	801068e <GetSector+0xd2>
	{
	  sector = FLASH_SECTOR_8;
 8010688:	2308      	movs	r3, #8
 801068a:	60fb      	str	r3, [r7, #12]
 801068c:	e017      	b.n	80106be <GetSector+0x102>
	}
	else if((Address < ADDR_FLASH_SECTOR_10) && (Address >= ADDR_FLASH_SECTOR_9))
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	4a17      	ldr	r2, [pc, #92]	@ (80106f0 <GetSector+0x134>)
 8010692:	4293      	cmp	r3, r2
 8010694:	d806      	bhi.n	80106a4 <GetSector+0xe8>
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	4a14      	ldr	r2, [pc, #80]	@ (80106ec <GetSector+0x130>)
 801069a:	4293      	cmp	r3, r2
 801069c:	d902      	bls.n	80106a4 <GetSector+0xe8>
	{
	  sector = FLASH_SECTOR_9;
 801069e:	2309      	movs	r3, #9
 80106a0:	60fb      	str	r3, [r7, #12]
 80106a2:	e00c      	b.n	80106be <GetSector+0x102>
	}  else if((Address < ADDR_FLASH_SECTOR_11) && (Address >= ADDR_FLASH_SECTOR_10))
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	4a13      	ldr	r2, [pc, #76]	@ (80106f4 <GetSector+0x138>)
 80106a8:	4293      	cmp	r3, r2
 80106aa:	d806      	bhi.n	80106ba <GetSector+0xfe>
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	4a10      	ldr	r2, [pc, #64]	@ (80106f0 <GetSector+0x134>)
 80106b0:	4293      	cmp	r3, r2
 80106b2:	d902      	bls.n	80106ba <GetSector+0xfe>
	{
	  sector = FLASH_SECTOR_10;
 80106b4:	230a      	movs	r3, #10
 80106b6:	60fb      	str	r3, [r7, #12]
 80106b8:	e001      	b.n	80106be <GetSector+0x102>
	}
	else /* (Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_11) */
	{
		  sector  = FLASH_SECTOR_11;
 80106ba:	230b      	movs	r3, #11
 80106bc:	60fb      	str	r3, [r7, #12]
	}
	return sector;
 80106be:	68fb      	ldr	r3, [r7, #12]
	}
 80106c0:	4618      	mov	r0, r3
 80106c2:	3714      	adds	r7, #20
 80106c4:	46bd      	mov	sp, r7
 80106c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ca:	4770      	bx	lr
 80106cc:	08004000 	.word	0x08004000
 80106d0:	08008000 	.word	0x08008000
 80106d4:	0800c000 	.word	0x0800c000
 80106d8:	0800ffff 	.word	0x0800ffff
 80106dc:	0801ffff 	.word	0x0801ffff
 80106e0:	0803ffff 	.word	0x0803ffff
 80106e4:	0805ffff 	.word	0x0805ffff
 80106e8:	0807ffff 	.word	0x0807ffff
 80106ec:	0809ffff 	.word	0x0809ffff
 80106f0:	080bffff 	.word	0x080bffff
 80106f4:	080dffff 	.word	0x080dffff

080106f8 <FLASH_escreve_32bits>:
  * @param  Endereço:	  Endereço da memória em que o dado de 32 bits deverá ser armazenado. Endereço deve ser múltiplo de 2
  * @param  *dado:        Ponteiro para o valor a ser inserido no endereço de memória especificado
  *
  * @retval Void
  */
unsigned int FLASH_escreve_32bits(uint32_t endereco, uint32_t *dado){
 80106f8:	b5b0      	push	{r4, r5, r7, lr}
 80106fa:	b084      	sub	sp, #16
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
 8010700:	6039      	str	r1, [r7, #0]
	unsigned int problema=0;
 8010702:	2300      	movs	r3, #0
 8010704:	60bb      	str	r3, [r7, #8]
	HAL_FLASH_Unlock();
 8010706:	f002 fa77 	bl	8012bf8 <HAL_FLASH_Unlock>
	HAL_FLASH_OB_Unlock();
 801070a:	f002 faa7 	bl	8012c5c <HAL_FLASH_OB_Unlock>

	for (int i=0;i<10;i++)
 801070e:	2300      	movs	r3, #0
 8010710:	60fb      	str	r3, [r7, #12]
 8010712:	e010      	b.n	8010736 <FLASH_escreve_32bits+0x3e>
		if( HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(uint64_t)endereco, *dado) == HAL_OK){
 8010714:	683b      	ldr	r3, [r7, #0]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	2200      	movs	r2, #0
 801071a:	461c      	mov	r4, r3
 801071c:	4615      	mov	r5, r2
 801071e:	4622      	mov	r2, r4
 8010720:	462b      	mov	r3, r5
 8010722:	6879      	ldr	r1, [r7, #4]
 8010724:	2002      	movs	r0, #2
 8010726:	f002 fa13 	bl	8012b50 <HAL_FLASH_Program>
 801072a:	4603      	mov	r3, r0
 801072c:	2b00      	cmp	r3, #0
 801072e:	d006      	beq.n	801073e <FLASH_escreve_32bits+0x46>
	for (int i=0;i<10;i++)
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	3301      	adds	r3, #1
 8010734:	60fb      	str	r3, [r7, #12]
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	2b09      	cmp	r3, #9
 801073a:	ddeb      	ble.n	8010714 <FLASH_escreve_32bits+0x1c>
 801073c:	e000      	b.n	8010740 <FLASH_escreve_32bits+0x48>
			// rotina caso ocorra erro no processo de apagar
			break;
 801073e:	bf00      	nop
		}

	HAL_FLASH_OB_Lock();
 8010740:	f002 faa8 	bl	8012c94 <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 8010744:	f002 fa7a 	bl	8012c3c <HAL_FLASH_Lock>

}
 8010748:	bf00      	nop
 801074a:	4618      	mov	r0, r3
 801074c:	3710      	adds	r7, #16
 801074e:	46bd      	mov	sp, r7
 8010750:	bdb0      	pop	{r4, r5, r7, pc}
	...

08010754 <erase>:
/*-----------------------------------------------------------------------------------------------------------------------------------*/



void erase(uint32_t  start,uint32_t end){
 8010754:	b580      	push	{r7, lr}
 8010756:	b084      	sub	sp, #16
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
 801075c:	6039      	str	r1, [r7, #0]
	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 801075e:	f002 fa4b 	bl	8012bf8 <HAL_FLASH_Unlock>

	/* Allow Access to option bytes sector */
	HAL_FLASH_OB_Unlock();
 8010762:	f002 fa7b 	bl	8012c5c <HAL_FLASH_OB_Unlock>


	 /* Get the 1st sector to erase */
	  FirstSector = GetSector(start);
 8010766:	6878      	ldr	r0, [r7, #4]
 8010768:	f7ff ff28 	bl	80105bc <GetSector>
 801076c:	4603      	mov	r3, r0
 801076e:	4a1a      	ldr	r2, [pc, #104]	@ (80107d8 <erase+0x84>)
 8010770:	6013      	str	r3, [r2, #0]
	  /* Get the number of sector to erase from 1st sector*/
	  NbOfSectors = GetSector(end) - FirstSector + 1;
 8010772:	6838      	ldr	r0, [r7, #0]
 8010774:	f7ff ff22 	bl	80105bc <GetSector>
 8010778:	4602      	mov	r2, r0
 801077a:	4b17      	ldr	r3, [pc, #92]	@ (80107d8 <erase+0x84>)
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	1ad3      	subs	r3, r2, r3
 8010780:	3301      	adds	r3, #1
 8010782:	4a16      	ldr	r2, [pc, #88]	@ (80107dc <erase+0x88>)
 8010784:	6013      	str	r3, [r2, #0]
	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8010786:	4b16      	ldr	r3, [pc, #88]	@ (80107e0 <erase+0x8c>)
 8010788:	2200      	movs	r2, #0
 801078a:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 801078c:	4b14      	ldr	r3, [pc, #80]	@ (80107e0 <erase+0x8c>)
 801078e:	2202      	movs	r2, #2
 8010790:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = FirstSector;
 8010792:	4b11      	ldr	r3, [pc, #68]	@ (80107d8 <erase+0x84>)
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	4a12      	ldr	r2, [pc, #72]	@ (80107e0 <erase+0x8c>)
 8010798:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = NbOfSectors;
 801079a:	4b10      	ldr	r3, [pc, #64]	@ (80107dc <erase+0x88>)
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	4a10      	ldr	r2, [pc, #64]	@ (80107e0 <erase+0x8c>)
 80107a0:	60d3      	str	r3, [r2, #12]
	  for (int i=0;i<10;i++)
 80107a2:	2300      	movs	r3, #0
 80107a4:	60fb      	str	r3, [r7, #12]
 80107a6:	e009      	b.n	80107bc <erase+0x68>
		  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) == HAL_OK)
 80107a8:	490e      	ldr	r1, [pc, #56]	@ (80107e4 <erase+0x90>)
 80107aa:	480d      	ldr	r0, [pc, #52]	@ (80107e0 <erase+0x8c>)
 80107ac:	f002 fbc2 	bl	8012f34 <HAL_FLASHEx_Erase>
 80107b0:	4603      	mov	r3, r0
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d006      	beq.n	80107c4 <erase+0x70>
	  for (int i=0;i<10;i++)
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	3301      	adds	r3, #1
 80107ba:	60fb      	str	r3, [r7, #12]
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	2b09      	cmp	r3, #9
 80107c0:	ddf2      	ble.n	80107a8 <erase+0x54>
 80107c2:	e000      	b.n	80107c6 <erase+0x72>
			  Error occurred while sector erase.
			  User can add here some code to deal with this error.
			  SECTORError will contain the faulty sector and then to know the code error on this sector,
			  user can call function 'HAL_FLASH_GetError()'
			*/
			  break;
 80107c4:	bf00      	nop
		  }


	HAL_FLASH_OB_Lock();
 80107c6:	f002 fa65 	bl	8012c94 <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 80107ca:	f002 fa37 	bl	8012c3c <HAL_FLASH_Lock>
}
 80107ce:	bf00      	nop
 80107d0:	3710      	adds	r7, #16
 80107d2:	46bd      	mov	sp, r7
 80107d4:	bd80      	pop	{r7, pc}
 80107d6:	bf00      	nop
 80107d8:	20010104 	.word	0x20010104
 80107dc:	20010108 	.word	0x20010108
 80107e0:	20010110 	.word	0x20010110
 80107e4:	2001010c 	.word	0x2001010c

080107e8 <udp_echoserver_receive_callback1>:
struct udp_pcb *upcb;
struct udp_pcb *upcb1;


void udp_echoserver_receive_callback1(void *arg, struct udp_pcb *upcb, struct pbuf *p, struct ip_addr *addr, u16_t port)
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b08c      	sub	sp, #48	@ 0x30
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	60f8      	str	r0, [r7, #12]
 80107f0:	60b9      	str	r1, [r7, #8]
 80107f2:	607a      	str	r2, [r7, #4]
 80107f4:	603b      	str	r3, [r7, #0]
	  u16_t len;
	  err_t err;
	  uint8_t *buf;

        //resposta aqui...
			buf=p->payload;
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	685b      	ldr	r3, [r3, #4]
 80107fa:	623b      	str	r3, [r7, #32]
			uint32_t Command 	  = (buf[ 3]<<24) +  (buf[ 2]<<16) +  (buf[1]<<8) +  buf[0];
 80107fc:	6a3b      	ldr	r3, [r7, #32]
 80107fe:	3303      	adds	r3, #3
 8010800:	781b      	ldrb	r3, [r3, #0]
 8010802:	061a      	lsls	r2, r3, #24
 8010804:	6a3b      	ldr	r3, [r7, #32]
 8010806:	3302      	adds	r3, #2
 8010808:	781b      	ldrb	r3, [r3, #0]
 801080a:	041b      	lsls	r3, r3, #16
 801080c:	441a      	add	r2, r3
 801080e:	6a3b      	ldr	r3, [r7, #32]
 8010810:	3301      	adds	r3, #1
 8010812:	781b      	ldrb	r3, [r3, #0]
 8010814:	021b      	lsls	r3, r3, #8
 8010816:	4413      	add	r3, r2
 8010818:	6a3a      	ldr	r2, [r7, #32]
 801081a:	7812      	ldrb	r2, [r2, #0]
 801081c:	4413      	add	r3, r2
 801081e:	61fb      	str	r3, [r7, #28]
			uint32_t adressFlash  = (buf[ 7]<<24) +  (buf[ 6]<<16) +  (buf[5]<<8) +  buf[4];
 8010820:	6a3b      	ldr	r3, [r7, #32]
 8010822:	3307      	adds	r3, #7
 8010824:	781b      	ldrb	r3, [r3, #0]
 8010826:	061a      	lsls	r2, r3, #24
 8010828:	6a3b      	ldr	r3, [r7, #32]
 801082a:	3306      	adds	r3, #6
 801082c:	781b      	ldrb	r3, [r3, #0]
 801082e:	041b      	lsls	r3, r3, #16
 8010830:	441a      	add	r2, r3
 8010832:	6a3b      	ldr	r3, [r7, #32]
 8010834:	3305      	adds	r3, #5
 8010836:	781b      	ldrb	r3, [r3, #0]
 8010838:	021b      	lsls	r3, r3, #8
 801083a:	4413      	add	r3, r2
 801083c:	6a3a      	ldr	r2, [r7, #32]
 801083e:	3204      	adds	r2, #4
 8010840:	7812      	ldrb	r2, [r2, #0]
 8010842:	4413      	add	r3, r2
 8010844:	61bb      	str	r3, [r7, #24]
			uint32_t dataToFlash  = (buf[11]<<24) +  (buf[10]<<16) +  (buf[9]<<8) +  buf[8];
 8010846:	6a3b      	ldr	r3, [r7, #32]
 8010848:	330b      	adds	r3, #11
 801084a:	781b      	ldrb	r3, [r3, #0]
 801084c:	061a      	lsls	r2, r3, #24
 801084e:	6a3b      	ldr	r3, [r7, #32]
 8010850:	330a      	adds	r3, #10
 8010852:	781b      	ldrb	r3, [r3, #0]
 8010854:	041b      	lsls	r3, r3, #16
 8010856:	441a      	add	r2, r3
 8010858:	6a3b      	ldr	r3, [r7, #32]
 801085a:	3309      	adds	r3, #9
 801085c:	781b      	ldrb	r3, [r3, #0]
 801085e:	021b      	lsls	r3, r3, #8
 8010860:	4413      	add	r3, r2
 8010862:	6a3a      	ldr	r2, [r7, #32]
 8010864:	3208      	adds	r2, #8
 8010866:	7812      	ldrb	r2, [r2, #0]
 8010868:	4413      	add	r3, r2
 801086a:	613b      	str	r3, [r7, #16]


			if (Command==0xFFFFFFFF) //apagar 1 setor
 801086c:	69fb      	ldr	r3, [r7, #28]
 801086e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010872:	d10b      	bne.n	801088c <udp_echoserver_receive_callback1+0xa4>
			{
				 erase(adressFlash, adressFlash+1);
 8010874:	69bb      	ldr	r3, [r7, #24]
 8010876:	3301      	adds	r3, #1
 8010878:	4619      	mov	r1, r3
 801087a:	69b8      	ldr	r0, [r7, #24]
 801087c:	f7ff ff6a 	bl	8010754 <erase>
			     next_addr_to_write =FLASH_CODIGO;
 8010880:	4b4b      	ldr	r3, [pc, #300]	@ (80109b0 <udp_echoserver_receive_callback1+0x1c8>)
 8010882:	4a4c      	ldr	r2, [pc, #304]	@ (80109b4 <udp_echoserver_receive_callback1+0x1cc>)
 8010884:	601a      	str	r2, [r3, #0]
			     //HAL_Delay(1000);

				 indx=0;
 8010886:	4b4c      	ldr	r3, [pc, #304]	@ (80109b8 <udp_echoserver_receive_callback1+0x1d0>)
 8010888:	2200      	movs	r2, #0
 801088a:	601a      	str	r2, [r3, #0]

			}
			if (Command==0xDEADBEEF) //resetar o sistema
 801088c:	69fb      	ldr	r3, [r7, #28]
 801088e:	4a4b      	ldr	r2, [pc, #300]	@ (80109bc <udp_echoserver_receive_callback1+0x1d4>)
 8010890:	4293      	cmp	r3, r2
 8010892:	d10f      	bne.n	80108b4 <udp_echoserver_receive_callback1+0xcc>
			{
				 HAL_PWR_EnableBkUpAccess();
 8010894:	f002 ff92 	bl	80137bc <HAL_PWR_EnableBkUpAccess>

				 free(buffwords);
 8010898:	4849      	ldr	r0, [pc, #292]	@ (80109c0 <udp_echoserver_receive_callback1+0x1d8>)
 801089a:	f009 fc11 	bl	801a0c0 <free>
				 if (BattRam1.id==0xABCD)
 801089e:	4b49      	ldr	r3, [pc, #292]	@ (80109c4 <udp_echoserver_receive_callback1+0x1dc>)
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	f64a 32cd 	movw	r2, #43981	@ 0xabcd
 80108a6:	4293      	cmp	r3, r2
 80108a8:	d102      	bne.n	80108b0 <udp_echoserver_receive_callback1+0xc8>
					 BattRam1.id=0x0009;
 80108aa:	4b46      	ldr	r3, [pc, #280]	@ (80109c4 <udp_echoserver_receive_callback1+0x1dc>)
 80108ac:	2209      	movs	r2, #9
 80108ae:	601a      	str	r2, [r3, #0]


				 HAL_NVIC_SystemReset();
 80108b0:	f000 ff61 	bl	8011776 <HAL_NVIC_SystemReset>
			}
			if (Command==0x0) //escreve uma word na FLASH
 80108b4:	69fb      	ldr	r3, [r7, #28]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d105      	bne.n	80108c6 <udp_echoserver_receive_callback1+0xde>
			{
				 FLASH_escreve_32bits(adressFlash, &dataToFlash);
 80108ba:	f107 0310 	add.w	r3, r7, #16
 80108be:	4619      	mov	r1, r3
 80108c0:	69b8      	ldr	r0, [r7, #24]
 80108c2:	f7ff ff19 	bl	80106f8 <FLASH_escreve_32bits>
			}
			if (Command==0x1BABACA1) //escreve uma 1024 bytes num buffer de 64k
 80108c6:	69fb      	ldr	r3, [r7, #28]
 80108c8:	4a3f      	ldr	r2, [pc, #252]	@ (80109c8 <udp_echoserver_receive_callback1+0x1e0>)
 80108ca:	4293      	cmp	r3, r2
 80108cc:	d138      	bne.n	8010940 <udp_echoserver_receive_callback1+0x158>
			{
				int k=0, i=0;
 80108ce:	2300      	movs	r3, #0
 80108d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80108d2:	2300      	movs	r3, #0
 80108d4:	62bb      	str	r3, [r7, #40]	@ 0x28
				while (i<(256*2)){
 80108d6:	e02f      	b.n	8010938 <udp_echoserver_receive_callback1+0x150>

					   dataToFlash = (buf[ 11+i]<<24) +  (buf[ 10 +i]<<16) +  (buf[9 +i]<<8) +  buf[8 +i];
 80108d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108da:	330b      	adds	r3, #11
 80108dc:	461a      	mov	r2, r3
 80108de:	6a3b      	ldr	r3, [r7, #32]
 80108e0:	4413      	add	r3, r2
 80108e2:	781b      	ldrb	r3, [r3, #0]
 80108e4:	061a      	lsls	r2, r3, #24
 80108e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108e8:	330a      	adds	r3, #10
 80108ea:	4619      	mov	r1, r3
 80108ec:	6a3b      	ldr	r3, [r7, #32]
 80108ee:	440b      	add	r3, r1
 80108f0:	781b      	ldrb	r3, [r3, #0]
 80108f2:	041b      	lsls	r3, r3, #16
 80108f4:	441a      	add	r2, r3
 80108f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108f8:	3309      	adds	r3, #9
 80108fa:	4619      	mov	r1, r3
 80108fc:	6a3b      	ldr	r3, [r7, #32]
 80108fe:	440b      	add	r3, r1
 8010900:	781b      	ldrb	r3, [r3, #0]
 8010902:	021b      	lsls	r3, r3, #8
 8010904:	4413      	add	r3, r2
 8010906:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010908:	3208      	adds	r2, #8
 801090a:	4611      	mov	r1, r2
 801090c:	6a3a      	ldr	r2, [r7, #32]
 801090e:	440a      	add	r2, r1
 8010910:	7812      	ldrb	r2, [r2, #0]
 8010912:	4413      	add	r3, r2
 8010914:	613b      	str	r3, [r7, #16]

					   //FLASH_escreve_32bits(adressFlash + i, &dataToFlash);
					   buffwords[indx]=dataToFlash;
 8010916:	4b28      	ldr	r3, [pc, #160]	@ (80109b8 <udp_echoserver_receive_callback1+0x1d0>)
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	693a      	ldr	r2, [r7, #16]
 801091c:	4928      	ldr	r1, [pc, #160]	@ (80109c0 <udp_echoserver_receive_callback1+0x1d8>)
 801091e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					   indx=indx+1;
 8010922:	4b25      	ldr	r3, [pc, #148]	@ (80109b8 <udp_echoserver_receive_callback1+0x1d0>)
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	3301      	adds	r3, #1
 8010928:	4a23      	ldr	r2, [pc, #140]	@ (80109b8 <udp_echoserver_receive_callback1+0x1d0>)
 801092a:	6013      	str	r3, [r2, #0]
					   i=i+4;
 801092c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801092e:	3304      	adds	r3, #4
 8010930:	62bb      	str	r3, [r7, #40]	@ 0x28
					   k=k+1;
 8010932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010934:	3301      	adds	r3, #1
 8010936:	62fb      	str	r3, [r7, #44]	@ 0x2c
				while (i<(256*2)){
 8010938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801093a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801093e:	dbcb      	blt.n	80108d8 <udp_echoserver_receive_callback1+0xf0>
				    }

			}


			if (Command==0x2BABACA2) //escreve na FLASH o que tiver que ser escrito.
 8010940:	69fb      	ldr	r3, [r7, #28]
 8010942:	4a22      	ldr	r2, [pc, #136]	@ (80109cc <udp_echoserver_receive_callback1+0x1e4>)
 8010944:	4293      	cmp	r3, r2
 8010946:	d123      	bne.n	8010990 <udp_echoserver_receive_callback1+0x1a8>
			{
				for(int i = 0; i <indx; i+=1){
 8010948:	2300      	movs	r3, #0
 801094a:	627b      	str	r3, [r7, #36]	@ 0x24
 801094c:	e010      	b.n	8010970 <udp_echoserver_receive_callback1+0x188>

				    FLASH_escreve_32bits(next_addr_to_write + i*4, &buffwords[i]);
 801094e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010950:	009b      	lsls	r3, r3, #2
 8010952:	461a      	mov	r2, r3
 8010954:	4b16      	ldr	r3, [pc, #88]	@ (80109b0 <udp_echoserver_receive_callback1+0x1c8>)
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	441a      	add	r2, r3
 801095a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801095c:	009b      	lsls	r3, r3, #2
 801095e:	4918      	ldr	r1, [pc, #96]	@ (80109c0 <udp_echoserver_receive_callback1+0x1d8>)
 8010960:	440b      	add	r3, r1
 8010962:	4619      	mov	r1, r3
 8010964:	4610      	mov	r0, r2
 8010966:	f7ff fec7 	bl	80106f8 <FLASH_escreve_32bits>
				for(int i = 0; i <indx; i+=1){
 801096a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801096c:	3301      	adds	r3, #1
 801096e:	627b      	str	r3, [r7, #36]	@ 0x24
 8010970:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010972:	4b11      	ldr	r3, [pc, #68]	@ (80109b8 <udp_echoserver_receive_callback1+0x1d0>)
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	429a      	cmp	r2, r3
 8010978:	d3e9      	bcc.n	801094e <udp_echoserver_receive_callback1+0x166>
				}
				next_addr_to_write=next_addr_to_write+indx*4;
 801097a:	4b0f      	ldr	r3, [pc, #60]	@ (80109b8 <udp_echoserver_receive_callback1+0x1d0>)
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	009a      	lsls	r2, r3, #2
 8010980:	4b0b      	ldr	r3, [pc, #44]	@ (80109b0 <udp_echoserver_receive_callback1+0x1c8>)
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	4413      	add	r3, r2
 8010986:	4a0a      	ldr	r2, [pc, #40]	@ (80109b0 <udp_echoserver_receive_callback1+0x1c8>)
 8010988:	6013      	str	r3, [r2, #0]
				indx=0;
 801098a:	4b0b      	ldr	r3, [pc, #44]	@ (80109b8 <udp_echoserver_receive_callback1+0x1d0>)
 801098c:	2200      	movs	r2, #0
 801098e:	601a      	str	r2, [r3, #0]



			//HAL_Delay(10);

			uint8_t temp = buf ;
 8010990:	6a3b      	ldr	r3, [r7, #32]
 8010992:	75fb      	strb	r3, [r7, #23]




  /* Free the p buffer */
  pbuf_free(p);
 8010994:	6878      	ldr	r0, [r7, #4]
 8010996:	f006 f841 	bl	8016a1c <pbuf_free>

  udp_send1 ( addr, port, temp, 8);
 801099a:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 801099c:	7dfa      	ldrb	r2, [r7, #23]
 801099e:	2308      	movs	r3, #8
 80109a0:	6838      	ldr	r0, [r7, #0]
 80109a2:	f000 f815 	bl	80109d0 <udp_send1>

}
 80109a6:	bf00      	nop
 80109a8:	3730      	adds	r7, #48	@ 0x30
 80109aa:	46bd      	mov	sp, r7
 80109ac:	bd80      	pop	{r7, pc}
 80109ae:	bf00      	nop
 80109b0:	200100fc 	.word	0x200100fc
 80109b4:	08020000 	.word	0x08020000
 80109b8:	20010100 	.word	0x20010100
 80109bc:	deadbeef 	.word	0xdeadbeef
 80109c0:	200000d4 	.word	0x200000d4
 80109c4:	40024000 	.word	0x40024000
 80109c8:	1babaca1 	.word	0x1babaca1
 80109cc:	2babaca2 	.word	0x2babaca2

080109d0 <udp_send1>:

void  udp_send1 (struct ip_addr *addr, u16_t port, uint8_t *sendbuf, uint16_t len)
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b086      	sub	sp, #24
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	60f8      	str	r0, [r7, #12]
 80109d8:	607a      	str	r2, [r7, #4]
 80109da:	461a      	mov	r2, r3
 80109dc:	460b      	mov	r3, r1
 80109de:	817b      	strh	r3, [r7, #10]
 80109e0:	4613      	mov	r3, r2
 80109e2:	813b      	strh	r3, [r7, #8]


	struct pbuf *p;


	p=pbuf_alloc(PBUF_TRANSPORT, len, PBUF_POOL);
 80109e4:	893b      	ldrh	r3, [r7, #8]
 80109e6:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 80109ea:	4619      	mov	r1, r3
 80109ec:	2036      	movs	r0, #54	@ 0x36
 80109ee:	f005 fd33 	bl	8016458 <pbuf_alloc>
 80109f2:	6178      	str	r0, [r7, #20]

    //pbuf_take(p, sendbuf, len) ;
	 memcpy(p->payload, sendbuf, len); // payload copied
 80109f4:	697b      	ldr	r3, [r7, #20]
 80109f6:	685b      	ldr	r3, [r3, #4]
 80109f8:	893a      	ldrh	r2, [r7, #8]
 80109fa:	6879      	ldr	r1, [r7, #4]
 80109fc:	4618      	mov	r0, r3
 80109fe:	f009 fe00 	bl	801a602 <memcpy>


    //err= udp_connect(upcb,  &Ripaddr, NroPortaRemota);
	//err=-err;
     err= udp_connect(upcb1,  addr, port);
 8010a02:	4b17      	ldr	r3, [pc, #92]	@ (8010a60 <udp_send1+0x90>)
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	897a      	ldrh	r2, [r7, #10]
 8010a08:	68f9      	ldr	r1, [r7, #12]
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	f006 ff54 	bl	80178b8 <udp_connect>
 8010a10:	4603      	mov	r3, r0
 8010a12:	74fb      	strb	r3, [r7, #19]
     if(err != ERR_OK)
 8010a14:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d003      	beq.n	8010a24 <udp_send1+0x54>
     {
    	 err=-err;
 8010a1c:	7cfb      	ldrb	r3, [r7, #19]
 8010a1e:	425b      	negs	r3, r3
 8010a20:	b2db      	uxtb	r3, r3
 8010a22:	74fb      	strb	r3, [r7, #19]
     }


    //err=udp_send (upcb, p);
	err=udp_sendto (upcb1, p, addr, port); // the message back to the original host
 8010a24:	4b0e      	ldr	r3, [pc, #56]	@ (8010a60 <udp_send1+0x90>)
 8010a26:	6818      	ldr	r0, [r3, #0]
 8010a28:	897b      	ldrh	r3, [r7, #10]
 8010a2a:	68fa      	ldr	r2, [r7, #12]
 8010a2c:	6979      	ldr	r1, [r7, #20]
 8010a2e:	f006 fd05 	bl	801743c <udp_sendto>
 8010a32:	4603      	mov	r3, r0
 8010a34:	74fb      	strb	r3, [r7, #19]
    if(err != ERR_OK)
 8010a36:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d003      	beq.n	8010a46 <udp_send1+0x76>
    {
   	 err=-err;
 8010a3e:	7cfb      	ldrb	r3, [r7, #19]
 8010a40:	425b      	negs	r3, r3
 8010a42:	b2db      	uxtb	r3, r3
 8010a44:	74fb      	strb	r3, [r7, #19]
    }

	pbuf_free(p);
 8010a46:	6978      	ldr	r0, [r7, #20]
 8010a48:	f005 ffe8 	bl	8016a1c <pbuf_free>
	  /* free the UDP connection, so we can accept new clients */
    udp_disconnect(upcb1);
 8010a4c:	4b04      	ldr	r3, [pc, #16]	@ (8010a60 <udp_send1+0x90>)
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	4618      	mov	r0, r3
 8010a52:	f006 ff9f 	bl	8017994 <udp_disconnect>

}
 8010a56:	bf00      	nop
 8010a58:	3718      	adds	r7, #24
 8010a5a:	46bd      	mov	sp, r7
 8010a5c:	bd80      	pop	{r7, pc}
 8010a5e:	bf00      	nop
 8010a60:	20010128 	.word	0x20010128

08010a64 <udp_echoserver_init>:

void udp_echoserver_init(void)
{
 8010a64:	b580      	push	{r7, lr}
 8010a66:	b082      	sub	sp, #8
 8010a68:	af00      	add	r7, sp, #0
   struct udp_pcb *upcb;
   err_t err;

   /* Create a new UDP control block  */
   upcb = udp_new();
 8010a6a:	f007 f81d 	bl	8017aa8 <udp_new>
 8010a6e:	6078      	str	r0, [r7, #4]
   upcb1 = udp_new();
 8010a70:	f007 f81a 	bl	8017aa8 <udp_new>
 8010a74:	4603      	mov	r3, r0
 8010a76:	4a13      	ldr	r2, [pc, #76]	@ (8010ac4 <udp_echoserver_init+0x60>)
 8010a78:	6013      	str	r3, [r2, #0]

   if (upcb)
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d01a      	beq.n	8010ab6 <udp_echoserver_init+0x52>
   {
     /* Bind the upcb to the UDP_PORT port */
     /* Using IP_ADDR_ANY allow the upcb to be used by any local interface */
      err = udp_bind(upcb, IP_ADDR_ANY, PORTA_);
 8010a80:	4b11      	ldr	r3, [pc, #68]	@ (8010ac8 <udp_echoserver_init+0x64>)
 8010a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010a84:	b29b      	uxth	r3, r3
 8010a86:	461a      	mov	r2, r3
 8010a88:	4910      	ldr	r1, [pc, #64]	@ (8010acc <udp_echoserver_init+0x68>)
 8010a8a:	6878      	ldr	r0, [r7, #4]
 8010a8c:	f006 fe8c 	bl	80177a8 <udp_bind>
 8010a90:	4603      	mov	r3, r0
 8010a92:	70fb      	strb	r3, [r7, #3]

      if(err == ERR_OK)
 8010a94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d105      	bne.n	8010aa8 <udp_echoserver_init+0x44>
      {
        /* Set a receive callback for the upcb */
        udp_recv(upcb, udp_echoserver_receive_callback1, NULL);
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	490c      	ldr	r1, [pc, #48]	@ (8010ad0 <udp_echoserver_init+0x6c>)
 8010aa0:	6878      	ldr	r0, [r7, #4]
 8010aa2:	f006 ff9f 	bl	80179e4 <udp_recv>
   }
   else
   {
     printf("can not create pcb");
   }
}
 8010aa6:	e009      	b.n	8010abc <udp_echoserver_init+0x58>
        udp_remove(upcb);
 8010aa8:	6878      	ldr	r0, [r7, #4]
 8010aaa:	f006 ffbb 	bl	8017a24 <udp_remove>
        printf("can not bind pcb");
 8010aae:	4809      	ldr	r0, [pc, #36]	@ (8010ad4 <udp_echoserver_init+0x70>)
 8010ab0:	f009 fcbc 	bl	801a42c <iprintf>
}
 8010ab4:	e002      	b.n	8010abc <udp_echoserver_init+0x58>
     printf("can not create pcb");
 8010ab6:	4808      	ldr	r0, [pc, #32]	@ (8010ad8 <udp_echoserver_init+0x74>)
 8010ab8:	f009 fcb8 	bl	801a42c <iprintf>
}
 8010abc:	bf00      	nop
 8010abe:	3708      	adds	r7, #8
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	bd80      	pop	{r7, pc}
 8010ac4:	20010128 	.word	0x20010128
 8010ac8:	400249ff 	.word	0x400249ff
 8010acc:	0801c6f4 	.word	0x0801c6f4
 8010ad0:	080107e9 	.word	0x080107e9
 8010ad4:	0801b0e8 	.word	0x0801b0e8
 8010ad8:	0801b0fc 	.word	0x0801b0fc

08010adc <MX_GPIO_DeInit>:

static void MX_GPIO_DeInit(void)
{
 8010adc:	b580      	push	{r7, lr}
 8010ade:	af00      	add	r7, sp, #0

    __HAL_RCC_GPIOG_CLK_DISABLE();
 8010ae0:	4b21      	ldr	r3, [pc, #132]	@ (8010b68 <MX_GPIO_DeInit+0x8c>)
 8010ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ae4:	4a20      	ldr	r2, [pc, #128]	@ (8010b68 <MX_GPIO_DeInit+0x8c>)
 8010ae6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010aea:	6313      	str	r3, [r2, #48]	@ 0x30
    __HAL_RCC_GPIOD_CLK_DISABLE();
 8010aec:	4b1e      	ldr	r3, [pc, #120]	@ (8010b68 <MX_GPIO_DeInit+0x8c>)
 8010aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010af0:	4a1d      	ldr	r2, [pc, #116]	@ (8010b68 <MX_GPIO_DeInit+0x8c>)
 8010af2:	f023 0308 	bic.w	r3, r3, #8
 8010af6:	6313      	str	r3, [r2, #48]	@ 0x30
	__HAL_RCC_GPIOB_CLK_DISABLE();
 8010af8:	4b1b      	ldr	r3, [pc, #108]	@ (8010b68 <MX_GPIO_DeInit+0x8c>)
 8010afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010afc:	4a1a      	ldr	r2, [pc, #104]	@ (8010b68 <MX_GPIO_DeInit+0x8c>)
 8010afe:	f023 0302 	bic.w	r3, r3, #2
 8010b02:	6313      	str	r3, [r2, #48]	@ 0x30
	__HAL_RCC_GPIOA_CLK_DISABLE();
 8010b04:	4b18      	ldr	r3, [pc, #96]	@ (8010b68 <MX_GPIO_DeInit+0x8c>)
 8010b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010b08:	4a17      	ldr	r2, [pc, #92]	@ (8010b68 <MX_GPIO_DeInit+0x8c>)
 8010b0a:	f023 0301 	bic.w	r3, r3, #1
 8010b0e:	6313      	str	r3, [r2, #48]	@ 0x30
    __HAL_RCC_GPIOH_CLK_DISABLE();
 8010b10:	4b15      	ldr	r3, [pc, #84]	@ (8010b68 <MX_GPIO_DeInit+0x8c>)
 8010b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010b14:	4a14      	ldr	r2, [pc, #80]	@ (8010b68 <MX_GPIO_DeInit+0x8c>)
 8010b16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010b1a:	6313      	str	r3, [r2, #48]	@ 0x30
	__HAL_RCC_GPIOC_CLK_DISABLE();
 8010b1c:	4b12      	ldr	r3, [pc, #72]	@ (8010b68 <MX_GPIO_DeInit+0x8c>)
 8010b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010b20:	4a11      	ldr	r2, [pc, #68]	@ (8010b68 <MX_GPIO_DeInit+0x8c>)
 8010b22:	f023 0304 	bic.w	r3, r3, #4
 8010b26:	6313      	str	r3, [r2, #48]	@ 0x30





  HAL_GPIO_DeInit(TCL1_GPIO_Port, TCL1_Pin);
 8010b28:	2120      	movs	r1, #32
 8010b2a:	4810      	ldr	r0, [pc, #64]	@ (8010b6c <MX_GPIO_DeInit+0x90>)
 8010b2c:	f002 fcee 	bl	801350c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(TCL2_GPIO_Port, TCL2_Pin);
 8010b30:	2108      	movs	r1, #8
 8010b32:	480e      	ldr	r0, [pc, #56]	@ (8010b6c <MX_GPIO_DeInit+0x90>)
 8010b34:	f002 fcea 	bl	801350c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(TCL3_GPIO_Port, TCL3_Pin);
 8010b38:	2110      	movs	r1, #16
 8010b3a:	480c      	ldr	r0, [pc, #48]	@ (8010b6c <MX_GPIO_DeInit+0x90>)
 8010b3c:	f002 fce6 	bl	801350c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(TCL4_GPIO_Port, TCL4_Pin);
 8010b40:	2110      	movs	r1, #16
 8010b42:	480b      	ldr	r0, [pc, #44]	@ (8010b70 <MX_GPIO_DeInit+0x94>)
 8010b44:	f002 fce2 	bl	801350c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(TCL5_GPIO_Port, TCL5_Pin);
 8010b48:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010b4c:	4809      	ldr	r0, [pc, #36]	@ (8010b74 <MX_GPIO_DeInit+0x98>)
 8010b4e:	f002 fcdd 	bl	801350c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(TCL6_GPIO_Port, TCL6_Pin);
 8010b52:	2120      	movs	r1, #32
 8010b54:	4807      	ldr	r0, [pc, #28]	@ (8010b74 <MX_GPIO_DeInit+0x98>)
 8010b56:	f002 fcd9 	bl	801350c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(WDI_GPIO_Port, WDI_Pin);
 8010b5a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8010b5e:	4806      	ldr	r0, [pc, #24]	@ (8010b78 <MX_GPIO_DeInit+0x9c>)
 8010b60:	f002 fcd4 	bl	801350c <HAL_GPIO_DeInit>


}
 8010b64:	bf00      	nop
 8010b66:	bd80      	pop	{r7, pc}
 8010b68:	40023800 	.word	0x40023800
 8010b6c:	40021000 	.word	0x40021000
 8010b70:	40022000 	.word	0x40022000
 8010b74:	40020400 	.word	0x40020400
 8010b78:	40020800 	.word	0x40020800

08010b7c <deinitEverything>:

void deinitEverything()
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	af00      	add	r7, sp, #0
	//-- reset peripherals to guarantee flawless start of user application
	MX_GPIO_DeInit( );
 8010b80:	f7ff ffac 	bl	8010adc <MX_GPIO_DeInit>
	HAL_RCC_DeInit();
 8010b84:	f003 fa9e 	bl	80140c4 <HAL_RCC_DeInit>
	HAL_DeInit();
 8010b88:	f000 fc32 	bl	80113f0 <HAL_DeInit>
	SysTick->CTRL = 0;
 8010b8c:	4b05      	ldr	r3, [pc, #20]	@ (8010ba4 <deinitEverything+0x28>)
 8010b8e:	2200      	movs	r2, #0
 8010b90:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 8010b92:	4b04      	ldr	r3, [pc, #16]	@ (8010ba4 <deinitEverything+0x28>)
 8010b94:	2200      	movs	r2, #0
 8010b96:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8010b98:	4b02      	ldr	r3, [pc, #8]	@ (8010ba4 <deinitEverything+0x28>)
 8010b9a:	2200      	movs	r2, #0
 8010b9c:	609a      	str	r2, [r3, #8]
}
 8010b9e:	bf00      	nop
 8010ba0:	bd80      	pop	{r7, pc}
 8010ba2:	bf00      	nop
 8010ba4:	e000e010 	.word	0xe000e010

08010ba8 <jumpToApp>:
    uint32_t		stack_addr;     // Stack Pointer
    application_t*	func_p;        // Program Counter
} JumpStruct;

void jumpToApp(const uint32_t address)
{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b084      	sub	sp, #16
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]
	const JumpStruct* vector_p = (JumpStruct*)address;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	60fb      	str	r3, [r7, #12]

	deinitEverything();
 8010bb4:	f7ff ffe2 	bl	8010b7c <deinitEverything>

	/* let's do The Jump! */
    /* Jump, used asm to avoid stack optimization */
    asm("msr msp, %0; bx %1;" : : "r"(vector_p->stack_addr), "r"(vector_p->func_p));
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	68fa      	ldr	r2, [r7, #12]
 8010bbe:	6852      	ldr	r2, [r2, #4]
 8010bc0:	f383 8808 	msr	MSP, r3
 8010bc4:	4710      	bx	r2
}
 8010bc6:	bf00      	nop
 8010bc8:	3710      	adds	r7, #16
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	bd80      	pop	{r7, pc}
	...

08010bd0 <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
// External Watchdog Timer
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010bd0:	b580      	push	{r7, lr}
 8010bd2:	b082      	sub	sp, #8
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle strobe pin on external watchdog
  if (htim == &htim12 )
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	4a0b      	ldr	r2, [pc, #44]	@ (8010c08 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8010bdc:	4293      	cmp	r3, r2
 8010bde:	d10e      	bne.n	8010bfe <HAL_TIM_PeriodElapsedCallback+0x2e>
  {
	  cnt_watchdog++;
 8010be0:	4b0a      	ldr	r3, [pc, #40]	@ (8010c0c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	3301      	adds	r3, #1
 8010be6:	4a09      	ldr	r2, [pc, #36]	@ (8010c0c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8010be8:	6013      	str	r3, [r2, #0]

	  if(cnt_watchdog <= 800){ 					// 800 equiv 8s
 8010bea:	4b08      	ldr	r3, [pc, #32]	@ (8010c0c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8010bf2:	d804      	bhi.n	8010bfe <HAL_TIM_PeriodElapsedCallback+0x2e>
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8010bf4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8010bf8:	4805      	ldr	r0, [pc, #20]	@ (8010c10 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8010bfa:	f002 fdc4 	bl	8013786 <HAL_GPIO_TogglePin>
	  }


  }
}
 8010bfe:	bf00      	nop
 8010c00:	3708      	adds	r7, #8
 8010c02:	46bd      	mov	sp, r7
 8010c04:	bd80      	pop	{r7, pc}
 8010c06:	bf00      	nop
 8010c08:	2000008c 	.word	0x2000008c
 8010c0c:	20010124 	.word	0x20010124
 8010c10:	40020800 	.word	0x40020800

08010c14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b082      	sub	sp, #8
 8010c18:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8010c1a:	f000 fbc7 	bl	80113ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8010c1e:	f000 f87d 	bl	8010d1c <SystemClock_Config>
  /* USER CODE BEGIN 2 */
#endif



  MX_GPIO_Init();
 8010c22:	f000 f935 	bl	8010e90 <MX_GPIO_Init>

  MX_TIM12_Init();
 8010c26:	f000 f8f9 	bl	8010e1c <MX_TIM12_Init>
  HAL_TIM_Base_Start_IT(&htim12);
 8010c2a:	4835      	ldr	r0, [pc, #212]	@ (8010d00 <main+0xec>)
 8010c2c:	f003 fbb8 	bl	80143a0 <HAL_TIM_Base_Start_IT>

  __HAL_RCC_BKPSRAM_CLK_ENABLE();
 8010c30:	2300      	movs	r3, #0
 8010c32:	607b      	str	r3, [r7, #4]
 8010c34:	4b33      	ldr	r3, [pc, #204]	@ (8010d04 <main+0xf0>)
 8010c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010c38:	4a32      	ldr	r2, [pc, #200]	@ (8010d04 <main+0xf0>)
 8010c3a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8010c3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8010c40:	4b30      	ldr	r3, [pc, #192]	@ (8010d04 <main+0xf0>)
 8010c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010c44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010c48:	607b      	str	r3, [r7, #4]
 8010c4a:	687b      	ldr	r3, [r7, #4]

  if(!HAL_GPIO_ReadPin(TCL2_GPIO_Port, TCL2_Pin) || BattRam1.id==0xABCD)
 8010c4c:	2108      	movs	r1, #8
 8010c4e:	482e      	ldr	r0, [pc, #184]	@ (8010d08 <main+0xf4>)
 8010c50:	f002 fd68 	bl	8013724 <HAL_GPIO_ReadPin>
 8010c54:	4603      	mov	r3, r0
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d005      	beq.n	8010c66 <main+0x52>
 8010c5a:	4b2c      	ldr	r3, [pc, #176]	@ (8010d0c <main+0xf8>)
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	f64a 32cd 	movw	r2, #43981	@ 0xabcd
 8010c62:	4293      	cmp	r3, r2
 8010c64:	d141      	bne.n	8010cea <main+0xd6>
  {
		//se o botão está pressionado, então entra no modo de bootloader

		//MX_GPIO_DeInit();
		//MX_GPIO_Init();
		MX_CRC_Init();
 8010c66:	f000 f8c5 	bl	8010df4 <MX_CRC_Init>
		MX_LWIP_Init();
 8010c6a:	f003 ff4f 	bl	8014b0c <MX_LWIP_Init>

	//	buffwords=(uint32_t*)calloc(64*1024, sizeof(uint8_t));  //o processador possui 192Kbytes de RAM


	    udp_echoserver_init();
 8010c6e:	f7ff fef9 	bl	8010a64 <udp_echoserver_init>

	    HAL_TIM_Base_Stop(&htim12);
 8010c72:	4823      	ldr	r0, [pc, #140]	@ (8010d00 <main+0xec>)
 8010c74:	f003 fb6d 	bl	8014352 <HAL_TIM_Base_Stop>


	    while (1)
	    {

	  	   HAL_GPIO_WritePin(WDI_GPIO_Port,WDI_Pin, GPIO_PIN_RESET);
 8010c78:	2200      	movs	r2, #0
 8010c7a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8010c7e:	4824      	ldr	r0, [pc, #144]	@ (8010d10 <main+0xfc>)
 8010c80:	f002 fd68 	bl	8013754 <HAL_GPIO_WritePin>
	   	   HAL_GPIO_WritePin(WDI_GPIO_Port,WDI_Pin, GPIO_PIN_SET);
 8010c84:	2201      	movs	r2, #1
 8010c86:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8010c8a:	4821      	ldr	r0, [pc, #132]	@ (8010d10 <main+0xfc>)
 8010c8c:	f002 fd62 	bl	8013754 <HAL_GPIO_WritePin>


	   	   HAL_GPIO_WritePin( AUX_OUT3_GPIO_Port ,AUX_OUT3_Pin,GPIO_PIN_SET); //desliga o LED
 8010c90:	2201      	movs	r2, #1
 8010c92:	2180      	movs	r1, #128	@ 0x80
 8010c94:	481f      	ldr	r0, [pc, #124]	@ (8010d14 <main+0x100>)
 8010c96:	f002 fd5d 	bl	8013754 <HAL_GPIO_WritePin>
	   	   HAL_GPIO_WritePin( LED_POWER_GPIO_Port , LED_POWER_Pin,GPIO_PIN_SET); //desliga o LED
 8010c9a:	2201      	movs	r2, #1
 8010c9c:	2140      	movs	r1, #64	@ 0x40
 8010c9e:	481c      	ldr	r0, [pc, #112]	@ (8010d10 <main+0xfc>)
 8010ca0:	f002 fd58 	bl	8013754 <HAL_GPIO_WritePin>
	   	   HAL_Delay(50);
 8010ca4:	2032      	movs	r0, #50	@ 0x32
 8010ca6:	f000 fc27 	bl	80114f8 <HAL_Delay>
	   	   MX_LWIP_Process( );
 8010caa:	f004 f8b1 	bl	8014e10 <MX_LWIP_Process>
	   	   HAL_GPIO_WritePin( AUX_OUT3_GPIO_Port ,AUX_OUT3_Pin,GPIO_PIN_RESET); //liga o LED
 8010cae:	2200      	movs	r2, #0
 8010cb0:	2180      	movs	r1, #128	@ 0x80
 8010cb2:	4818      	ldr	r0, [pc, #96]	@ (8010d14 <main+0x100>)
 8010cb4:	f002 fd4e 	bl	8013754 <HAL_GPIO_WritePin>
	   	   HAL_GPIO_WritePin( LED_POWER_GPIO_Port , LED_POWER_Pin,GPIO_PIN_RESET); //liga o LED
 8010cb8:	2200      	movs	r2, #0
 8010cba:	2140      	movs	r1, #64	@ 0x40
 8010cbc:	4814      	ldr	r0, [pc, #80]	@ (8010d10 <main+0xfc>)
 8010cbe:	f002 fd49 	bl	8013754 <HAL_GPIO_WritePin>
	   	   HAL_Delay(50);
 8010cc2:	2032      	movs	r0, #50	@ 0x32
 8010cc4:	f000 fc18 	bl	80114f8 <HAL_Delay>
	       MX_LWIP_Process( );
 8010cc8:	f004 f8a2 	bl	8014e10 <MX_LWIP_Process>

	       if(!HAL_GPIO_ReadPin(TCL1_GPIO_Port, TCL1_Pin)){
 8010ccc:	2120      	movs	r1, #32
 8010cce:	480e      	ldr	r0, [pc, #56]	@ (8010d08 <main+0xf4>)
 8010cd0:	f002 fd28 	bl	8013724 <HAL_GPIO_ReadPin>
 8010cd4:	4603      	mov	r3, r0
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d1ce      	bne.n	8010c78 <main+0x64>

	    	   HAL_PWR_EnableBkUpAccess();
 8010cda:	f002 fd6f 	bl	80137bc <HAL_PWR_EnableBkUpAccess>
			   BattRam1.id=0x0009;
 8010cde:	4b0b      	ldr	r3, [pc, #44]	@ (8010d0c <main+0xf8>)
 8010ce0:	2209      	movs	r2, #9
 8010ce2:	601a      	str	r2, [r3, #0]
			   HAL_NVIC_SystemReset();
 8010ce4:	f000 fd47 	bl	8011776 <HAL_NVIC_SystemReset>
	  	   HAL_GPIO_WritePin(WDI_GPIO_Port,WDI_Pin, GPIO_PIN_RESET);
 8010ce8:	e7c6      	b.n	8010c78 <main+0x64>
	    }

    }
    else //se o botão não esta apertado, então pulamos até a aplicação.
    {
    	HAL_TIM_Base_Stop(&htim12);
 8010cea:	4805      	ldr	r0, [pc, #20]	@ (8010d00 <main+0xec>)
 8010cec:	f003 fb31 	bl	8014352 <HAL_TIM_Base_Stop>
    	MX_GPIO_DeInit();
 8010cf0:	f7ff fef4 	bl	8010adc <MX_GPIO_DeInit>
    	jumpToApp(FLASH_CODIGO);
 8010cf4:	4808      	ldr	r0, [pc, #32]	@ (8010d18 <main+0x104>)
 8010cf6:	f7ff ff57 	bl	8010ba8 <jumpToApp>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8010cfa:	bf00      	nop
 8010cfc:	e7fd      	b.n	8010cfa <main+0xe6>
 8010cfe:	bf00      	nop
 8010d00:	2000008c 	.word	0x2000008c
 8010d04:	40023800 	.word	0x40023800
 8010d08:	40021000 	.word	0x40021000
 8010d0c:	40024000 	.word	0x40024000
 8010d10:	40020800 	.word	0x40020800
 8010d14:	40020c00 	.word	0x40020c00
 8010d18:	08020000 	.word	0x08020000

08010d1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	b094      	sub	sp, #80	@ 0x50
 8010d20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8010d22:	f107 0320 	add.w	r3, r7, #32
 8010d26:	2230      	movs	r2, #48	@ 0x30
 8010d28:	2100      	movs	r1, #0
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	f009 fbe3 	bl	801a4f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8010d30:	f107 030c 	add.w	r3, r7, #12
 8010d34:	2200      	movs	r2, #0
 8010d36:	601a      	str	r2, [r3, #0]
 8010d38:	605a      	str	r2, [r3, #4]
 8010d3a:	609a      	str	r2, [r3, #8]
 8010d3c:	60da      	str	r2, [r3, #12]
 8010d3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8010d40:	2300      	movs	r3, #0
 8010d42:	60bb      	str	r3, [r7, #8]
 8010d44:	4b29      	ldr	r3, [pc, #164]	@ (8010dec <SystemClock_Config+0xd0>)
 8010d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010d48:	4a28      	ldr	r2, [pc, #160]	@ (8010dec <SystemClock_Config+0xd0>)
 8010d4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010d4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8010d50:	4b26      	ldr	r3, [pc, #152]	@ (8010dec <SystemClock_Config+0xd0>)
 8010d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010d54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010d58:	60bb      	str	r3, [r7, #8]
 8010d5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8010d5c:	2300      	movs	r3, #0
 8010d5e:	607b      	str	r3, [r7, #4]
 8010d60:	4b23      	ldr	r3, [pc, #140]	@ (8010df0 <SystemClock_Config+0xd4>)
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8010d68:	4a21      	ldr	r2, [pc, #132]	@ (8010df0 <SystemClock_Config+0xd4>)
 8010d6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8010d6e:	6013      	str	r3, [r2, #0]
 8010d70:	4b1f      	ldr	r3, [pc, #124]	@ (8010df0 <SystemClock_Config+0xd4>)
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8010d78:	607b      	str	r3, [r7, #4]
 8010d7a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8010d7c:	2302      	movs	r3, #2
 8010d7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8010d80:	2301      	movs	r3, #1
 8010d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8010d84:	2310      	movs	r3, #16
 8010d86:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8010d88:	2302      	movs	r3, #2
 8010d8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8010d8c:	2300      	movs	r3, #0
 8010d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8010d90:	2308      	movs	r3, #8
 8010d92:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 8010d94:	2378      	movs	r3, #120	@ 0x78
 8010d96:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8010d98:	2302      	movs	r3, #2
 8010d9a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8010d9c:	2304      	movs	r3, #4
 8010d9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8010da0:	f107 0320 	add.w	r3, r7, #32
 8010da4:	4618      	mov	r0, r3
 8010da6:	f002 fd1d 	bl	80137e4 <HAL_RCC_OscConfig>
 8010daa:	4603      	mov	r3, r0
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d001      	beq.n	8010db4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8010db0:	f000 f936 	bl	8011020 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8010db4:	230f      	movs	r3, #15
 8010db6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8010db8:	2302      	movs	r3, #2
 8010dba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8010dc0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8010dc4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8010dc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010dca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8010dcc:	f107 030c 	add.w	r3, r7, #12
 8010dd0:	2103      	movs	r1, #3
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	f002 ff7e 	bl	8013cd4 <HAL_RCC_ClockConfig>
 8010dd8:	4603      	mov	r3, r0
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d001      	beq.n	8010de2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8010dde:	f000 f91f 	bl	8011020 <Error_Handler>
  }
}
 8010de2:	bf00      	nop
 8010de4:	3750      	adds	r7, #80	@ 0x50
 8010de6:	46bd      	mov	sp, r7
 8010de8:	bd80      	pop	{r7, pc}
 8010dea:	bf00      	nop
 8010dec:	40023800 	.word	0x40023800
 8010df0:	40007000 	.word	0x40007000

08010df4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8010df4:	b580      	push	{r7, lr}
 8010df6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8010df8:	4b06      	ldr	r3, [pc, #24]	@ (8010e14 <MX_CRC_Init+0x20>)
 8010dfa:	4a07      	ldr	r2, [pc, #28]	@ (8010e18 <MX_CRC_Init+0x24>)
 8010dfc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8010dfe:	4805      	ldr	r0, [pc, #20]	@ (8010e14 <MX_CRC_Init+0x20>)
 8010e00:	f000 fcc9 	bl	8011796 <HAL_CRC_Init>
 8010e04:	4603      	mov	r3, r0
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d001      	beq.n	8010e0e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8010e0a:	f000 f909 	bl	8011020 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8010e0e:	bf00      	nop
 8010e10:	bd80      	pop	{r7, pc}
 8010e12:	bf00      	nop
 8010e14:	20000084 	.word	0x20000084
 8010e18:	40023000 	.word	0x40023000

08010e1c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	b084      	sub	sp, #16
 8010e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8010e22:	463b      	mov	r3, r7
 8010e24:	2200      	movs	r2, #0
 8010e26:	601a      	str	r2, [r3, #0]
 8010e28:	605a      	str	r2, [r3, #4]
 8010e2a:	609a      	str	r2, [r3, #8]
 8010e2c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8010e2e:	4b16      	ldr	r3, [pc, #88]	@ (8010e88 <MX_TIM12_Init+0x6c>)
 8010e30:	4a16      	ldr	r2, [pc, #88]	@ (8010e8c <MX_TIM12_Init+0x70>)
 8010e32:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 9999;
 8010e34:	4b14      	ldr	r3, [pc, #80]	@ (8010e88 <MX_TIM12_Init+0x6c>)
 8010e36:	f242 720f 	movw	r2, #9999	@ 0x270f
 8010e3a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010e3c:	4b12      	ldr	r3, [pc, #72]	@ (8010e88 <MX_TIM12_Init+0x6c>)
 8010e3e:	2200      	movs	r2, #0
 8010e40:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 90;
 8010e42:	4b11      	ldr	r3, [pc, #68]	@ (8010e88 <MX_TIM12_Init+0x6c>)
 8010e44:	225a      	movs	r2, #90	@ 0x5a
 8010e46:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8010e48:	4b0f      	ldr	r3, [pc, #60]	@ (8010e88 <MX_TIM12_Init+0x6c>)
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8010e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8010e88 <MX_TIM12_Init+0x6c>)
 8010e50:	2200      	movs	r2, #0
 8010e52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8010e54:	480c      	ldr	r0, [pc, #48]	@ (8010e88 <MX_TIM12_Init+0x6c>)
 8010e56:	f003 fa2d 	bl	80142b4 <HAL_TIM_Base_Init>
 8010e5a:	4603      	mov	r3, r0
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d001      	beq.n	8010e64 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8010e60:	f000 f8de 	bl	8011020 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8010e64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010e68:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8010e6a:	463b      	mov	r3, r7
 8010e6c:	4619      	mov	r1, r3
 8010e6e:	4806      	ldr	r0, [pc, #24]	@ (8010e88 <MX_TIM12_Init+0x6c>)
 8010e70:	f003 fc0e 	bl	8014690 <HAL_TIM_ConfigClockSource>
 8010e74:	4603      	mov	r3, r0
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d001      	beq.n	8010e7e <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8010e7a:	f000 f8d1 	bl	8011020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8010e7e:	bf00      	nop
 8010e80:	3710      	adds	r7, #16
 8010e82:	46bd      	mov	sp, r7
 8010e84:	bd80      	pop	{r7, pc}
 8010e86:	bf00      	nop
 8010e88:	2000008c 	.word	0x2000008c
 8010e8c:	40001800 	.word	0x40001800

08010e90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b08c      	sub	sp, #48	@ 0x30
 8010e94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010e96:	f107 031c 	add.w	r3, r7, #28
 8010e9a:	2200      	movs	r2, #0
 8010e9c:	601a      	str	r2, [r3, #0]
 8010e9e:	605a      	str	r2, [r3, #4]
 8010ea0:	609a      	str	r2, [r3, #8]
 8010ea2:	60da      	str	r2, [r3, #12]
 8010ea4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	61bb      	str	r3, [r7, #24]
 8010eaa:	4b57      	ldr	r3, [pc, #348]	@ (8011008 <MX_GPIO_Init+0x178>)
 8010eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010eae:	4a56      	ldr	r2, [pc, #344]	@ (8011008 <MX_GPIO_Init+0x178>)
 8010eb0:	f043 0308 	orr.w	r3, r3, #8
 8010eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8010eb6:	4b54      	ldr	r3, [pc, #336]	@ (8011008 <MX_GPIO_Init+0x178>)
 8010eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010eba:	f003 0308 	and.w	r3, r3, #8
 8010ebe:	61bb      	str	r3, [r7, #24]
 8010ec0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8010ec2:	2300      	movs	r3, #0
 8010ec4:	617b      	str	r3, [r7, #20]
 8010ec6:	4b50      	ldr	r3, [pc, #320]	@ (8011008 <MX_GPIO_Init+0x178>)
 8010ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010eca:	4a4f      	ldr	r2, [pc, #316]	@ (8011008 <MX_GPIO_Init+0x178>)
 8010ecc:	f043 0301 	orr.w	r3, r3, #1
 8010ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8010ed2:	4b4d      	ldr	r3, [pc, #308]	@ (8011008 <MX_GPIO_Init+0x178>)
 8010ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ed6:	f003 0301 	and.w	r3, r3, #1
 8010eda:	617b      	str	r3, [r7, #20]
 8010edc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8010ede:	2300      	movs	r3, #0
 8010ee0:	613b      	str	r3, [r7, #16]
 8010ee2:	4b49      	ldr	r3, [pc, #292]	@ (8011008 <MX_GPIO_Init+0x178>)
 8010ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ee6:	4a48      	ldr	r2, [pc, #288]	@ (8011008 <MX_GPIO_Init+0x178>)
 8010ee8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8010eee:	4b46      	ldr	r3, [pc, #280]	@ (8011008 <MX_GPIO_Init+0x178>)
 8010ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ef2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010ef6:	613b      	str	r3, [r7, #16]
 8010ef8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8010efa:	2300      	movs	r3, #0
 8010efc:	60fb      	str	r3, [r7, #12]
 8010efe:	4b42      	ldr	r3, [pc, #264]	@ (8011008 <MX_GPIO_Init+0x178>)
 8010f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f02:	4a41      	ldr	r2, [pc, #260]	@ (8011008 <MX_GPIO_Init+0x178>)
 8010f04:	f043 0310 	orr.w	r3, r3, #16
 8010f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8010f0a:	4b3f      	ldr	r3, [pc, #252]	@ (8011008 <MX_GPIO_Init+0x178>)
 8010f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f0e:	f003 0310 	and.w	r3, r3, #16
 8010f12:	60fb      	str	r3, [r7, #12]
 8010f14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8010f16:	2300      	movs	r3, #0
 8010f18:	60bb      	str	r3, [r7, #8]
 8010f1a:	4b3b      	ldr	r3, [pc, #236]	@ (8011008 <MX_GPIO_Init+0x178>)
 8010f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f1e:	4a3a      	ldr	r2, [pc, #232]	@ (8011008 <MX_GPIO_Init+0x178>)
 8010f20:	f043 0302 	orr.w	r3, r3, #2
 8010f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8010f26:	4b38      	ldr	r3, [pc, #224]	@ (8011008 <MX_GPIO_Init+0x178>)
 8010f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f2a:	f003 0302 	and.w	r3, r3, #2
 8010f2e:	60bb      	str	r3, [r7, #8]
 8010f30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8010f32:	2300      	movs	r3, #0
 8010f34:	607b      	str	r3, [r7, #4]
 8010f36:	4b34      	ldr	r3, [pc, #208]	@ (8011008 <MX_GPIO_Init+0x178>)
 8010f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f3a:	4a33      	ldr	r2, [pc, #204]	@ (8011008 <MX_GPIO_Init+0x178>)
 8010f3c:	f043 0304 	orr.w	r3, r3, #4
 8010f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8010f42:	4b31      	ldr	r3, [pc, #196]	@ (8011008 <MX_GPIO_Init+0x178>)
 8010f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f46:	f003 0304 	and.w	r3, r3, #4
 8010f4a:	607b      	str	r3, [r7, #4]
 8010f4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUX_OUT3_GPIO_Port, AUX_OUT3_Pin, GPIO_PIN_RESET);
 8010f4e:	2200      	movs	r2, #0
 8010f50:	2180      	movs	r1, #128	@ 0x80
 8010f52:	482e      	ldr	r0, [pc, #184]	@ (801100c <MX_GPIO_Init+0x17c>)
 8010f54:	f002 fbfe 	bl	8013754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, WDI_Pin|LED_POWER_Pin, GPIO_PIN_RESET);
 8010f58:	2200      	movs	r2, #0
 8010f5a:	f44f 5101 	mov.w	r1, #8256	@ 0x2040
 8010f5e:	482c      	ldr	r0, [pc, #176]	@ (8011010 <MX_GPIO_Init+0x180>)
 8010f60:	f002 fbf8 	bl	8013754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : AUX_OUT3_Pin */
  GPIO_InitStruct.Pin = AUX_OUT3_Pin;
 8010f64:	2380      	movs	r3, #128	@ 0x80
 8010f66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010f68:	2301      	movs	r3, #1
 8010f6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010f70:	2300      	movs	r3, #0
 8010f72:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AUX_OUT3_GPIO_Port, &GPIO_InitStruct);
 8010f74:	f107 031c 	add.w	r3, r7, #28
 8010f78:	4619      	mov	r1, r3
 8010f7a:	4824      	ldr	r0, [pc, #144]	@ (801100c <MX_GPIO_Init+0x17c>)
 8010f7c:	f002 f91a 	bl	80131b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TCL4_Pin */
  GPIO_InitStruct.Pin = TCL4_Pin;
 8010f80:	2310      	movs	r3, #16
 8010f82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010f84:	2300      	movs	r3, #0
 8010f86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010f88:	2300      	movs	r3, #0
 8010f8a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TCL4_GPIO_Port, &GPIO_InitStruct);
 8010f8c:	f107 031c 	add.w	r3, r7, #28
 8010f90:	4619      	mov	r1, r3
 8010f92:	4820      	ldr	r0, [pc, #128]	@ (8011014 <MX_GPIO_Init+0x184>)
 8010f94:	f002 f90e 	bl	80131b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TCL2_Pin TCL1_Pin */
  GPIO_InitStruct.Pin = TCL2_Pin|TCL1_Pin;
 8010f98:	2328      	movs	r3, #40	@ 0x28
 8010f9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010f9c:	2300      	movs	r3, #0
 8010f9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8010fa0:	2301      	movs	r3, #1
 8010fa2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8010fa4:	f107 031c 	add.w	r3, r7, #28
 8010fa8:	4619      	mov	r1, r3
 8010faa:	481b      	ldr	r0, [pc, #108]	@ (8011018 <MX_GPIO_Init+0x188>)
 8010fac:	f002 f902 	bl	80131b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TCL3_Pin */
  GPIO_InitStruct.Pin = TCL3_Pin;
 8010fb0:	2310      	movs	r3, #16
 8010fb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010fb8:	2300      	movs	r3, #0
 8010fba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TCL3_GPIO_Port, &GPIO_InitStruct);
 8010fbc:	f107 031c 	add.w	r3, r7, #28
 8010fc0:	4619      	mov	r1, r3
 8010fc2:	4815      	ldr	r0, [pc, #84]	@ (8011018 <MX_GPIO_Init+0x188>)
 8010fc4:	f002 f8f6 	bl	80131b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TCL5_Pin TCL6_Pin */
  GPIO_InitStruct.Pin = TCL5_Pin|TCL6_Pin;
 8010fc8:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8010fcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010fce:	2300      	movs	r3, #0
 8010fd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010fd6:	f107 031c 	add.w	r3, r7, #28
 8010fda:	4619      	mov	r1, r3
 8010fdc:	480f      	ldr	r0, [pc, #60]	@ (801101c <MX_GPIO_Init+0x18c>)
 8010fde:	f002 f8e9 	bl	80131b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : WDI_Pin LED_POWER_Pin */
  GPIO_InitStruct.Pin = WDI_Pin|LED_POWER_Pin;
 8010fe2:	f44f 5301 	mov.w	r3, #8256	@ 0x2040
 8010fe6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010fe8:	2301      	movs	r3, #1
 8010fea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010fec:	2300      	movs	r3, #0
 8010fee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010ff0:	2300      	movs	r3, #0
 8010ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010ff4:	f107 031c 	add.w	r3, r7, #28
 8010ff8:	4619      	mov	r1, r3
 8010ffa:	4805      	ldr	r0, [pc, #20]	@ (8011010 <MX_GPIO_Init+0x180>)
 8010ffc:	f002 f8da 	bl	80131b4 <HAL_GPIO_Init>

}
 8011000:	bf00      	nop
 8011002:	3730      	adds	r7, #48	@ 0x30
 8011004:	46bd      	mov	sp, r7
 8011006:	bd80      	pop	{r7, pc}
 8011008:	40023800 	.word	0x40023800
 801100c:	40020c00 	.word	0x40020c00
 8011010:	40020800 	.word	0x40020800
 8011014:	40022000 	.word	0x40022000
 8011018:	40021000 	.word	0x40021000
 801101c:	40020400 	.word	0x40020400

08011020 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8011020:	b480      	push	{r7}
 8011022:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8011024:	b672      	cpsid	i
}
 8011026:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8011028:	bf00      	nop
 801102a:	e7fd      	b.n	8011028 <Error_Handler+0x8>

0801102c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801102c:	b480      	push	{r7}
 801102e:	b083      	sub	sp, #12
 8011030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011032:	2300      	movs	r3, #0
 8011034:	607b      	str	r3, [r7, #4]
 8011036:	4b10      	ldr	r3, [pc, #64]	@ (8011078 <HAL_MspInit+0x4c>)
 8011038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801103a:	4a0f      	ldr	r2, [pc, #60]	@ (8011078 <HAL_MspInit+0x4c>)
 801103c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8011040:	6453      	str	r3, [r2, #68]	@ 0x44
 8011042:	4b0d      	ldr	r3, [pc, #52]	@ (8011078 <HAL_MspInit+0x4c>)
 8011044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011046:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801104a:	607b      	str	r3, [r7, #4]
 801104c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801104e:	2300      	movs	r3, #0
 8011050:	603b      	str	r3, [r7, #0]
 8011052:	4b09      	ldr	r3, [pc, #36]	@ (8011078 <HAL_MspInit+0x4c>)
 8011054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011056:	4a08      	ldr	r2, [pc, #32]	@ (8011078 <HAL_MspInit+0x4c>)
 8011058:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801105c:	6413      	str	r3, [r2, #64]	@ 0x40
 801105e:	4b06      	ldr	r3, [pc, #24]	@ (8011078 <HAL_MspInit+0x4c>)
 8011060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011062:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8011066:	603b      	str	r3, [r7, #0]
 8011068:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801106a:	bf00      	nop
 801106c:	370c      	adds	r7, #12
 801106e:	46bd      	mov	sp, r7
 8011070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011074:	4770      	bx	lr
 8011076:	bf00      	nop
 8011078:	40023800 	.word	0x40023800

0801107c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 801107c:	b480      	push	{r7}
 801107e:	b085      	sub	sp, #20
 8011080:	af00      	add	r7, sp, #0
 8011082:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	4a0b      	ldr	r2, [pc, #44]	@ (80110b8 <HAL_CRC_MspInit+0x3c>)
 801108a:	4293      	cmp	r3, r2
 801108c:	d10d      	bne.n	80110aa <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 801108e:	2300      	movs	r3, #0
 8011090:	60fb      	str	r3, [r7, #12]
 8011092:	4b0a      	ldr	r3, [pc, #40]	@ (80110bc <HAL_CRC_MspInit+0x40>)
 8011094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011096:	4a09      	ldr	r2, [pc, #36]	@ (80110bc <HAL_CRC_MspInit+0x40>)
 8011098:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801109c:	6313      	str	r3, [r2, #48]	@ 0x30
 801109e:	4b07      	ldr	r3, [pc, #28]	@ (80110bc <HAL_CRC_MspInit+0x40>)
 80110a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80110a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80110a6:	60fb      	str	r3, [r7, #12]
 80110a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80110aa:	bf00      	nop
 80110ac:	3714      	adds	r7, #20
 80110ae:	46bd      	mov	sp, r7
 80110b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b4:	4770      	bx	lr
 80110b6:	bf00      	nop
 80110b8:	40023000 	.word	0x40023000
 80110bc:	40023800 	.word	0x40023800

080110c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b084      	sub	sp, #16
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM12)
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	4a0e      	ldr	r2, [pc, #56]	@ (8011108 <HAL_TIM_Base_MspInit+0x48>)
 80110ce:	4293      	cmp	r3, r2
 80110d0:	d115      	bne.n	80110fe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80110d2:	2300      	movs	r3, #0
 80110d4:	60fb      	str	r3, [r7, #12]
 80110d6:	4b0d      	ldr	r3, [pc, #52]	@ (801110c <HAL_TIM_Base_MspInit+0x4c>)
 80110d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80110da:	4a0c      	ldr	r2, [pc, #48]	@ (801110c <HAL_TIM_Base_MspInit+0x4c>)
 80110dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80110e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80110e2:	4b0a      	ldr	r3, [pc, #40]	@ (801110c <HAL_TIM_Base_MspInit+0x4c>)
 80110e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80110e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80110ea:	60fb      	str	r3, [r7, #12]
 80110ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM12 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80110ee:	2200      	movs	r2, #0
 80110f0:	2100      	movs	r1, #0
 80110f2:	202b      	movs	r0, #43	@ 0x2b
 80110f4:	f000 fb15 	bl	8011722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80110f8:	202b      	movs	r0, #43	@ 0x2b
 80110fa:	f000 fb2e 	bl	801175a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80110fe:	bf00      	nop
 8011100:	3710      	adds	r7, #16
 8011102:	46bd      	mov	sp, r7
 8011104:	bd80      	pop	{r7, pc}
 8011106:	bf00      	nop
 8011108:	40001800 	.word	0x40001800
 801110c:	40023800 	.word	0x40023800

08011110 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8011110:	b480      	push	{r7}
 8011112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8011114:	bf00      	nop
 8011116:	e7fd      	b.n	8011114 <NMI_Handler+0x4>

08011118 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8011118:	b480      	push	{r7}
 801111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801111c:	bf00      	nop
 801111e:	e7fd      	b.n	801111c <HardFault_Handler+0x4>

08011120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8011120:	b480      	push	{r7}
 8011122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8011124:	bf00      	nop
 8011126:	e7fd      	b.n	8011124 <MemManage_Handler+0x4>

08011128 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8011128:	b480      	push	{r7}
 801112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801112c:	bf00      	nop
 801112e:	e7fd      	b.n	801112c <BusFault_Handler+0x4>

08011130 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8011130:	b480      	push	{r7}
 8011132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8011134:	bf00      	nop
 8011136:	e7fd      	b.n	8011134 <UsageFault_Handler+0x4>

08011138 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8011138:	b480      	push	{r7}
 801113a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 801113c:	bf00      	nop
 801113e:	46bd      	mov	sp, r7
 8011140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011144:	4770      	bx	lr

08011146 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8011146:	b480      	push	{r7}
 8011148:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801114a:	bf00      	nop
 801114c:	46bd      	mov	sp, r7
 801114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011152:	4770      	bx	lr

08011154 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8011154:	b480      	push	{r7}
 8011156:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8011158:	bf00      	nop
 801115a:	46bd      	mov	sp, r7
 801115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011160:	4770      	bx	lr

08011162 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8011162:	b580      	push	{r7, lr}
 8011164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8011166:	f000 f9a7 	bl	80114b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 801116a:	bf00      	nop
 801116c:	bd80      	pop	{r7, pc}
	...

08011170 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8011170:	b580      	push	{r7, lr}
 8011172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8011174:	4802      	ldr	r0, [pc, #8]	@ (8011180 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8011176:	f003 f983 	bl	8014480 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 801117a:	bf00      	nop
 801117c:	bd80      	pop	{r7, pc}
 801117e:	bf00      	nop
 8011180:	2000008c 	.word	0x2000008c

08011184 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8011184:	b580      	push	{r7, lr}
 8011186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8011188:	4802      	ldr	r0, [pc, #8]	@ (8011194 <ETH_IRQHandler+0x10>)
 801118a:	f000 ff0b 	bl	8011fa4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 801118e:	bf00      	nop
 8011190:	bd80      	pop	{r7, pc}
 8011192:	bf00      	nop
 8011194:	20013240 	.word	0x20013240

08011198 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8011198:	b480      	push	{r7}
 801119a:	af00      	add	r7, sp, #0
	return 1;
 801119c:	2301      	movs	r3, #1
}
 801119e:	4618      	mov	r0, r3
 80111a0:	46bd      	mov	sp, r7
 80111a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a6:	4770      	bx	lr

080111a8 <_kill>:

int _kill(int pid, int sig)
{
 80111a8:	b480      	push	{r7}
 80111aa:	b083      	sub	sp, #12
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	6078      	str	r0, [r7, #4]
 80111b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80111b2:	4b05      	ldr	r3, [pc, #20]	@ (80111c8 <_kill+0x20>)
 80111b4:	2216      	movs	r2, #22
 80111b6:	601a      	str	r2, [r3, #0]
	return -1;
 80111b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80111bc:	4618      	mov	r0, r3
 80111be:	370c      	adds	r7, #12
 80111c0:	46bd      	mov	sp, r7
 80111c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c6:	4770      	bx	lr
 80111c8:	20016504 	.word	0x20016504

080111cc <_exit>:

void _exit (int status)
{
 80111cc:	b580      	push	{r7, lr}
 80111ce:	b082      	sub	sp, #8
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80111d4:	f04f 31ff 	mov.w	r1, #4294967295
 80111d8:	6878      	ldr	r0, [r7, #4]
 80111da:	f7ff ffe5 	bl	80111a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80111de:	bf00      	nop
 80111e0:	e7fd      	b.n	80111de <_exit+0x12>

080111e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80111e2:	b580      	push	{r7, lr}
 80111e4:	b086      	sub	sp, #24
 80111e6:	af00      	add	r7, sp, #0
 80111e8:	60f8      	str	r0, [r7, #12]
 80111ea:	60b9      	str	r1, [r7, #8]
 80111ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80111ee:	2300      	movs	r3, #0
 80111f0:	617b      	str	r3, [r7, #20]
 80111f2:	e00a      	b.n	801120a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80111f4:	f3af 8000 	nop.w
 80111f8:	4601      	mov	r1, r0
 80111fa:	68bb      	ldr	r3, [r7, #8]
 80111fc:	1c5a      	adds	r2, r3, #1
 80111fe:	60ba      	str	r2, [r7, #8]
 8011200:	b2ca      	uxtb	r2, r1
 8011202:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011204:	697b      	ldr	r3, [r7, #20]
 8011206:	3301      	adds	r3, #1
 8011208:	617b      	str	r3, [r7, #20]
 801120a:	697a      	ldr	r2, [r7, #20]
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	429a      	cmp	r2, r3
 8011210:	dbf0      	blt.n	80111f4 <_read+0x12>
	}

return len;
 8011212:	687b      	ldr	r3, [r7, #4]
}
 8011214:	4618      	mov	r0, r3
 8011216:	3718      	adds	r7, #24
 8011218:	46bd      	mov	sp, r7
 801121a:	bd80      	pop	{r7, pc}

0801121c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 801121c:	b580      	push	{r7, lr}
 801121e:	b086      	sub	sp, #24
 8011220:	af00      	add	r7, sp, #0
 8011222:	60f8      	str	r0, [r7, #12]
 8011224:	60b9      	str	r1, [r7, #8]
 8011226:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011228:	2300      	movs	r3, #0
 801122a:	617b      	str	r3, [r7, #20]
 801122c:	e009      	b.n	8011242 <_write+0x26>
	{
		__io_putchar(*ptr++);
 801122e:	68bb      	ldr	r3, [r7, #8]
 8011230:	1c5a      	adds	r2, r3, #1
 8011232:	60ba      	str	r2, [r7, #8]
 8011234:	781b      	ldrb	r3, [r3, #0]
 8011236:	4618      	mov	r0, r3
 8011238:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801123c:	697b      	ldr	r3, [r7, #20]
 801123e:	3301      	adds	r3, #1
 8011240:	617b      	str	r3, [r7, #20]
 8011242:	697a      	ldr	r2, [r7, #20]
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	429a      	cmp	r2, r3
 8011248:	dbf1      	blt.n	801122e <_write+0x12>
	}
	return len;
 801124a:	687b      	ldr	r3, [r7, #4]
}
 801124c:	4618      	mov	r0, r3
 801124e:	3718      	adds	r7, #24
 8011250:	46bd      	mov	sp, r7
 8011252:	bd80      	pop	{r7, pc}

08011254 <_close>:

int _close(int file)
{
 8011254:	b480      	push	{r7}
 8011256:	b083      	sub	sp, #12
 8011258:	af00      	add	r7, sp, #0
 801125a:	6078      	str	r0, [r7, #4]
	return -1;
 801125c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011260:	4618      	mov	r0, r3
 8011262:	370c      	adds	r7, #12
 8011264:	46bd      	mov	sp, r7
 8011266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801126a:	4770      	bx	lr

0801126c <_fstat>:


int _fstat(int file, struct stat *st)
{
 801126c:	b480      	push	{r7}
 801126e:	b083      	sub	sp, #12
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]
 8011274:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8011276:	683b      	ldr	r3, [r7, #0]
 8011278:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 801127c:	605a      	str	r2, [r3, #4]
	return 0;
 801127e:	2300      	movs	r3, #0
}
 8011280:	4618      	mov	r0, r3
 8011282:	370c      	adds	r7, #12
 8011284:	46bd      	mov	sp, r7
 8011286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801128a:	4770      	bx	lr

0801128c <_isatty>:

int _isatty(int file)
{
 801128c:	b480      	push	{r7}
 801128e:	b083      	sub	sp, #12
 8011290:	af00      	add	r7, sp, #0
 8011292:	6078      	str	r0, [r7, #4]
	return 1;
 8011294:	2301      	movs	r3, #1
}
 8011296:	4618      	mov	r0, r3
 8011298:	370c      	adds	r7, #12
 801129a:	46bd      	mov	sp, r7
 801129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a0:	4770      	bx	lr

080112a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80112a2:	b480      	push	{r7}
 80112a4:	b085      	sub	sp, #20
 80112a6:	af00      	add	r7, sp, #0
 80112a8:	60f8      	str	r0, [r7, #12]
 80112aa:	60b9      	str	r1, [r7, #8]
 80112ac:	607a      	str	r2, [r7, #4]
	return 0;
 80112ae:	2300      	movs	r3, #0
}
 80112b0:	4618      	mov	r0, r3
 80112b2:	3714      	adds	r7, #20
 80112b4:	46bd      	mov	sp, r7
 80112b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ba:	4770      	bx	lr

080112bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80112bc:	b480      	push	{r7}
 80112be:	b087      	sub	sp, #28
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80112c4:	4a14      	ldr	r2, [pc, #80]	@ (8011318 <_sbrk+0x5c>)
 80112c6:	4b15      	ldr	r3, [pc, #84]	@ (801131c <_sbrk+0x60>)
 80112c8:	1ad3      	subs	r3, r2, r3
 80112ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80112cc:	697b      	ldr	r3, [r7, #20]
 80112ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80112d0:	4b13      	ldr	r3, [pc, #76]	@ (8011320 <_sbrk+0x64>)
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d102      	bne.n	80112de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80112d8:	4b11      	ldr	r3, [pc, #68]	@ (8011320 <_sbrk+0x64>)
 80112da:	4a12      	ldr	r2, [pc, #72]	@ (8011324 <_sbrk+0x68>)
 80112dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80112de:	4b10      	ldr	r3, [pc, #64]	@ (8011320 <_sbrk+0x64>)
 80112e0:	681a      	ldr	r2, [r3, #0]
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	4413      	add	r3, r2
 80112e6:	693a      	ldr	r2, [r7, #16]
 80112e8:	429a      	cmp	r2, r3
 80112ea:	d205      	bcs.n	80112f8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80112ec:	4b0e      	ldr	r3, [pc, #56]	@ (8011328 <_sbrk+0x6c>)
 80112ee:	220c      	movs	r2, #12
 80112f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80112f2:	f04f 33ff 	mov.w	r3, #4294967295
 80112f6:	e009      	b.n	801130c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80112f8:	4b09      	ldr	r3, [pc, #36]	@ (8011320 <_sbrk+0x64>)
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80112fe:	4b08      	ldr	r3, [pc, #32]	@ (8011320 <_sbrk+0x64>)
 8011300:	681a      	ldr	r2, [r3, #0]
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	4413      	add	r3, r2
 8011306:	4a06      	ldr	r2, [pc, #24]	@ (8011320 <_sbrk+0x64>)
 8011308:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801130a:	68fb      	ldr	r3, [r7, #12]
}
 801130c:	4618      	mov	r0, r3
 801130e:	371c      	adds	r7, #28
 8011310:	46bd      	mov	sp, r7
 8011312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011316:	4770      	bx	lr
 8011318:	20030000 	.word	0x20030000
 801131c:	00000600 	.word	0x00000600
 8011320:	2001012c 	.word	0x2001012c
 8011324:	20016510 	.word	0x20016510
 8011328:	20016504 	.word	0x20016504

0801132c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 801132c:	b480      	push	{r7}
 801132e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8011330:	4b07      	ldr	r3, [pc, #28]	@ (8011350 <SystemInit+0x24>)
 8011332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011336:	4a06      	ldr	r2, [pc, #24]	@ (8011350 <SystemInit+0x24>)
 8011338:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801133c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8011340:	4b03      	ldr	r3, [pc, #12]	@ (8011350 <SystemInit+0x24>)
 8011342:	4a04      	ldr	r2, [pc, #16]	@ (8011354 <SystemInit+0x28>)
 8011344:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8011346:	bf00      	nop
 8011348:	46bd      	mov	sp, r7
 801134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801134e:	4770      	bx	lr
 8011350:	e000ed00 	.word	0xe000ed00
 8011354:	08010000 	.word	0x08010000

08011358 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8011358:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8011390 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 801135c:	480d      	ldr	r0, [pc, #52]	@ (8011394 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 801135e:	490e      	ldr	r1, [pc, #56]	@ (8011398 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8011360:	4a0e      	ldr	r2, [pc, #56]	@ (801139c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8011362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8011364:	e002      	b.n	801136c <LoopCopyDataInit>

08011366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8011366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8011368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801136a:	3304      	adds	r3, #4

0801136c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801136c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801136e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8011370:	d3f9      	bcc.n	8011366 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8011372:	4a0b      	ldr	r2, [pc, #44]	@ (80113a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8011374:	4c0b      	ldr	r4, [pc, #44]	@ (80113a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8011376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8011378:	e001      	b.n	801137e <LoopFillZerobss>

0801137a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801137a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801137c:	3204      	adds	r2, #4

0801137e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801137e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8011380:	d3fb      	bcc.n	801137a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8011382:	f7ff ffd3 	bl	801132c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8011386:	f009 f915 	bl	801a5b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801138a:	f7ff fc43 	bl	8010c14 <main>
  bx  lr    
 801138e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8011390:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8011394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8011398:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 801139c:	0801c7f4 	.word	0x0801c7f4
  ldr r2, =_sbss
 80113a0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80113a4:	2001650c 	.word	0x2001650c

080113a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80113a8:	e7fe      	b.n	80113a8 <ADC_IRQHandler>
	...

080113ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80113b0:	4b0e      	ldr	r3, [pc, #56]	@ (80113ec <HAL_Init+0x40>)
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	4a0d      	ldr	r2, [pc, #52]	@ (80113ec <HAL_Init+0x40>)
 80113b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80113ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80113bc:	4b0b      	ldr	r3, [pc, #44]	@ (80113ec <HAL_Init+0x40>)
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	4a0a      	ldr	r2, [pc, #40]	@ (80113ec <HAL_Init+0x40>)
 80113c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80113c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80113c8:	4b08      	ldr	r3, [pc, #32]	@ (80113ec <HAL_Init+0x40>)
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	4a07      	ldr	r2, [pc, #28]	@ (80113ec <HAL_Init+0x40>)
 80113ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80113d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80113d4:	2003      	movs	r0, #3
 80113d6:	f000 f999 	bl	801170c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80113da:	200f      	movs	r0, #15
 80113dc:	f000 f83c 	bl	8011458 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80113e0:	f7ff fe24 	bl	801102c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80113e4:	2300      	movs	r3, #0
}
 80113e6:	4618      	mov	r0, r3
 80113e8:	bd80      	pop	{r7, pc}
 80113ea:	bf00      	nop
 80113ec:	40023c00 	.word	0x40023c00

080113f0 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80113f0:	b580      	push	{r7, lr}
 80113f2:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80113f4:	4b13      	ldr	r3, [pc, #76]	@ (8011444 <HAL_DeInit+0x54>)
 80113f6:	f04f 32ff 	mov.w	r2, #4294967295
 80113fa:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 80113fc:	4b11      	ldr	r3, [pc, #68]	@ (8011444 <HAL_DeInit+0x54>)
 80113fe:	2200      	movs	r2, #0
 8011400:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8011402:	4b10      	ldr	r3, [pc, #64]	@ (8011444 <HAL_DeInit+0x54>)
 8011404:	f04f 32ff 	mov.w	r2, #4294967295
 8011408:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 801140a:	4b0e      	ldr	r3, [pc, #56]	@ (8011444 <HAL_DeInit+0x54>)
 801140c:	2200      	movs	r2, #0
 801140e:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8011410:	4b0c      	ldr	r3, [pc, #48]	@ (8011444 <HAL_DeInit+0x54>)
 8011412:	f04f 32ff 	mov.w	r2, #4294967295
 8011416:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8011418:	4b0a      	ldr	r3, [pc, #40]	@ (8011444 <HAL_DeInit+0x54>)
 801141a:	2200      	movs	r2, #0
 801141c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 801141e:	4b09      	ldr	r3, [pc, #36]	@ (8011444 <HAL_DeInit+0x54>)
 8011420:	f04f 32ff 	mov.w	r2, #4294967295
 8011424:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8011426:	4b07      	ldr	r3, [pc, #28]	@ (8011444 <HAL_DeInit+0x54>)
 8011428:	2200      	movs	r2, #0
 801142a:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 801142c:	4b05      	ldr	r3, [pc, #20]	@ (8011444 <HAL_DeInit+0x54>)
 801142e:	f04f 32ff 	mov.w	r2, #4294967295
 8011432:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8011434:	4b03      	ldr	r3, [pc, #12]	@ (8011444 <HAL_DeInit+0x54>)
 8011436:	2200      	movs	r2, #0
 8011438:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 801143a:	f000 f805 	bl	8011448 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 801143e:	2300      	movs	r3, #0
}
 8011440:	4618      	mov	r0, r3
 8011442:	bd80      	pop	{r7, pc}
 8011444:	40023800 	.word	0x40023800

08011448 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8011448:	b480      	push	{r7}
 801144a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 801144c:	bf00      	nop
 801144e:	46bd      	mov	sp, r7
 8011450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011454:	4770      	bx	lr
	...

08011458 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8011458:	b580      	push	{r7, lr}
 801145a:	b082      	sub	sp, #8
 801145c:	af00      	add	r7, sp, #0
 801145e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8011460:	4b12      	ldr	r3, [pc, #72]	@ (80114ac <HAL_InitTick+0x54>)
 8011462:	681a      	ldr	r2, [r3, #0]
 8011464:	4b12      	ldr	r3, [pc, #72]	@ (80114b0 <HAL_InitTick+0x58>)
 8011466:	781b      	ldrb	r3, [r3, #0]
 8011468:	4619      	mov	r1, r3
 801146a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801146e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011472:	fbb2 f3f3 	udiv	r3, r2, r3
 8011476:	4618      	mov	r0, r3
 8011478:	f000 f981 	bl	801177e <HAL_SYSTICK_Config>
 801147c:	4603      	mov	r3, r0
 801147e:	2b00      	cmp	r3, #0
 8011480:	d001      	beq.n	8011486 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8011482:	2301      	movs	r3, #1
 8011484:	e00e      	b.n	80114a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	2b0f      	cmp	r3, #15
 801148a:	d80a      	bhi.n	80114a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801148c:	2200      	movs	r2, #0
 801148e:	6879      	ldr	r1, [r7, #4]
 8011490:	f04f 30ff 	mov.w	r0, #4294967295
 8011494:	f000 f945 	bl	8011722 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8011498:	4a06      	ldr	r2, [pc, #24]	@ (80114b4 <HAL_InitTick+0x5c>)
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801149e:	2300      	movs	r3, #0
 80114a0:	e000      	b.n	80114a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80114a2:	2301      	movs	r3, #1
}
 80114a4:	4618      	mov	r0, r3
 80114a6:	3708      	adds	r7, #8
 80114a8:	46bd      	mov	sp, r7
 80114aa:	bd80      	pop	{r7, pc}
 80114ac:	20000000 	.word	0x20000000
 80114b0:	20000008 	.word	0x20000008
 80114b4:	20000004 	.word	0x20000004

080114b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80114b8:	b480      	push	{r7}
 80114ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80114bc:	4b06      	ldr	r3, [pc, #24]	@ (80114d8 <HAL_IncTick+0x20>)
 80114be:	781b      	ldrb	r3, [r3, #0]
 80114c0:	461a      	mov	r2, r3
 80114c2:	4b06      	ldr	r3, [pc, #24]	@ (80114dc <HAL_IncTick+0x24>)
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	4413      	add	r3, r2
 80114c8:	4a04      	ldr	r2, [pc, #16]	@ (80114dc <HAL_IncTick+0x24>)
 80114ca:	6013      	str	r3, [r2, #0]
}
 80114cc:	bf00      	nop
 80114ce:	46bd      	mov	sp, r7
 80114d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d4:	4770      	bx	lr
 80114d6:	bf00      	nop
 80114d8:	20000008 	.word	0x20000008
 80114dc:	20010130 	.word	0x20010130

080114e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80114e0:	b480      	push	{r7}
 80114e2:	af00      	add	r7, sp, #0
  return uwTick;
 80114e4:	4b03      	ldr	r3, [pc, #12]	@ (80114f4 <HAL_GetTick+0x14>)
 80114e6:	681b      	ldr	r3, [r3, #0]
}
 80114e8:	4618      	mov	r0, r3
 80114ea:	46bd      	mov	sp, r7
 80114ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f0:	4770      	bx	lr
 80114f2:	bf00      	nop
 80114f4:	20010130 	.word	0x20010130

080114f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80114f8:	b580      	push	{r7, lr}
 80114fa:	b084      	sub	sp, #16
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8011500:	f7ff ffee 	bl	80114e0 <HAL_GetTick>
 8011504:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011510:	d005      	beq.n	801151e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8011512:	4b0a      	ldr	r3, [pc, #40]	@ (801153c <HAL_Delay+0x44>)
 8011514:	781b      	ldrb	r3, [r3, #0]
 8011516:	461a      	mov	r2, r3
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	4413      	add	r3, r2
 801151c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 801151e:	bf00      	nop
 8011520:	f7ff ffde 	bl	80114e0 <HAL_GetTick>
 8011524:	4602      	mov	r2, r0
 8011526:	68bb      	ldr	r3, [r7, #8]
 8011528:	1ad3      	subs	r3, r2, r3
 801152a:	68fa      	ldr	r2, [r7, #12]
 801152c:	429a      	cmp	r2, r3
 801152e:	d8f7      	bhi.n	8011520 <HAL_Delay+0x28>
  {
  }
}
 8011530:	bf00      	nop
 8011532:	bf00      	nop
 8011534:	3710      	adds	r7, #16
 8011536:	46bd      	mov	sp, r7
 8011538:	bd80      	pop	{r7, pc}
 801153a:	bf00      	nop
 801153c:	20000008 	.word	0x20000008

08011540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011540:	b480      	push	{r7}
 8011542:	b085      	sub	sp, #20
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	f003 0307 	and.w	r3, r3, #7
 801154e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8011550:	4b0c      	ldr	r3, [pc, #48]	@ (8011584 <__NVIC_SetPriorityGrouping+0x44>)
 8011552:	68db      	ldr	r3, [r3, #12]
 8011554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8011556:	68ba      	ldr	r2, [r7, #8]
 8011558:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 801155c:	4013      	ands	r3, r2
 801155e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8011564:	68bb      	ldr	r3, [r7, #8]
 8011566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8011568:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 801156c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8011572:	4a04      	ldr	r2, [pc, #16]	@ (8011584 <__NVIC_SetPriorityGrouping+0x44>)
 8011574:	68bb      	ldr	r3, [r7, #8]
 8011576:	60d3      	str	r3, [r2, #12]
}
 8011578:	bf00      	nop
 801157a:	3714      	adds	r7, #20
 801157c:	46bd      	mov	sp, r7
 801157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011582:	4770      	bx	lr
 8011584:	e000ed00 	.word	0xe000ed00

08011588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8011588:	b480      	push	{r7}
 801158a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801158c:	4b04      	ldr	r3, [pc, #16]	@ (80115a0 <__NVIC_GetPriorityGrouping+0x18>)
 801158e:	68db      	ldr	r3, [r3, #12]
 8011590:	0a1b      	lsrs	r3, r3, #8
 8011592:	f003 0307 	and.w	r3, r3, #7
}
 8011596:	4618      	mov	r0, r3
 8011598:	46bd      	mov	sp, r7
 801159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801159e:	4770      	bx	lr
 80115a0:	e000ed00 	.word	0xe000ed00

080115a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80115a4:	b480      	push	{r7}
 80115a6:	b083      	sub	sp, #12
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	4603      	mov	r3, r0
 80115ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80115ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	db0b      	blt.n	80115ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80115b6:	79fb      	ldrb	r3, [r7, #7]
 80115b8:	f003 021f 	and.w	r2, r3, #31
 80115bc:	4907      	ldr	r1, [pc, #28]	@ (80115dc <__NVIC_EnableIRQ+0x38>)
 80115be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80115c2:	095b      	lsrs	r3, r3, #5
 80115c4:	2001      	movs	r0, #1
 80115c6:	fa00 f202 	lsl.w	r2, r0, r2
 80115ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80115ce:	bf00      	nop
 80115d0:	370c      	adds	r7, #12
 80115d2:	46bd      	mov	sp, r7
 80115d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d8:	4770      	bx	lr
 80115da:	bf00      	nop
 80115dc:	e000e100 	.word	0xe000e100

080115e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80115e0:	b480      	push	{r7}
 80115e2:	b083      	sub	sp, #12
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	4603      	mov	r3, r0
 80115e8:	6039      	str	r1, [r7, #0]
 80115ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80115ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	db0a      	blt.n	801160a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80115f4:	683b      	ldr	r3, [r7, #0]
 80115f6:	b2da      	uxtb	r2, r3
 80115f8:	490c      	ldr	r1, [pc, #48]	@ (801162c <__NVIC_SetPriority+0x4c>)
 80115fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80115fe:	0112      	lsls	r2, r2, #4
 8011600:	b2d2      	uxtb	r2, r2
 8011602:	440b      	add	r3, r1
 8011604:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8011608:	e00a      	b.n	8011620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801160a:	683b      	ldr	r3, [r7, #0]
 801160c:	b2da      	uxtb	r2, r3
 801160e:	4908      	ldr	r1, [pc, #32]	@ (8011630 <__NVIC_SetPriority+0x50>)
 8011610:	79fb      	ldrb	r3, [r7, #7]
 8011612:	f003 030f 	and.w	r3, r3, #15
 8011616:	3b04      	subs	r3, #4
 8011618:	0112      	lsls	r2, r2, #4
 801161a:	b2d2      	uxtb	r2, r2
 801161c:	440b      	add	r3, r1
 801161e:	761a      	strb	r2, [r3, #24]
}
 8011620:	bf00      	nop
 8011622:	370c      	adds	r7, #12
 8011624:	46bd      	mov	sp, r7
 8011626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162a:	4770      	bx	lr
 801162c:	e000e100 	.word	0xe000e100
 8011630:	e000ed00 	.word	0xe000ed00

08011634 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8011634:	b480      	push	{r7}
 8011636:	b089      	sub	sp, #36	@ 0x24
 8011638:	af00      	add	r7, sp, #0
 801163a:	60f8      	str	r0, [r7, #12]
 801163c:	60b9      	str	r1, [r7, #8]
 801163e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	f003 0307 	and.w	r3, r3, #7
 8011646:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8011648:	69fb      	ldr	r3, [r7, #28]
 801164a:	f1c3 0307 	rsb	r3, r3, #7
 801164e:	2b04      	cmp	r3, #4
 8011650:	bf28      	it	cs
 8011652:	2304      	movcs	r3, #4
 8011654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8011656:	69fb      	ldr	r3, [r7, #28]
 8011658:	3304      	adds	r3, #4
 801165a:	2b06      	cmp	r3, #6
 801165c:	d902      	bls.n	8011664 <NVIC_EncodePriority+0x30>
 801165e:	69fb      	ldr	r3, [r7, #28]
 8011660:	3b03      	subs	r3, #3
 8011662:	e000      	b.n	8011666 <NVIC_EncodePriority+0x32>
 8011664:	2300      	movs	r3, #0
 8011666:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011668:	f04f 32ff 	mov.w	r2, #4294967295
 801166c:	69bb      	ldr	r3, [r7, #24]
 801166e:	fa02 f303 	lsl.w	r3, r2, r3
 8011672:	43da      	mvns	r2, r3
 8011674:	68bb      	ldr	r3, [r7, #8]
 8011676:	401a      	ands	r2, r3
 8011678:	697b      	ldr	r3, [r7, #20]
 801167a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801167c:	f04f 31ff 	mov.w	r1, #4294967295
 8011680:	697b      	ldr	r3, [r7, #20]
 8011682:	fa01 f303 	lsl.w	r3, r1, r3
 8011686:	43d9      	mvns	r1, r3
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801168c:	4313      	orrs	r3, r2
         );
}
 801168e:	4618      	mov	r0, r3
 8011690:	3724      	adds	r7, #36	@ 0x24
 8011692:	46bd      	mov	sp, r7
 8011694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011698:	4770      	bx	lr
	...

0801169c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 801169c:	b480      	push	{r7}
 801169e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80116a0:	f3bf 8f4f 	dsb	sy
}
 80116a4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80116a6:	4b06      	ldr	r3, [pc, #24]	@ (80116c0 <__NVIC_SystemReset+0x24>)
 80116a8:	68db      	ldr	r3, [r3, #12]
 80116aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80116ae:	4904      	ldr	r1, [pc, #16]	@ (80116c0 <__NVIC_SystemReset+0x24>)
 80116b0:	4b04      	ldr	r3, [pc, #16]	@ (80116c4 <__NVIC_SystemReset+0x28>)
 80116b2:	4313      	orrs	r3, r2
 80116b4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80116b6:	f3bf 8f4f 	dsb	sy
}
 80116ba:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80116bc:	bf00      	nop
 80116be:	e7fd      	b.n	80116bc <__NVIC_SystemReset+0x20>
 80116c0:	e000ed00 	.word	0xe000ed00
 80116c4:	05fa0004 	.word	0x05fa0004

080116c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b082      	sub	sp, #8
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	3b01      	subs	r3, #1
 80116d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80116d8:	d301      	bcc.n	80116de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80116da:	2301      	movs	r3, #1
 80116dc:	e00f      	b.n	80116fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80116de:	4a0a      	ldr	r2, [pc, #40]	@ (8011708 <SysTick_Config+0x40>)
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	3b01      	subs	r3, #1
 80116e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80116e6:	210f      	movs	r1, #15
 80116e8:	f04f 30ff 	mov.w	r0, #4294967295
 80116ec:	f7ff ff78 	bl	80115e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80116f0:	4b05      	ldr	r3, [pc, #20]	@ (8011708 <SysTick_Config+0x40>)
 80116f2:	2200      	movs	r2, #0
 80116f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80116f6:	4b04      	ldr	r3, [pc, #16]	@ (8011708 <SysTick_Config+0x40>)
 80116f8:	2207      	movs	r2, #7
 80116fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80116fc:	2300      	movs	r3, #0
}
 80116fe:	4618      	mov	r0, r3
 8011700:	3708      	adds	r7, #8
 8011702:	46bd      	mov	sp, r7
 8011704:	bd80      	pop	{r7, pc}
 8011706:	bf00      	nop
 8011708:	e000e010 	.word	0xe000e010

0801170c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801170c:	b580      	push	{r7, lr}
 801170e:	b082      	sub	sp, #8
 8011710:	af00      	add	r7, sp, #0
 8011712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8011714:	6878      	ldr	r0, [r7, #4]
 8011716:	f7ff ff13 	bl	8011540 <__NVIC_SetPriorityGrouping>
}
 801171a:	bf00      	nop
 801171c:	3708      	adds	r7, #8
 801171e:	46bd      	mov	sp, r7
 8011720:	bd80      	pop	{r7, pc}

08011722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8011722:	b580      	push	{r7, lr}
 8011724:	b086      	sub	sp, #24
 8011726:	af00      	add	r7, sp, #0
 8011728:	4603      	mov	r3, r0
 801172a:	60b9      	str	r1, [r7, #8]
 801172c:	607a      	str	r2, [r7, #4]
 801172e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8011730:	2300      	movs	r3, #0
 8011732:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8011734:	f7ff ff28 	bl	8011588 <__NVIC_GetPriorityGrouping>
 8011738:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801173a:	687a      	ldr	r2, [r7, #4]
 801173c:	68b9      	ldr	r1, [r7, #8]
 801173e:	6978      	ldr	r0, [r7, #20]
 8011740:	f7ff ff78 	bl	8011634 <NVIC_EncodePriority>
 8011744:	4602      	mov	r2, r0
 8011746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801174a:	4611      	mov	r1, r2
 801174c:	4618      	mov	r0, r3
 801174e:	f7ff ff47 	bl	80115e0 <__NVIC_SetPriority>
}
 8011752:	bf00      	nop
 8011754:	3718      	adds	r7, #24
 8011756:	46bd      	mov	sp, r7
 8011758:	bd80      	pop	{r7, pc}

0801175a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801175a:	b580      	push	{r7, lr}
 801175c:	b082      	sub	sp, #8
 801175e:	af00      	add	r7, sp, #0
 8011760:	4603      	mov	r3, r0
 8011762:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8011764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011768:	4618      	mov	r0, r3
 801176a:	f7ff ff1b 	bl	80115a4 <__NVIC_EnableIRQ>
}
 801176e:	bf00      	nop
 8011770:	3708      	adds	r7, #8
 8011772:	46bd      	mov	sp, r7
 8011774:	bd80      	pop	{r7, pc}

08011776 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8011776:	b580      	push	{r7, lr}
 8011778:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 801177a:	f7ff ff8f 	bl	801169c <__NVIC_SystemReset>

0801177e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801177e:	b580      	push	{r7, lr}
 8011780:	b082      	sub	sp, #8
 8011782:	af00      	add	r7, sp, #0
 8011784:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8011786:	6878      	ldr	r0, [r7, #4]
 8011788:	f7ff ff9e 	bl	80116c8 <SysTick_Config>
 801178c:	4603      	mov	r3, r0
}
 801178e:	4618      	mov	r0, r3
 8011790:	3708      	adds	r7, #8
 8011792:	46bd      	mov	sp, r7
 8011794:	bd80      	pop	{r7, pc}

08011796 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8011796:	b580      	push	{r7, lr}
 8011798:	b082      	sub	sp, #8
 801179a:	af00      	add	r7, sp, #0
 801179c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d101      	bne.n	80117a8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80117a4:	2301      	movs	r3, #1
 80117a6:	e00e      	b.n	80117c6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	795b      	ldrb	r3, [r3, #5]
 80117ac:	b2db      	uxtb	r3, r3
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d105      	bne.n	80117be <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	2200      	movs	r2, #0
 80117b6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80117b8:	6878      	ldr	r0, [r7, #4]
 80117ba:	f7ff fc5f 	bl	801107c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	2201      	movs	r2, #1
 80117c2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80117c4:	2300      	movs	r3, #0
}
 80117c6:	4618      	mov	r0, r3
 80117c8:	3708      	adds	r7, #8
 80117ca:	46bd      	mov	sp, r7
 80117cc:	bd80      	pop	{r7, pc}
	...

080117d0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80117d0:	b580      	push	{r7, lr}
 80117d2:	b088      	sub	sp, #32
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80117d8:	2300      	movs	r3, #0
 80117da:	61fb      	str	r3, [r7, #28]
 80117dc:	2300      	movs	r3, #0
 80117de:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80117e0:	4ba2      	ldr	r3, [pc, #648]	@ (8011a6c <HAL_ETH_Init+0x29c>)
 80117e2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80117e4:	2300      	movs	r3, #0
 80117e6:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80117e8:	2300      	movs	r3, #0
 80117ea:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d101      	bne.n	80117f6 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80117f2:	2301      	movs	r3, #1
 80117f4:	e190      	b.n	8011b18 <HAL_ETH_Init+0x348>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80117fc:	b2db      	uxtb	r3, r3
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d111      	bne.n	8011826 <HAL_ETH_Init+0x56>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	2200      	movs	r2, #0
 8011806:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    ETH_InitCallbacksToDefault(heth);
 801180a:	6878      	ldr	r0, [r7, #4]
 801180c:	f001 f986 	bl	8012b1c <ETH_InitCallbacksToDefault>

    if(heth->MspInitCallback == NULL)
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011814:	2b00      	cmp	r3, #0
 8011816:	d102      	bne.n	801181e <HAL_ETH_Init+0x4e>
    {
      /* Init the low level hardware : GPIO, CLOCK, NVIC. */
      heth->MspInitCallback = HAL_ETH_MspInit;
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	4a95      	ldr	r2, [pc, #596]	@ (8011a70 <HAL_ETH_Init+0x2a0>)
 801181c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    heth->MspInitCallback(heth);
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011822:	6878      	ldr	r0, [r7, #4]
 8011824:	4798      	blx	r3
    HAL_ETH_MspInit(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011826:	2300      	movs	r3, #0
 8011828:	60bb      	str	r3, [r7, #8]
 801182a:	4b92      	ldr	r3, [pc, #584]	@ (8011a74 <HAL_ETH_Init+0x2a4>)
 801182c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801182e:	4a91      	ldr	r2, [pc, #580]	@ (8011a74 <HAL_ETH_Init+0x2a4>)
 8011830:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8011834:	6453      	str	r3, [r2, #68]	@ 0x44
 8011836:	4b8f      	ldr	r3, [pc, #572]	@ (8011a74 <HAL_ETH_Init+0x2a4>)
 8011838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801183a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801183e:	60bb      	str	r3, [r7, #8]
 8011840:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8011842:	4b8d      	ldr	r3, [pc, #564]	@ (8011a78 <HAL_ETH_Init+0x2a8>)
 8011844:	685b      	ldr	r3, [r3, #4]
 8011846:	4a8c      	ldr	r2, [pc, #560]	@ (8011a78 <HAL_ETH_Init+0x2a8>)
 8011848:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 801184c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 801184e:	4b8a      	ldr	r3, [pc, #552]	@ (8011a78 <HAL_ETH_Init+0x2a8>)
 8011850:	685a      	ldr	r2, [r3, #4]
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	6a1b      	ldr	r3, [r3, #32]
 8011856:	4988      	ldr	r1, [pc, #544]	@ (8011a78 <HAL_ETH_Init+0x2a8>)
 8011858:	4313      	orrs	r3, r2
 801185a:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	687a      	ldr	r2, [r7, #4]
 8011868:	6812      	ldr	r2, [r2, #0]
 801186a:	f043 0301 	orr.w	r3, r3, #1
 801186e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8011872:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8011874:	f7ff fe34 	bl	80114e0 <HAL_GetTick>
 8011878:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 801187a:	e011      	b.n	80118a0 <HAL_ETH_Init+0xd0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 801187c:	f7ff fe30 	bl	80114e0 <HAL_GetTick>
 8011880:	4602      	mov	r2, r0
 8011882:	697b      	ldr	r3, [r7, #20]
 8011884:	1ad3      	subs	r3, r2, r3
 8011886:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 801188a:	d909      	bls.n	80118a0 <HAL_ETH_Init+0xd0>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	2203      	movs	r2, #3
 8011890:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	2200      	movs	r2, #0
 8011898:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 801189c:	2303      	movs	r3, #3
 801189e:	e13b      	b.n	8011b18 <HAL_ETH_Init+0x348>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	f003 0301 	and.w	r3, r3, #1
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d1e4      	bne.n	801187c <HAL_ETH_Init+0xac>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	691b      	ldr	r3, [r3, #16]
 80118b8:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80118ba:	69fb      	ldr	r3, [r7, #28]
 80118bc:	f023 031c 	bic.w	r3, r3, #28
 80118c0:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80118c2:	f002 fbf3 	bl	80140ac <HAL_RCC_GetHCLKFreq>
 80118c6:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80118c8:	69bb      	ldr	r3, [r7, #24]
 80118ca:	4a6c      	ldr	r2, [pc, #432]	@ (8011a7c <HAL_ETH_Init+0x2ac>)
 80118cc:	4293      	cmp	r3, r2
 80118ce:	d908      	bls.n	80118e2 <HAL_ETH_Init+0x112>
 80118d0:	69bb      	ldr	r3, [r7, #24]
 80118d2:	4a6b      	ldr	r2, [pc, #428]	@ (8011a80 <HAL_ETH_Init+0x2b0>)
 80118d4:	4293      	cmp	r3, r2
 80118d6:	d804      	bhi.n	80118e2 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80118d8:	69fb      	ldr	r3, [r7, #28]
 80118da:	f043 0308 	orr.w	r3, r3, #8
 80118de:	61fb      	str	r3, [r7, #28]
 80118e0:	e027      	b.n	8011932 <HAL_ETH_Init+0x162>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80118e2:	69bb      	ldr	r3, [r7, #24]
 80118e4:	4a66      	ldr	r2, [pc, #408]	@ (8011a80 <HAL_ETH_Init+0x2b0>)
 80118e6:	4293      	cmp	r3, r2
 80118e8:	d908      	bls.n	80118fc <HAL_ETH_Init+0x12c>
 80118ea:	69bb      	ldr	r3, [r7, #24]
 80118ec:	4a5f      	ldr	r2, [pc, #380]	@ (8011a6c <HAL_ETH_Init+0x29c>)
 80118ee:	4293      	cmp	r3, r2
 80118f0:	d204      	bcs.n	80118fc <HAL_ETH_Init+0x12c>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80118f2:	69fb      	ldr	r3, [r7, #28]
 80118f4:	f043 030c 	orr.w	r3, r3, #12
 80118f8:	61fb      	str	r3, [r7, #28]
 80118fa:	e01a      	b.n	8011932 <HAL_ETH_Init+0x162>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80118fc:	69bb      	ldr	r3, [r7, #24]
 80118fe:	4a5b      	ldr	r2, [pc, #364]	@ (8011a6c <HAL_ETH_Init+0x29c>)
 8011900:	4293      	cmp	r3, r2
 8011902:	d303      	bcc.n	801190c <HAL_ETH_Init+0x13c>
 8011904:	69bb      	ldr	r3, [r7, #24]
 8011906:	4a5f      	ldr	r2, [pc, #380]	@ (8011a84 <HAL_ETH_Init+0x2b4>)
 8011908:	4293      	cmp	r3, r2
 801190a:	d911      	bls.n	8011930 <HAL_ETH_Init+0x160>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 801190c:	69bb      	ldr	r3, [r7, #24]
 801190e:	4a5d      	ldr	r2, [pc, #372]	@ (8011a84 <HAL_ETH_Init+0x2b4>)
 8011910:	4293      	cmp	r3, r2
 8011912:	d908      	bls.n	8011926 <HAL_ETH_Init+0x156>
 8011914:	69bb      	ldr	r3, [r7, #24]
 8011916:	4a5c      	ldr	r2, [pc, #368]	@ (8011a88 <HAL_ETH_Init+0x2b8>)
 8011918:	4293      	cmp	r3, r2
 801191a:	d804      	bhi.n	8011926 <HAL_ETH_Init+0x156>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 801191c:	69fb      	ldr	r3, [r7, #28]
 801191e:	f043 0304 	orr.w	r3, r3, #4
 8011922:	61fb      	str	r3, [r7, #28]
 8011924:	e005      	b.n	8011932 <HAL_ETH_Init+0x162>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8011926:	69fb      	ldr	r3, [r7, #28]
 8011928:	f043 0310 	orr.w	r3, r3, #16
 801192c:	61fb      	str	r3, [r7, #28]
 801192e:	e000      	b.n	8011932 <HAL_ETH_Init+0x162>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8011930:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	69fa      	ldr	r2, [r7, #28]
 8011938:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 801193a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 801193e:	2100      	movs	r1, #0
 8011940:	6878      	ldr	r0, [r7, #4]
 8011942:	f000 fc1c 	bl	801217e <HAL_ETH_WritePHYRegister>
 8011946:	4603      	mov	r3, r0
 8011948:	2b00      	cmp	r3, #0
 801194a:	d00b      	beq.n	8011964 <HAL_ETH_Init+0x194>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 801194c:	2301      	movs	r3, #1
 801194e:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8011950:	6939      	ldr	r1, [r7, #16]
 8011952:	6878      	ldr	r0, [r7, #4]
 8011954:	f000 fdd2 	bl	80124fc <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	2201      	movs	r2, #1
 801195c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8011960:	2301      	movs	r3, #1
 8011962:	e0d9      	b.n	8011b18 <HAL_ETH_Init+0x348>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8011964:	20ff      	movs	r0, #255	@ 0xff
 8011966:	f7ff fdc7 	bl	80114f8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	685b      	ldr	r3, [r3, #4]
 801196e:	2b00      	cmp	r3, #0
 8011970:	f000 80a7 	beq.w	8011ac2 <HAL_ETH_Init+0x2f2>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8011974:	f7ff fdb4 	bl	80114e0 <HAL_GetTick>
 8011978:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 801197a:	f107 030c 	add.w	r3, r7, #12
 801197e:	461a      	mov	r2, r3
 8011980:	2101      	movs	r1, #1
 8011982:	6878      	ldr	r0, [r7, #4]
 8011984:	f000 fb93 	bl	80120ae <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8011988:	f7ff fdaa 	bl	80114e0 <HAL_GetTick>
 801198c:	4602      	mov	r2, r0
 801198e:	697b      	ldr	r3, [r7, #20]
 8011990:	1ad3      	subs	r3, r2, r3
 8011992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011996:	4293      	cmp	r3, r2
 8011998:	d90f      	bls.n	80119ba <HAL_ETH_Init+0x1ea>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 801199a:	2301      	movs	r3, #1
 801199c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 801199e:	6939      	ldr	r1, [r7, #16]
 80119a0:	6878      	ldr	r0, [r7, #4]
 80119a2:	f000 fdab 	bl	80124fc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	2201      	movs	r2, #1
 80119aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	2200      	movs	r2, #0
 80119b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
        return HAL_TIMEOUT;
 80119b6:	2303      	movs	r3, #3
 80119b8:	e0ae      	b.n	8011b18 <HAL_ETH_Init+0x348>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	f003 0304 	and.w	r3, r3, #4
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d0da      	beq.n	801197a <HAL_ETH_Init+0x1aa>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80119c4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80119c8:	2100      	movs	r1, #0
 80119ca:	6878      	ldr	r0, [r7, #4]
 80119cc:	f000 fbd7 	bl	801217e <HAL_ETH_WritePHYRegister>
 80119d0:	4603      	mov	r3, r0
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d00b      	beq.n	80119ee <HAL_ETH_Init+0x21e>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80119d6:	2301      	movs	r3, #1
 80119d8:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80119da:	6939      	ldr	r1, [r7, #16]
 80119dc:	6878      	ldr	r0, [r7, #4]
 80119de:	f000 fd8d 	bl	80124fc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	2201      	movs	r2, #1
 80119e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80119ea:	2301      	movs	r3, #1
 80119ec:	e094      	b.n	8011b18 <HAL_ETH_Init+0x348>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80119ee:	f7ff fd77 	bl	80114e0 <HAL_GetTick>
 80119f2:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80119f4:	f107 030c 	add.w	r3, r7, #12
 80119f8:	461a      	mov	r2, r3
 80119fa:	2101      	movs	r1, #1
 80119fc:	6878      	ldr	r0, [r7, #4]
 80119fe:	f000 fb56 	bl	80120ae <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8011a02:	f7ff fd6d 	bl	80114e0 <HAL_GetTick>
 8011a06:	4602      	mov	r2, r0
 8011a08:	697b      	ldr	r3, [r7, #20]
 8011a0a:	1ad3      	subs	r3, r2, r3
 8011a0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011a10:	4293      	cmp	r3, r2
 8011a12:	d90f      	bls.n	8011a34 <HAL_ETH_Init+0x264>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8011a14:	2301      	movs	r3, #1
 8011a16:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8011a18:	6939      	ldr	r1, [r7, #16]
 8011a1a:	6878      	ldr	r0, [r7, #4]
 8011a1c:	f000 fd6e 	bl	80124fc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	2201      	movs	r2, #1
 8011a24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	2200      	movs	r2, #0
 8011a2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
        return HAL_TIMEOUT;
 8011a30:	2303      	movs	r3, #3
 8011a32:	e071      	b.n	8011b18 <HAL_ETH_Init+0x348>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	f003 0320 	and.w	r3, r3, #32
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d0da      	beq.n	80119f4 <HAL_ETH_Init+0x224>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8011a3e:	f107 030c 	add.w	r3, r7, #12
 8011a42:	461a      	mov	r2, r3
 8011a44:	2110      	movs	r1, #16
 8011a46:	6878      	ldr	r0, [r7, #4]
 8011a48:	f000 fb31 	bl	80120ae <HAL_ETH_ReadPHYRegister>
 8011a4c:	4603      	mov	r3, r0
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d01c      	beq.n	8011a8c <HAL_ETH_Init+0x2bc>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8011a52:	2301      	movs	r3, #1
 8011a54:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8011a56:	6939      	ldr	r1, [r7, #16]
 8011a58:	6878      	ldr	r0, [r7, #4]
 8011a5a:	f000 fd4f 	bl	80124fc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	2201      	movs	r2, #1
 8011a62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8011a66:	2301      	movs	r3, #1
 8011a68:	e056      	b.n	8011b18 <HAL_ETH_Init+0x348>
 8011a6a:	bf00      	nop
 8011a6c:	03938700 	.word	0x03938700
 8011a70:	08014e29 	.word	0x08014e29
 8011a74:	40023800 	.word	0x40023800
 8011a78:	40013800 	.word	0x40013800
 8011a7c:	01312cff 	.word	0x01312cff
 8011a80:	02160ebf 	.word	0x02160ebf
 8011a84:	05f5e0ff 	.word	0x05f5e0ff
 8011a88:	08f0d17f 	.word	0x08f0d17f
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	f003 0304 	and.w	r3, r3, #4
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d004      	beq.n	8011aa0 <HAL_ETH_Init+0x2d0>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011a9c:	60da      	str	r2, [r3, #12]
 8011a9e:	e002      	b.n	8011aa6 <HAL_ETH_Init+0x2d6>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	2200      	movs	r2, #0
 8011aa4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	f003 0302 	and.w	r3, r3, #2
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d003      	beq.n	8011ab8 <HAL_ETH_Init+0x2e8>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	2200      	movs	r2, #0
 8011ab4:	609a      	str	r2, [r3, #8]
 8011ab6:	e026      	b.n	8011b06 <HAL_ETH_Init+0x336>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8011abe:	609a      	str	r2, [r3, #8]
 8011ac0:	e021      	b.n	8011b06 <HAL_ETH_Init+0x336>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	68db      	ldr	r3, [r3, #12]
 8011ac6:	08db      	lsrs	r3, r3, #3
 8011ac8:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	689b      	ldr	r3, [r3, #8]
 8011ace:	085b      	lsrs	r3, r3, #1
 8011ad0:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8011ad2:	4313      	orrs	r3, r2
 8011ad4:	b29b      	uxth	r3, r3
 8011ad6:	461a      	mov	r2, r3
 8011ad8:	2100      	movs	r1, #0
 8011ada:	6878      	ldr	r0, [r7, #4]
 8011adc:	f000 fb4f 	bl	801217e <HAL_ETH_WritePHYRegister>
 8011ae0:	4603      	mov	r3, r0
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d00b      	beq.n	8011afe <HAL_ETH_Init+0x32e>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8011ae6:	2301      	movs	r3, #1
 8011ae8:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8011aea:	6939      	ldr	r1, [r7, #16]
 8011aec:	6878      	ldr	r0, [r7, #4]
 8011aee:	f000 fd05 	bl	80124fc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	2201      	movs	r2, #1
 8011af6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8011afa:	2301      	movs	r3, #1
 8011afc:	e00c      	b.n	8011b18 <HAL_ETH_Init+0x348>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8011afe:	f640 70ff 	movw	r0, #4095	@ 0xfff
 8011b02:	f7ff fcf9 	bl	80114f8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8011b06:	6939      	ldr	r1, [r7, #16]
 8011b08:	6878      	ldr	r0, [r7, #4]
 8011b0a:	f000 fcf7 	bl	80124fc <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	2201      	movs	r2, #1
 8011b12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Return function status */
  return HAL_OK;
 8011b16:	2300      	movs	r3, #0
}
 8011b18:	4618      	mov	r0, r3
 8011b1a:	3720      	adds	r7, #32
 8011b1c:	46bd      	mov	sp, r7
 8011b1e:	bd80      	pop	{r7, pc}

08011b20 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8011b20:	b480      	push	{r7}
 8011b22:	b087      	sub	sp, #28
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	60f8      	str	r0, [r7, #12]
 8011b28:	60b9      	str	r1, [r7, #8]
 8011b2a:	607a      	str	r2, [r7, #4]
 8011b2c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8011b2e:	2300      	movs	r3, #0
 8011b30:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011b38:	2b01      	cmp	r3, #1
 8011b3a:	d101      	bne.n	8011b40 <HAL_ETH_DMATxDescListInit+0x20>
 8011b3c:	2302      	movs	r3, #2
 8011b3e:	e051      	b.n	8011be4 <HAL_ETH_DMATxDescListInit+0xc4>
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	2201      	movs	r2, #1
 8011b44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	2202      	movs	r2, #2
 8011b4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	68ba      	ldr	r2, [r7, #8]
 8011b54:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8011b56:	2300      	movs	r3, #0
 8011b58:	617b      	str	r3, [r7, #20]
 8011b5a:	e030      	b.n	8011bbe <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8011b5c:	697b      	ldr	r3, [r7, #20]
 8011b5e:	015b      	lsls	r3, r3, #5
 8011b60:	68ba      	ldr	r2, [r7, #8]
 8011b62:	4413      	add	r3, r2
 8011b64:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8011b66:	693b      	ldr	r3, [r7, #16]
 8011b68:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8011b6c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8011b6e:	697b      	ldr	r3, [r7, #20]
 8011b70:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8011b74:	fb02 f303 	mul.w	r3, r2, r3
 8011b78:	687a      	ldr	r2, [r7, #4]
 8011b7a:	4413      	add	r3, r2
 8011b7c:	461a      	mov	r2, r3
 8011b7e:	693b      	ldr	r3, [r7, #16]
 8011b80:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	69db      	ldr	r3, [r3, #28]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d105      	bne.n	8011b96 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8011b8a:	693b      	ldr	r3, [r7, #16]
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8011b92:	693b      	ldr	r3, [r7, #16]
 8011b94:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8011b96:	683b      	ldr	r3, [r7, #0]
 8011b98:	3b01      	subs	r3, #1
 8011b9a:	697a      	ldr	r2, [r7, #20]
 8011b9c:	429a      	cmp	r2, r3
 8011b9e:	d208      	bcs.n	8011bb2 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8011ba0:	697b      	ldr	r3, [r7, #20]
 8011ba2:	3301      	adds	r3, #1
 8011ba4:	015b      	lsls	r3, r3, #5
 8011ba6:	68ba      	ldr	r2, [r7, #8]
 8011ba8:	4413      	add	r3, r2
 8011baa:	461a      	mov	r2, r3
 8011bac:	693b      	ldr	r3, [r7, #16]
 8011bae:	60da      	str	r2, [r3, #12]
 8011bb0:	e002      	b.n	8011bb8 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8011bb2:	68ba      	ldr	r2, [r7, #8]
 8011bb4:	693b      	ldr	r3, [r7, #16]
 8011bb6:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8011bb8:	697b      	ldr	r3, [r7, #20]
 8011bba:	3301      	adds	r3, #1
 8011bbc:	617b      	str	r3, [r7, #20]
 8011bbe:	697a      	ldr	r2, [r7, #20]
 8011bc0:	683b      	ldr	r3, [r7, #0]
 8011bc2:	429a      	cmp	r2, r3
 8011bc4:	d3ca      	bcc.n	8011b5c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	681a      	ldr	r2, [r3, #0]
 8011bca:	68bb      	ldr	r3, [r7, #8]
 8011bcc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8011bd0:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	2201      	movs	r2, #1
 8011bd6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	2200      	movs	r2, #0
 8011bde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 8011be2:	2300      	movs	r3, #0
}
 8011be4:	4618      	mov	r0, r3
 8011be6:	371c      	adds	r7, #28
 8011be8:	46bd      	mov	sp, r7
 8011bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bee:	4770      	bx	lr

08011bf0 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8011bf0:	b480      	push	{r7}
 8011bf2:	b087      	sub	sp, #28
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	60f8      	str	r0, [r7, #12]
 8011bf8:	60b9      	str	r1, [r7, #8]
 8011bfa:	607a      	str	r2, [r7, #4]
 8011bfc:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8011bfe:	2300      	movs	r3, #0
 8011c00:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011c08:	2b01      	cmp	r3, #1
 8011c0a:	d101      	bne.n	8011c10 <HAL_ETH_DMARxDescListInit+0x20>
 8011c0c:	2302      	movs	r3, #2
 8011c0e:	e055      	b.n	8011cbc <HAL_ETH_DMARxDescListInit+0xcc>
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	2201      	movs	r2, #1
 8011c14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	2202      	movs	r2, #2
 8011c1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	68ba      	ldr	r2, [r7, #8]
 8011c24:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8011c26:	2300      	movs	r3, #0
 8011c28:	617b      	str	r3, [r7, #20]
 8011c2a:	e034      	b.n	8011c96 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8011c2c:	697b      	ldr	r3, [r7, #20]
 8011c2e:	015b      	lsls	r3, r3, #5
 8011c30:	68ba      	ldr	r2, [r7, #8]
 8011c32:	4413      	add	r3, r2
 8011c34:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8011c36:	693b      	ldr	r3, [r7, #16]
 8011c38:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8011c3c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8011c3e:	693b      	ldr	r3, [r7, #16]
 8011c40:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8011c44:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8011c46:	697b      	ldr	r3, [r7, #20]
 8011c48:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8011c4c:	fb02 f303 	mul.w	r3, r2, r3
 8011c50:	687a      	ldr	r2, [r7, #4]
 8011c52:	4413      	add	r3, r2
 8011c54:	461a      	mov	r2, r3
 8011c56:	693b      	ldr	r3, [r7, #16]
 8011c58:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	699b      	ldr	r3, [r3, #24]
 8011c5e:	2b01      	cmp	r3, #1
 8011c60:	d105      	bne.n	8011c6e <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8011c62:	693b      	ldr	r3, [r7, #16]
 8011c64:	685b      	ldr	r3, [r3, #4]
 8011c66:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8011c6a:	693b      	ldr	r3, [r7, #16]
 8011c6c:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8011c6e:	683b      	ldr	r3, [r7, #0]
 8011c70:	3b01      	subs	r3, #1
 8011c72:	697a      	ldr	r2, [r7, #20]
 8011c74:	429a      	cmp	r2, r3
 8011c76:	d208      	bcs.n	8011c8a <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8011c78:	697b      	ldr	r3, [r7, #20]
 8011c7a:	3301      	adds	r3, #1
 8011c7c:	015b      	lsls	r3, r3, #5
 8011c7e:	68ba      	ldr	r2, [r7, #8]
 8011c80:	4413      	add	r3, r2
 8011c82:	461a      	mov	r2, r3
 8011c84:	693b      	ldr	r3, [r7, #16]
 8011c86:	60da      	str	r2, [r3, #12]
 8011c88:	e002      	b.n	8011c90 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8011c8a:	68ba      	ldr	r2, [r7, #8]
 8011c8c:	693b      	ldr	r3, [r7, #16]
 8011c8e:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8011c90:	697b      	ldr	r3, [r7, #20]
 8011c92:	3301      	adds	r3, #1
 8011c94:	617b      	str	r3, [r7, #20]
 8011c96:	697a      	ldr	r2, [r7, #20]
 8011c98:	683b      	ldr	r3, [r7, #0]
 8011c9a:	429a      	cmp	r2, r3
 8011c9c:	d3c6      	bcc.n	8011c2c <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	681a      	ldr	r2, [r3, #0]
 8011ca2:	68bb      	ldr	r3, [r7, #8]
 8011ca4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8011ca8:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	2201      	movs	r2, #1
 8011cae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	2200      	movs	r2, #0
 8011cb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 8011cba:	2300      	movs	r3, #0
}
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	371c      	adds	r7, #28
 8011cc0:	46bd      	mov	sp, r7
 8011cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc6:	4770      	bx	lr

08011cc8 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8011cc8:	b480      	push	{r7}
 8011cca:	b087      	sub	sp, #28
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	6078      	str	r0, [r7, #4]
 8011cd0:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	617b      	str	r3, [r7, #20]
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	60fb      	str	r3, [r7, #12]
 8011cda:	2300      	movs	r3, #0
 8011cdc:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011ce4:	2b01      	cmp	r3, #1
 8011ce6:	d101      	bne.n	8011cec <HAL_ETH_TransmitFrame+0x24>
 8011ce8:	2302      	movs	r3, #2
 8011cea:	e0cc      	b.n	8011e86 <HAL_ETH_TransmitFrame+0x1be>
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	2201      	movs	r2, #1
 8011cf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	2202      	movs	r2, #2
 8011cf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  if (FrameLength == 0U) 
 8011cfc:	683b      	ldr	r3, [r7, #0]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d109      	bne.n	8011d16 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	2201      	movs	r2, #1
 8011d06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	2200      	movs	r2, #0
 8011d0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
    return  HAL_ERROR;                                    
 8011d12:	2301      	movs	r3, #1
 8011d14:	e0b7      	b.n	8011e86 <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	da09      	bge.n	8011d34 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	2212      	movs	r2, #18
 8011d24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	2200      	movs	r2, #0
 8011d2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
    return HAL_ERROR;
 8011d30:	2301      	movs	r3, #1
 8011d32:	e0a8      	b.n	8011e86 <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8011d34:	683b      	ldr	r3, [r7, #0]
 8011d36:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8011d3a:	4293      	cmp	r3, r2
 8011d3c:	d915      	bls.n	8011d6a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8011d3e:	683b      	ldr	r3, [r7, #0]
 8011d40:	4a54      	ldr	r2, [pc, #336]	@ (8011e94 <HAL_ETH_TransmitFrame+0x1cc>)
 8011d42:	fba2 2303 	umull	r2, r3, r2, r3
 8011d46:	0a9b      	lsrs	r3, r3, #10
 8011d48:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8011d4a:	683a      	ldr	r2, [r7, #0]
 8011d4c:	4b51      	ldr	r3, [pc, #324]	@ (8011e94 <HAL_ETH_TransmitFrame+0x1cc>)
 8011d4e:	fba3 1302 	umull	r1, r3, r3, r2
 8011d52:	0a9b      	lsrs	r3, r3, #10
 8011d54:	f240 51f4 	movw	r1, #1524	@ 0x5f4
 8011d58:	fb01 f303 	mul.w	r3, r1, r3
 8011d5c:	1ad3      	subs	r3, r2, r3
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d005      	beq.n	8011d6e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8011d62:	697b      	ldr	r3, [r7, #20]
 8011d64:	3301      	adds	r3, #1
 8011d66:	617b      	str	r3, [r7, #20]
 8011d68:	e001      	b.n	8011d6e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8011d6a:	2301      	movs	r3, #1
 8011d6c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8011d6e:	697b      	ldr	r3, [r7, #20]
 8011d70:	2b01      	cmp	r3, #1
 8011d72:	d11c      	bne.n	8011dae <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d78:	681a      	ldr	r2, [r3, #0]
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d7e:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
 8011d82:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d88:	683a      	ldr	r2, [r7, #0]
 8011d8a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8011d8e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d94:	681a      	ldr	r2, [r3, #0]
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d9a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8011d9e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011da4:	68db      	ldr	r3, [r3, #12]
 8011da6:	461a      	mov	r2, r3
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	62da      	str	r2, [r3, #44]	@ 0x2c
 8011dac:	e04b      	b.n	8011e46 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8011dae:	2300      	movs	r3, #0
 8011db0:	613b      	str	r3, [r7, #16]
 8011db2:	e044      	b.n	8011e3e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011db8:	681a      	ldr	r2, [r3, #0]
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011dbe:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8011dc2:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8011dc4:	693b      	ldr	r3, [r7, #16]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d107      	bne.n	8011dda <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011dce:	681a      	ldr	r2, [r3, #0]
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011dd4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8011dd8:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011dde:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8011de2:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8011de4:	697b      	ldr	r3, [r7, #20]
 8011de6:	3b01      	subs	r3, #1
 8011de8:	693a      	ldr	r2, [r7, #16]
 8011dea:	429a      	cmp	r2, r3
 8011dec:	d116      	bne.n	8011e1c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011df2:	681a      	ldr	r2, [r3, #0]
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011df8:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8011dfc:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8011dfe:	697b      	ldr	r3, [r7, #20]
 8011e00:	4a25      	ldr	r2, [pc, #148]	@ (8011e98 <HAL_ETH_TransmitFrame+0x1d0>)
 8011e02:	fb03 f202 	mul.w	r2, r3, r2
 8011e06:	683b      	ldr	r3, [r7, #0]
 8011e08:	4413      	add	r3, r2
 8011e0a:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8011e0e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e14:	68fa      	ldr	r2, [r7, #12]
 8011e16:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8011e1a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e20:	681a      	ldr	r2, [r3, #0]
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e26:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8011e2a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e30:	68db      	ldr	r3, [r3, #12]
 8011e32:	461a      	mov	r2, r3
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	62da      	str	r2, [r3, #44]	@ 0x2c
    for (i=0U; i< bufcount; i++)
 8011e38:	693b      	ldr	r3, [r7, #16]
 8011e3a:	3301      	adds	r3, #1
 8011e3c:	613b      	str	r3, [r7, #16]
 8011e3e:	693a      	ldr	r2, [r7, #16]
 8011e40:	697b      	ldr	r3, [r7, #20]
 8011e42:	429a      	cmp	r2, r3
 8011e44:	d3b6      	bcc.n	8011db4 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011e4e:	695b      	ldr	r3, [r3, #20]
 8011e50:	f003 0304 	and.w	r3, r3, #4
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d00d      	beq.n	8011e74 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011e60:	461a      	mov	r2, r3
 8011e62:	2304      	movs	r3, #4
 8011e64:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011e6e:	461a      	mov	r2, r3
 8011e70:	2300      	movs	r3, #0
 8011e72:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	2201      	movs	r2, #1
 8011e78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	2200      	movs	r2, #0
 8011e80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 8011e84:	2300      	movs	r3, #0
}
 8011e86:	4618      	mov	r0, r3
 8011e88:	371c      	adds	r7, #28
 8011e8a:	46bd      	mov	sp, r7
 8011e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e90:	4770      	bx	lr
 8011e92:	bf00      	nop
 8011e94:	ac02b00b 	.word	0xac02b00b
 8011e98:	fffffa0c 	.word	0xfffffa0c

08011e9c <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8011e9c:	b480      	push	{r7}
 8011e9e:	b085      	sub	sp, #20
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8011ea4:	2300      	movs	r3, #0
 8011ea6:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011eae:	2b01      	cmp	r3, #1
 8011eb0:	d101      	bne.n	8011eb6 <HAL_ETH_GetReceivedFrame+0x1a>
 8011eb2:	2302      	movs	r3, #2
 8011eb4:	e070      	b.n	8011f98 <HAL_ETH_GetReceivedFrame+0xfc>
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	2201      	movs	r2, #1
 8011eba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	2202      	movs	r2, #2
 8011ec2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	db5a      	blt.n	8011f86 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d030      	beq.n	8011f40 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011ee2:	1c5a      	adds	r2, r3, #1
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	639a      	str	r2, [r3, #56]	@ 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011eec:	2b01      	cmp	r3, #1
 8011eee:	d103      	bne.n	8011ef8 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	631a      	str	r2, [r3, #48]	@ 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	635a      	str	r2, [r3, #52]	@ 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	0c1b      	lsrs	r3, r3, #16
 8011f08:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011f0c:	3b04      	subs	r3, #4
 8011f0e:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	68fa      	ldr	r2, [r7, #12]
 8011f14:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f1a:	689a      	ldr	r2, [r3, #8]
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	641a      	str	r2, [r3, #64]	@ 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f24:	68db      	ldr	r3, [r3, #12]
 8011f26:	461a      	mov	r2, r3
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	2201      	movs	r2, #1
 8011f30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	2200      	movs	r2, #0
 8011f38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
      
      /* Return function status */
      return HAL_OK;
 8011f3c:	2300      	movs	r3, #0
 8011f3e:	e02b      	b.n	8011f98 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d010      	beq.n	8011f70 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	631a      	str	r2, [r3, #48]	@ 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	2200      	movs	r2, #0
 8011f5a:	635a      	str	r2, [r3, #52]	@ 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	2201      	movs	r2, #1
 8011f60:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f66:	68db      	ldr	r3, [r3, #12]
 8011f68:	461a      	mov	r2, r3
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	629a      	str	r2, [r3, #40]	@ 0x28
 8011f6e:	e00a      	b.n	8011f86 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f74:	1c5a      	adds	r2, r3, #1
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f7e:	68db      	ldr	r3, [r3, #12]
 8011f80:	461a      	mov	r2, r3
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	629a      	str	r2, [r3, #40]	@ 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	2201      	movs	r2, #1
 8011f8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	2200      	movs	r2, #0
 8011f92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8011f96:	2301      	movs	r3, #1
}
 8011f98:	4618      	mov	r0, r3
 8011f9a:	3714      	adds	r7, #20
 8011f9c:	46bd      	mov	sp, r7
 8011f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa2:	4770      	bx	lr

08011fa4 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	b082      	sub	sp, #8
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011fb4:	695b      	ldr	r3, [r3, #20]
 8011fb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011fba:	2b40      	cmp	r3, #64	@ 0x40
 8011fbc:	d113      	bne.n	8011fe6 <HAL_ETH_IRQHandler+0x42>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011fc2:	6878      	ldr	r0, [r7, #4]
 8011fc4:	4798      	blx	r3
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011fce:	461a      	mov	r2, r3
 8011fd0:	2340      	movs	r3, #64	@ 0x40
 8011fd2:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	2201      	movs	r2, #1
 8011fd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	2200      	movs	r2, #0
 8011fe0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011fe4:	e01b      	b.n	801201e <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011fee:	695b      	ldr	r3, [r3, #20]
 8011ff0:	f003 0301 	and.w	r3, r3, #1
 8011ff4:	2b01      	cmp	r3, #1
 8011ff6:	d112      	bne.n	801201e <HAL_ETH_IRQHandler+0x7a>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011ffc:	6878      	ldr	r0, [r7, #4]
 8011ffe:	4798      	blx	r3
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012008:	461a      	mov	r2, r3
 801200a:	2301      	movs	r3, #1
 801200c:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	2201      	movs	r2, #1
 8012012:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	2200      	movs	r2, #0
 801201a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012026:	461a      	mov	r2, r3
 8012028:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801202c:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012036:	695b      	ldr	r3, [r3, #20]
 8012038:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801203c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012040:	d113      	bne.n	801206a <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012046:	6878      	ldr	r0, [r7, #4]
 8012048:	4798      	blx	r3
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012052:	461a      	mov	r2, r3
 8012054:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012058:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	2201      	movs	r2, #1
 801205e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	2200      	movs	r2, #0
 8012066:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }
}
 801206a:	bf00      	nop
 801206c:	3708      	adds	r7, #8
 801206e:	46bd      	mov	sp, r7
 8012070:	bd80      	pop	{r7, pc}

08012072 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8012072:	b480      	push	{r7}
 8012074:	b083      	sub	sp, #12
 8012076:	af00      	add	r7, sp, #0
 8012078:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 801207a:	bf00      	nop
 801207c:	370c      	adds	r7, #12
 801207e:	46bd      	mov	sp, r7
 8012080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012084:	4770      	bx	lr

08012086 <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8012086:	b480      	push	{r7}
 8012088:	b083      	sub	sp, #12
 801208a:	af00      	add	r7, sp, #0
 801208c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 801208e:	bf00      	nop
 8012090:	370c      	adds	r7, #12
 8012092:	46bd      	mov	sp, r7
 8012094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012098:	4770      	bx	lr

0801209a <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 801209a:	b480      	push	{r7}
 801209c:	b083      	sub	sp, #12
 801209e:	af00      	add	r7, sp, #0
 80120a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80120a2:	bf00      	nop
 80120a4:	370c      	adds	r7, #12
 80120a6:	46bd      	mov	sp, r7
 80120a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ac:	4770      	bx	lr

080120ae <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80120ae:	b580      	push	{r7, lr}
 80120b0:	b086      	sub	sp, #24
 80120b2:	af00      	add	r7, sp, #0
 80120b4:	60f8      	str	r0, [r7, #12]
 80120b6:	460b      	mov	r3, r1
 80120b8:	607a      	str	r2, [r7, #4]
 80120ba:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80120bc:	2300      	movs	r3, #0
 80120be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80120c0:	2300      	movs	r3, #0
 80120c2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80120ca:	b2db      	uxtb	r3, r3
 80120cc:	2b82      	cmp	r3, #130	@ 0x82
 80120ce:	d101      	bne.n	80120d4 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80120d0:	2302      	movs	r3, #2
 80120d2:	e050      	b.n	8012176 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	2282      	movs	r2, #130	@ 0x82
 80120d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	691b      	ldr	r3, [r3, #16]
 80120e2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80120e4:	697b      	ldr	r3, [r7, #20]
 80120e6:	f003 031c 	and.w	r3, r3, #28
 80120ea:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	8a1b      	ldrh	r3, [r3, #16]
 80120f0:	02db      	lsls	r3, r3, #11
 80120f2:	b29b      	uxth	r3, r3
 80120f4:	697a      	ldr	r2, [r7, #20]
 80120f6:	4313      	orrs	r3, r2
 80120f8:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80120fa:	897b      	ldrh	r3, [r7, #10]
 80120fc:	019b      	lsls	r3, r3, #6
 80120fe:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8012102:	697a      	ldr	r2, [r7, #20]
 8012104:	4313      	orrs	r3, r2
 8012106:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8012108:	697b      	ldr	r3, [r7, #20]
 801210a:	f023 0302 	bic.w	r3, r3, #2
 801210e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8012110:	697b      	ldr	r3, [r7, #20]
 8012112:	f043 0301 	orr.w	r3, r3, #1
 8012116:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	697a      	ldr	r2, [r7, #20]
 801211e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8012120:	f7ff f9de 	bl	80114e0 <HAL_GetTick>
 8012124:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8012126:	e015      	b.n	8012154 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8012128:	f7ff f9da 	bl	80114e0 <HAL_GetTick>
 801212c:	4602      	mov	r2, r0
 801212e:	693b      	ldr	r3, [r7, #16]
 8012130:	1ad3      	subs	r3, r2, r3
 8012132:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012136:	d309      	bcc.n	801214c <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	2201      	movs	r2, #1
 801213c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	2200      	movs	r2, #0
 8012144:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
      return HAL_TIMEOUT;
 8012148:	2303      	movs	r3, #3
 801214a:	e014      	b.n	8012176 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	691b      	ldr	r3, [r3, #16]
 8012152:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8012154:	697b      	ldr	r3, [r7, #20]
 8012156:	f003 0301 	and.w	r3, r3, #1
 801215a:	2b00      	cmp	r3, #0
 801215c:	d1e4      	bne.n	8012128 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	695b      	ldr	r3, [r3, #20]
 8012164:	b29b      	uxth	r3, r3
 8012166:	461a      	mov	r2, r3
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	2201      	movs	r2, #1
 8012170:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Return function status */
  return HAL_OK;
 8012174:	2300      	movs	r3, #0
}
 8012176:	4618      	mov	r0, r3
 8012178:	3718      	adds	r7, #24
 801217a:	46bd      	mov	sp, r7
 801217c:	bd80      	pop	{r7, pc}

0801217e <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 801217e:	b580      	push	{r7, lr}
 8012180:	b086      	sub	sp, #24
 8012182:	af00      	add	r7, sp, #0
 8012184:	60f8      	str	r0, [r7, #12]
 8012186:	460b      	mov	r3, r1
 8012188:	607a      	str	r2, [r7, #4]
 801218a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 801218c:	2300      	movs	r3, #0
 801218e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8012190:	2300      	movs	r3, #0
 8012192:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801219a:	b2db      	uxtb	r3, r3
 801219c:	2b42      	cmp	r3, #66	@ 0x42
 801219e:	d101      	bne.n	80121a4 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80121a0:	2302      	movs	r3, #2
 80121a2:	e04e      	b.n	8012242 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	2242      	movs	r2, #66	@ 0x42
 80121a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	691b      	ldr	r3, [r3, #16]
 80121b2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80121b4:	697b      	ldr	r3, [r7, #20]
 80121b6:	f003 031c 	and.w	r3, r3, #28
 80121ba:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	8a1b      	ldrh	r3, [r3, #16]
 80121c0:	02db      	lsls	r3, r3, #11
 80121c2:	b29b      	uxth	r3, r3
 80121c4:	697a      	ldr	r2, [r7, #20]
 80121c6:	4313      	orrs	r3, r2
 80121c8:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80121ca:	897b      	ldrh	r3, [r7, #10]
 80121cc:	019b      	lsls	r3, r3, #6
 80121ce:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80121d2:	697a      	ldr	r2, [r7, #20]
 80121d4:	4313      	orrs	r3, r2
 80121d6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80121d8:	697b      	ldr	r3, [r7, #20]
 80121da:	f043 0302 	orr.w	r3, r3, #2
 80121de:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80121e0:	697b      	ldr	r3, [r7, #20]
 80121e2:	f043 0301 	orr.w	r3, r3, #1
 80121e6:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	b29a      	uxth	r2, r3
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	697a      	ldr	r2, [r7, #20]
 80121f8:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80121fa:	f7ff f971 	bl	80114e0 <HAL_GetTick>
 80121fe:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8012200:	e015      	b.n	801222e <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8012202:	f7ff f96d 	bl	80114e0 <HAL_GetTick>
 8012206:	4602      	mov	r2, r0
 8012208:	693b      	ldr	r3, [r7, #16]
 801220a:	1ad3      	subs	r3, r2, r3
 801220c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012210:	d309      	bcc.n	8012226 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	2201      	movs	r2, #1
 8012216:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	2200      	movs	r2, #0
 801221e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
      return HAL_TIMEOUT;
 8012222:	2303      	movs	r3, #3
 8012224:	e00d      	b.n	8012242 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	691b      	ldr	r3, [r3, #16]
 801222c:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 801222e:	697b      	ldr	r3, [r7, #20]
 8012230:	f003 0301 	and.w	r3, r3, #1
 8012234:	2b00      	cmp	r3, #0
 8012236:	d1e4      	bne.n	8012202 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	2201      	movs	r2, #1
 801223c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Return function status */
  return HAL_OK; 
 8012240:	2300      	movs	r3, #0
}
 8012242:	4618      	mov	r0, r3
 8012244:	3718      	adds	r7, #24
 8012246:	46bd      	mov	sp, r7
 8012248:	bd80      	pop	{r7, pc}

0801224a <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 801224a:	b580      	push	{r7, lr}
 801224c:	b082      	sub	sp, #8
 801224e:	af00      	add	r7, sp, #0
 8012250:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012258:	2b01      	cmp	r3, #1
 801225a:	d101      	bne.n	8012260 <HAL_ETH_Start+0x16>
 801225c:	2302      	movs	r3, #2
 801225e:	e01f      	b.n	80122a0 <HAL_ETH_Start+0x56>
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	2201      	movs	r2, #1
 8012264:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	2202      	movs	r2, #2
 801226c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8012270:	6878      	ldr	r0, [r7, #4]
 8012272:	f000 fb41 	bl	80128f8 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8012276:	6878      	ldr	r0, [r7, #4]
 8012278:	f000 fb78 	bl	801296c <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 801227c:	6878      	ldr	r0, [r7, #4]
 801227e:	f000 fc07 	bl	8012a90 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8012282:	6878      	ldr	r0, [r7, #4]
 8012284:	f000 fbac 	bl	80129e0 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8012288:	6878      	ldr	r0, [r7, #4]
 801228a:	f000 fbd5 	bl	8012a38 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	2201      	movs	r2, #1
 8012292:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	2200      	movs	r2, #0
 801229a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 801229e:	2300      	movs	r3, #0
}
 80122a0:	4618      	mov	r0, r3
 80122a2:	3708      	adds	r7, #8
 80122a4:	46bd      	mov	sp, r7
 80122a6:	bd80      	pop	{r7, pc}

080122a8 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80122a8:	b580      	push	{r7, lr}
 80122aa:	b082      	sub	sp, #8
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80122b6:	2b01      	cmp	r3, #1
 80122b8:	d101      	bne.n	80122be <HAL_ETH_Stop+0x16>
 80122ba:	2302      	movs	r3, #2
 80122bc:	e01f      	b.n	80122fe <HAL_ETH_Stop+0x56>
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	2201      	movs	r2, #1
 80122c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	2202      	movs	r2, #2
 80122ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80122ce:	6878      	ldr	r0, [r7, #4]
 80122d0:	f000 fb9c 	bl	8012a0c <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80122d4:	6878      	ldr	r0, [r7, #4]
 80122d6:	f000 fbc5 	bl	8012a64 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80122da:	6878      	ldr	r0, [r7, #4]
 80122dc:	f000 fb63 	bl	80129a6 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80122e0:	6878      	ldr	r0, [r7, #4]
 80122e2:	f000 fbd5 	bl	8012a90 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80122e6:	6878      	ldr	r0, [r7, #4]
 80122e8:	f000 fb23 	bl	8012932 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	2201      	movs	r2, #1
 80122f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	2200      	movs	r2, #0
 80122f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 80122fc:	2300      	movs	r3, #0
}
 80122fe:	4618      	mov	r0, r3
 8012300:	3708      	adds	r7, #8
 8012302:	46bd      	mov	sp, r7
 8012304:	bd80      	pop	{r7, pc}
	...

08012308 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8012308:	b580      	push	{r7, lr}
 801230a:	b084      	sub	sp, #16
 801230c:	af00      	add	r7, sp, #0
 801230e:	6078      	str	r0, [r7, #4]
 8012310:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8012312:	2300      	movs	r3, #0
 8012314:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801231c:	2b01      	cmp	r3, #1
 801231e:	d101      	bne.n	8012324 <HAL_ETH_ConfigMAC+0x1c>
 8012320:	2302      	movs	r3, #2
 8012322:	e0e4      	b.n	80124ee <HAL_ETH_ConfigMAC+0x1e6>
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	2201      	movs	r2, #1
 8012328:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	2202      	movs	r2, #2
 8012330:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8012334:	683b      	ldr	r3, [r7, #0]
 8012336:	2b00      	cmp	r3, #0
 8012338:	f000 80b1 	beq.w	801249e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8012344:	68fa      	ldr	r2, [r7, #12]
 8012346:	4b6c      	ldr	r3, [pc, #432]	@ (80124f8 <HAL_ETH_ConfigMAC+0x1f0>)
 8012348:	4013      	ands	r3, r2
 801234a:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 801234c:	683b      	ldr	r3, [r7, #0]
 801234e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8012350:	683b      	ldr	r3, [r7, #0]
 8012352:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8012354:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8012356:	683b      	ldr	r3, [r7, #0]
 8012358:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 801235a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 801235c:	683b      	ldr	r3, [r7, #0]
 801235e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8012360:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8012366:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8012368:	683b      	ldr	r3, [r7, #0]
 801236a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 801236c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 801236e:	683b      	ldr	r3, [r7, #0]
 8012370:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8012372:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8012378:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 801237a:	683b      	ldr	r3, [r7, #0]
 801237c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 801237e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8012380:	683b      	ldr	r3, [r7, #0]
 8012382:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8012384:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8012386:	683b      	ldr	r3, [r7, #0]
 8012388:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 801238a:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 801238c:	683b      	ldr	r3, [r7, #0]
 801238e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                         macconf->AutomaticPadCRCStrip | 
 8012390:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8012392:	683b      	ldr	r3, [r7, #0]
 8012394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                         macconf->BackOffLimit | 
 8012396:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8012398:	68fa      	ldr	r2, [r7, #12]
 801239a:	4313      	orrs	r3, r2
 801239c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	68fa      	ldr	r2, [r7, #12]
 80123a4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80123ae:	2001      	movs	r0, #1
 80123b0:	f7ff f8a2 	bl	80114f8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	68fa      	ldr	r2, [r7, #12]
 80123ba:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80123bc:	683b      	ldr	r3, [r7, #0]
 80123be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
                                          macconf->SourceAddrFilter |
 80123c0:	683b      	ldr	r3, [r7, #0]
 80123c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80123c4:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80123c6:	683b      	ldr	r3, [r7, #0]
 80123c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                                          macconf->SourceAddrFilter |
 80123ca:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80123cc:	683b      	ldr	r3, [r7, #0]
 80123ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                          macconf->PassControlFrames |
 80123d0:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80123d2:	683b      	ldr	r3, [r7, #0]
 80123d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                          macconf->BroadcastFramesReception | 
 80123d6:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80123d8:	683b      	ldr	r3, [r7, #0]
 80123da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                                          macconf->DestinationAddrFilter |
 80123dc:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80123de:	683b      	ldr	r3, [r7, #0]
 80123e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                                          macconf->PromiscuousMode |
 80123e2:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80123e6:	683b      	ldr	r3, [r7, #0]
 80123e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80123ee:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80123f0:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	685b      	ldr	r3, [r3, #4]
 80123f8:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80123fa:	2001      	movs	r0, #1
 80123fc:	f7ff f87c 	bl	80114f8 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	68fa      	ldr	r2, [r7, #12]
 8012406:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	683a      	ldr	r2, [r7, #0]
 801240e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8012410:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	683a      	ldr	r2, [r7, #0]
 8012418:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 801241a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	699b      	ldr	r3, [r3, #24]
 8012422:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8012424:	68fa      	ldr	r2, [r7, #12]
 8012426:	f64f 7341 	movw	r3, #65345	@ 0xff41
 801242a:	4013      	ands	r3, r2
 801242c:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 801242e:	683b      	ldr	r3, [r7, #0]
 8012430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012432:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8012434:	683b      	ldr	r3, [r7, #0]
 8012436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8012438:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 801243a:	683b      	ldr	r3, [r7, #0]
 801243c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                          macconf->ZeroQuantaPause |
 801243e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8012440:	683b      	ldr	r3, [r7, #0]
 8012442:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                          macconf->PauseLowThreshold |
 8012444:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8012446:	683b      	ldr	r3, [r7, #0]
 8012448:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
                          macconf->UnicastPauseFrameDetect | 
 801244a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 801244c:	683b      	ldr	r3, [r7, #0]
 801244e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                          macconf->ReceiveFlowControl |
 8012450:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8012452:	68fa      	ldr	r2, [r7, #12]
 8012454:	4313      	orrs	r3, r2
 8012456:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	68fa      	ldr	r2, [r7, #12]
 801245e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	699b      	ldr	r3, [r3, #24]
 8012466:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8012468:	2001      	movs	r0, #1
 801246a:	f7ff f845 	bl	80114f8 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	68fa      	ldr	r2, [r7, #12]
 8012474:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8012476:	683b      	ldr	r3, [r7, #0]
 8012478:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
                                              macconf->VLANTagIdentifier);
 801247a:	683b      	ldr	r3, [r7, #0]
 801247c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	430a      	orrs	r2, r1
 8012484:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	69db      	ldr	r3, [r3, #28]
 801248c:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 801248e:	2001      	movs	r0, #1
 8012490:	f7ff f832 	bl	80114f8 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	68fa      	ldr	r2, [r7, #12]
 801249a:	61da      	str	r2, [r3, #28]
 801249c:	e01e      	b.n	80124dc <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80124ac:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	689a      	ldr	r2, [r3, #8]
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	68db      	ldr	r3, [r3, #12]
 80124b6:	4313      	orrs	r3, r2
 80124b8:	68fa      	ldr	r2, [r7, #12]
 80124ba:	4313      	orrs	r3, r2
 80124bc:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	68fa      	ldr	r2, [r7, #12]
 80124c4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80124ce:	2001      	movs	r0, #1
 80124d0:	f7ff f812 	bl	80114f8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	68fa      	ldr	r2, [r7, #12]
 80124da:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	2201      	movs	r2, #1
 80124e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	2200      	movs	r2, #0
 80124e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;  
 80124ec:	2300      	movs	r3, #0
}
 80124ee:	4618      	mov	r0, r3
 80124f0:	3710      	adds	r7, #16
 80124f2:	46bd      	mov	sp, r7
 80124f4:	bd80      	pop	{r7, pc}
 80124f6:	bf00      	nop
 80124f8:	ff20810f 	.word	0xff20810f

080124fc <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80124fc:	b580      	push	{r7, lr}
 80124fe:	b0b0      	sub	sp, #192	@ 0xc0
 8012500:	af00      	add	r7, sp, #0
 8012502:	6078      	str	r0, [r7, #4]
 8012504:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8012506:	2300      	movs	r3, #0
 8012508:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 801250c:	683b      	ldr	r3, [r7, #0]
 801250e:	2b00      	cmp	r3, #0
 8012510:	d007      	beq.n	8012522 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012518:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8012520:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8012522:	2300      	movs	r3, #0
 8012524:	64bb      	str	r3, [r7, #72]	@ 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8012526:	2300      	movs	r3, #0
 8012528:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 801252a:	2300      	movs	r3, #0
 801252c:	653b      	str	r3, [r7, #80]	@ 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 801252e:	2300      	movs	r3, #0
 8012530:	657b      	str	r3, [r7, #84]	@ 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8012532:	2300      	movs	r3, #0
 8012534:	65bb      	str	r3, [r7, #88]	@ 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8012536:	2300      	movs	r3, #0
 8012538:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	69db      	ldr	r3, [r3, #28]
 801253e:	2b00      	cmp	r3, #0
 8012540:	d103      	bne.n	801254a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8012542:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012546:	663b      	str	r3, [r7, #96]	@ 0x60
 8012548:	e001      	b.n	801254e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 801254a:	2300      	movs	r3, #0
 801254c:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 801254e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012552:	667b      	str	r3, [r7, #100]	@ 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8012554:	2300      	movs	r3, #0
 8012556:	66bb      	str	r3, [r7, #104]	@ 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8012558:	2300      	movs	r3, #0
 801255a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 801255c:	2300      	movs	r3, #0
 801255e:	673b      	str	r3, [r7, #112]	@ 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8012560:	2300      	movs	r3, #0
 8012562:	677b      	str	r3, [r7, #116]	@ 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8012564:	2300      	movs	r3, #0
 8012566:	67bb      	str	r3, [r7, #120]	@ 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8012568:	2340      	movs	r3, #64	@ 0x40
 801256a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 801256c:	2300      	movs	r3, #0
 801256e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8012572:	2300      	movs	r3, #0
 8012574:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8012578:	2300      	movs	r3, #0
 801257a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 801257e:	2300      	movs	r3, #0
 8012580:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8012584:	2300      	movs	r3, #0
 8012586:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  macinit.HashTableHigh = 0x0U;
 801258a:	2300      	movs	r3, #0
 801258c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  macinit.HashTableLow = 0x0U;
 8012590:	2300      	movs	r3, #0
 8012592:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  macinit.PauseTime = 0x0U;
 8012596:	2300      	movs	r3, #0
 8012598:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 801259c:	2380      	movs	r3, #128	@ 0x80
 801259e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80125a2:	2300      	movs	r3, #0
 80125a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80125a8:	2300      	movs	r3, #0
 80125aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80125ae:	2300      	movs	r3, #0
 80125b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80125b4:	2300      	movs	r3, #0
 80125b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80125ba:	2300      	movs	r3, #0
 80125bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80125c0:	2300      	movs	r3, #0
 80125c2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80125d0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80125d4:	4baa      	ldr	r3, [pc, #680]	@ (8012880 <ETH_MACDMAConfig+0x384>)
 80125d6:	4013      	ands	r3, r2
 80125d8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80125dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
                       macinit.Jabber | 
 80125de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80125e0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80125e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
                       macinit.Jabber | 
 80125e4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80125e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
                       macinit.InterFrameGap |
 80125e8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80125ee:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80125f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
                       (heth->Init).Speed | 
 80125f2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80125f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
                       macinit.ReceiveOwn |
 80125f6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80125fc:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80125fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
                       (heth->Init).DuplexMode | 
 8012600:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8012602:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
                       macinit.ChecksumOffload |    
 8012604:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8012606:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
                       macinit.RetryTransmission | 
 8012608:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 801260a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
                       macinit.AutomaticPadCRCStrip | 
 801260c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 801260e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
                       macinit.BackOffLimit | 
 8012610:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8012612:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8012616:	4313      	orrs	r3, r2
 8012618:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8012624:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8012630:	2001      	movs	r0, #1
 8012632:	f7fe ff61 	bl	80114f8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 801263e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8012640:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
                                        macinit.SourceAddrFilter |
 8012642:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8012644:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8012646:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
                                        macinit.SourceAddrFilter |
 8012648:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 801264a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
                                        macinit.PassControlFrames |
 801264e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8012650:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
                                        macinit.BroadcastFramesReception | 
 8012654:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8012656:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
                                        macinit.DestinationAddrFilter |
 801265a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 801265c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
                                        macinit.PromiscuousMode |
 8012660:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8012664:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 801266c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 801266e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	685b      	ldr	r3, [r3, #4]
 8012676:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 801267a:	2001      	movs	r0, #1
 801267c:	f7fe ff3c 	bl	80114f8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8012688:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8012692:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801269c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	699b      	ldr	r3, [r3, #24]
 80126a4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80126a8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80126ac:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80126b0:	4013      	ands	r3, r2
 80126b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80126b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80126ba:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80126bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80126c0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80126c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                        macinit.ZeroQuantaPause |
 80126c6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80126c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
                        macinit.PauseLowThreshold |
 80126cc:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80126ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
                        macinit.UnicastPauseFrameDetect | 
 80126d2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80126d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
                        macinit.ReceiveFlowControl |
 80126d8:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80126da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80126de:	4313      	orrs	r3, r2
 80126e0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80126ec:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	699b      	ldr	r3, [r3, #24]
 80126f4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80126f8:	2001      	movs	r0, #1
 80126fa:	f7fe fefd 	bl	80114f8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8012706:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8012708:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
                                            macinit.VLANTagIdentifier);
 801270c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	430a      	orrs	r2, r1
 8012716:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	69db      	ldr	r3, [r3, #28]
 801271e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8012722:	2001      	movs	r0, #1
 8012724:	f7fe fee8 	bl	80114f8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8012730:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8012732:	2300      	movs	r3, #0
 8012734:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8012736:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 801273a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 801273c:	2300      	movs	r3, #0
 801273e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8012740:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8012744:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8012746:	2300      	movs	r3, #0
 8012748:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 801274a:	2300      	movs	r3, #0
 801274c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 801274e:	2300      	movs	r3, #0
 8012750:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8012752:	2300      	movs	r3, #0
 8012754:	627b      	str	r3, [r7, #36]	@ 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8012756:	2304      	movs	r3, #4
 8012758:	62bb      	str	r3, [r7, #40]	@ 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 801275a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 801275e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8012760:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8012764:	633b      	str	r3, [r7, #48]	@ 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8012766:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 801276a:	637b      	str	r3, [r7, #52]	@ 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 801276c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8012770:	63bb      	str	r3, [r7, #56]	@ 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8012772:	2380      	movs	r3, #128	@ 0x80
 8012774:	63fb      	str	r3, [r7, #60]	@ 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8012776:	2300      	movs	r3, #0
 8012778:	643b      	str	r3, [r7, #64]	@ 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 801277a:	2300      	movs	r3, #0
 801277c:	647b      	str	r3, [r7, #68]	@ 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012786:	699b      	ldr	r3, [r3, #24]
 8012788:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 801278c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8012790:	4b3c      	ldr	r3, [pc, #240]	@ (8012884 <ETH_MACDMAConfig+0x388>)
 8012792:	4013      	ands	r3, r2
 8012794:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8012798:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 801279a:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 801279c:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 801279e:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80127a0:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80127a2:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80127a4:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80127a6:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80127a8:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80127aa:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80127ac:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80127ae:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80127b0:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80127b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80127b4:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80127b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
                         dmainit.ReceiveThresholdControl |
 80127b8:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80127ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80127be:	4313      	orrs	r3, r2
 80127c0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80127cc:	461a      	mov	r2, r3
 80127ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80127d2:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80127dc:	699b      	ldr	r3, [r3, #24]
 80127de:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80127e2:	2001      	movs	r0, #1
 80127e4:	f7fe fe88 	bl	80114f8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80127f0:	461a      	mov	r2, r3
 80127f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80127f6:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80127f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
                                          dmainit.FixedBurst |
 80127fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80127fc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80127fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
                                          dmainit.FixedBurst |
 8012800:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8012802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8012804:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8012806:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
                                          dmainit.TxDMABurstLength |
 8012808:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 801280a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801280c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 801280e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8012810:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8012812:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8012814:	687a      	ldr	r2, [r7, #4]
 8012816:	6812      	ldr	r2, [r2, #0]
 8012818:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801281c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8012820:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8012830:	2001      	movs	r0, #1
 8012832:	f7fe fe61 	bl	80114f8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801283e:	461a      	mov	r2, r3
 8012840:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012844:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	699b      	ldr	r3, [r3, #24]
 801284a:	2b01      	cmp	r3, #1
 801284c:	d10d      	bne.n	801286a <ETH_MACDMAConfig+0x36e>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012856:	69db      	ldr	r3, [r3, #28]
 8012858:	687a      	ldr	r2, [r7, #4]
 801285a:	6812      	ldr	r2, [r2, #0]
 801285c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012860:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012864:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8012868:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	695b      	ldr	r3, [r3, #20]
 801286e:	461a      	mov	r2, r3
 8012870:	2100      	movs	r1, #0
 8012872:	6878      	ldr	r0, [r7, #4]
 8012874:	f000 f808 	bl	8012888 <ETH_MACAddressConfig>
}
 8012878:	bf00      	nop
 801287a:	37c0      	adds	r7, #192	@ 0xc0
 801287c:	46bd      	mov	sp, r7
 801287e:	bd80      	pop	{r7, pc}
 8012880:	ff20810f 	.word	0xff20810f
 8012884:	f8de3f23 	.word	0xf8de3f23

08012888 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8012888:	b480      	push	{r7}
 801288a:	b087      	sub	sp, #28
 801288c:	af00      	add	r7, sp, #0
 801288e:	60f8      	str	r0, [r7, #12]
 8012890:	60b9      	str	r1, [r7, #8]
 8012892:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	3305      	adds	r3, #5
 8012898:	781b      	ldrb	r3, [r3, #0]
 801289a:	021b      	lsls	r3, r3, #8
 801289c:	687a      	ldr	r2, [r7, #4]
 801289e:	3204      	adds	r2, #4
 80128a0:	7812      	ldrb	r2, [r2, #0]
 80128a2:	4313      	orrs	r3, r2
 80128a4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80128a6:	68ba      	ldr	r2, [r7, #8]
 80128a8:	4b11      	ldr	r3, [pc, #68]	@ (80128f0 <ETH_MACAddressConfig+0x68>)
 80128aa:	4413      	add	r3, r2
 80128ac:	461a      	mov	r2, r3
 80128ae:	697b      	ldr	r3, [r7, #20]
 80128b0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	3303      	adds	r3, #3
 80128b6:	781b      	ldrb	r3, [r3, #0]
 80128b8:	061a      	lsls	r2, r3, #24
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	3302      	adds	r3, #2
 80128be:	781b      	ldrb	r3, [r3, #0]
 80128c0:	041b      	lsls	r3, r3, #16
 80128c2:	431a      	orrs	r2, r3
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	3301      	adds	r3, #1
 80128c8:	781b      	ldrb	r3, [r3, #0]
 80128ca:	021b      	lsls	r3, r3, #8
 80128cc:	4313      	orrs	r3, r2
 80128ce:	687a      	ldr	r2, [r7, #4]
 80128d0:	7812      	ldrb	r2, [r2, #0]
 80128d2:	4313      	orrs	r3, r2
 80128d4:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80128d6:	68ba      	ldr	r2, [r7, #8]
 80128d8:	4b06      	ldr	r3, [pc, #24]	@ (80128f4 <ETH_MACAddressConfig+0x6c>)
 80128da:	4413      	add	r3, r2
 80128dc:	461a      	mov	r2, r3
 80128de:	697b      	ldr	r3, [r7, #20]
 80128e0:	6013      	str	r3, [r2, #0]
}
 80128e2:	bf00      	nop
 80128e4:	371c      	adds	r7, #28
 80128e6:	46bd      	mov	sp, r7
 80128e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ec:	4770      	bx	lr
 80128ee:	bf00      	nop
 80128f0:	40028040 	.word	0x40028040
 80128f4:	40028044 	.word	0x40028044

080128f8 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80128f8:	b580      	push	{r7, lr}
 80128fa:	b084      	sub	sp, #16
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8012900:	2300      	movs	r3, #0
 8012902:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	681a      	ldr	r2, [r3, #0]
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	f042 0208 	orr.w	r2, r2, #8
 8012912:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 801291c:	2001      	movs	r0, #1
 801291e:	f000 f8dd 	bl	8012adc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	68fa      	ldr	r2, [r7, #12]
 8012928:	601a      	str	r2, [r3, #0]
}
 801292a:	bf00      	nop
 801292c:	3710      	adds	r7, #16
 801292e:	46bd      	mov	sp, r7
 8012930:	bd80      	pop	{r7, pc}

08012932 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8012932:	b580      	push	{r7, lr}
 8012934:	b084      	sub	sp, #16
 8012936:	af00      	add	r7, sp, #0
 8012938:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 801293a:	2300      	movs	r3, #0
 801293c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	681a      	ldr	r2, [r3, #0]
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	f022 0208 	bic.w	r2, r2, #8
 801294c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8012956:	2001      	movs	r0, #1
 8012958:	f000 f8c0 	bl	8012adc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	68fa      	ldr	r2, [r7, #12]
 8012962:	601a      	str	r2, [r3, #0]
}
 8012964:	bf00      	nop
 8012966:	3710      	adds	r7, #16
 8012968:	46bd      	mov	sp, r7
 801296a:	bd80      	pop	{r7, pc}

0801296c <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 801296c:	b580      	push	{r7, lr}
 801296e:	b084      	sub	sp, #16
 8012970:	af00      	add	r7, sp, #0
 8012972:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8012974:	2300      	movs	r3, #0
 8012976:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	681a      	ldr	r2, [r3, #0]
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	f042 0204 	orr.w	r2, r2, #4
 8012986:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8012990:	2001      	movs	r0, #1
 8012992:	f000 f8a3 	bl	8012adc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	68fa      	ldr	r2, [r7, #12]
 801299c:	601a      	str	r2, [r3, #0]
}
 801299e:	bf00      	nop
 80129a0:	3710      	adds	r7, #16
 80129a2:	46bd      	mov	sp, r7
 80129a4:	bd80      	pop	{r7, pc}

080129a6 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80129a6:	b580      	push	{r7, lr}
 80129a8:	b084      	sub	sp, #16
 80129aa:	af00      	add	r7, sp, #0
 80129ac:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80129ae:	2300      	movs	r3, #0
 80129b0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	681a      	ldr	r2, [r3, #0]
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	f022 0204 	bic.w	r2, r2, #4
 80129c0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80129ca:	2001      	movs	r0, #1
 80129cc:	f000 f886 	bl	8012adc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	68fa      	ldr	r2, [r7, #12]
 80129d6:	601a      	str	r2, [r3, #0]
}
 80129d8:	bf00      	nop
 80129da:	3710      	adds	r7, #16
 80129dc:	46bd      	mov	sp, r7
 80129de:	bd80      	pop	{r7, pc}

080129e0 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80129e0:	b480      	push	{r7}
 80129e2:	b083      	sub	sp, #12
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80129f0:	699b      	ldr	r3, [r3, #24]
 80129f2:	687a      	ldr	r2, [r7, #4]
 80129f4:	6812      	ldr	r2, [r2, #0]
 80129f6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80129fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80129fe:	6193      	str	r3, [r2, #24]
}
 8012a00:	bf00      	nop
 8012a02:	370c      	adds	r7, #12
 8012a04:	46bd      	mov	sp, r7
 8012a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a0a:	4770      	bx	lr

08012a0c <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8012a0c:	b480      	push	{r7}
 8012a0e:	b083      	sub	sp, #12
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012a1c:	699b      	ldr	r3, [r3, #24]
 8012a1e:	687a      	ldr	r2, [r7, #4]
 8012a20:	6812      	ldr	r2, [r2, #0]
 8012a22:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8012a26:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8012a2a:	6193      	str	r3, [r2, #24]
}
 8012a2c:	bf00      	nop
 8012a2e:	370c      	adds	r7, #12
 8012a30:	46bd      	mov	sp, r7
 8012a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a36:	4770      	bx	lr

08012a38 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8012a38:	b480      	push	{r7}
 8012a3a:	b083      	sub	sp, #12
 8012a3c:	af00      	add	r7, sp, #0
 8012a3e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012a48:	699b      	ldr	r3, [r3, #24]
 8012a4a:	687a      	ldr	r2, [r7, #4]
 8012a4c:	6812      	ldr	r2, [r2, #0]
 8012a4e:	f043 0302 	orr.w	r3, r3, #2
 8012a52:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8012a56:	6193      	str	r3, [r2, #24]
}
 8012a58:	bf00      	nop
 8012a5a:	370c      	adds	r7, #12
 8012a5c:	46bd      	mov	sp, r7
 8012a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a62:	4770      	bx	lr

08012a64 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8012a64:	b480      	push	{r7}
 8012a66:	b083      	sub	sp, #12
 8012a68:	af00      	add	r7, sp, #0
 8012a6a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012a74:	699b      	ldr	r3, [r3, #24]
 8012a76:	687a      	ldr	r2, [r7, #4]
 8012a78:	6812      	ldr	r2, [r2, #0]
 8012a7a:	f023 0302 	bic.w	r3, r3, #2
 8012a7e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8012a82:	6193      	str	r3, [r2, #24]
}
 8012a84:	bf00      	nop
 8012a86:	370c      	adds	r7, #12
 8012a88:	46bd      	mov	sp, r7
 8012a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a8e:	4770      	bx	lr

08012a90 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8012a90:	b580      	push	{r7, lr}
 8012a92:	b084      	sub	sp, #16
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8012a98:	2300      	movs	r3, #0
 8012a9a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012aa4:	699b      	ldr	r3, [r3, #24]
 8012aa6:	687a      	ldr	r2, [r7, #4]
 8012aa8:	6812      	ldr	r2, [r2, #0]
 8012aaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012aae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8012ab2:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012abc:	699b      	ldr	r3, [r3, #24]
 8012abe:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8012ac0:	2001      	movs	r0, #1
 8012ac2:	f000 f80b 	bl	8012adc <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	681a      	ldr	r2, [r3, #0]
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8012ad0:	6193      	str	r3, [r2, #24]
}
 8012ad2:	bf00      	nop
 8012ad4:	3710      	adds	r7, #16
 8012ad6:	46bd      	mov	sp, r7
 8012ad8:	bd80      	pop	{r7, pc}
	...

08012adc <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8012adc:	b480      	push	{r7}
 8012ade:	b085      	sub	sp, #20
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8012ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8012b14 <ETH_Delay+0x38>)
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	4a0b      	ldr	r2, [pc, #44]	@ (8012b18 <ETH_Delay+0x3c>)
 8012aea:	fba2 2303 	umull	r2, r3, r2, r3
 8012aee:	0a5b      	lsrs	r3, r3, #9
 8012af0:	687a      	ldr	r2, [r7, #4]
 8012af2:	fb02 f303 	mul.w	r3, r2, r3
 8012af6:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8012af8:	bf00      	nop
  } 
  while (Delay --);
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	1e5a      	subs	r2, r3, #1
 8012afe:	60fa      	str	r2, [r7, #12]
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d1f9      	bne.n	8012af8 <ETH_Delay+0x1c>
}
 8012b04:	bf00      	nop
 8012b06:	bf00      	nop
 8012b08:	3714      	adds	r7, #20
 8012b0a:	46bd      	mov	sp, r7
 8012b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b10:	4770      	bx	lr
 8012b12:	bf00      	nop
 8012b14:	20000000 	.word	0x20000000
 8012b18:	10624dd3 	.word	0x10624dd3

08012b1c <ETH_InitCallbacksToDefault>:

#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
static void ETH_InitCallbacksToDefault(ETH_HandleTypeDef *heth)
{
 8012b1c:	b480      	push	{r7}
 8012b1e:	b083      	sub	sp, #12
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	6078      	str	r0, [r7, #4]
  /* Init the ETH Callback settings */
  heth->TxCpltCallback       = HAL_ETH_TxCpltCallback; /* Legacy weak TxCpltCallback   */
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	4a07      	ldr	r2, [pc, #28]	@ (8012b44 <ETH_InitCallbacksToDefault+0x28>)
 8012b28:	649a      	str	r2, [r3, #72]	@ 0x48
  heth->RxCpltCallback       = HAL_ETH_RxCpltCallback; /* Legacy weak RxCpltCallback   */
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	4a06      	ldr	r2, [pc, #24]	@ (8012b48 <ETH_InitCallbacksToDefault+0x2c>)
 8012b2e:	64da      	str	r2, [r3, #76]	@ 0x4c
  heth->DMAErrorCallback     = HAL_ETH_ErrorCallback;  /* Legacy weak DMAErrorCallback */
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	4a06      	ldr	r2, [pc, #24]	@ (8012b4c <ETH_InitCallbacksToDefault+0x30>)
 8012b34:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8012b36:	bf00      	nop
 8012b38:	370c      	adds	r7, #12
 8012b3a:	46bd      	mov	sp, r7
 8012b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b40:	4770      	bx	lr
 8012b42:	bf00      	nop
 8012b44:	08012073 	.word	0x08012073
 8012b48:	08012087 	.word	0x08012087
 8012b4c:	0801209b 	.word	0x0801209b

08012b50 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b086      	sub	sp, #24
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	60f8      	str	r0, [r7, #12]
 8012b58:	60b9      	str	r1, [r7, #8]
 8012b5a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8012b5e:	2301      	movs	r3, #1
 8012b60:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8012b62:	4b23      	ldr	r3, [pc, #140]	@ (8012bf0 <HAL_FLASH_Program+0xa0>)
 8012b64:	7e1b      	ldrb	r3, [r3, #24]
 8012b66:	2b01      	cmp	r3, #1
 8012b68:	d101      	bne.n	8012b6e <HAL_FLASH_Program+0x1e>
 8012b6a:	2302      	movs	r3, #2
 8012b6c:	e03b      	b.n	8012be6 <HAL_FLASH_Program+0x96>
 8012b6e:	4b20      	ldr	r3, [pc, #128]	@ (8012bf0 <HAL_FLASH_Program+0xa0>)
 8012b70:	2201      	movs	r2, #1
 8012b72:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012b74:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8012b78:	f000 f89c 	bl	8012cb4 <FLASH_WaitForLastOperation>
 8012b7c:	4603      	mov	r3, r0
 8012b7e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8012b80:	7dfb      	ldrb	r3, [r7, #23]
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d12b      	bne.n	8012bde <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d105      	bne.n	8012b98 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8012b8c:	783b      	ldrb	r3, [r7, #0]
 8012b8e:	4619      	mov	r1, r3
 8012b90:	68b8      	ldr	r0, [r7, #8]
 8012b92:	f000 f947 	bl	8012e24 <FLASH_Program_Byte>
 8012b96:	e016      	b.n	8012bc6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	2b01      	cmp	r3, #1
 8012b9c:	d105      	bne.n	8012baa <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8012b9e:	883b      	ldrh	r3, [r7, #0]
 8012ba0:	4619      	mov	r1, r3
 8012ba2:	68b8      	ldr	r0, [r7, #8]
 8012ba4:	f000 f91a 	bl	8012ddc <FLASH_Program_HalfWord>
 8012ba8:	e00d      	b.n	8012bc6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	2b02      	cmp	r3, #2
 8012bae:	d105      	bne.n	8012bbc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8012bb0:	683b      	ldr	r3, [r7, #0]
 8012bb2:	4619      	mov	r1, r3
 8012bb4:	68b8      	ldr	r0, [r7, #8]
 8012bb6:	f000 f8ef 	bl	8012d98 <FLASH_Program_Word>
 8012bba:	e004      	b.n	8012bc6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8012bbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012bc0:	68b8      	ldr	r0, [r7, #8]
 8012bc2:	f000 f8b7 	bl	8012d34 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012bc6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8012bca:	f000 f873 	bl	8012cb4 <FLASH_WaitForLastOperation>
 8012bce:	4603      	mov	r3, r0
 8012bd0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8012bd2:	4b08      	ldr	r3, [pc, #32]	@ (8012bf4 <HAL_FLASH_Program+0xa4>)
 8012bd4:	691b      	ldr	r3, [r3, #16]
 8012bd6:	4a07      	ldr	r2, [pc, #28]	@ (8012bf4 <HAL_FLASH_Program+0xa4>)
 8012bd8:	f023 0301 	bic.w	r3, r3, #1
 8012bdc:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8012bde:	4b04      	ldr	r3, [pc, #16]	@ (8012bf0 <HAL_FLASH_Program+0xa0>)
 8012be0:	2200      	movs	r2, #0
 8012be2:	761a      	strb	r2, [r3, #24]
  
  return status;
 8012be4:	7dfb      	ldrb	r3, [r7, #23]
}
 8012be6:	4618      	mov	r0, r3
 8012be8:	3718      	adds	r7, #24
 8012bea:	46bd      	mov	sp, r7
 8012bec:	bd80      	pop	{r7, pc}
 8012bee:	bf00      	nop
 8012bf0:	20010134 	.word	0x20010134
 8012bf4:	40023c00 	.word	0x40023c00

08012bf8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8012bf8:	b480      	push	{r7}
 8012bfa:	b083      	sub	sp, #12
 8012bfc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8012bfe:	2300      	movs	r3, #0
 8012c00:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8012c02:	4b0b      	ldr	r3, [pc, #44]	@ (8012c30 <HAL_FLASH_Unlock+0x38>)
 8012c04:	691b      	ldr	r3, [r3, #16]
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	da0b      	bge.n	8012c22 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8012c0a:	4b09      	ldr	r3, [pc, #36]	@ (8012c30 <HAL_FLASH_Unlock+0x38>)
 8012c0c:	4a09      	ldr	r2, [pc, #36]	@ (8012c34 <HAL_FLASH_Unlock+0x3c>)
 8012c0e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8012c10:	4b07      	ldr	r3, [pc, #28]	@ (8012c30 <HAL_FLASH_Unlock+0x38>)
 8012c12:	4a09      	ldr	r2, [pc, #36]	@ (8012c38 <HAL_FLASH_Unlock+0x40>)
 8012c14:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8012c16:	4b06      	ldr	r3, [pc, #24]	@ (8012c30 <HAL_FLASH_Unlock+0x38>)
 8012c18:	691b      	ldr	r3, [r3, #16]
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	da01      	bge.n	8012c22 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8012c1e:	2301      	movs	r3, #1
 8012c20:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8012c22:	79fb      	ldrb	r3, [r7, #7]
}
 8012c24:	4618      	mov	r0, r3
 8012c26:	370c      	adds	r7, #12
 8012c28:	46bd      	mov	sp, r7
 8012c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c2e:	4770      	bx	lr
 8012c30:	40023c00 	.word	0x40023c00
 8012c34:	45670123 	.word	0x45670123
 8012c38:	cdef89ab 	.word	0xcdef89ab

08012c3c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8012c3c:	b480      	push	{r7}
 8012c3e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8012c40:	4b05      	ldr	r3, [pc, #20]	@ (8012c58 <HAL_FLASH_Lock+0x1c>)
 8012c42:	691b      	ldr	r3, [r3, #16]
 8012c44:	4a04      	ldr	r2, [pc, #16]	@ (8012c58 <HAL_FLASH_Lock+0x1c>)
 8012c46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8012c4a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8012c4c:	2300      	movs	r3, #0
}
 8012c4e:	4618      	mov	r0, r3
 8012c50:	46bd      	mov	sp, r7
 8012c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c56:	4770      	bx	lr
 8012c58:	40023c00 	.word	0x40023c00

08012c5c <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8012c5c:	b480      	push	{r7}
 8012c5e:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8012c60:	4b09      	ldr	r3, [pc, #36]	@ (8012c88 <HAL_FLASH_OB_Unlock+0x2c>)
 8012c62:	695b      	ldr	r3, [r3, #20]
 8012c64:	f003 0301 	and.w	r3, r3, #1
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d007      	beq.n	8012c7c <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8012c6c:	4b06      	ldr	r3, [pc, #24]	@ (8012c88 <HAL_FLASH_OB_Unlock+0x2c>)
 8012c6e:	4a07      	ldr	r2, [pc, #28]	@ (8012c8c <HAL_FLASH_OB_Unlock+0x30>)
 8012c70:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8012c72:	4b05      	ldr	r3, [pc, #20]	@ (8012c88 <HAL_FLASH_OB_Unlock+0x2c>)
 8012c74:	4a06      	ldr	r2, [pc, #24]	@ (8012c90 <HAL_FLASH_OB_Unlock+0x34>)
 8012c76:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8012c78:	2300      	movs	r3, #0
 8012c7a:	e000      	b.n	8012c7e <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8012c7c:	2301      	movs	r3, #1
}
 8012c7e:	4618      	mov	r0, r3
 8012c80:	46bd      	mov	sp, r7
 8012c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c86:	4770      	bx	lr
 8012c88:	40023c00 	.word	0x40023c00
 8012c8c:	08192a3b 	.word	0x08192a3b
 8012c90:	4c5d6e7f 	.word	0x4c5d6e7f

08012c94 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8012c94:	b480      	push	{r7}
 8012c96:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8012c98:	4b05      	ldr	r3, [pc, #20]	@ (8012cb0 <HAL_FLASH_OB_Lock+0x1c>)
 8012c9a:	695b      	ldr	r3, [r3, #20]
 8012c9c:	4a04      	ldr	r2, [pc, #16]	@ (8012cb0 <HAL_FLASH_OB_Lock+0x1c>)
 8012c9e:	f043 0301 	orr.w	r3, r3, #1
 8012ca2:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 8012ca4:	2300      	movs	r3, #0
}
 8012ca6:	4618      	mov	r0, r3
 8012ca8:	46bd      	mov	sp, r7
 8012caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cae:	4770      	bx	lr
 8012cb0:	40023c00 	.word	0x40023c00

08012cb4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8012cb4:	b580      	push	{r7, lr}
 8012cb6:	b084      	sub	sp, #16
 8012cb8:	af00      	add	r7, sp, #0
 8012cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8012cbc:	2300      	movs	r3, #0
 8012cbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8012cc0:	4b1a      	ldr	r3, [pc, #104]	@ (8012d2c <FLASH_WaitForLastOperation+0x78>)
 8012cc2:	2200      	movs	r2, #0
 8012cc4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8012cc6:	f7fe fc0b 	bl	80114e0 <HAL_GetTick>
 8012cca:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8012ccc:	e010      	b.n	8012cf0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cd4:	d00c      	beq.n	8012cf0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d007      	beq.n	8012cec <FLASH_WaitForLastOperation+0x38>
 8012cdc:	f7fe fc00 	bl	80114e0 <HAL_GetTick>
 8012ce0:	4602      	mov	r2, r0
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	1ad3      	subs	r3, r2, r3
 8012ce6:	687a      	ldr	r2, [r7, #4]
 8012ce8:	429a      	cmp	r2, r3
 8012cea:	d201      	bcs.n	8012cf0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8012cec:	2303      	movs	r3, #3
 8012cee:	e019      	b.n	8012d24 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8012cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8012d30 <FLASH_WaitForLastOperation+0x7c>)
 8012cf2:	68db      	ldr	r3, [r3, #12]
 8012cf4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d1e8      	bne.n	8012cce <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8012cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8012d30 <FLASH_WaitForLastOperation+0x7c>)
 8012cfe:	68db      	ldr	r3, [r3, #12]
 8012d00:	f003 0301 	and.w	r3, r3, #1
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d002      	beq.n	8012d0e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8012d08:	4b09      	ldr	r3, [pc, #36]	@ (8012d30 <FLASH_WaitForLastOperation+0x7c>)
 8012d0a:	2201      	movs	r2, #1
 8012d0c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8012d0e:	4b08      	ldr	r3, [pc, #32]	@ (8012d30 <FLASH_WaitForLastOperation+0x7c>)
 8012d10:	68db      	ldr	r3, [r3, #12]
 8012d12:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d003      	beq.n	8012d22 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8012d1a:	f000 f8a5 	bl	8012e68 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8012d1e:	2301      	movs	r3, #1
 8012d20:	e000      	b.n	8012d24 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8012d22:	2300      	movs	r3, #0
  
}  
 8012d24:	4618      	mov	r0, r3
 8012d26:	3710      	adds	r7, #16
 8012d28:	46bd      	mov	sp, r7
 8012d2a:	bd80      	pop	{r7, pc}
 8012d2c:	20010134 	.word	0x20010134
 8012d30:	40023c00 	.word	0x40023c00

08012d34 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8012d34:	b480      	push	{r7}
 8012d36:	b085      	sub	sp, #20
 8012d38:	af00      	add	r7, sp, #0
 8012d3a:	60f8      	str	r0, [r7, #12]
 8012d3c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8012d40:	4b14      	ldr	r3, [pc, #80]	@ (8012d94 <FLASH_Program_DoubleWord+0x60>)
 8012d42:	691b      	ldr	r3, [r3, #16]
 8012d44:	4a13      	ldr	r2, [pc, #76]	@ (8012d94 <FLASH_Program_DoubleWord+0x60>)
 8012d46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012d4a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8012d4c:	4b11      	ldr	r3, [pc, #68]	@ (8012d94 <FLASH_Program_DoubleWord+0x60>)
 8012d4e:	691b      	ldr	r3, [r3, #16]
 8012d50:	4a10      	ldr	r2, [pc, #64]	@ (8012d94 <FLASH_Program_DoubleWord+0x60>)
 8012d52:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8012d56:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8012d58:	4b0e      	ldr	r3, [pc, #56]	@ (8012d94 <FLASH_Program_DoubleWord+0x60>)
 8012d5a:	691b      	ldr	r3, [r3, #16]
 8012d5c:	4a0d      	ldr	r2, [pc, #52]	@ (8012d94 <FLASH_Program_DoubleWord+0x60>)
 8012d5e:	f043 0301 	orr.w	r3, r3, #1
 8012d62:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	683a      	ldr	r2, [r7, #0]
 8012d68:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8012d6a:	f3bf 8f6f 	isb	sy
}
 8012d6e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8012d70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8012d74:	f04f 0200 	mov.w	r2, #0
 8012d78:	f04f 0300 	mov.w	r3, #0
 8012d7c:	000a      	movs	r2, r1
 8012d7e:	2300      	movs	r3, #0
 8012d80:	68f9      	ldr	r1, [r7, #12]
 8012d82:	3104      	adds	r1, #4
 8012d84:	4613      	mov	r3, r2
 8012d86:	600b      	str	r3, [r1, #0]
}
 8012d88:	bf00      	nop
 8012d8a:	3714      	adds	r7, #20
 8012d8c:	46bd      	mov	sp, r7
 8012d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d92:	4770      	bx	lr
 8012d94:	40023c00 	.word	0x40023c00

08012d98 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8012d98:	b480      	push	{r7}
 8012d9a:	b083      	sub	sp, #12
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	6078      	str	r0, [r7, #4]
 8012da0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8012da2:	4b0d      	ldr	r3, [pc, #52]	@ (8012dd8 <FLASH_Program_Word+0x40>)
 8012da4:	691b      	ldr	r3, [r3, #16]
 8012da6:	4a0c      	ldr	r2, [pc, #48]	@ (8012dd8 <FLASH_Program_Word+0x40>)
 8012da8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012dac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8012dae:	4b0a      	ldr	r3, [pc, #40]	@ (8012dd8 <FLASH_Program_Word+0x40>)
 8012db0:	691b      	ldr	r3, [r3, #16]
 8012db2:	4a09      	ldr	r2, [pc, #36]	@ (8012dd8 <FLASH_Program_Word+0x40>)
 8012db4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8012db8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8012dba:	4b07      	ldr	r3, [pc, #28]	@ (8012dd8 <FLASH_Program_Word+0x40>)
 8012dbc:	691b      	ldr	r3, [r3, #16]
 8012dbe:	4a06      	ldr	r2, [pc, #24]	@ (8012dd8 <FLASH_Program_Word+0x40>)
 8012dc0:	f043 0301 	orr.w	r3, r3, #1
 8012dc4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	683a      	ldr	r2, [r7, #0]
 8012dca:	601a      	str	r2, [r3, #0]
}
 8012dcc:	bf00      	nop
 8012dce:	370c      	adds	r7, #12
 8012dd0:	46bd      	mov	sp, r7
 8012dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dd6:	4770      	bx	lr
 8012dd8:	40023c00 	.word	0x40023c00

08012ddc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8012ddc:	b480      	push	{r7}
 8012dde:	b083      	sub	sp, #12
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	6078      	str	r0, [r7, #4]
 8012de4:	460b      	mov	r3, r1
 8012de6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8012de8:	4b0d      	ldr	r3, [pc, #52]	@ (8012e20 <FLASH_Program_HalfWord+0x44>)
 8012dea:	691b      	ldr	r3, [r3, #16]
 8012dec:	4a0c      	ldr	r2, [pc, #48]	@ (8012e20 <FLASH_Program_HalfWord+0x44>)
 8012dee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012df2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8012df4:	4b0a      	ldr	r3, [pc, #40]	@ (8012e20 <FLASH_Program_HalfWord+0x44>)
 8012df6:	691b      	ldr	r3, [r3, #16]
 8012df8:	4a09      	ldr	r2, [pc, #36]	@ (8012e20 <FLASH_Program_HalfWord+0x44>)
 8012dfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8012dfe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8012e00:	4b07      	ldr	r3, [pc, #28]	@ (8012e20 <FLASH_Program_HalfWord+0x44>)
 8012e02:	691b      	ldr	r3, [r3, #16]
 8012e04:	4a06      	ldr	r2, [pc, #24]	@ (8012e20 <FLASH_Program_HalfWord+0x44>)
 8012e06:	f043 0301 	orr.w	r3, r3, #1
 8012e0a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	887a      	ldrh	r2, [r7, #2]
 8012e10:	801a      	strh	r2, [r3, #0]
}
 8012e12:	bf00      	nop
 8012e14:	370c      	adds	r7, #12
 8012e16:	46bd      	mov	sp, r7
 8012e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1c:	4770      	bx	lr
 8012e1e:	bf00      	nop
 8012e20:	40023c00 	.word	0x40023c00

08012e24 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8012e24:	b480      	push	{r7}
 8012e26:	b083      	sub	sp, #12
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	6078      	str	r0, [r7, #4]
 8012e2c:	460b      	mov	r3, r1
 8012e2e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8012e30:	4b0c      	ldr	r3, [pc, #48]	@ (8012e64 <FLASH_Program_Byte+0x40>)
 8012e32:	691b      	ldr	r3, [r3, #16]
 8012e34:	4a0b      	ldr	r2, [pc, #44]	@ (8012e64 <FLASH_Program_Byte+0x40>)
 8012e36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012e3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8012e3c:	4b09      	ldr	r3, [pc, #36]	@ (8012e64 <FLASH_Program_Byte+0x40>)
 8012e3e:	4a09      	ldr	r2, [pc, #36]	@ (8012e64 <FLASH_Program_Byte+0x40>)
 8012e40:	691b      	ldr	r3, [r3, #16]
 8012e42:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8012e44:	4b07      	ldr	r3, [pc, #28]	@ (8012e64 <FLASH_Program_Byte+0x40>)
 8012e46:	691b      	ldr	r3, [r3, #16]
 8012e48:	4a06      	ldr	r2, [pc, #24]	@ (8012e64 <FLASH_Program_Byte+0x40>)
 8012e4a:	f043 0301 	orr.w	r3, r3, #1
 8012e4e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	78fa      	ldrb	r2, [r7, #3]
 8012e54:	701a      	strb	r2, [r3, #0]
}
 8012e56:	bf00      	nop
 8012e58:	370c      	adds	r7, #12
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e60:	4770      	bx	lr
 8012e62:	bf00      	nop
 8012e64:	40023c00 	.word	0x40023c00

08012e68 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8012e68:	b480      	push	{r7}
 8012e6a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8012e6c:	4b2f      	ldr	r3, [pc, #188]	@ (8012f2c <FLASH_SetErrorCode+0xc4>)
 8012e6e:	68db      	ldr	r3, [r3, #12]
 8012e70:	f003 0310 	and.w	r3, r3, #16
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d008      	beq.n	8012e8a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8012e78:	4b2d      	ldr	r3, [pc, #180]	@ (8012f30 <FLASH_SetErrorCode+0xc8>)
 8012e7a:	69db      	ldr	r3, [r3, #28]
 8012e7c:	f043 0310 	orr.w	r3, r3, #16
 8012e80:	4a2b      	ldr	r2, [pc, #172]	@ (8012f30 <FLASH_SetErrorCode+0xc8>)
 8012e82:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8012e84:	4b29      	ldr	r3, [pc, #164]	@ (8012f2c <FLASH_SetErrorCode+0xc4>)
 8012e86:	2210      	movs	r2, #16
 8012e88:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8012e8a:	4b28      	ldr	r3, [pc, #160]	@ (8012f2c <FLASH_SetErrorCode+0xc4>)
 8012e8c:	68db      	ldr	r3, [r3, #12]
 8012e8e:	f003 0320 	and.w	r3, r3, #32
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d008      	beq.n	8012ea8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8012e96:	4b26      	ldr	r3, [pc, #152]	@ (8012f30 <FLASH_SetErrorCode+0xc8>)
 8012e98:	69db      	ldr	r3, [r3, #28]
 8012e9a:	f043 0308 	orr.w	r3, r3, #8
 8012e9e:	4a24      	ldr	r2, [pc, #144]	@ (8012f30 <FLASH_SetErrorCode+0xc8>)
 8012ea0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8012ea2:	4b22      	ldr	r3, [pc, #136]	@ (8012f2c <FLASH_SetErrorCode+0xc4>)
 8012ea4:	2220      	movs	r2, #32
 8012ea6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8012ea8:	4b20      	ldr	r3, [pc, #128]	@ (8012f2c <FLASH_SetErrorCode+0xc4>)
 8012eaa:	68db      	ldr	r3, [r3, #12]
 8012eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d008      	beq.n	8012ec6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8012eb4:	4b1e      	ldr	r3, [pc, #120]	@ (8012f30 <FLASH_SetErrorCode+0xc8>)
 8012eb6:	69db      	ldr	r3, [r3, #28]
 8012eb8:	f043 0304 	orr.w	r3, r3, #4
 8012ebc:	4a1c      	ldr	r2, [pc, #112]	@ (8012f30 <FLASH_SetErrorCode+0xc8>)
 8012ebe:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8012ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8012f2c <FLASH_SetErrorCode+0xc4>)
 8012ec2:	2240      	movs	r2, #64	@ 0x40
 8012ec4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8012ec6:	4b19      	ldr	r3, [pc, #100]	@ (8012f2c <FLASH_SetErrorCode+0xc4>)
 8012ec8:	68db      	ldr	r3, [r3, #12]
 8012eca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d008      	beq.n	8012ee4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8012ed2:	4b17      	ldr	r3, [pc, #92]	@ (8012f30 <FLASH_SetErrorCode+0xc8>)
 8012ed4:	69db      	ldr	r3, [r3, #28]
 8012ed6:	f043 0302 	orr.w	r3, r3, #2
 8012eda:	4a15      	ldr	r2, [pc, #84]	@ (8012f30 <FLASH_SetErrorCode+0xc8>)
 8012edc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8012ede:	4b13      	ldr	r3, [pc, #76]	@ (8012f2c <FLASH_SetErrorCode+0xc4>)
 8012ee0:	2280      	movs	r2, #128	@ 0x80
 8012ee2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8012ee4:	4b11      	ldr	r3, [pc, #68]	@ (8012f2c <FLASH_SetErrorCode+0xc4>)
 8012ee6:	68db      	ldr	r3, [r3, #12]
 8012ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d009      	beq.n	8012f04 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8012ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8012f30 <FLASH_SetErrorCode+0xc8>)
 8012ef2:	69db      	ldr	r3, [r3, #28]
 8012ef4:	f043 0301 	orr.w	r3, r3, #1
 8012ef8:	4a0d      	ldr	r2, [pc, #52]	@ (8012f30 <FLASH_SetErrorCode+0xc8>)
 8012efa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8012efc:	4b0b      	ldr	r3, [pc, #44]	@ (8012f2c <FLASH_SetErrorCode+0xc4>)
 8012efe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8012f02:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8012f04:	4b09      	ldr	r3, [pc, #36]	@ (8012f2c <FLASH_SetErrorCode+0xc4>)
 8012f06:	68db      	ldr	r3, [r3, #12]
 8012f08:	f003 0302 	and.w	r3, r3, #2
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d008      	beq.n	8012f22 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8012f10:	4b07      	ldr	r3, [pc, #28]	@ (8012f30 <FLASH_SetErrorCode+0xc8>)
 8012f12:	69db      	ldr	r3, [r3, #28]
 8012f14:	f043 0320 	orr.w	r3, r3, #32
 8012f18:	4a05      	ldr	r2, [pc, #20]	@ (8012f30 <FLASH_SetErrorCode+0xc8>)
 8012f1a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8012f1c:	4b03      	ldr	r3, [pc, #12]	@ (8012f2c <FLASH_SetErrorCode+0xc4>)
 8012f1e:	2202      	movs	r2, #2
 8012f20:	60da      	str	r2, [r3, #12]
  }
}
 8012f22:	bf00      	nop
 8012f24:	46bd      	mov	sp, r7
 8012f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f2a:	4770      	bx	lr
 8012f2c:	40023c00 	.word	0x40023c00
 8012f30:	20010134 	.word	0x20010134

08012f34 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8012f34:	b580      	push	{r7, lr}
 8012f36:	b084      	sub	sp, #16
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	6078      	str	r0, [r7, #4]
 8012f3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8012f3e:	2301      	movs	r3, #1
 8012f40:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8012f42:	2300      	movs	r3, #0
 8012f44:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8012f46:	4b32      	ldr	r3, [pc, #200]	@ (8013010 <HAL_FLASHEx_Erase+0xdc>)
 8012f48:	7e1b      	ldrb	r3, [r3, #24]
 8012f4a:	2b01      	cmp	r3, #1
 8012f4c:	d101      	bne.n	8012f52 <HAL_FLASHEx_Erase+0x1e>
 8012f4e:	2302      	movs	r3, #2
 8012f50:	e05a      	b.n	8013008 <HAL_FLASHEx_Erase+0xd4>
 8012f52:	4b2f      	ldr	r3, [pc, #188]	@ (8013010 <HAL_FLASHEx_Erase+0xdc>)
 8012f54:	2201      	movs	r2, #1
 8012f56:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012f58:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8012f5c:	f7ff feaa 	bl	8012cb4 <FLASH_WaitForLastOperation>
 8012f60:	4603      	mov	r3, r0
 8012f62:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8012f64:	7bfb      	ldrb	r3, [r7, #15]
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d14a      	bne.n	8013000 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8012f6a:	683b      	ldr	r3, [r7, #0]
 8012f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8012f70:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	2b01      	cmp	r3, #1
 8012f78:	d117      	bne.n	8012faa <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	691b      	ldr	r3, [r3, #16]
 8012f7e:	b2da      	uxtb	r2, r3
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	685b      	ldr	r3, [r3, #4]
 8012f84:	4619      	mov	r1, r3
 8012f86:	4610      	mov	r0, r2
 8012f88:	f000 f846 	bl	8013018 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012f8c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8012f90:	f7ff fe90 	bl	8012cb4 <FLASH_WaitForLastOperation>
 8012f94:	4603      	mov	r3, r0
 8012f96:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8012f98:	4b1e      	ldr	r3, [pc, #120]	@ (8013014 <HAL_FLASHEx_Erase+0xe0>)
 8012f9a:	691b      	ldr	r3, [r3, #16]
 8012f9c:	4a1d      	ldr	r2, [pc, #116]	@ (8013014 <HAL_FLASHEx_Erase+0xe0>)
 8012f9e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8012fa2:	f023 0304 	bic.w	r3, r3, #4
 8012fa6:	6113      	str	r3, [r2, #16]
 8012fa8:	e028      	b.n	8012ffc <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	689b      	ldr	r3, [r3, #8]
 8012fae:	60bb      	str	r3, [r7, #8]
 8012fb0:	e01c      	b.n	8012fec <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	691b      	ldr	r3, [r3, #16]
 8012fb6:	b2db      	uxtb	r3, r3
 8012fb8:	4619      	mov	r1, r3
 8012fba:	68b8      	ldr	r0, [r7, #8]
 8012fbc:	f000 f866 	bl	801308c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012fc0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8012fc4:	f7ff fe76 	bl	8012cb4 <FLASH_WaitForLastOperation>
 8012fc8:	4603      	mov	r3, r0
 8012fca:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8012fcc:	4b11      	ldr	r3, [pc, #68]	@ (8013014 <HAL_FLASHEx_Erase+0xe0>)
 8012fce:	691b      	ldr	r3, [r3, #16]
 8012fd0:	4a10      	ldr	r2, [pc, #64]	@ (8013014 <HAL_FLASHEx_Erase+0xe0>)
 8012fd2:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8012fd6:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8012fd8:	7bfb      	ldrb	r3, [r7, #15]
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d003      	beq.n	8012fe6 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8012fde:	683b      	ldr	r3, [r7, #0]
 8012fe0:	68ba      	ldr	r2, [r7, #8]
 8012fe2:	601a      	str	r2, [r3, #0]
          break;
 8012fe4:	e00a      	b.n	8012ffc <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8012fe6:	68bb      	ldr	r3, [r7, #8]
 8012fe8:	3301      	adds	r3, #1
 8012fea:	60bb      	str	r3, [r7, #8]
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	68da      	ldr	r2, [r3, #12]
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	689b      	ldr	r3, [r3, #8]
 8012ff4:	4413      	add	r3, r2
 8012ff6:	68ba      	ldr	r2, [r7, #8]
 8012ff8:	429a      	cmp	r2, r3
 8012ffa:	d3da      	bcc.n	8012fb2 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8012ffc:	f000 f894 	bl	8013128 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8013000:	4b03      	ldr	r3, [pc, #12]	@ (8013010 <HAL_FLASHEx_Erase+0xdc>)
 8013002:	2200      	movs	r2, #0
 8013004:	761a      	strb	r2, [r3, #24]

  return status;
 8013006:	7bfb      	ldrb	r3, [r7, #15]
}
 8013008:	4618      	mov	r0, r3
 801300a:	3710      	adds	r7, #16
 801300c:	46bd      	mov	sp, r7
 801300e:	bd80      	pop	{r7, pc}
 8013010:	20010134 	.word	0x20010134
 8013014:	40023c00 	.word	0x40023c00

08013018 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8013018:	b480      	push	{r7}
 801301a:	b083      	sub	sp, #12
 801301c:	af00      	add	r7, sp, #0
 801301e:	4603      	mov	r3, r0
 8013020:	6039      	str	r1, [r7, #0]
 8013022:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8013024:	4b18      	ldr	r3, [pc, #96]	@ (8013088 <FLASH_MassErase+0x70>)
 8013026:	691b      	ldr	r3, [r3, #16]
 8013028:	4a17      	ldr	r2, [pc, #92]	@ (8013088 <FLASH_MassErase+0x70>)
 801302a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801302e:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8013030:	683b      	ldr	r3, [r7, #0]
 8013032:	2b03      	cmp	r3, #3
 8013034:	d108      	bne.n	8013048 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8013036:	4b14      	ldr	r3, [pc, #80]	@ (8013088 <FLASH_MassErase+0x70>)
 8013038:	691b      	ldr	r3, [r3, #16]
 801303a:	4a13      	ldr	r2, [pc, #76]	@ (8013088 <FLASH_MassErase+0x70>)
 801303c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8013040:	f043 0304 	orr.w	r3, r3, #4
 8013044:	6113      	str	r3, [r2, #16]
 8013046:	e00f      	b.n	8013068 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8013048:	683b      	ldr	r3, [r7, #0]
 801304a:	2b01      	cmp	r3, #1
 801304c:	d106      	bne.n	801305c <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 801304e:	4b0e      	ldr	r3, [pc, #56]	@ (8013088 <FLASH_MassErase+0x70>)
 8013050:	691b      	ldr	r3, [r3, #16]
 8013052:	4a0d      	ldr	r2, [pc, #52]	@ (8013088 <FLASH_MassErase+0x70>)
 8013054:	f043 0304 	orr.w	r3, r3, #4
 8013058:	6113      	str	r3, [r2, #16]
 801305a:	e005      	b.n	8013068 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 801305c:	4b0a      	ldr	r3, [pc, #40]	@ (8013088 <FLASH_MassErase+0x70>)
 801305e:	691b      	ldr	r3, [r3, #16]
 8013060:	4a09      	ldr	r2, [pc, #36]	@ (8013088 <FLASH_MassErase+0x70>)
 8013062:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8013066:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8013068:	4b07      	ldr	r3, [pc, #28]	@ (8013088 <FLASH_MassErase+0x70>)
 801306a:	691a      	ldr	r2, [r3, #16]
 801306c:	79fb      	ldrb	r3, [r7, #7]
 801306e:	021b      	lsls	r3, r3, #8
 8013070:	4313      	orrs	r3, r2
 8013072:	4a05      	ldr	r2, [pc, #20]	@ (8013088 <FLASH_MassErase+0x70>)
 8013074:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8013078:	6113      	str	r3, [r2, #16]
}
 801307a:	bf00      	nop
 801307c:	370c      	adds	r7, #12
 801307e:	46bd      	mov	sp, r7
 8013080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013084:	4770      	bx	lr
 8013086:	bf00      	nop
 8013088:	40023c00 	.word	0x40023c00

0801308c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 801308c:	b480      	push	{r7}
 801308e:	b085      	sub	sp, #20
 8013090:	af00      	add	r7, sp, #0
 8013092:	6078      	str	r0, [r7, #4]
 8013094:	460b      	mov	r3, r1
 8013096:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8013098:	2300      	movs	r3, #0
 801309a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 801309c:	78fb      	ldrb	r3, [r7, #3]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d102      	bne.n	80130a8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80130a2:	2300      	movs	r3, #0
 80130a4:	60fb      	str	r3, [r7, #12]
 80130a6:	e010      	b.n	80130ca <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80130a8:	78fb      	ldrb	r3, [r7, #3]
 80130aa:	2b01      	cmp	r3, #1
 80130ac:	d103      	bne.n	80130b6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80130ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80130b2:	60fb      	str	r3, [r7, #12]
 80130b4:	e009      	b.n	80130ca <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80130b6:	78fb      	ldrb	r3, [r7, #3]
 80130b8:	2b02      	cmp	r3, #2
 80130ba:	d103      	bne.n	80130c4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80130bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80130c0:	60fb      	str	r3, [r7, #12]
 80130c2:	e002      	b.n	80130ca <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80130c4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80130c8:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	2b0b      	cmp	r3, #11
 80130ce:	d902      	bls.n	80130d6 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	3304      	adds	r3, #4
 80130d4:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80130d6:	4b13      	ldr	r3, [pc, #76]	@ (8013124 <FLASH_Erase_Sector+0x98>)
 80130d8:	691b      	ldr	r3, [r3, #16]
 80130da:	4a12      	ldr	r2, [pc, #72]	@ (8013124 <FLASH_Erase_Sector+0x98>)
 80130dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80130e0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80130e2:	4b10      	ldr	r3, [pc, #64]	@ (8013124 <FLASH_Erase_Sector+0x98>)
 80130e4:	691a      	ldr	r2, [r3, #16]
 80130e6:	490f      	ldr	r1, [pc, #60]	@ (8013124 <FLASH_Erase_Sector+0x98>)
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	4313      	orrs	r3, r2
 80130ec:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80130ee:	4b0d      	ldr	r3, [pc, #52]	@ (8013124 <FLASH_Erase_Sector+0x98>)
 80130f0:	691b      	ldr	r3, [r3, #16]
 80130f2:	4a0c      	ldr	r2, [pc, #48]	@ (8013124 <FLASH_Erase_Sector+0x98>)
 80130f4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80130f8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80130fa:	4b0a      	ldr	r3, [pc, #40]	@ (8013124 <FLASH_Erase_Sector+0x98>)
 80130fc:	691a      	ldr	r2, [r3, #16]
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	00db      	lsls	r3, r3, #3
 8013102:	4313      	orrs	r3, r2
 8013104:	4a07      	ldr	r2, [pc, #28]	@ (8013124 <FLASH_Erase_Sector+0x98>)
 8013106:	f043 0302 	orr.w	r3, r3, #2
 801310a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 801310c:	4b05      	ldr	r3, [pc, #20]	@ (8013124 <FLASH_Erase_Sector+0x98>)
 801310e:	691b      	ldr	r3, [r3, #16]
 8013110:	4a04      	ldr	r2, [pc, #16]	@ (8013124 <FLASH_Erase_Sector+0x98>)
 8013112:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8013116:	6113      	str	r3, [r2, #16]
}
 8013118:	bf00      	nop
 801311a:	3714      	adds	r7, #20
 801311c:	46bd      	mov	sp, r7
 801311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013122:	4770      	bx	lr
 8013124:	40023c00 	.word	0x40023c00

08013128 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8013128:	b480      	push	{r7}
 801312a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 801312c:	4b20      	ldr	r3, [pc, #128]	@ (80131b0 <FLASH_FlushCaches+0x88>)
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8013134:	2b00      	cmp	r3, #0
 8013136:	d017      	beq.n	8013168 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8013138:	4b1d      	ldr	r3, [pc, #116]	@ (80131b0 <FLASH_FlushCaches+0x88>)
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	4a1c      	ldr	r2, [pc, #112]	@ (80131b0 <FLASH_FlushCaches+0x88>)
 801313e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8013142:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8013144:	4b1a      	ldr	r3, [pc, #104]	@ (80131b0 <FLASH_FlushCaches+0x88>)
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	4a19      	ldr	r2, [pc, #100]	@ (80131b0 <FLASH_FlushCaches+0x88>)
 801314a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801314e:	6013      	str	r3, [r2, #0]
 8013150:	4b17      	ldr	r3, [pc, #92]	@ (80131b0 <FLASH_FlushCaches+0x88>)
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	4a16      	ldr	r2, [pc, #88]	@ (80131b0 <FLASH_FlushCaches+0x88>)
 8013156:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801315a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801315c:	4b14      	ldr	r3, [pc, #80]	@ (80131b0 <FLASH_FlushCaches+0x88>)
 801315e:	681b      	ldr	r3, [r3, #0]
 8013160:	4a13      	ldr	r2, [pc, #76]	@ (80131b0 <FLASH_FlushCaches+0x88>)
 8013162:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8013166:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8013168:	4b11      	ldr	r3, [pc, #68]	@ (80131b0 <FLASH_FlushCaches+0x88>)
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8013170:	2b00      	cmp	r3, #0
 8013172:	d017      	beq.n	80131a4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8013174:	4b0e      	ldr	r3, [pc, #56]	@ (80131b0 <FLASH_FlushCaches+0x88>)
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	4a0d      	ldr	r2, [pc, #52]	@ (80131b0 <FLASH_FlushCaches+0x88>)
 801317a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801317e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8013180:	4b0b      	ldr	r3, [pc, #44]	@ (80131b0 <FLASH_FlushCaches+0x88>)
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	4a0a      	ldr	r2, [pc, #40]	@ (80131b0 <FLASH_FlushCaches+0x88>)
 8013186:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801318a:	6013      	str	r3, [r2, #0]
 801318c:	4b08      	ldr	r3, [pc, #32]	@ (80131b0 <FLASH_FlushCaches+0x88>)
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	4a07      	ldr	r2, [pc, #28]	@ (80131b0 <FLASH_FlushCaches+0x88>)
 8013192:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013196:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8013198:	4b05      	ldr	r3, [pc, #20]	@ (80131b0 <FLASH_FlushCaches+0x88>)
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	4a04      	ldr	r2, [pc, #16]	@ (80131b0 <FLASH_FlushCaches+0x88>)
 801319e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80131a2:	6013      	str	r3, [r2, #0]
  }
}
 80131a4:	bf00      	nop
 80131a6:	46bd      	mov	sp, r7
 80131a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ac:	4770      	bx	lr
 80131ae:	bf00      	nop
 80131b0:	40023c00 	.word	0x40023c00

080131b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80131b4:	b480      	push	{r7}
 80131b6:	b089      	sub	sp, #36	@ 0x24
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	6078      	str	r0, [r7, #4]
 80131bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80131be:	2300      	movs	r3, #0
 80131c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80131c2:	2300      	movs	r3, #0
 80131c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80131c6:	2300      	movs	r3, #0
 80131c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80131ca:	2300      	movs	r3, #0
 80131cc:	61fb      	str	r3, [r7, #28]
 80131ce:	e177      	b.n	80134c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80131d0:	2201      	movs	r2, #1
 80131d2:	69fb      	ldr	r3, [r7, #28]
 80131d4:	fa02 f303 	lsl.w	r3, r2, r3
 80131d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80131da:	683b      	ldr	r3, [r7, #0]
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	697a      	ldr	r2, [r7, #20]
 80131e0:	4013      	ands	r3, r2
 80131e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80131e4:	693a      	ldr	r2, [r7, #16]
 80131e6:	697b      	ldr	r3, [r7, #20]
 80131e8:	429a      	cmp	r2, r3
 80131ea:	f040 8166 	bne.w	80134ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80131ee:	683b      	ldr	r3, [r7, #0]
 80131f0:	685b      	ldr	r3, [r3, #4]
 80131f2:	f003 0303 	and.w	r3, r3, #3
 80131f6:	2b01      	cmp	r3, #1
 80131f8:	d005      	beq.n	8013206 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80131fa:	683b      	ldr	r3, [r7, #0]
 80131fc:	685b      	ldr	r3, [r3, #4]
 80131fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8013202:	2b02      	cmp	r3, #2
 8013204:	d130      	bne.n	8013268 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	689b      	ldr	r3, [r3, #8]
 801320a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801320c:	69fb      	ldr	r3, [r7, #28]
 801320e:	005b      	lsls	r3, r3, #1
 8013210:	2203      	movs	r2, #3
 8013212:	fa02 f303 	lsl.w	r3, r2, r3
 8013216:	43db      	mvns	r3, r3
 8013218:	69ba      	ldr	r2, [r7, #24]
 801321a:	4013      	ands	r3, r2
 801321c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801321e:	683b      	ldr	r3, [r7, #0]
 8013220:	68da      	ldr	r2, [r3, #12]
 8013222:	69fb      	ldr	r3, [r7, #28]
 8013224:	005b      	lsls	r3, r3, #1
 8013226:	fa02 f303 	lsl.w	r3, r2, r3
 801322a:	69ba      	ldr	r2, [r7, #24]
 801322c:	4313      	orrs	r3, r2
 801322e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	69ba      	ldr	r2, [r7, #24]
 8013234:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	685b      	ldr	r3, [r3, #4]
 801323a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801323c:	2201      	movs	r2, #1
 801323e:	69fb      	ldr	r3, [r7, #28]
 8013240:	fa02 f303 	lsl.w	r3, r2, r3
 8013244:	43db      	mvns	r3, r3
 8013246:	69ba      	ldr	r2, [r7, #24]
 8013248:	4013      	ands	r3, r2
 801324a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801324c:	683b      	ldr	r3, [r7, #0]
 801324e:	685b      	ldr	r3, [r3, #4]
 8013250:	091b      	lsrs	r3, r3, #4
 8013252:	f003 0201 	and.w	r2, r3, #1
 8013256:	69fb      	ldr	r3, [r7, #28]
 8013258:	fa02 f303 	lsl.w	r3, r2, r3
 801325c:	69ba      	ldr	r2, [r7, #24]
 801325e:	4313      	orrs	r3, r2
 8013260:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	69ba      	ldr	r2, [r7, #24]
 8013266:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8013268:	683b      	ldr	r3, [r7, #0]
 801326a:	685b      	ldr	r3, [r3, #4]
 801326c:	f003 0303 	and.w	r3, r3, #3
 8013270:	2b03      	cmp	r3, #3
 8013272:	d017      	beq.n	80132a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	68db      	ldr	r3, [r3, #12]
 8013278:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801327a:	69fb      	ldr	r3, [r7, #28]
 801327c:	005b      	lsls	r3, r3, #1
 801327e:	2203      	movs	r2, #3
 8013280:	fa02 f303 	lsl.w	r3, r2, r3
 8013284:	43db      	mvns	r3, r3
 8013286:	69ba      	ldr	r2, [r7, #24]
 8013288:	4013      	ands	r3, r2
 801328a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801328c:	683b      	ldr	r3, [r7, #0]
 801328e:	689a      	ldr	r2, [r3, #8]
 8013290:	69fb      	ldr	r3, [r7, #28]
 8013292:	005b      	lsls	r3, r3, #1
 8013294:	fa02 f303 	lsl.w	r3, r2, r3
 8013298:	69ba      	ldr	r2, [r7, #24]
 801329a:	4313      	orrs	r3, r2
 801329c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	69ba      	ldr	r2, [r7, #24]
 80132a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80132a4:	683b      	ldr	r3, [r7, #0]
 80132a6:	685b      	ldr	r3, [r3, #4]
 80132a8:	f003 0303 	and.w	r3, r3, #3
 80132ac:	2b02      	cmp	r3, #2
 80132ae:	d123      	bne.n	80132f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80132b0:	69fb      	ldr	r3, [r7, #28]
 80132b2:	08da      	lsrs	r2, r3, #3
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	3208      	adds	r2, #8
 80132b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80132bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80132be:	69fb      	ldr	r3, [r7, #28]
 80132c0:	f003 0307 	and.w	r3, r3, #7
 80132c4:	009b      	lsls	r3, r3, #2
 80132c6:	220f      	movs	r2, #15
 80132c8:	fa02 f303 	lsl.w	r3, r2, r3
 80132cc:	43db      	mvns	r3, r3
 80132ce:	69ba      	ldr	r2, [r7, #24]
 80132d0:	4013      	ands	r3, r2
 80132d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80132d4:	683b      	ldr	r3, [r7, #0]
 80132d6:	691a      	ldr	r2, [r3, #16]
 80132d8:	69fb      	ldr	r3, [r7, #28]
 80132da:	f003 0307 	and.w	r3, r3, #7
 80132de:	009b      	lsls	r3, r3, #2
 80132e0:	fa02 f303 	lsl.w	r3, r2, r3
 80132e4:	69ba      	ldr	r2, [r7, #24]
 80132e6:	4313      	orrs	r3, r2
 80132e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80132ea:	69fb      	ldr	r3, [r7, #28]
 80132ec:	08da      	lsrs	r2, r3, #3
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	3208      	adds	r2, #8
 80132f2:	69b9      	ldr	r1, [r7, #24]
 80132f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80132fe:	69fb      	ldr	r3, [r7, #28]
 8013300:	005b      	lsls	r3, r3, #1
 8013302:	2203      	movs	r2, #3
 8013304:	fa02 f303 	lsl.w	r3, r2, r3
 8013308:	43db      	mvns	r3, r3
 801330a:	69ba      	ldr	r2, [r7, #24]
 801330c:	4013      	ands	r3, r2
 801330e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8013310:	683b      	ldr	r3, [r7, #0]
 8013312:	685b      	ldr	r3, [r3, #4]
 8013314:	f003 0203 	and.w	r2, r3, #3
 8013318:	69fb      	ldr	r3, [r7, #28]
 801331a:	005b      	lsls	r3, r3, #1
 801331c:	fa02 f303 	lsl.w	r3, r2, r3
 8013320:	69ba      	ldr	r2, [r7, #24]
 8013322:	4313      	orrs	r3, r2
 8013324:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	69ba      	ldr	r2, [r7, #24]
 801332a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801332c:	683b      	ldr	r3, [r7, #0]
 801332e:	685b      	ldr	r3, [r3, #4]
 8013330:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8013334:	2b00      	cmp	r3, #0
 8013336:	f000 80c0 	beq.w	80134ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801333a:	2300      	movs	r3, #0
 801333c:	60fb      	str	r3, [r7, #12]
 801333e:	4b66      	ldr	r3, [pc, #408]	@ (80134d8 <HAL_GPIO_Init+0x324>)
 8013340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013342:	4a65      	ldr	r2, [pc, #404]	@ (80134d8 <HAL_GPIO_Init+0x324>)
 8013344:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8013348:	6453      	str	r3, [r2, #68]	@ 0x44
 801334a:	4b63      	ldr	r3, [pc, #396]	@ (80134d8 <HAL_GPIO_Init+0x324>)
 801334c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801334e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8013352:	60fb      	str	r3, [r7, #12]
 8013354:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8013356:	4a61      	ldr	r2, [pc, #388]	@ (80134dc <HAL_GPIO_Init+0x328>)
 8013358:	69fb      	ldr	r3, [r7, #28]
 801335a:	089b      	lsrs	r3, r3, #2
 801335c:	3302      	adds	r3, #2
 801335e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013362:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8013364:	69fb      	ldr	r3, [r7, #28]
 8013366:	f003 0303 	and.w	r3, r3, #3
 801336a:	009b      	lsls	r3, r3, #2
 801336c:	220f      	movs	r2, #15
 801336e:	fa02 f303 	lsl.w	r3, r2, r3
 8013372:	43db      	mvns	r3, r3
 8013374:	69ba      	ldr	r2, [r7, #24]
 8013376:	4013      	ands	r3, r2
 8013378:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	4a58      	ldr	r2, [pc, #352]	@ (80134e0 <HAL_GPIO_Init+0x32c>)
 801337e:	4293      	cmp	r3, r2
 8013380:	d037      	beq.n	80133f2 <HAL_GPIO_Init+0x23e>
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	4a57      	ldr	r2, [pc, #348]	@ (80134e4 <HAL_GPIO_Init+0x330>)
 8013386:	4293      	cmp	r3, r2
 8013388:	d031      	beq.n	80133ee <HAL_GPIO_Init+0x23a>
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	4a56      	ldr	r2, [pc, #344]	@ (80134e8 <HAL_GPIO_Init+0x334>)
 801338e:	4293      	cmp	r3, r2
 8013390:	d02b      	beq.n	80133ea <HAL_GPIO_Init+0x236>
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	4a55      	ldr	r2, [pc, #340]	@ (80134ec <HAL_GPIO_Init+0x338>)
 8013396:	4293      	cmp	r3, r2
 8013398:	d025      	beq.n	80133e6 <HAL_GPIO_Init+0x232>
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	4a54      	ldr	r2, [pc, #336]	@ (80134f0 <HAL_GPIO_Init+0x33c>)
 801339e:	4293      	cmp	r3, r2
 80133a0:	d01f      	beq.n	80133e2 <HAL_GPIO_Init+0x22e>
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	4a53      	ldr	r2, [pc, #332]	@ (80134f4 <HAL_GPIO_Init+0x340>)
 80133a6:	4293      	cmp	r3, r2
 80133a8:	d019      	beq.n	80133de <HAL_GPIO_Init+0x22a>
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	4a52      	ldr	r2, [pc, #328]	@ (80134f8 <HAL_GPIO_Init+0x344>)
 80133ae:	4293      	cmp	r3, r2
 80133b0:	d013      	beq.n	80133da <HAL_GPIO_Init+0x226>
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	4a51      	ldr	r2, [pc, #324]	@ (80134fc <HAL_GPIO_Init+0x348>)
 80133b6:	4293      	cmp	r3, r2
 80133b8:	d00d      	beq.n	80133d6 <HAL_GPIO_Init+0x222>
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	4a50      	ldr	r2, [pc, #320]	@ (8013500 <HAL_GPIO_Init+0x34c>)
 80133be:	4293      	cmp	r3, r2
 80133c0:	d007      	beq.n	80133d2 <HAL_GPIO_Init+0x21e>
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	4a4f      	ldr	r2, [pc, #316]	@ (8013504 <HAL_GPIO_Init+0x350>)
 80133c6:	4293      	cmp	r3, r2
 80133c8:	d101      	bne.n	80133ce <HAL_GPIO_Init+0x21a>
 80133ca:	2309      	movs	r3, #9
 80133cc:	e012      	b.n	80133f4 <HAL_GPIO_Init+0x240>
 80133ce:	230a      	movs	r3, #10
 80133d0:	e010      	b.n	80133f4 <HAL_GPIO_Init+0x240>
 80133d2:	2308      	movs	r3, #8
 80133d4:	e00e      	b.n	80133f4 <HAL_GPIO_Init+0x240>
 80133d6:	2307      	movs	r3, #7
 80133d8:	e00c      	b.n	80133f4 <HAL_GPIO_Init+0x240>
 80133da:	2306      	movs	r3, #6
 80133dc:	e00a      	b.n	80133f4 <HAL_GPIO_Init+0x240>
 80133de:	2305      	movs	r3, #5
 80133e0:	e008      	b.n	80133f4 <HAL_GPIO_Init+0x240>
 80133e2:	2304      	movs	r3, #4
 80133e4:	e006      	b.n	80133f4 <HAL_GPIO_Init+0x240>
 80133e6:	2303      	movs	r3, #3
 80133e8:	e004      	b.n	80133f4 <HAL_GPIO_Init+0x240>
 80133ea:	2302      	movs	r3, #2
 80133ec:	e002      	b.n	80133f4 <HAL_GPIO_Init+0x240>
 80133ee:	2301      	movs	r3, #1
 80133f0:	e000      	b.n	80133f4 <HAL_GPIO_Init+0x240>
 80133f2:	2300      	movs	r3, #0
 80133f4:	69fa      	ldr	r2, [r7, #28]
 80133f6:	f002 0203 	and.w	r2, r2, #3
 80133fa:	0092      	lsls	r2, r2, #2
 80133fc:	4093      	lsls	r3, r2
 80133fe:	69ba      	ldr	r2, [r7, #24]
 8013400:	4313      	orrs	r3, r2
 8013402:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8013404:	4935      	ldr	r1, [pc, #212]	@ (80134dc <HAL_GPIO_Init+0x328>)
 8013406:	69fb      	ldr	r3, [r7, #28]
 8013408:	089b      	lsrs	r3, r3, #2
 801340a:	3302      	adds	r3, #2
 801340c:	69ba      	ldr	r2, [r7, #24]
 801340e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8013412:	4b3d      	ldr	r3, [pc, #244]	@ (8013508 <HAL_GPIO_Init+0x354>)
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8013418:	693b      	ldr	r3, [r7, #16]
 801341a:	43db      	mvns	r3, r3
 801341c:	69ba      	ldr	r2, [r7, #24]
 801341e:	4013      	ands	r3, r2
 8013420:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8013422:	683b      	ldr	r3, [r7, #0]
 8013424:	685b      	ldr	r3, [r3, #4]
 8013426:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801342a:	2b00      	cmp	r3, #0
 801342c:	d003      	beq.n	8013436 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 801342e:	69ba      	ldr	r2, [r7, #24]
 8013430:	693b      	ldr	r3, [r7, #16]
 8013432:	4313      	orrs	r3, r2
 8013434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8013436:	4a34      	ldr	r2, [pc, #208]	@ (8013508 <HAL_GPIO_Init+0x354>)
 8013438:	69bb      	ldr	r3, [r7, #24]
 801343a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 801343c:	4b32      	ldr	r3, [pc, #200]	@ (8013508 <HAL_GPIO_Init+0x354>)
 801343e:	685b      	ldr	r3, [r3, #4]
 8013440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8013442:	693b      	ldr	r3, [r7, #16]
 8013444:	43db      	mvns	r3, r3
 8013446:	69ba      	ldr	r2, [r7, #24]
 8013448:	4013      	ands	r3, r2
 801344a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801344c:	683b      	ldr	r3, [r7, #0]
 801344e:	685b      	ldr	r3, [r3, #4]
 8013450:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013454:	2b00      	cmp	r3, #0
 8013456:	d003      	beq.n	8013460 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8013458:	69ba      	ldr	r2, [r7, #24]
 801345a:	693b      	ldr	r3, [r7, #16]
 801345c:	4313      	orrs	r3, r2
 801345e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8013460:	4a29      	ldr	r2, [pc, #164]	@ (8013508 <HAL_GPIO_Init+0x354>)
 8013462:	69bb      	ldr	r3, [r7, #24]
 8013464:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8013466:	4b28      	ldr	r3, [pc, #160]	@ (8013508 <HAL_GPIO_Init+0x354>)
 8013468:	689b      	ldr	r3, [r3, #8]
 801346a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801346c:	693b      	ldr	r3, [r7, #16]
 801346e:	43db      	mvns	r3, r3
 8013470:	69ba      	ldr	r2, [r7, #24]
 8013472:	4013      	ands	r3, r2
 8013474:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8013476:	683b      	ldr	r3, [r7, #0]
 8013478:	685b      	ldr	r3, [r3, #4]
 801347a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801347e:	2b00      	cmp	r3, #0
 8013480:	d003      	beq.n	801348a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8013482:	69ba      	ldr	r2, [r7, #24]
 8013484:	693b      	ldr	r3, [r7, #16]
 8013486:	4313      	orrs	r3, r2
 8013488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801348a:	4a1f      	ldr	r2, [pc, #124]	@ (8013508 <HAL_GPIO_Init+0x354>)
 801348c:	69bb      	ldr	r3, [r7, #24]
 801348e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8013490:	4b1d      	ldr	r3, [pc, #116]	@ (8013508 <HAL_GPIO_Init+0x354>)
 8013492:	68db      	ldr	r3, [r3, #12]
 8013494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8013496:	693b      	ldr	r3, [r7, #16]
 8013498:	43db      	mvns	r3, r3
 801349a:	69ba      	ldr	r2, [r7, #24]
 801349c:	4013      	ands	r3, r2
 801349e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80134a0:	683b      	ldr	r3, [r7, #0]
 80134a2:	685b      	ldr	r3, [r3, #4]
 80134a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d003      	beq.n	80134b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80134ac:	69ba      	ldr	r2, [r7, #24]
 80134ae:	693b      	ldr	r3, [r7, #16]
 80134b0:	4313      	orrs	r3, r2
 80134b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80134b4:	4a14      	ldr	r2, [pc, #80]	@ (8013508 <HAL_GPIO_Init+0x354>)
 80134b6:	69bb      	ldr	r3, [r7, #24]
 80134b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80134ba:	69fb      	ldr	r3, [r7, #28]
 80134bc:	3301      	adds	r3, #1
 80134be:	61fb      	str	r3, [r7, #28]
 80134c0:	69fb      	ldr	r3, [r7, #28]
 80134c2:	2b0f      	cmp	r3, #15
 80134c4:	f67f ae84 	bls.w	80131d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80134c8:	bf00      	nop
 80134ca:	bf00      	nop
 80134cc:	3724      	adds	r7, #36	@ 0x24
 80134ce:	46bd      	mov	sp, r7
 80134d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d4:	4770      	bx	lr
 80134d6:	bf00      	nop
 80134d8:	40023800 	.word	0x40023800
 80134dc:	40013800 	.word	0x40013800
 80134e0:	40020000 	.word	0x40020000
 80134e4:	40020400 	.word	0x40020400
 80134e8:	40020800 	.word	0x40020800
 80134ec:	40020c00 	.word	0x40020c00
 80134f0:	40021000 	.word	0x40021000
 80134f4:	40021400 	.word	0x40021400
 80134f8:	40021800 	.word	0x40021800
 80134fc:	40021c00 	.word	0x40021c00
 8013500:	40022000 	.word	0x40022000
 8013504:	40022400 	.word	0x40022400
 8013508:	40013c00 	.word	0x40013c00

0801350c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 801350c:	b480      	push	{r7}
 801350e:	b087      	sub	sp, #28
 8013510:	af00      	add	r7, sp, #0
 8013512:	6078      	str	r0, [r7, #4]
 8013514:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8013516:	2300      	movs	r3, #0
 8013518:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 801351a:	2300      	movs	r3, #0
 801351c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 801351e:	2300      	movs	r3, #0
 8013520:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8013522:	2300      	movs	r3, #0
 8013524:	617b      	str	r3, [r7, #20]
 8013526:	e0d9      	b.n	80136dc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8013528:	2201      	movs	r2, #1
 801352a:	697b      	ldr	r3, [r7, #20]
 801352c:	fa02 f303 	lsl.w	r3, r2, r3
 8013530:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8013532:	683a      	ldr	r2, [r7, #0]
 8013534:	693b      	ldr	r3, [r7, #16]
 8013536:	4013      	ands	r3, r2
 8013538:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 801353a:	68fa      	ldr	r2, [r7, #12]
 801353c:	693b      	ldr	r3, [r7, #16]
 801353e:	429a      	cmp	r2, r3
 8013540:	f040 80c9 	bne.w	80136d6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8013544:	4a6b      	ldr	r2, [pc, #428]	@ (80136f4 <HAL_GPIO_DeInit+0x1e8>)
 8013546:	697b      	ldr	r3, [r7, #20]
 8013548:	089b      	lsrs	r3, r3, #2
 801354a:	3302      	adds	r3, #2
 801354c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013550:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8013552:	697b      	ldr	r3, [r7, #20]
 8013554:	f003 0303 	and.w	r3, r3, #3
 8013558:	009b      	lsls	r3, r3, #2
 801355a:	220f      	movs	r2, #15
 801355c:	fa02 f303 	lsl.w	r3, r2, r3
 8013560:	68ba      	ldr	r2, [r7, #8]
 8013562:	4013      	ands	r3, r2
 8013564:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	4a63      	ldr	r2, [pc, #396]	@ (80136f8 <HAL_GPIO_DeInit+0x1ec>)
 801356a:	4293      	cmp	r3, r2
 801356c:	d037      	beq.n	80135de <HAL_GPIO_DeInit+0xd2>
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	4a62      	ldr	r2, [pc, #392]	@ (80136fc <HAL_GPIO_DeInit+0x1f0>)
 8013572:	4293      	cmp	r3, r2
 8013574:	d031      	beq.n	80135da <HAL_GPIO_DeInit+0xce>
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	4a61      	ldr	r2, [pc, #388]	@ (8013700 <HAL_GPIO_DeInit+0x1f4>)
 801357a:	4293      	cmp	r3, r2
 801357c:	d02b      	beq.n	80135d6 <HAL_GPIO_DeInit+0xca>
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	4a60      	ldr	r2, [pc, #384]	@ (8013704 <HAL_GPIO_DeInit+0x1f8>)
 8013582:	4293      	cmp	r3, r2
 8013584:	d025      	beq.n	80135d2 <HAL_GPIO_DeInit+0xc6>
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	4a5f      	ldr	r2, [pc, #380]	@ (8013708 <HAL_GPIO_DeInit+0x1fc>)
 801358a:	4293      	cmp	r3, r2
 801358c:	d01f      	beq.n	80135ce <HAL_GPIO_DeInit+0xc2>
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	4a5e      	ldr	r2, [pc, #376]	@ (801370c <HAL_GPIO_DeInit+0x200>)
 8013592:	4293      	cmp	r3, r2
 8013594:	d019      	beq.n	80135ca <HAL_GPIO_DeInit+0xbe>
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	4a5d      	ldr	r2, [pc, #372]	@ (8013710 <HAL_GPIO_DeInit+0x204>)
 801359a:	4293      	cmp	r3, r2
 801359c:	d013      	beq.n	80135c6 <HAL_GPIO_DeInit+0xba>
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	4a5c      	ldr	r2, [pc, #368]	@ (8013714 <HAL_GPIO_DeInit+0x208>)
 80135a2:	4293      	cmp	r3, r2
 80135a4:	d00d      	beq.n	80135c2 <HAL_GPIO_DeInit+0xb6>
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	4a5b      	ldr	r2, [pc, #364]	@ (8013718 <HAL_GPIO_DeInit+0x20c>)
 80135aa:	4293      	cmp	r3, r2
 80135ac:	d007      	beq.n	80135be <HAL_GPIO_DeInit+0xb2>
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	4a5a      	ldr	r2, [pc, #360]	@ (801371c <HAL_GPIO_DeInit+0x210>)
 80135b2:	4293      	cmp	r3, r2
 80135b4:	d101      	bne.n	80135ba <HAL_GPIO_DeInit+0xae>
 80135b6:	2309      	movs	r3, #9
 80135b8:	e012      	b.n	80135e0 <HAL_GPIO_DeInit+0xd4>
 80135ba:	230a      	movs	r3, #10
 80135bc:	e010      	b.n	80135e0 <HAL_GPIO_DeInit+0xd4>
 80135be:	2308      	movs	r3, #8
 80135c0:	e00e      	b.n	80135e0 <HAL_GPIO_DeInit+0xd4>
 80135c2:	2307      	movs	r3, #7
 80135c4:	e00c      	b.n	80135e0 <HAL_GPIO_DeInit+0xd4>
 80135c6:	2306      	movs	r3, #6
 80135c8:	e00a      	b.n	80135e0 <HAL_GPIO_DeInit+0xd4>
 80135ca:	2305      	movs	r3, #5
 80135cc:	e008      	b.n	80135e0 <HAL_GPIO_DeInit+0xd4>
 80135ce:	2304      	movs	r3, #4
 80135d0:	e006      	b.n	80135e0 <HAL_GPIO_DeInit+0xd4>
 80135d2:	2303      	movs	r3, #3
 80135d4:	e004      	b.n	80135e0 <HAL_GPIO_DeInit+0xd4>
 80135d6:	2302      	movs	r3, #2
 80135d8:	e002      	b.n	80135e0 <HAL_GPIO_DeInit+0xd4>
 80135da:	2301      	movs	r3, #1
 80135dc:	e000      	b.n	80135e0 <HAL_GPIO_DeInit+0xd4>
 80135de:	2300      	movs	r3, #0
 80135e0:	697a      	ldr	r2, [r7, #20]
 80135e2:	f002 0203 	and.w	r2, r2, #3
 80135e6:	0092      	lsls	r2, r2, #2
 80135e8:	4093      	lsls	r3, r2
 80135ea:	68ba      	ldr	r2, [r7, #8]
 80135ec:	429a      	cmp	r2, r3
 80135ee:	d132      	bne.n	8013656 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80135f0:	4b4b      	ldr	r3, [pc, #300]	@ (8013720 <HAL_GPIO_DeInit+0x214>)
 80135f2:	681a      	ldr	r2, [r3, #0]
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	43db      	mvns	r3, r3
 80135f8:	4949      	ldr	r1, [pc, #292]	@ (8013720 <HAL_GPIO_DeInit+0x214>)
 80135fa:	4013      	ands	r3, r2
 80135fc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80135fe:	4b48      	ldr	r3, [pc, #288]	@ (8013720 <HAL_GPIO_DeInit+0x214>)
 8013600:	685a      	ldr	r2, [r3, #4]
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	43db      	mvns	r3, r3
 8013606:	4946      	ldr	r1, [pc, #280]	@ (8013720 <HAL_GPIO_DeInit+0x214>)
 8013608:	4013      	ands	r3, r2
 801360a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 801360c:	4b44      	ldr	r3, [pc, #272]	@ (8013720 <HAL_GPIO_DeInit+0x214>)
 801360e:	689a      	ldr	r2, [r3, #8]
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	43db      	mvns	r3, r3
 8013614:	4942      	ldr	r1, [pc, #264]	@ (8013720 <HAL_GPIO_DeInit+0x214>)
 8013616:	4013      	ands	r3, r2
 8013618:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 801361a:	4b41      	ldr	r3, [pc, #260]	@ (8013720 <HAL_GPIO_DeInit+0x214>)
 801361c:	68da      	ldr	r2, [r3, #12]
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	43db      	mvns	r3, r3
 8013622:	493f      	ldr	r1, [pc, #252]	@ (8013720 <HAL_GPIO_DeInit+0x214>)
 8013624:	4013      	ands	r3, r2
 8013626:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8013628:	697b      	ldr	r3, [r7, #20]
 801362a:	f003 0303 	and.w	r3, r3, #3
 801362e:	009b      	lsls	r3, r3, #2
 8013630:	220f      	movs	r2, #15
 8013632:	fa02 f303 	lsl.w	r3, r2, r3
 8013636:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8013638:	4a2e      	ldr	r2, [pc, #184]	@ (80136f4 <HAL_GPIO_DeInit+0x1e8>)
 801363a:	697b      	ldr	r3, [r7, #20]
 801363c:	089b      	lsrs	r3, r3, #2
 801363e:	3302      	adds	r3, #2
 8013640:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8013644:	68bb      	ldr	r3, [r7, #8]
 8013646:	43da      	mvns	r2, r3
 8013648:	482a      	ldr	r0, [pc, #168]	@ (80136f4 <HAL_GPIO_DeInit+0x1e8>)
 801364a:	697b      	ldr	r3, [r7, #20]
 801364c:	089b      	lsrs	r3, r3, #2
 801364e:	400a      	ands	r2, r1
 8013650:	3302      	adds	r3, #2
 8013652:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	681a      	ldr	r2, [r3, #0]
 801365a:	697b      	ldr	r3, [r7, #20]
 801365c:	005b      	lsls	r3, r3, #1
 801365e:	2103      	movs	r1, #3
 8013660:	fa01 f303 	lsl.w	r3, r1, r3
 8013664:	43db      	mvns	r3, r3
 8013666:	401a      	ands	r2, r3
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801366c:	697b      	ldr	r3, [r7, #20]
 801366e:	08da      	lsrs	r2, r3, #3
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	3208      	adds	r2, #8
 8013674:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013678:	697b      	ldr	r3, [r7, #20]
 801367a:	f003 0307 	and.w	r3, r3, #7
 801367e:	009b      	lsls	r3, r3, #2
 8013680:	220f      	movs	r2, #15
 8013682:	fa02 f303 	lsl.w	r3, r2, r3
 8013686:	43db      	mvns	r3, r3
 8013688:	697a      	ldr	r2, [r7, #20]
 801368a:	08d2      	lsrs	r2, r2, #3
 801368c:	4019      	ands	r1, r3
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	3208      	adds	r2, #8
 8013692:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	68da      	ldr	r2, [r3, #12]
 801369a:	697b      	ldr	r3, [r7, #20]
 801369c:	005b      	lsls	r3, r3, #1
 801369e:	2103      	movs	r1, #3
 80136a0:	fa01 f303 	lsl.w	r3, r1, r3
 80136a4:	43db      	mvns	r3, r3
 80136a6:	401a      	ands	r2, r3
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	685a      	ldr	r2, [r3, #4]
 80136b0:	2101      	movs	r1, #1
 80136b2:	697b      	ldr	r3, [r7, #20]
 80136b4:	fa01 f303 	lsl.w	r3, r1, r3
 80136b8:	43db      	mvns	r3, r3
 80136ba:	401a      	ands	r2, r3
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	689a      	ldr	r2, [r3, #8]
 80136c4:	697b      	ldr	r3, [r7, #20]
 80136c6:	005b      	lsls	r3, r3, #1
 80136c8:	2103      	movs	r1, #3
 80136ca:	fa01 f303 	lsl.w	r3, r1, r3
 80136ce:	43db      	mvns	r3, r3
 80136d0:	401a      	ands	r2, r3
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80136d6:	697b      	ldr	r3, [r7, #20]
 80136d8:	3301      	adds	r3, #1
 80136da:	617b      	str	r3, [r7, #20]
 80136dc:	697b      	ldr	r3, [r7, #20]
 80136de:	2b0f      	cmp	r3, #15
 80136e0:	f67f af22 	bls.w	8013528 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80136e4:	bf00      	nop
 80136e6:	bf00      	nop
 80136e8:	371c      	adds	r7, #28
 80136ea:	46bd      	mov	sp, r7
 80136ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136f0:	4770      	bx	lr
 80136f2:	bf00      	nop
 80136f4:	40013800 	.word	0x40013800
 80136f8:	40020000 	.word	0x40020000
 80136fc:	40020400 	.word	0x40020400
 8013700:	40020800 	.word	0x40020800
 8013704:	40020c00 	.word	0x40020c00
 8013708:	40021000 	.word	0x40021000
 801370c:	40021400 	.word	0x40021400
 8013710:	40021800 	.word	0x40021800
 8013714:	40021c00 	.word	0x40021c00
 8013718:	40022000 	.word	0x40022000
 801371c:	40022400 	.word	0x40022400
 8013720:	40013c00 	.word	0x40013c00

08013724 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8013724:	b480      	push	{r7}
 8013726:	b085      	sub	sp, #20
 8013728:	af00      	add	r7, sp, #0
 801372a:	6078      	str	r0, [r7, #4]
 801372c:	460b      	mov	r3, r1
 801372e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	691a      	ldr	r2, [r3, #16]
 8013734:	887b      	ldrh	r3, [r7, #2]
 8013736:	4013      	ands	r3, r2
 8013738:	2b00      	cmp	r3, #0
 801373a:	d002      	beq.n	8013742 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801373c:	2301      	movs	r3, #1
 801373e:	73fb      	strb	r3, [r7, #15]
 8013740:	e001      	b.n	8013746 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8013742:	2300      	movs	r3, #0
 8013744:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8013746:	7bfb      	ldrb	r3, [r7, #15]
}
 8013748:	4618      	mov	r0, r3
 801374a:	3714      	adds	r7, #20
 801374c:	46bd      	mov	sp, r7
 801374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013752:	4770      	bx	lr

08013754 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8013754:	b480      	push	{r7}
 8013756:	b083      	sub	sp, #12
 8013758:	af00      	add	r7, sp, #0
 801375a:	6078      	str	r0, [r7, #4]
 801375c:	460b      	mov	r3, r1
 801375e:	807b      	strh	r3, [r7, #2]
 8013760:	4613      	mov	r3, r2
 8013762:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8013764:	787b      	ldrb	r3, [r7, #1]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d003      	beq.n	8013772 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801376a:	887a      	ldrh	r2, [r7, #2]
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8013770:	e003      	b.n	801377a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8013772:	887b      	ldrh	r3, [r7, #2]
 8013774:	041a      	lsls	r2, r3, #16
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	619a      	str	r2, [r3, #24]
}
 801377a:	bf00      	nop
 801377c:	370c      	adds	r7, #12
 801377e:	46bd      	mov	sp, r7
 8013780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013784:	4770      	bx	lr

08013786 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8013786:	b480      	push	{r7}
 8013788:	b085      	sub	sp, #20
 801378a:	af00      	add	r7, sp, #0
 801378c:	6078      	str	r0, [r7, #4]
 801378e:	460b      	mov	r3, r1
 8013790:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	695b      	ldr	r3, [r3, #20]
 8013796:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8013798:	887a      	ldrh	r2, [r7, #2]
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	4013      	ands	r3, r2
 801379e:	041a      	lsls	r2, r3, #16
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	43d9      	mvns	r1, r3
 80137a4:	887b      	ldrh	r3, [r7, #2]
 80137a6:	400b      	ands	r3, r1
 80137a8:	431a      	orrs	r2, r3
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	619a      	str	r2, [r3, #24]
}
 80137ae:	bf00      	nop
 80137b0:	3714      	adds	r7, #20
 80137b2:	46bd      	mov	sp, r7
 80137b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b8:	4770      	bx	lr
	...

080137bc <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80137bc:	b480      	push	{r7}
 80137be:	b083      	sub	sp, #12
 80137c0:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80137c2:	4b06      	ldr	r3, [pc, #24]	@ (80137dc <HAL_PWR_EnableBkUpAccess+0x20>)
 80137c4:	2201      	movs	r2, #1
 80137c6:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80137c8:	4b05      	ldr	r3, [pc, #20]	@ (80137e0 <HAL_PWR_EnableBkUpAccess+0x24>)
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80137ce:	687b      	ldr	r3, [r7, #4]
}
 80137d0:	bf00      	nop
 80137d2:	370c      	adds	r7, #12
 80137d4:	46bd      	mov	sp, r7
 80137d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137da:	4770      	bx	lr
 80137dc:	420e0020 	.word	0x420e0020
 80137e0:	40007000 	.word	0x40007000

080137e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80137e4:	b580      	push	{r7, lr}
 80137e6:	b086      	sub	sp, #24
 80137e8:	af00      	add	r7, sp, #0
 80137ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d101      	bne.n	80137f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80137f2:	2301      	movs	r3, #1
 80137f4:	e267      	b.n	8013cc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	f003 0301 	and.w	r3, r3, #1
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d075      	beq.n	80138ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8013802:	4b88      	ldr	r3, [pc, #544]	@ (8013a24 <HAL_RCC_OscConfig+0x240>)
 8013804:	689b      	ldr	r3, [r3, #8]
 8013806:	f003 030c 	and.w	r3, r3, #12
 801380a:	2b04      	cmp	r3, #4
 801380c:	d00c      	beq.n	8013828 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801380e:	4b85      	ldr	r3, [pc, #532]	@ (8013a24 <HAL_RCC_OscConfig+0x240>)
 8013810:	689b      	ldr	r3, [r3, #8]
 8013812:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8013816:	2b08      	cmp	r3, #8
 8013818:	d112      	bne.n	8013840 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801381a:	4b82      	ldr	r3, [pc, #520]	@ (8013a24 <HAL_RCC_OscConfig+0x240>)
 801381c:	685b      	ldr	r3, [r3, #4]
 801381e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8013822:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8013826:	d10b      	bne.n	8013840 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013828:	4b7e      	ldr	r3, [pc, #504]	@ (8013a24 <HAL_RCC_OscConfig+0x240>)
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013830:	2b00      	cmp	r3, #0
 8013832:	d05b      	beq.n	80138ec <HAL_RCC_OscConfig+0x108>
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	685b      	ldr	r3, [r3, #4]
 8013838:	2b00      	cmp	r3, #0
 801383a:	d157      	bne.n	80138ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801383c:	2301      	movs	r3, #1
 801383e:	e242      	b.n	8013cc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	685b      	ldr	r3, [r3, #4]
 8013844:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013848:	d106      	bne.n	8013858 <HAL_RCC_OscConfig+0x74>
 801384a:	4b76      	ldr	r3, [pc, #472]	@ (8013a24 <HAL_RCC_OscConfig+0x240>)
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	4a75      	ldr	r2, [pc, #468]	@ (8013a24 <HAL_RCC_OscConfig+0x240>)
 8013850:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8013854:	6013      	str	r3, [r2, #0]
 8013856:	e01d      	b.n	8013894 <HAL_RCC_OscConfig+0xb0>
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	685b      	ldr	r3, [r3, #4]
 801385c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8013860:	d10c      	bne.n	801387c <HAL_RCC_OscConfig+0x98>
 8013862:	4b70      	ldr	r3, [pc, #448]	@ (8013a24 <HAL_RCC_OscConfig+0x240>)
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	4a6f      	ldr	r2, [pc, #444]	@ (8013a24 <HAL_RCC_OscConfig+0x240>)
 8013868:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801386c:	6013      	str	r3, [r2, #0]
 801386e:	4b6d      	ldr	r3, [pc, #436]	@ (8013a24 <HAL_RCC_OscConfig+0x240>)
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	4a6c      	ldr	r2, [pc, #432]	@ (8013a24 <HAL_RCC_OscConfig+0x240>)
 8013874:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8013878:	6013      	str	r3, [r2, #0]
 801387a:	e00b      	b.n	8013894 <HAL_RCC_OscConfig+0xb0>
 801387c:	4b69      	ldr	r3, [pc, #420]	@ (8013a24 <HAL_RCC_OscConfig+0x240>)
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	4a68      	ldr	r2, [pc, #416]	@ (8013a24 <HAL_RCC_OscConfig+0x240>)
 8013882:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013886:	6013      	str	r3, [r2, #0]
 8013888:	4b66      	ldr	r3, [pc, #408]	@ (8013a24 <HAL_RCC_OscConfig+0x240>)
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	4a65      	ldr	r2, [pc, #404]	@ (8013a24 <HAL_RCC_OscConfig+0x240>)
 801388e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8013892:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	685b      	ldr	r3, [r3, #4]
 8013898:	2b00      	cmp	r3, #0
 801389a:	d013      	beq.n	80138c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801389c:	f7fd fe20 	bl	80114e0 <HAL_GetTick>
 80138a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80138a2:	e008      	b.n	80138b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80138a4:	f7fd fe1c 	bl	80114e0 <HAL_GetTick>
 80138a8:	4602      	mov	r2, r0
 80138aa:	693b      	ldr	r3, [r7, #16]
 80138ac:	1ad3      	subs	r3, r2, r3
 80138ae:	2b64      	cmp	r3, #100	@ 0x64
 80138b0:	d901      	bls.n	80138b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80138b2:	2303      	movs	r3, #3
 80138b4:	e207      	b.n	8013cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80138b6:	4b5b      	ldr	r3, [pc, #364]	@ (8013a24 <HAL_RCC_OscConfig+0x240>)
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d0f0      	beq.n	80138a4 <HAL_RCC_OscConfig+0xc0>
 80138c2:	e014      	b.n	80138ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80138c4:	f7fd fe0c 	bl	80114e0 <HAL_GetTick>
 80138c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80138ca:	e008      	b.n	80138de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80138cc:	f7fd fe08 	bl	80114e0 <HAL_GetTick>
 80138d0:	4602      	mov	r2, r0
 80138d2:	693b      	ldr	r3, [r7, #16]
 80138d4:	1ad3      	subs	r3, r2, r3
 80138d6:	2b64      	cmp	r3, #100	@ 0x64
 80138d8:	d901      	bls.n	80138de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80138da:	2303      	movs	r3, #3
 80138dc:	e1f3      	b.n	8013cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80138de:	4b51      	ldr	r3, [pc, #324]	@ (8013a24 <HAL_RCC_OscConfig+0x240>)
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d1f0      	bne.n	80138cc <HAL_RCC_OscConfig+0xe8>
 80138ea:	e000      	b.n	80138ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80138ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	f003 0302 	and.w	r3, r3, #2
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d063      	beq.n	80139c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80138fa:	4b4a      	ldr	r3, [pc, #296]	@ (8013a24 <HAL_RCC_OscConfig+0x240>)
 80138fc:	689b      	ldr	r3, [r3, #8]
 80138fe:	f003 030c 	and.w	r3, r3, #12
 8013902:	2b00      	cmp	r3, #0
 8013904:	d00b      	beq.n	801391e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8013906:	4b47      	ldr	r3, [pc, #284]	@ (8013a24 <HAL_RCC_OscConfig+0x240>)
 8013908:	689b      	ldr	r3, [r3, #8]
 801390a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801390e:	2b08      	cmp	r3, #8
 8013910:	d11c      	bne.n	801394c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8013912:	4b44      	ldr	r3, [pc, #272]	@ (8013a24 <HAL_RCC_OscConfig+0x240>)
 8013914:	685b      	ldr	r3, [r3, #4]
 8013916:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801391a:	2b00      	cmp	r3, #0
 801391c:	d116      	bne.n	801394c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801391e:	4b41      	ldr	r3, [pc, #260]	@ (8013a24 <HAL_RCC_OscConfig+0x240>)
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	f003 0302 	and.w	r3, r3, #2
 8013926:	2b00      	cmp	r3, #0
 8013928:	d005      	beq.n	8013936 <HAL_RCC_OscConfig+0x152>
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	68db      	ldr	r3, [r3, #12]
 801392e:	2b01      	cmp	r3, #1
 8013930:	d001      	beq.n	8013936 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8013932:	2301      	movs	r3, #1
 8013934:	e1c7      	b.n	8013cc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013936:	4b3b      	ldr	r3, [pc, #236]	@ (8013a24 <HAL_RCC_OscConfig+0x240>)
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	691b      	ldr	r3, [r3, #16]
 8013942:	00db      	lsls	r3, r3, #3
 8013944:	4937      	ldr	r1, [pc, #220]	@ (8013a24 <HAL_RCC_OscConfig+0x240>)
 8013946:	4313      	orrs	r3, r2
 8013948:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801394a:	e03a      	b.n	80139c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	68db      	ldr	r3, [r3, #12]
 8013950:	2b00      	cmp	r3, #0
 8013952:	d020      	beq.n	8013996 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8013954:	4b34      	ldr	r3, [pc, #208]	@ (8013a28 <HAL_RCC_OscConfig+0x244>)
 8013956:	2201      	movs	r2, #1
 8013958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801395a:	f7fd fdc1 	bl	80114e0 <HAL_GetTick>
 801395e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013960:	e008      	b.n	8013974 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8013962:	f7fd fdbd 	bl	80114e0 <HAL_GetTick>
 8013966:	4602      	mov	r2, r0
 8013968:	693b      	ldr	r3, [r7, #16]
 801396a:	1ad3      	subs	r3, r2, r3
 801396c:	2b02      	cmp	r3, #2
 801396e:	d901      	bls.n	8013974 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8013970:	2303      	movs	r3, #3
 8013972:	e1a8      	b.n	8013cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013974:	4b2b      	ldr	r3, [pc, #172]	@ (8013a24 <HAL_RCC_OscConfig+0x240>)
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	f003 0302 	and.w	r3, r3, #2
 801397c:	2b00      	cmp	r3, #0
 801397e:	d0f0      	beq.n	8013962 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013980:	4b28      	ldr	r3, [pc, #160]	@ (8013a24 <HAL_RCC_OscConfig+0x240>)
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	691b      	ldr	r3, [r3, #16]
 801398c:	00db      	lsls	r3, r3, #3
 801398e:	4925      	ldr	r1, [pc, #148]	@ (8013a24 <HAL_RCC_OscConfig+0x240>)
 8013990:	4313      	orrs	r3, r2
 8013992:	600b      	str	r3, [r1, #0]
 8013994:	e015      	b.n	80139c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8013996:	4b24      	ldr	r3, [pc, #144]	@ (8013a28 <HAL_RCC_OscConfig+0x244>)
 8013998:	2200      	movs	r2, #0
 801399a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801399c:	f7fd fda0 	bl	80114e0 <HAL_GetTick>
 80139a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80139a2:	e008      	b.n	80139b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80139a4:	f7fd fd9c 	bl	80114e0 <HAL_GetTick>
 80139a8:	4602      	mov	r2, r0
 80139aa:	693b      	ldr	r3, [r7, #16]
 80139ac:	1ad3      	subs	r3, r2, r3
 80139ae:	2b02      	cmp	r3, #2
 80139b0:	d901      	bls.n	80139b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80139b2:	2303      	movs	r3, #3
 80139b4:	e187      	b.n	8013cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80139b6:	4b1b      	ldr	r3, [pc, #108]	@ (8013a24 <HAL_RCC_OscConfig+0x240>)
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	f003 0302 	and.w	r3, r3, #2
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d1f0      	bne.n	80139a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	f003 0308 	and.w	r3, r3, #8
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d036      	beq.n	8013a3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	695b      	ldr	r3, [r3, #20]
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d016      	beq.n	8013a04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80139d6:	4b15      	ldr	r3, [pc, #84]	@ (8013a2c <HAL_RCC_OscConfig+0x248>)
 80139d8:	2201      	movs	r2, #1
 80139da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80139dc:	f7fd fd80 	bl	80114e0 <HAL_GetTick>
 80139e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80139e2:	e008      	b.n	80139f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80139e4:	f7fd fd7c 	bl	80114e0 <HAL_GetTick>
 80139e8:	4602      	mov	r2, r0
 80139ea:	693b      	ldr	r3, [r7, #16]
 80139ec:	1ad3      	subs	r3, r2, r3
 80139ee:	2b02      	cmp	r3, #2
 80139f0:	d901      	bls.n	80139f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80139f2:	2303      	movs	r3, #3
 80139f4:	e167      	b.n	8013cc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80139f6:	4b0b      	ldr	r3, [pc, #44]	@ (8013a24 <HAL_RCC_OscConfig+0x240>)
 80139f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80139fa:	f003 0302 	and.w	r3, r3, #2
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d0f0      	beq.n	80139e4 <HAL_RCC_OscConfig+0x200>
 8013a02:	e01b      	b.n	8013a3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8013a04:	4b09      	ldr	r3, [pc, #36]	@ (8013a2c <HAL_RCC_OscConfig+0x248>)
 8013a06:	2200      	movs	r2, #0
 8013a08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013a0a:	f7fd fd69 	bl	80114e0 <HAL_GetTick>
 8013a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013a10:	e00e      	b.n	8013a30 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8013a12:	f7fd fd65 	bl	80114e0 <HAL_GetTick>
 8013a16:	4602      	mov	r2, r0
 8013a18:	693b      	ldr	r3, [r7, #16]
 8013a1a:	1ad3      	subs	r3, r2, r3
 8013a1c:	2b02      	cmp	r3, #2
 8013a1e:	d907      	bls.n	8013a30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8013a20:	2303      	movs	r3, #3
 8013a22:	e150      	b.n	8013cc6 <HAL_RCC_OscConfig+0x4e2>
 8013a24:	40023800 	.word	0x40023800
 8013a28:	42470000 	.word	0x42470000
 8013a2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013a30:	4b88      	ldr	r3, [pc, #544]	@ (8013c54 <HAL_RCC_OscConfig+0x470>)
 8013a32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013a34:	f003 0302 	and.w	r3, r3, #2
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d1ea      	bne.n	8013a12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	f003 0304 	and.w	r3, r3, #4
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	f000 8097 	beq.w	8013b78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8013a4a:	2300      	movs	r3, #0
 8013a4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8013a4e:	4b81      	ldr	r3, [pc, #516]	@ (8013c54 <HAL_RCC_OscConfig+0x470>)
 8013a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d10f      	bne.n	8013a7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8013a5a:	2300      	movs	r3, #0
 8013a5c:	60bb      	str	r3, [r7, #8]
 8013a5e:	4b7d      	ldr	r3, [pc, #500]	@ (8013c54 <HAL_RCC_OscConfig+0x470>)
 8013a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013a62:	4a7c      	ldr	r2, [pc, #496]	@ (8013c54 <HAL_RCC_OscConfig+0x470>)
 8013a64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013a68:	6413      	str	r3, [r2, #64]	@ 0x40
 8013a6a:	4b7a      	ldr	r3, [pc, #488]	@ (8013c54 <HAL_RCC_OscConfig+0x470>)
 8013a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8013a72:	60bb      	str	r3, [r7, #8]
 8013a74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8013a76:	2301      	movs	r3, #1
 8013a78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013a7a:	4b77      	ldr	r3, [pc, #476]	@ (8013c58 <HAL_RCC_OscConfig+0x474>)
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d118      	bne.n	8013ab8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8013a86:	4b74      	ldr	r3, [pc, #464]	@ (8013c58 <HAL_RCC_OscConfig+0x474>)
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	4a73      	ldr	r2, [pc, #460]	@ (8013c58 <HAL_RCC_OscConfig+0x474>)
 8013a8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013a90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8013a92:	f7fd fd25 	bl	80114e0 <HAL_GetTick>
 8013a96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013a98:	e008      	b.n	8013aac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013a9a:	f7fd fd21 	bl	80114e0 <HAL_GetTick>
 8013a9e:	4602      	mov	r2, r0
 8013aa0:	693b      	ldr	r3, [r7, #16]
 8013aa2:	1ad3      	subs	r3, r2, r3
 8013aa4:	2b02      	cmp	r3, #2
 8013aa6:	d901      	bls.n	8013aac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8013aa8:	2303      	movs	r3, #3
 8013aaa:	e10c      	b.n	8013cc6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013aac:	4b6a      	ldr	r3, [pc, #424]	@ (8013c58 <HAL_RCC_OscConfig+0x474>)
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d0f0      	beq.n	8013a9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	689b      	ldr	r3, [r3, #8]
 8013abc:	2b01      	cmp	r3, #1
 8013abe:	d106      	bne.n	8013ace <HAL_RCC_OscConfig+0x2ea>
 8013ac0:	4b64      	ldr	r3, [pc, #400]	@ (8013c54 <HAL_RCC_OscConfig+0x470>)
 8013ac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013ac4:	4a63      	ldr	r2, [pc, #396]	@ (8013c54 <HAL_RCC_OscConfig+0x470>)
 8013ac6:	f043 0301 	orr.w	r3, r3, #1
 8013aca:	6713      	str	r3, [r2, #112]	@ 0x70
 8013acc:	e01c      	b.n	8013b08 <HAL_RCC_OscConfig+0x324>
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	689b      	ldr	r3, [r3, #8]
 8013ad2:	2b05      	cmp	r3, #5
 8013ad4:	d10c      	bne.n	8013af0 <HAL_RCC_OscConfig+0x30c>
 8013ad6:	4b5f      	ldr	r3, [pc, #380]	@ (8013c54 <HAL_RCC_OscConfig+0x470>)
 8013ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013ada:	4a5e      	ldr	r2, [pc, #376]	@ (8013c54 <HAL_RCC_OscConfig+0x470>)
 8013adc:	f043 0304 	orr.w	r3, r3, #4
 8013ae0:	6713      	str	r3, [r2, #112]	@ 0x70
 8013ae2:	4b5c      	ldr	r3, [pc, #368]	@ (8013c54 <HAL_RCC_OscConfig+0x470>)
 8013ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013ae6:	4a5b      	ldr	r2, [pc, #364]	@ (8013c54 <HAL_RCC_OscConfig+0x470>)
 8013ae8:	f043 0301 	orr.w	r3, r3, #1
 8013aec:	6713      	str	r3, [r2, #112]	@ 0x70
 8013aee:	e00b      	b.n	8013b08 <HAL_RCC_OscConfig+0x324>
 8013af0:	4b58      	ldr	r3, [pc, #352]	@ (8013c54 <HAL_RCC_OscConfig+0x470>)
 8013af2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013af4:	4a57      	ldr	r2, [pc, #348]	@ (8013c54 <HAL_RCC_OscConfig+0x470>)
 8013af6:	f023 0301 	bic.w	r3, r3, #1
 8013afa:	6713      	str	r3, [r2, #112]	@ 0x70
 8013afc:	4b55      	ldr	r3, [pc, #340]	@ (8013c54 <HAL_RCC_OscConfig+0x470>)
 8013afe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013b00:	4a54      	ldr	r2, [pc, #336]	@ (8013c54 <HAL_RCC_OscConfig+0x470>)
 8013b02:	f023 0304 	bic.w	r3, r3, #4
 8013b06:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	689b      	ldr	r3, [r3, #8]
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d015      	beq.n	8013b3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013b10:	f7fd fce6 	bl	80114e0 <HAL_GetTick>
 8013b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013b16:	e00a      	b.n	8013b2e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013b18:	f7fd fce2 	bl	80114e0 <HAL_GetTick>
 8013b1c:	4602      	mov	r2, r0
 8013b1e:	693b      	ldr	r3, [r7, #16]
 8013b20:	1ad3      	subs	r3, r2, r3
 8013b22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013b26:	4293      	cmp	r3, r2
 8013b28:	d901      	bls.n	8013b2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8013b2a:	2303      	movs	r3, #3
 8013b2c:	e0cb      	b.n	8013cc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013b2e:	4b49      	ldr	r3, [pc, #292]	@ (8013c54 <HAL_RCC_OscConfig+0x470>)
 8013b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013b32:	f003 0302 	and.w	r3, r3, #2
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d0ee      	beq.n	8013b18 <HAL_RCC_OscConfig+0x334>
 8013b3a:	e014      	b.n	8013b66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013b3c:	f7fd fcd0 	bl	80114e0 <HAL_GetTick>
 8013b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013b42:	e00a      	b.n	8013b5a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013b44:	f7fd fccc 	bl	80114e0 <HAL_GetTick>
 8013b48:	4602      	mov	r2, r0
 8013b4a:	693b      	ldr	r3, [r7, #16]
 8013b4c:	1ad3      	subs	r3, r2, r3
 8013b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013b52:	4293      	cmp	r3, r2
 8013b54:	d901      	bls.n	8013b5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8013b56:	2303      	movs	r3, #3
 8013b58:	e0b5      	b.n	8013cc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013b5a:	4b3e      	ldr	r3, [pc, #248]	@ (8013c54 <HAL_RCC_OscConfig+0x470>)
 8013b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013b5e:	f003 0302 	and.w	r3, r3, #2
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d1ee      	bne.n	8013b44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8013b66:	7dfb      	ldrb	r3, [r7, #23]
 8013b68:	2b01      	cmp	r3, #1
 8013b6a:	d105      	bne.n	8013b78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8013b6c:	4b39      	ldr	r3, [pc, #228]	@ (8013c54 <HAL_RCC_OscConfig+0x470>)
 8013b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013b70:	4a38      	ldr	r2, [pc, #224]	@ (8013c54 <HAL_RCC_OscConfig+0x470>)
 8013b72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8013b76:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	699b      	ldr	r3, [r3, #24]
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	f000 80a1 	beq.w	8013cc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8013b82:	4b34      	ldr	r3, [pc, #208]	@ (8013c54 <HAL_RCC_OscConfig+0x470>)
 8013b84:	689b      	ldr	r3, [r3, #8]
 8013b86:	f003 030c 	and.w	r3, r3, #12
 8013b8a:	2b08      	cmp	r3, #8
 8013b8c:	d05c      	beq.n	8013c48 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	699b      	ldr	r3, [r3, #24]
 8013b92:	2b02      	cmp	r3, #2
 8013b94:	d141      	bne.n	8013c1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013b96:	4b31      	ldr	r3, [pc, #196]	@ (8013c5c <HAL_RCC_OscConfig+0x478>)
 8013b98:	2200      	movs	r2, #0
 8013b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013b9c:	f7fd fca0 	bl	80114e0 <HAL_GetTick>
 8013ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013ba2:	e008      	b.n	8013bb6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013ba4:	f7fd fc9c 	bl	80114e0 <HAL_GetTick>
 8013ba8:	4602      	mov	r2, r0
 8013baa:	693b      	ldr	r3, [r7, #16]
 8013bac:	1ad3      	subs	r3, r2, r3
 8013bae:	2b02      	cmp	r3, #2
 8013bb0:	d901      	bls.n	8013bb6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8013bb2:	2303      	movs	r3, #3
 8013bb4:	e087      	b.n	8013cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013bb6:	4b27      	ldr	r3, [pc, #156]	@ (8013c54 <HAL_RCC_OscConfig+0x470>)
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d1f0      	bne.n	8013ba4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	69da      	ldr	r2, [r3, #28]
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	6a1b      	ldr	r3, [r3, #32]
 8013bca:	431a      	orrs	r2, r3
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013bd0:	019b      	lsls	r3, r3, #6
 8013bd2:	431a      	orrs	r2, r3
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013bd8:	085b      	lsrs	r3, r3, #1
 8013bda:	3b01      	subs	r3, #1
 8013bdc:	041b      	lsls	r3, r3, #16
 8013bde:	431a      	orrs	r2, r3
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013be4:	061b      	lsls	r3, r3, #24
 8013be6:	491b      	ldr	r1, [pc, #108]	@ (8013c54 <HAL_RCC_OscConfig+0x470>)
 8013be8:	4313      	orrs	r3, r2
 8013bea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8013bec:	4b1b      	ldr	r3, [pc, #108]	@ (8013c5c <HAL_RCC_OscConfig+0x478>)
 8013bee:	2201      	movs	r2, #1
 8013bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013bf2:	f7fd fc75 	bl	80114e0 <HAL_GetTick>
 8013bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013bf8:	e008      	b.n	8013c0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013bfa:	f7fd fc71 	bl	80114e0 <HAL_GetTick>
 8013bfe:	4602      	mov	r2, r0
 8013c00:	693b      	ldr	r3, [r7, #16]
 8013c02:	1ad3      	subs	r3, r2, r3
 8013c04:	2b02      	cmp	r3, #2
 8013c06:	d901      	bls.n	8013c0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8013c08:	2303      	movs	r3, #3
 8013c0a:	e05c      	b.n	8013cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013c0c:	4b11      	ldr	r3, [pc, #68]	@ (8013c54 <HAL_RCC_OscConfig+0x470>)
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d0f0      	beq.n	8013bfa <HAL_RCC_OscConfig+0x416>
 8013c18:	e054      	b.n	8013cc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013c1a:	4b10      	ldr	r3, [pc, #64]	@ (8013c5c <HAL_RCC_OscConfig+0x478>)
 8013c1c:	2200      	movs	r2, #0
 8013c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013c20:	f7fd fc5e 	bl	80114e0 <HAL_GetTick>
 8013c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013c26:	e008      	b.n	8013c3a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013c28:	f7fd fc5a 	bl	80114e0 <HAL_GetTick>
 8013c2c:	4602      	mov	r2, r0
 8013c2e:	693b      	ldr	r3, [r7, #16]
 8013c30:	1ad3      	subs	r3, r2, r3
 8013c32:	2b02      	cmp	r3, #2
 8013c34:	d901      	bls.n	8013c3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8013c36:	2303      	movs	r3, #3
 8013c38:	e045      	b.n	8013cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013c3a:	4b06      	ldr	r3, [pc, #24]	@ (8013c54 <HAL_RCC_OscConfig+0x470>)
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d1f0      	bne.n	8013c28 <HAL_RCC_OscConfig+0x444>
 8013c46:	e03d      	b.n	8013cc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	699b      	ldr	r3, [r3, #24]
 8013c4c:	2b01      	cmp	r3, #1
 8013c4e:	d107      	bne.n	8013c60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8013c50:	2301      	movs	r3, #1
 8013c52:	e038      	b.n	8013cc6 <HAL_RCC_OscConfig+0x4e2>
 8013c54:	40023800 	.word	0x40023800
 8013c58:	40007000 	.word	0x40007000
 8013c5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8013c60:	4b1b      	ldr	r3, [pc, #108]	@ (8013cd0 <HAL_RCC_OscConfig+0x4ec>)
 8013c62:	685b      	ldr	r3, [r3, #4]
 8013c64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	699b      	ldr	r3, [r3, #24]
 8013c6a:	2b01      	cmp	r3, #1
 8013c6c:	d028      	beq.n	8013cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8013c78:	429a      	cmp	r2, r3
 8013c7a:	d121      	bne.n	8013cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013c86:	429a      	cmp	r2, r3
 8013c88:	d11a      	bne.n	8013cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8013c8a:	68fa      	ldr	r2, [r7, #12]
 8013c8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8013c90:	4013      	ands	r3, r2
 8013c92:	687a      	ldr	r2, [r7, #4]
 8013c94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8013c96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8013c98:	4293      	cmp	r3, r2
 8013c9a:	d111      	bne.n	8013cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013ca6:	085b      	lsrs	r3, r3, #1
 8013ca8:	3b01      	subs	r3, #1
 8013caa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8013cac:	429a      	cmp	r2, r3
 8013cae:	d107      	bne.n	8013cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013cba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8013cbc:	429a      	cmp	r2, r3
 8013cbe:	d001      	beq.n	8013cc4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8013cc0:	2301      	movs	r3, #1
 8013cc2:	e000      	b.n	8013cc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8013cc4:	2300      	movs	r3, #0
}
 8013cc6:	4618      	mov	r0, r3
 8013cc8:	3718      	adds	r7, #24
 8013cca:	46bd      	mov	sp, r7
 8013ccc:	bd80      	pop	{r7, pc}
 8013cce:	bf00      	nop
 8013cd0:	40023800 	.word	0x40023800

08013cd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8013cd4:	b580      	push	{r7, lr}
 8013cd6:	b084      	sub	sp, #16
 8013cd8:	af00      	add	r7, sp, #0
 8013cda:	6078      	str	r0, [r7, #4]
 8013cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d101      	bne.n	8013ce8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8013ce4:	2301      	movs	r3, #1
 8013ce6:	e0cc      	b.n	8013e82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8013ce8:	4b68      	ldr	r3, [pc, #416]	@ (8013e8c <HAL_RCC_ClockConfig+0x1b8>)
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	f003 030f 	and.w	r3, r3, #15
 8013cf0:	683a      	ldr	r2, [r7, #0]
 8013cf2:	429a      	cmp	r2, r3
 8013cf4:	d90c      	bls.n	8013d10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013cf6:	4b65      	ldr	r3, [pc, #404]	@ (8013e8c <HAL_RCC_ClockConfig+0x1b8>)
 8013cf8:	683a      	ldr	r2, [r7, #0]
 8013cfa:	b2d2      	uxtb	r2, r2
 8013cfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8013cfe:	4b63      	ldr	r3, [pc, #396]	@ (8013e8c <HAL_RCC_ClockConfig+0x1b8>)
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	f003 030f 	and.w	r3, r3, #15
 8013d06:	683a      	ldr	r2, [r7, #0]
 8013d08:	429a      	cmp	r2, r3
 8013d0a:	d001      	beq.n	8013d10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8013d0c:	2301      	movs	r3, #1
 8013d0e:	e0b8      	b.n	8013e82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	f003 0302 	and.w	r3, r3, #2
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d020      	beq.n	8013d5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	f003 0304 	and.w	r3, r3, #4
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d005      	beq.n	8013d34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8013d28:	4b59      	ldr	r3, [pc, #356]	@ (8013e90 <HAL_RCC_ClockConfig+0x1bc>)
 8013d2a:	689b      	ldr	r3, [r3, #8]
 8013d2c:	4a58      	ldr	r2, [pc, #352]	@ (8013e90 <HAL_RCC_ClockConfig+0x1bc>)
 8013d2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8013d32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	681b      	ldr	r3, [r3, #0]
 8013d38:	f003 0308 	and.w	r3, r3, #8
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d005      	beq.n	8013d4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8013d40:	4b53      	ldr	r3, [pc, #332]	@ (8013e90 <HAL_RCC_ClockConfig+0x1bc>)
 8013d42:	689b      	ldr	r3, [r3, #8]
 8013d44:	4a52      	ldr	r2, [pc, #328]	@ (8013e90 <HAL_RCC_ClockConfig+0x1bc>)
 8013d46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8013d4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8013d4c:	4b50      	ldr	r3, [pc, #320]	@ (8013e90 <HAL_RCC_ClockConfig+0x1bc>)
 8013d4e:	689b      	ldr	r3, [r3, #8]
 8013d50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	689b      	ldr	r3, [r3, #8]
 8013d58:	494d      	ldr	r1, [pc, #308]	@ (8013e90 <HAL_RCC_ClockConfig+0x1bc>)
 8013d5a:	4313      	orrs	r3, r2
 8013d5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	f003 0301 	and.w	r3, r3, #1
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d044      	beq.n	8013df4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	685b      	ldr	r3, [r3, #4]
 8013d6e:	2b01      	cmp	r3, #1
 8013d70:	d107      	bne.n	8013d82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013d72:	4b47      	ldr	r3, [pc, #284]	@ (8013e90 <HAL_RCC_ClockConfig+0x1bc>)
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d119      	bne.n	8013db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013d7e:	2301      	movs	r3, #1
 8013d80:	e07f      	b.n	8013e82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	685b      	ldr	r3, [r3, #4]
 8013d86:	2b02      	cmp	r3, #2
 8013d88:	d003      	beq.n	8013d92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8013d8e:	2b03      	cmp	r3, #3
 8013d90:	d107      	bne.n	8013da2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013d92:	4b3f      	ldr	r3, [pc, #252]	@ (8013e90 <HAL_RCC_ClockConfig+0x1bc>)
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d109      	bne.n	8013db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013d9e:	2301      	movs	r3, #1
 8013da0:	e06f      	b.n	8013e82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013da2:	4b3b      	ldr	r3, [pc, #236]	@ (8013e90 <HAL_RCC_ClockConfig+0x1bc>)
 8013da4:	681b      	ldr	r3, [r3, #0]
 8013da6:	f003 0302 	and.w	r3, r3, #2
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d101      	bne.n	8013db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013dae:	2301      	movs	r3, #1
 8013db0:	e067      	b.n	8013e82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8013db2:	4b37      	ldr	r3, [pc, #220]	@ (8013e90 <HAL_RCC_ClockConfig+0x1bc>)
 8013db4:	689b      	ldr	r3, [r3, #8]
 8013db6:	f023 0203 	bic.w	r2, r3, #3
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	685b      	ldr	r3, [r3, #4]
 8013dbe:	4934      	ldr	r1, [pc, #208]	@ (8013e90 <HAL_RCC_ClockConfig+0x1bc>)
 8013dc0:	4313      	orrs	r3, r2
 8013dc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8013dc4:	f7fd fb8c 	bl	80114e0 <HAL_GetTick>
 8013dc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013dca:	e00a      	b.n	8013de2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013dcc:	f7fd fb88 	bl	80114e0 <HAL_GetTick>
 8013dd0:	4602      	mov	r2, r0
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	1ad3      	subs	r3, r2, r3
 8013dd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013dda:	4293      	cmp	r3, r2
 8013ddc:	d901      	bls.n	8013de2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8013dde:	2303      	movs	r3, #3
 8013de0:	e04f      	b.n	8013e82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013de2:	4b2b      	ldr	r3, [pc, #172]	@ (8013e90 <HAL_RCC_ClockConfig+0x1bc>)
 8013de4:	689b      	ldr	r3, [r3, #8]
 8013de6:	f003 020c 	and.w	r2, r3, #12
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	685b      	ldr	r3, [r3, #4]
 8013dee:	009b      	lsls	r3, r3, #2
 8013df0:	429a      	cmp	r2, r3
 8013df2:	d1eb      	bne.n	8013dcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8013df4:	4b25      	ldr	r3, [pc, #148]	@ (8013e8c <HAL_RCC_ClockConfig+0x1b8>)
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	f003 030f 	and.w	r3, r3, #15
 8013dfc:	683a      	ldr	r2, [r7, #0]
 8013dfe:	429a      	cmp	r2, r3
 8013e00:	d20c      	bcs.n	8013e1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013e02:	4b22      	ldr	r3, [pc, #136]	@ (8013e8c <HAL_RCC_ClockConfig+0x1b8>)
 8013e04:	683a      	ldr	r2, [r7, #0]
 8013e06:	b2d2      	uxtb	r2, r2
 8013e08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8013e0a:	4b20      	ldr	r3, [pc, #128]	@ (8013e8c <HAL_RCC_ClockConfig+0x1b8>)
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	f003 030f 	and.w	r3, r3, #15
 8013e12:	683a      	ldr	r2, [r7, #0]
 8013e14:	429a      	cmp	r2, r3
 8013e16:	d001      	beq.n	8013e1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8013e18:	2301      	movs	r3, #1
 8013e1a:	e032      	b.n	8013e82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	f003 0304 	and.w	r3, r3, #4
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d008      	beq.n	8013e3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8013e28:	4b19      	ldr	r3, [pc, #100]	@ (8013e90 <HAL_RCC_ClockConfig+0x1bc>)
 8013e2a:	689b      	ldr	r3, [r3, #8]
 8013e2c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	68db      	ldr	r3, [r3, #12]
 8013e34:	4916      	ldr	r1, [pc, #88]	@ (8013e90 <HAL_RCC_ClockConfig+0x1bc>)
 8013e36:	4313      	orrs	r3, r2
 8013e38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	f003 0308 	and.w	r3, r3, #8
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d009      	beq.n	8013e5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8013e46:	4b12      	ldr	r3, [pc, #72]	@ (8013e90 <HAL_RCC_ClockConfig+0x1bc>)
 8013e48:	689b      	ldr	r3, [r3, #8]
 8013e4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	691b      	ldr	r3, [r3, #16]
 8013e52:	00db      	lsls	r3, r3, #3
 8013e54:	490e      	ldr	r1, [pc, #56]	@ (8013e90 <HAL_RCC_ClockConfig+0x1bc>)
 8013e56:	4313      	orrs	r3, r2
 8013e58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8013e5a:	f000 f821 	bl	8013ea0 <HAL_RCC_GetSysClockFreq>
 8013e5e:	4602      	mov	r2, r0
 8013e60:	4b0b      	ldr	r3, [pc, #44]	@ (8013e90 <HAL_RCC_ClockConfig+0x1bc>)
 8013e62:	689b      	ldr	r3, [r3, #8]
 8013e64:	091b      	lsrs	r3, r3, #4
 8013e66:	f003 030f 	and.w	r3, r3, #15
 8013e6a:	490a      	ldr	r1, [pc, #40]	@ (8013e94 <HAL_RCC_ClockConfig+0x1c0>)
 8013e6c:	5ccb      	ldrb	r3, [r1, r3]
 8013e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8013e72:	4a09      	ldr	r2, [pc, #36]	@ (8013e98 <HAL_RCC_ClockConfig+0x1c4>)
 8013e74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8013e76:	4b09      	ldr	r3, [pc, #36]	@ (8013e9c <HAL_RCC_ClockConfig+0x1c8>)
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	f7fd faec 	bl	8011458 <HAL_InitTick>

  return HAL_OK;
 8013e80:	2300      	movs	r3, #0
}
 8013e82:	4618      	mov	r0, r3
 8013e84:	3710      	adds	r7, #16
 8013e86:	46bd      	mov	sp, r7
 8013e88:	bd80      	pop	{r7, pc}
 8013e8a:	bf00      	nop
 8013e8c:	40023c00 	.word	0x40023c00
 8013e90:	40023800 	.word	0x40023800
 8013e94:	0801c674 	.word	0x0801c674
 8013e98:	20000000 	.word	0x20000000
 8013e9c:	20000004 	.word	0x20000004

08013ea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8013ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013ea4:	b094      	sub	sp, #80	@ 0x50
 8013ea6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8013ea8:	2300      	movs	r3, #0
 8013eaa:	647b      	str	r3, [r7, #68]	@ 0x44
 8013eac:	2300      	movs	r3, #0
 8013eae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013eb0:	2300      	movs	r3, #0
 8013eb2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8013eb4:	2300      	movs	r3, #0
 8013eb6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8013eb8:	4b79      	ldr	r3, [pc, #484]	@ (80140a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8013eba:	689b      	ldr	r3, [r3, #8]
 8013ebc:	f003 030c 	and.w	r3, r3, #12
 8013ec0:	2b08      	cmp	r3, #8
 8013ec2:	d00d      	beq.n	8013ee0 <HAL_RCC_GetSysClockFreq+0x40>
 8013ec4:	2b08      	cmp	r3, #8
 8013ec6:	f200 80e1 	bhi.w	801408c <HAL_RCC_GetSysClockFreq+0x1ec>
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d002      	beq.n	8013ed4 <HAL_RCC_GetSysClockFreq+0x34>
 8013ece:	2b04      	cmp	r3, #4
 8013ed0:	d003      	beq.n	8013eda <HAL_RCC_GetSysClockFreq+0x3a>
 8013ed2:	e0db      	b.n	801408c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8013ed4:	4b73      	ldr	r3, [pc, #460]	@ (80140a4 <HAL_RCC_GetSysClockFreq+0x204>)
 8013ed6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8013ed8:	e0db      	b.n	8014092 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8013eda:	4b73      	ldr	r3, [pc, #460]	@ (80140a8 <HAL_RCC_GetSysClockFreq+0x208>)
 8013edc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8013ede:	e0d8      	b.n	8014092 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8013ee0:	4b6f      	ldr	r3, [pc, #444]	@ (80140a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8013ee2:	685b      	ldr	r3, [r3, #4]
 8013ee4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013ee8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8013eea:	4b6d      	ldr	r3, [pc, #436]	@ (80140a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8013eec:	685b      	ldr	r3, [r3, #4]
 8013eee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d063      	beq.n	8013fbe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013ef6:	4b6a      	ldr	r3, [pc, #424]	@ (80140a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8013ef8:	685b      	ldr	r3, [r3, #4]
 8013efa:	099b      	lsrs	r3, r3, #6
 8013efc:	2200      	movs	r2, #0
 8013efe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013f00:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8013f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013f08:	633b      	str	r3, [r7, #48]	@ 0x30
 8013f0a:	2300      	movs	r3, #0
 8013f0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8013f0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8013f12:	4622      	mov	r2, r4
 8013f14:	462b      	mov	r3, r5
 8013f16:	f04f 0000 	mov.w	r0, #0
 8013f1a:	f04f 0100 	mov.w	r1, #0
 8013f1e:	0159      	lsls	r1, r3, #5
 8013f20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8013f24:	0150      	lsls	r0, r2, #5
 8013f26:	4602      	mov	r2, r0
 8013f28:	460b      	mov	r3, r1
 8013f2a:	4621      	mov	r1, r4
 8013f2c:	1a51      	subs	r1, r2, r1
 8013f2e:	6139      	str	r1, [r7, #16]
 8013f30:	4629      	mov	r1, r5
 8013f32:	eb63 0301 	sbc.w	r3, r3, r1
 8013f36:	617b      	str	r3, [r7, #20]
 8013f38:	f04f 0200 	mov.w	r2, #0
 8013f3c:	f04f 0300 	mov.w	r3, #0
 8013f40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8013f44:	4659      	mov	r1, fp
 8013f46:	018b      	lsls	r3, r1, #6
 8013f48:	4651      	mov	r1, sl
 8013f4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8013f4e:	4651      	mov	r1, sl
 8013f50:	018a      	lsls	r2, r1, #6
 8013f52:	4651      	mov	r1, sl
 8013f54:	ebb2 0801 	subs.w	r8, r2, r1
 8013f58:	4659      	mov	r1, fp
 8013f5a:	eb63 0901 	sbc.w	r9, r3, r1
 8013f5e:	f04f 0200 	mov.w	r2, #0
 8013f62:	f04f 0300 	mov.w	r3, #0
 8013f66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8013f6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8013f6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8013f72:	4690      	mov	r8, r2
 8013f74:	4699      	mov	r9, r3
 8013f76:	4623      	mov	r3, r4
 8013f78:	eb18 0303 	adds.w	r3, r8, r3
 8013f7c:	60bb      	str	r3, [r7, #8]
 8013f7e:	462b      	mov	r3, r5
 8013f80:	eb49 0303 	adc.w	r3, r9, r3
 8013f84:	60fb      	str	r3, [r7, #12]
 8013f86:	f04f 0200 	mov.w	r2, #0
 8013f8a:	f04f 0300 	mov.w	r3, #0
 8013f8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8013f92:	4629      	mov	r1, r5
 8013f94:	024b      	lsls	r3, r1, #9
 8013f96:	4621      	mov	r1, r4
 8013f98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8013f9c:	4621      	mov	r1, r4
 8013f9e:	024a      	lsls	r2, r1, #9
 8013fa0:	4610      	mov	r0, r2
 8013fa2:	4619      	mov	r1, r3
 8013fa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013fa6:	2200      	movs	r2, #0
 8013fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013faa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8013fac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8013fb0:	f7fc f96e 	bl	8010290 <__aeabi_uldivmod>
 8013fb4:	4602      	mov	r2, r0
 8013fb6:	460b      	mov	r3, r1
 8013fb8:	4613      	mov	r3, r2
 8013fba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013fbc:	e058      	b.n	8014070 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013fbe:	4b38      	ldr	r3, [pc, #224]	@ (80140a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8013fc0:	685b      	ldr	r3, [r3, #4]
 8013fc2:	099b      	lsrs	r3, r3, #6
 8013fc4:	2200      	movs	r2, #0
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	4611      	mov	r1, r2
 8013fca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8013fce:	623b      	str	r3, [r7, #32]
 8013fd0:	2300      	movs	r3, #0
 8013fd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8013fd4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8013fd8:	4642      	mov	r2, r8
 8013fda:	464b      	mov	r3, r9
 8013fdc:	f04f 0000 	mov.w	r0, #0
 8013fe0:	f04f 0100 	mov.w	r1, #0
 8013fe4:	0159      	lsls	r1, r3, #5
 8013fe6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8013fea:	0150      	lsls	r0, r2, #5
 8013fec:	4602      	mov	r2, r0
 8013fee:	460b      	mov	r3, r1
 8013ff0:	4641      	mov	r1, r8
 8013ff2:	ebb2 0a01 	subs.w	sl, r2, r1
 8013ff6:	4649      	mov	r1, r9
 8013ff8:	eb63 0b01 	sbc.w	fp, r3, r1
 8013ffc:	f04f 0200 	mov.w	r2, #0
 8014000:	f04f 0300 	mov.w	r3, #0
 8014004:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8014008:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 801400c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8014010:	ebb2 040a 	subs.w	r4, r2, sl
 8014014:	eb63 050b 	sbc.w	r5, r3, fp
 8014018:	f04f 0200 	mov.w	r2, #0
 801401c:	f04f 0300 	mov.w	r3, #0
 8014020:	00eb      	lsls	r3, r5, #3
 8014022:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8014026:	00e2      	lsls	r2, r4, #3
 8014028:	4614      	mov	r4, r2
 801402a:	461d      	mov	r5, r3
 801402c:	4643      	mov	r3, r8
 801402e:	18e3      	adds	r3, r4, r3
 8014030:	603b      	str	r3, [r7, #0]
 8014032:	464b      	mov	r3, r9
 8014034:	eb45 0303 	adc.w	r3, r5, r3
 8014038:	607b      	str	r3, [r7, #4]
 801403a:	f04f 0200 	mov.w	r2, #0
 801403e:	f04f 0300 	mov.w	r3, #0
 8014042:	e9d7 4500 	ldrd	r4, r5, [r7]
 8014046:	4629      	mov	r1, r5
 8014048:	028b      	lsls	r3, r1, #10
 801404a:	4621      	mov	r1, r4
 801404c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8014050:	4621      	mov	r1, r4
 8014052:	028a      	lsls	r2, r1, #10
 8014054:	4610      	mov	r0, r2
 8014056:	4619      	mov	r1, r3
 8014058:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801405a:	2200      	movs	r2, #0
 801405c:	61bb      	str	r3, [r7, #24]
 801405e:	61fa      	str	r2, [r7, #28]
 8014060:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8014064:	f7fc f914 	bl	8010290 <__aeabi_uldivmod>
 8014068:	4602      	mov	r2, r0
 801406a:	460b      	mov	r3, r1
 801406c:	4613      	mov	r3, r2
 801406e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8014070:	4b0b      	ldr	r3, [pc, #44]	@ (80140a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8014072:	685b      	ldr	r3, [r3, #4]
 8014074:	0c1b      	lsrs	r3, r3, #16
 8014076:	f003 0303 	and.w	r3, r3, #3
 801407a:	3301      	adds	r3, #1
 801407c:	005b      	lsls	r3, r3, #1
 801407e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8014080:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014082:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014084:	fbb2 f3f3 	udiv	r3, r2, r3
 8014088:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 801408a:	e002      	b.n	8014092 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801408c:	4b05      	ldr	r3, [pc, #20]	@ (80140a4 <HAL_RCC_GetSysClockFreq+0x204>)
 801408e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8014090:	bf00      	nop
    }
  }
  return sysclockfreq;
 8014092:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8014094:	4618      	mov	r0, r3
 8014096:	3750      	adds	r7, #80	@ 0x50
 8014098:	46bd      	mov	sp, r7
 801409a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801409e:	bf00      	nop
 80140a0:	40023800 	.word	0x40023800
 80140a4:	00f42400 	.word	0x00f42400
 80140a8:	007a1200 	.word	0x007a1200

080140ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80140ac:	b480      	push	{r7}
 80140ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80140b0:	4b03      	ldr	r3, [pc, #12]	@ (80140c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80140b2:	681b      	ldr	r3, [r3, #0]
}
 80140b4:	4618      	mov	r0, r3
 80140b6:	46bd      	mov	sp, r7
 80140b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140bc:	4770      	bx	lr
 80140be:	bf00      	nop
 80140c0:	20000000 	.word	0x20000000

080140c4 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80140c4:	b580      	push	{r7, lr}
 80140c6:	b082      	sub	sp, #8
 80140c8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80140ca:	f7fd fa09 	bl	80114e0 <HAL_GetTick>
 80140ce:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80140d0:	4b72      	ldr	r3, [pc, #456]	@ (801429c <HAL_RCC_DeInit+0x1d8>)
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	4a71      	ldr	r2, [pc, #452]	@ (801429c <HAL_RCC_DeInit+0x1d8>)
 80140d6:	f043 0301 	orr.w	r3, r3, #1
 80140da:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80140dc:	e008      	b.n	80140f0 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80140de:	f7fd f9ff 	bl	80114e0 <HAL_GetTick>
 80140e2:	4602      	mov	r2, r0
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	1ad3      	subs	r3, r2, r3
 80140e8:	2b02      	cmp	r3, #2
 80140ea:	d901      	bls.n	80140f0 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80140ec:	2303      	movs	r3, #3
 80140ee:	e0d0      	b.n	8014292 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80140f0:	4b6a      	ldr	r3, [pc, #424]	@ (801429c <HAL_RCC_DeInit+0x1d8>)
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	f003 0302 	and.w	r3, r3, #2
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d0f0      	beq.n	80140de <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 80140fc:	4b67      	ldr	r3, [pc, #412]	@ (801429c <HAL_RCC_DeInit+0x1d8>)
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	4a66      	ldr	r2, [pc, #408]	@ (801429c <HAL_RCC_DeInit+0x1d8>)
 8014102:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014106:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8014108:	f7fd f9ea 	bl	80114e0 <HAL_GetTick>
 801410c:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 801410e:	4b63      	ldr	r3, [pc, #396]	@ (801429c <HAL_RCC_DeInit+0x1d8>)
 8014110:	2200      	movs	r2, #0
 8014112:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8014114:	e00a      	b.n	801412c <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014116:	f7fd f9e3 	bl	80114e0 <HAL_GetTick>
 801411a:	4602      	mov	r2, r0
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	1ad3      	subs	r3, r2, r3
 8014120:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014124:	4293      	cmp	r3, r2
 8014126:	d901      	bls.n	801412c <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8014128:	2303      	movs	r3, #3
 801412a:	e0b2      	b.n	8014292 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 801412c:	4b5b      	ldr	r3, [pc, #364]	@ (801429c <HAL_RCC_DeInit+0x1d8>)
 801412e:	689b      	ldr	r3, [r3, #8]
 8014130:	f003 030c 	and.w	r3, r3, #12
 8014134:	2b00      	cmp	r3, #0
 8014136:	d1ee      	bne.n	8014116 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8014138:	f7fd f9d2 	bl	80114e0 <HAL_GetTick>
 801413c:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 801413e:	4b57      	ldr	r3, [pc, #348]	@ (801429c <HAL_RCC_DeInit+0x1d8>)
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	4a56      	ldr	r2, [pc, #344]	@ (801429c <HAL_RCC_DeInit+0x1d8>)
 8014144:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 8014148:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 801414a:	e008      	b.n	801415e <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801414c:	f7fd f9c8 	bl	80114e0 <HAL_GetTick>
 8014150:	4602      	mov	r2, r0
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	1ad3      	subs	r3, r2, r3
 8014156:	2b64      	cmp	r3, #100	@ 0x64
 8014158:	d901      	bls.n	801415e <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 801415a:	2303      	movs	r3, #3
 801415c:	e099      	b.n	8014292 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 801415e:	4b4f      	ldr	r3, [pc, #316]	@ (801429c <HAL_RCC_DeInit+0x1d8>)
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8014166:	2b00      	cmp	r3, #0
 8014168:	d1f0      	bne.n	801414c <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 801416a:	f7fd f9b9 	bl	80114e0 <HAL_GetTick>
 801416e:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8014170:	4b4a      	ldr	r3, [pc, #296]	@ (801429c <HAL_RCC_DeInit+0x1d8>)
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	4a49      	ldr	r2, [pc, #292]	@ (801429c <HAL_RCC_DeInit+0x1d8>)
 8014176:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801417a:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 801417c:	e008      	b.n	8014190 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801417e:	f7fd f9af 	bl	80114e0 <HAL_GetTick>
 8014182:	4602      	mov	r2, r0
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	1ad3      	subs	r3, r2, r3
 8014188:	2b02      	cmp	r3, #2
 801418a:	d901      	bls.n	8014190 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 801418c:	2303      	movs	r3, #3
 801418e:	e080      	b.n	8014292 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8014190:	4b42      	ldr	r3, [pc, #264]	@ (801429c <HAL_RCC_DeInit+0x1d8>)
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014198:	2b00      	cmp	r3, #0
 801419a:	d1f0      	bne.n	801417e <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 801419c:	f7fd f9a0 	bl	80114e0 <HAL_GetTick>
 80141a0:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 80141a2:	4b3e      	ldr	r3, [pc, #248]	@ (801429c <HAL_RCC_DeInit+0x1d8>)
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	4a3d      	ldr	r2, [pc, #244]	@ (801429c <HAL_RCC_DeInit+0x1d8>)
 80141a8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80141ac:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80141ae:	e008      	b.n	80141c2 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80141b0:	f7fd f996 	bl	80114e0 <HAL_GetTick>
 80141b4:	4602      	mov	r2, r0
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	1ad3      	subs	r3, r2, r3
 80141ba:	2b02      	cmp	r3, #2
 80141bc:	d901      	bls.n	80141c2 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 80141be:	2303      	movs	r3, #3
 80141c0:	e067      	b.n	8014292 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80141c2:	4b36      	ldr	r3, [pc, #216]	@ (801429c <HAL_RCC_DeInit+0x1d8>)
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d1f0      	bne.n	80141b0 <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80141ce:	f7fd f987 	bl	80114e0 <HAL_GetTick>
 80141d2:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 80141d4:	4b31      	ldr	r3, [pc, #196]	@ (801429c <HAL_RCC_DeInit+0x1d8>)
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	4a30      	ldr	r2, [pc, #192]	@ (801429c <HAL_RCC_DeInit+0x1d8>)
 80141da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80141de:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 80141e0:	e008      	b.n	80141f4 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80141e2:	f7fd f97d 	bl	80114e0 <HAL_GetTick>
 80141e6:	4602      	mov	r2, r0
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	1ad3      	subs	r3, r2, r3
 80141ec:	2b02      	cmp	r3, #2
 80141ee:	d901      	bls.n	80141f4 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 80141f0:	2303      	movs	r3, #3
 80141f2:	e04e      	b.n	8014292 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 80141f4:	4b29      	ldr	r3, [pc, #164]	@ (801429c <HAL_RCC_DeInit+0x1d8>)
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d1f0      	bne.n	80141e2 <HAL_RCC_DeInit+0x11e>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8014200:	4b26      	ldr	r3, [pc, #152]	@ (801429c <HAL_RCC_DeInit+0x1d8>)
 8014202:	4a27      	ldr	r2, [pc, #156]	@ (80142a0 <HAL_RCC_DeInit+0x1dc>)
 8014204:	605a      	str	r2, [r3, #4]
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8014206:	4b25      	ldr	r3, [pc, #148]	@ (801429c <HAL_RCC_DeInit+0x1d8>)
 8014208:	4a26      	ldr	r2, [pc, #152]	@ (80142a4 <HAL_RCC_DeInit+0x1e0>)
 801420a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx */

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
 801420e:	4b23      	ldr	r3, [pc, #140]	@ (801429c <HAL_RCC_DeInit+0x1d8>)
 8014210:	4a24      	ldr	r2, [pc, #144]	@ (80142a4 <HAL_RCC_DeInit+0x1e0>)
 8014212:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8014216:	4b21      	ldr	r3, [pc, #132]	@ (801429c <HAL_RCC_DeInit+0x1d8>)
 8014218:	68db      	ldr	r3, [r3, #12]
 801421a:	4a20      	ldr	r2, [pc, #128]	@ (801429c <HAL_RCC_DeInit+0x1d8>)
 801421c:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8014220:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8014222:	4b1e      	ldr	r3, [pc, #120]	@ (801429c <HAL_RCC_DeInit+0x1d8>)
 8014224:	68db      	ldr	r3, [r3, #12]
 8014226:	4a1d      	ldr	r2, [pc, #116]	@ (801429c <HAL_RCC_DeInit+0x1d8>)
 8014228:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801422c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 801422e:	4b1b      	ldr	r3, [pc, #108]	@ (801429c <HAL_RCC_DeInit+0x1d8>)
 8014230:	68db      	ldr	r3, [r3, #12]
 8014232:	4a1a      	ldr	r2, [pc, #104]	@ (801429c <HAL_RCC_DeInit+0x1d8>)
 8014234:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8014238:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 801423a:	4b18      	ldr	r3, [pc, #96]	@ (801429c <HAL_RCC_DeInit+0x1d8>)
 801423c:	68db      	ldr	r3, [r3, #12]
 801423e:	4a17      	ldr	r2, [pc, #92]	@ (801429c <HAL_RCC_DeInit+0x1d8>)
 8014240:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 8014244:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8014246:	4b15      	ldr	r3, [pc, #84]	@ (801429c <HAL_RCC_DeInit+0x1d8>)
 8014248:	68db      	ldr	r3, [r3, #12]
 801424a:	4a14      	ldr	r2, [pc, #80]	@ (801429c <HAL_RCC_DeInit+0x1d8>)
 801424c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8014250:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 8014252:	4b12      	ldr	r3, [pc, #72]	@ (801429c <HAL_RCC_DeInit+0x1d8>)
 8014254:	68db      	ldr	r3, [r3, #12]
 8014256:	4a11      	ldr	r2, [pc, #68]	@ (801429c <HAL_RCC_DeInit+0x1d8>)
 8014258:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801425c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 801425e:	4b0f      	ldr	r3, [pc, #60]	@ (801429c <HAL_RCC_DeInit+0x1d8>)
 8014260:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014262:	4a0e      	ldr	r2, [pc, #56]	@ (801429c <HAL_RCC_DeInit+0x1d8>)
 8014264:	f023 0301 	bic.w	r3, r3, #1
 8014268:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 801426a:	4b0c      	ldr	r3, [pc, #48]	@ (801429c <HAL_RCC_DeInit+0x1d8>)
 801426c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801426e:	4a0b      	ldr	r2, [pc, #44]	@ (801429c <HAL_RCC_DeInit+0x1d8>)
 8014270:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8014274:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8014276:	4b0c      	ldr	r3, [pc, #48]	@ (80142a8 <HAL_RCC_DeInit+0x1e4>)
 8014278:	4a0c      	ldr	r2, [pc, #48]	@ (80142ac <HAL_RCC_DeInit+0x1e8>)
 801427a:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 801427c:	4b0c      	ldr	r3, [pc, #48]	@ (80142b0 <HAL_RCC_DeInit+0x1ec>)
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	4618      	mov	r0, r3
 8014282:	f7fd f8e9 	bl	8011458 <HAL_InitTick>
 8014286:	4603      	mov	r3, r0
 8014288:	2b00      	cmp	r3, #0
 801428a:	d001      	beq.n	8014290 <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 801428c:	2301      	movs	r3, #1
 801428e:	e000      	b.n	8014292 <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 8014290:	2300      	movs	r3, #0
  }
}
 8014292:	4618      	mov	r0, r3
 8014294:	3708      	adds	r7, #8
 8014296:	46bd      	mov	sp, r7
 8014298:	bd80      	pop	{r7, pc}
 801429a:	bf00      	nop
 801429c:	40023800 	.word	0x40023800
 80142a0:	04003010 	.word	0x04003010
 80142a4:	24003000 	.word	0x24003000
 80142a8:	20000000 	.word	0x20000000
 80142ac:	00f42400 	.word	0x00f42400
 80142b0:	20000004 	.word	0x20000004

080142b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80142b4:	b580      	push	{r7, lr}
 80142b6:	b082      	sub	sp, #8
 80142b8:	af00      	add	r7, sp, #0
 80142ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d101      	bne.n	80142c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80142c2:	2301      	movs	r3, #1
 80142c4:	e041      	b.n	801434a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80142cc:	b2db      	uxtb	r3, r3
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d106      	bne.n	80142e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	2200      	movs	r2, #0
 80142d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80142da:	6878      	ldr	r0, [r7, #4]
 80142dc:	f7fc fef0 	bl	80110c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	2202      	movs	r2, #2
 80142e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	681a      	ldr	r2, [r3, #0]
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	3304      	adds	r3, #4
 80142f0:	4619      	mov	r1, r3
 80142f2:	4610      	mov	r0, r2
 80142f4:	f000 fabc 	bl	8014870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	2201      	movs	r2, #1
 80142fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	2201      	movs	r2, #1
 8014304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	2201      	movs	r2, #1
 801430c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	2201      	movs	r2, #1
 8014314:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	2201      	movs	r2, #1
 801431c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	2201      	movs	r2, #1
 8014324:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	2201      	movs	r2, #1
 801432c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	2201      	movs	r2, #1
 8014334:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	2201      	movs	r2, #1
 801433c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	2201      	movs	r2, #1
 8014344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8014348:	2300      	movs	r3, #0
}
 801434a:	4618      	mov	r0, r3
 801434c:	3708      	adds	r7, #8
 801434e:	46bd      	mov	sp, r7
 8014350:	bd80      	pop	{r7, pc}

08014352 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8014352:	b480      	push	{r7}
 8014354:	b083      	sub	sp, #12
 8014356:	af00      	add	r7, sp, #0
 8014358:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	6a1a      	ldr	r2, [r3, #32]
 8014360:	f241 1311 	movw	r3, #4369	@ 0x1111
 8014364:	4013      	ands	r3, r2
 8014366:	2b00      	cmp	r3, #0
 8014368:	d10f      	bne.n	801438a <HAL_TIM_Base_Stop+0x38>
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	6a1a      	ldr	r2, [r3, #32]
 8014370:	f240 4344 	movw	r3, #1092	@ 0x444
 8014374:	4013      	ands	r3, r2
 8014376:	2b00      	cmp	r3, #0
 8014378:	d107      	bne.n	801438a <HAL_TIM_Base_Stop+0x38>
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	681b      	ldr	r3, [r3, #0]
 801437e:	681a      	ldr	r2, [r3, #0]
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	f022 0201 	bic.w	r2, r2, #1
 8014388:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	2201      	movs	r2, #1
 801438e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8014392:	2300      	movs	r3, #0
}
 8014394:	4618      	mov	r0, r3
 8014396:	370c      	adds	r7, #12
 8014398:	46bd      	mov	sp, r7
 801439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801439e:	4770      	bx	lr

080143a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80143a0:	b480      	push	{r7}
 80143a2:	b085      	sub	sp, #20
 80143a4:	af00      	add	r7, sp, #0
 80143a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80143ae:	b2db      	uxtb	r3, r3
 80143b0:	2b01      	cmp	r3, #1
 80143b2:	d001      	beq.n	80143b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80143b4:	2301      	movs	r3, #1
 80143b6:	e04e      	b.n	8014456 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	2202      	movs	r2, #2
 80143bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	681b      	ldr	r3, [r3, #0]
 80143c4:	68da      	ldr	r2, [r3, #12]
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	f042 0201 	orr.w	r2, r2, #1
 80143ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	4a23      	ldr	r2, [pc, #140]	@ (8014464 <HAL_TIM_Base_Start_IT+0xc4>)
 80143d6:	4293      	cmp	r3, r2
 80143d8:	d022      	beq.n	8014420 <HAL_TIM_Base_Start_IT+0x80>
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80143e2:	d01d      	beq.n	8014420 <HAL_TIM_Base_Start_IT+0x80>
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	4a1f      	ldr	r2, [pc, #124]	@ (8014468 <HAL_TIM_Base_Start_IT+0xc8>)
 80143ea:	4293      	cmp	r3, r2
 80143ec:	d018      	beq.n	8014420 <HAL_TIM_Base_Start_IT+0x80>
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	681b      	ldr	r3, [r3, #0]
 80143f2:	4a1e      	ldr	r2, [pc, #120]	@ (801446c <HAL_TIM_Base_Start_IT+0xcc>)
 80143f4:	4293      	cmp	r3, r2
 80143f6:	d013      	beq.n	8014420 <HAL_TIM_Base_Start_IT+0x80>
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	681b      	ldr	r3, [r3, #0]
 80143fc:	4a1c      	ldr	r2, [pc, #112]	@ (8014470 <HAL_TIM_Base_Start_IT+0xd0>)
 80143fe:	4293      	cmp	r3, r2
 8014400:	d00e      	beq.n	8014420 <HAL_TIM_Base_Start_IT+0x80>
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	4a1b      	ldr	r2, [pc, #108]	@ (8014474 <HAL_TIM_Base_Start_IT+0xd4>)
 8014408:	4293      	cmp	r3, r2
 801440a:	d009      	beq.n	8014420 <HAL_TIM_Base_Start_IT+0x80>
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	4a19      	ldr	r2, [pc, #100]	@ (8014478 <HAL_TIM_Base_Start_IT+0xd8>)
 8014412:	4293      	cmp	r3, r2
 8014414:	d004      	beq.n	8014420 <HAL_TIM_Base_Start_IT+0x80>
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	4a18      	ldr	r2, [pc, #96]	@ (801447c <HAL_TIM_Base_Start_IT+0xdc>)
 801441c:	4293      	cmp	r3, r2
 801441e:	d111      	bne.n	8014444 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	689b      	ldr	r3, [r3, #8]
 8014426:	f003 0307 	and.w	r3, r3, #7
 801442a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	2b06      	cmp	r3, #6
 8014430:	d010      	beq.n	8014454 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	681b      	ldr	r3, [r3, #0]
 8014436:	681a      	ldr	r2, [r3, #0]
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	f042 0201 	orr.w	r2, r2, #1
 8014440:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014442:	e007      	b.n	8014454 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	681b      	ldr	r3, [r3, #0]
 8014448:	681a      	ldr	r2, [r3, #0]
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	f042 0201 	orr.w	r2, r2, #1
 8014452:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8014454:	2300      	movs	r3, #0
}
 8014456:	4618      	mov	r0, r3
 8014458:	3714      	adds	r7, #20
 801445a:	46bd      	mov	sp, r7
 801445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014460:	4770      	bx	lr
 8014462:	bf00      	nop
 8014464:	40010000 	.word	0x40010000
 8014468:	40000400 	.word	0x40000400
 801446c:	40000800 	.word	0x40000800
 8014470:	40000c00 	.word	0x40000c00
 8014474:	40010400 	.word	0x40010400
 8014478:	40014000 	.word	0x40014000
 801447c:	40001800 	.word	0x40001800

08014480 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8014480:	b580      	push	{r7, lr}
 8014482:	b082      	sub	sp, #8
 8014484:	af00      	add	r7, sp, #0
 8014486:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	681b      	ldr	r3, [r3, #0]
 801448c:	691b      	ldr	r3, [r3, #16]
 801448e:	f003 0302 	and.w	r3, r3, #2
 8014492:	2b02      	cmp	r3, #2
 8014494:	d122      	bne.n	80144dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	68db      	ldr	r3, [r3, #12]
 801449c:	f003 0302 	and.w	r3, r3, #2
 80144a0:	2b02      	cmp	r3, #2
 80144a2:	d11b      	bne.n	80144dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	681b      	ldr	r3, [r3, #0]
 80144a8:	f06f 0202 	mvn.w	r2, #2
 80144ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	2201      	movs	r2, #1
 80144b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	699b      	ldr	r3, [r3, #24]
 80144ba:	f003 0303 	and.w	r3, r3, #3
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d003      	beq.n	80144ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80144c2:	6878      	ldr	r0, [r7, #4]
 80144c4:	f000 f9b5 	bl	8014832 <HAL_TIM_IC_CaptureCallback>
 80144c8:	e005      	b.n	80144d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80144ca:	6878      	ldr	r0, [r7, #4]
 80144cc:	f000 f9a7 	bl	801481e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80144d0:	6878      	ldr	r0, [r7, #4]
 80144d2:	f000 f9b8 	bl	8014846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	2200      	movs	r2, #0
 80144da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	691b      	ldr	r3, [r3, #16]
 80144e2:	f003 0304 	and.w	r3, r3, #4
 80144e6:	2b04      	cmp	r3, #4
 80144e8:	d122      	bne.n	8014530 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	68db      	ldr	r3, [r3, #12]
 80144f0:	f003 0304 	and.w	r3, r3, #4
 80144f4:	2b04      	cmp	r3, #4
 80144f6:	d11b      	bne.n	8014530 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	f06f 0204 	mvn.w	r2, #4
 8014500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	2202      	movs	r2, #2
 8014506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	699b      	ldr	r3, [r3, #24]
 801450e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8014512:	2b00      	cmp	r3, #0
 8014514:	d003      	beq.n	801451e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014516:	6878      	ldr	r0, [r7, #4]
 8014518:	f000 f98b 	bl	8014832 <HAL_TIM_IC_CaptureCallback>
 801451c:	e005      	b.n	801452a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801451e:	6878      	ldr	r0, [r7, #4]
 8014520:	f000 f97d 	bl	801481e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014524:	6878      	ldr	r0, [r7, #4]
 8014526:	f000 f98e 	bl	8014846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	2200      	movs	r2, #0
 801452e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	691b      	ldr	r3, [r3, #16]
 8014536:	f003 0308 	and.w	r3, r3, #8
 801453a:	2b08      	cmp	r3, #8
 801453c:	d122      	bne.n	8014584 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	681b      	ldr	r3, [r3, #0]
 8014542:	68db      	ldr	r3, [r3, #12]
 8014544:	f003 0308 	and.w	r3, r3, #8
 8014548:	2b08      	cmp	r3, #8
 801454a:	d11b      	bne.n	8014584 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	f06f 0208 	mvn.w	r2, #8
 8014554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	2204      	movs	r2, #4
 801455a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	69db      	ldr	r3, [r3, #28]
 8014562:	f003 0303 	and.w	r3, r3, #3
 8014566:	2b00      	cmp	r3, #0
 8014568:	d003      	beq.n	8014572 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801456a:	6878      	ldr	r0, [r7, #4]
 801456c:	f000 f961 	bl	8014832 <HAL_TIM_IC_CaptureCallback>
 8014570:	e005      	b.n	801457e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014572:	6878      	ldr	r0, [r7, #4]
 8014574:	f000 f953 	bl	801481e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014578:	6878      	ldr	r0, [r7, #4]
 801457a:	f000 f964 	bl	8014846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	2200      	movs	r2, #0
 8014582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	691b      	ldr	r3, [r3, #16]
 801458a:	f003 0310 	and.w	r3, r3, #16
 801458e:	2b10      	cmp	r3, #16
 8014590:	d122      	bne.n	80145d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	68db      	ldr	r3, [r3, #12]
 8014598:	f003 0310 	and.w	r3, r3, #16
 801459c:	2b10      	cmp	r3, #16
 801459e:	d11b      	bne.n	80145d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	f06f 0210 	mvn.w	r2, #16
 80145a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	2208      	movs	r2, #8
 80145ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	69db      	ldr	r3, [r3, #28]
 80145b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d003      	beq.n	80145c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80145be:	6878      	ldr	r0, [r7, #4]
 80145c0:	f000 f937 	bl	8014832 <HAL_TIM_IC_CaptureCallback>
 80145c4:	e005      	b.n	80145d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80145c6:	6878      	ldr	r0, [r7, #4]
 80145c8:	f000 f929 	bl	801481e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80145cc:	6878      	ldr	r0, [r7, #4]
 80145ce:	f000 f93a 	bl	8014846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	2200      	movs	r2, #0
 80145d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	691b      	ldr	r3, [r3, #16]
 80145de:	f003 0301 	and.w	r3, r3, #1
 80145e2:	2b01      	cmp	r3, #1
 80145e4:	d10e      	bne.n	8014604 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	681b      	ldr	r3, [r3, #0]
 80145ea:	68db      	ldr	r3, [r3, #12]
 80145ec:	f003 0301 	and.w	r3, r3, #1
 80145f0:	2b01      	cmp	r3, #1
 80145f2:	d107      	bne.n	8014604 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	681b      	ldr	r3, [r3, #0]
 80145f8:	f06f 0201 	mvn.w	r2, #1
 80145fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80145fe:	6878      	ldr	r0, [r7, #4]
 8014600:	f7fc fae6 	bl	8010bd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	681b      	ldr	r3, [r3, #0]
 8014608:	691b      	ldr	r3, [r3, #16]
 801460a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801460e:	2b80      	cmp	r3, #128	@ 0x80
 8014610:	d10e      	bne.n	8014630 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	68db      	ldr	r3, [r3, #12]
 8014618:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801461c:	2b80      	cmp	r3, #128	@ 0x80
 801461e:	d107      	bne.n	8014630 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	681b      	ldr	r3, [r3, #0]
 8014624:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8014628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801462a:	6878      	ldr	r0, [r7, #4]
 801462c:	f000 fa64 	bl	8014af8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	691b      	ldr	r3, [r3, #16]
 8014636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801463a:	2b40      	cmp	r3, #64	@ 0x40
 801463c:	d10e      	bne.n	801465c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	68db      	ldr	r3, [r3, #12]
 8014644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014648:	2b40      	cmp	r3, #64	@ 0x40
 801464a:	d107      	bne.n	801465c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	681b      	ldr	r3, [r3, #0]
 8014650:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8014654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8014656:	6878      	ldr	r0, [r7, #4]
 8014658:	f000 f8ff 	bl	801485a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	691b      	ldr	r3, [r3, #16]
 8014662:	f003 0320 	and.w	r3, r3, #32
 8014666:	2b20      	cmp	r3, #32
 8014668:	d10e      	bne.n	8014688 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	68db      	ldr	r3, [r3, #12]
 8014670:	f003 0320 	and.w	r3, r3, #32
 8014674:	2b20      	cmp	r3, #32
 8014676:	d107      	bne.n	8014688 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	f06f 0220 	mvn.w	r2, #32
 8014680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8014682:	6878      	ldr	r0, [r7, #4]
 8014684:	f000 fa2e 	bl	8014ae4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8014688:	bf00      	nop
 801468a:	3708      	adds	r7, #8
 801468c:	46bd      	mov	sp, r7
 801468e:	bd80      	pop	{r7, pc}

08014690 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8014690:	b580      	push	{r7, lr}
 8014692:	b084      	sub	sp, #16
 8014694:	af00      	add	r7, sp, #0
 8014696:	6078      	str	r0, [r7, #4]
 8014698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801469a:	2300      	movs	r3, #0
 801469c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80146a4:	2b01      	cmp	r3, #1
 80146a6:	d101      	bne.n	80146ac <HAL_TIM_ConfigClockSource+0x1c>
 80146a8:	2302      	movs	r3, #2
 80146aa:	e0b4      	b.n	8014816 <HAL_TIM_ConfigClockSource+0x186>
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	2201      	movs	r2, #1
 80146b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	2202      	movs	r2, #2
 80146b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	689b      	ldr	r3, [r3, #8]
 80146c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80146c4:	68bb      	ldr	r3, [r7, #8]
 80146c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80146ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80146cc:	68bb      	ldr	r3, [r7, #8]
 80146ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80146d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	68ba      	ldr	r2, [r7, #8]
 80146da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80146dc:	683b      	ldr	r3, [r7, #0]
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80146e4:	d03e      	beq.n	8014764 <HAL_TIM_ConfigClockSource+0xd4>
 80146e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80146ea:	f200 8087 	bhi.w	80147fc <HAL_TIM_ConfigClockSource+0x16c>
 80146ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80146f2:	f000 8086 	beq.w	8014802 <HAL_TIM_ConfigClockSource+0x172>
 80146f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80146fa:	d87f      	bhi.n	80147fc <HAL_TIM_ConfigClockSource+0x16c>
 80146fc:	2b70      	cmp	r3, #112	@ 0x70
 80146fe:	d01a      	beq.n	8014736 <HAL_TIM_ConfigClockSource+0xa6>
 8014700:	2b70      	cmp	r3, #112	@ 0x70
 8014702:	d87b      	bhi.n	80147fc <HAL_TIM_ConfigClockSource+0x16c>
 8014704:	2b60      	cmp	r3, #96	@ 0x60
 8014706:	d050      	beq.n	80147aa <HAL_TIM_ConfigClockSource+0x11a>
 8014708:	2b60      	cmp	r3, #96	@ 0x60
 801470a:	d877      	bhi.n	80147fc <HAL_TIM_ConfigClockSource+0x16c>
 801470c:	2b50      	cmp	r3, #80	@ 0x50
 801470e:	d03c      	beq.n	801478a <HAL_TIM_ConfigClockSource+0xfa>
 8014710:	2b50      	cmp	r3, #80	@ 0x50
 8014712:	d873      	bhi.n	80147fc <HAL_TIM_ConfigClockSource+0x16c>
 8014714:	2b40      	cmp	r3, #64	@ 0x40
 8014716:	d058      	beq.n	80147ca <HAL_TIM_ConfigClockSource+0x13a>
 8014718:	2b40      	cmp	r3, #64	@ 0x40
 801471a:	d86f      	bhi.n	80147fc <HAL_TIM_ConfigClockSource+0x16c>
 801471c:	2b30      	cmp	r3, #48	@ 0x30
 801471e:	d064      	beq.n	80147ea <HAL_TIM_ConfigClockSource+0x15a>
 8014720:	2b30      	cmp	r3, #48	@ 0x30
 8014722:	d86b      	bhi.n	80147fc <HAL_TIM_ConfigClockSource+0x16c>
 8014724:	2b20      	cmp	r3, #32
 8014726:	d060      	beq.n	80147ea <HAL_TIM_ConfigClockSource+0x15a>
 8014728:	2b20      	cmp	r3, #32
 801472a:	d867      	bhi.n	80147fc <HAL_TIM_ConfigClockSource+0x16c>
 801472c:	2b00      	cmp	r3, #0
 801472e:	d05c      	beq.n	80147ea <HAL_TIM_ConfigClockSource+0x15a>
 8014730:	2b10      	cmp	r3, #16
 8014732:	d05a      	beq.n	80147ea <HAL_TIM_ConfigClockSource+0x15a>
 8014734:	e062      	b.n	80147fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	6818      	ldr	r0, [r3, #0]
 801473a:	683b      	ldr	r3, [r7, #0]
 801473c:	6899      	ldr	r1, [r3, #8]
 801473e:	683b      	ldr	r3, [r7, #0]
 8014740:	685a      	ldr	r2, [r3, #4]
 8014742:	683b      	ldr	r3, [r7, #0]
 8014744:	68db      	ldr	r3, [r3, #12]
 8014746:	f000 f9ad 	bl	8014aa4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	689b      	ldr	r3, [r3, #8]
 8014750:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8014752:	68bb      	ldr	r3, [r7, #8]
 8014754:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8014758:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	68ba      	ldr	r2, [r7, #8]
 8014760:	609a      	str	r2, [r3, #8]
      break;
 8014762:	e04f      	b.n	8014804 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	6818      	ldr	r0, [r3, #0]
 8014768:	683b      	ldr	r3, [r7, #0]
 801476a:	6899      	ldr	r1, [r3, #8]
 801476c:	683b      	ldr	r3, [r7, #0]
 801476e:	685a      	ldr	r2, [r3, #4]
 8014770:	683b      	ldr	r3, [r7, #0]
 8014772:	68db      	ldr	r3, [r3, #12]
 8014774:	f000 f996 	bl	8014aa4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	689a      	ldr	r2, [r3, #8]
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8014786:	609a      	str	r2, [r3, #8]
      break;
 8014788:	e03c      	b.n	8014804 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	6818      	ldr	r0, [r3, #0]
 801478e:	683b      	ldr	r3, [r7, #0]
 8014790:	6859      	ldr	r1, [r3, #4]
 8014792:	683b      	ldr	r3, [r7, #0]
 8014794:	68db      	ldr	r3, [r3, #12]
 8014796:	461a      	mov	r2, r3
 8014798:	f000 f90a 	bl	80149b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	2150      	movs	r1, #80	@ 0x50
 80147a2:	4618      	mov	r0, r3
 80147a4:	f000 f963 	bl	8014a6e <TIM_ITRx_SetConfig>
      break;
 80147a8:	e02c      	b.n	8014804 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	6818      	ldr	r0, [r3, #0]
 80147ae:	683b      	ldr	r3, [r7, #0]
 80147b0:	6859      	ldr	r1, [r3, #4]
 80147b2:	683b      	ldr	r3, [r7, #0]
 80147b4:	68db      	ldr	r3, [r3, #12]
 80147b6:	461a      	mov	r2, r3
 80147b8:	f000 f929 	bl	8014a0e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	2160      	movs	r1, #96	@ 0x60
 80147c2:	4618      	mov	r0, r3
 80147c4:	f000 f953 	bl	8014a6e <TIM_ITRx_SetConfig>
      break;
 80147c8:	e01c      	b.n	8014804 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	6818      	ldr	r0, [r3, #0]
 80147ce:	683b      	ldr	r3, [r7, #0]
 80147d0:	6859      	ldr	r1, [r3, #4]
 80147d2:	683b      	ldr	r3, [r7, #0]
 80147d4:	68db      	ldr	r3, [r3, #12]
 80147d6:	461a      	mov	r2, r3
 80147d8:	f000 f8ea 	bl	80149b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	2140      	movs	r1, #64	@ 0x40
 80147e2:	4618      	mov	r0, r3
 80147e4:	f000 f943 	bl	8014a6e <TIM_ITRx_SetConfig>
      break;
 80147e8:	e00c      	b.n	8014804 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	681a      	ldr	r2, [r3, #0]
 80147ee:	683b      	ldr	r3, [r7, #0]
 80147f0:	681b      	ldr	r3, [r3, #0]
 80147f2:	4619      	mov	r1, r3
 80147f4:	4610      	mov	r0, r2
 80147f6:	f000 f93a 	bl	8014a6e <TIM_ITRx_SetConfig>
      break;
 80147fa:	e003      	b.n	8014804 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80147fc:	2301      	movs	r3, #1
 80147fe:	73fb      	strb	r3, [r7, #15]
      break;
 8014800:	e000      	b.n	8014804 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8014802:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	2201      	movs	r2, #1
 8014808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	2200      	movs	r2, #0
 8014810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8014814:	7bfb      	ldrb	r3, [r7, #15]
}
 8014816:	4618      	mov	r0, r3
 8014818:	3710      	adds	r7, #16
 801481a:	46bd      	mov	sp, r7
 801481c:	bd80      	pop	{r7, pc}

0801481e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801481e:	b480      	push	{r7}
 8014820:	b083      	sub	sp, #12
 8014822:	af00      	add	r7, sp, #0
 8014824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8014826:	bf00      	nop
 8014828:	370c      	adds	r7, #12
 801482a:	46bd      	mov	sp, r7
 801482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014830:	4770      	bx	lr

08014832 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8014832:	b480      	push	{r7}
 8014834:	b083      	sub	sp, #12
 8014836:	af00      	add	r7, sp, #0
 8014838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801483a:	bf00      	nop
 801483c:	370c      	adds	r7, #12
 801483e:	46bd      	mov	sp, r7
 8014840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014844:	4770      	bx	lr

08014846 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8014846:	b480      	push	{r7}
 8014848:	b083      	sub	sp, #12
 801484a:	af00      	add	r7, sp, #0
 801484c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801484e:	bf00      	nop
 8014850:	370c      	adds	r7, #12
 8014852:	46bd      	mov	sp, r7
 8014854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014858:	4770      	bx	lr

0801485a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801485a:	b480      	push	{r7}
 801485c:	b083      	sub	sp, #12
 801485e:	af00      	add	r7, sp, #0
 8014860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8014862:	bf00      	nop
 8014864:	370c      	adds	r7, #12
 8014866:	46bd      	mov	sp, r7
 8014868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801486c:	4770      	bx	lr
	...

08014870 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8014870:	b480      	push	{r7}
 8014872:	b085      	sub	sp, #20
 8014874:	af00      	add	r7, sp, #0
 8014876:	6078      	str	r0, [r7, #4]
 8014878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	681b      	ldr	r3, [r3, #0]
 801487e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	4a40      	ldr	r2, [pc, #256]	@ (8014984 <TIM_Base_SetConfig+0x114>)
 8014884:	4293      	cmp	r3, r2
 8014886:	d013      	beq.n	80148b0 <TIM_Base_SetConfig+0x40>
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801488e:	d00f      	beq.n	80148b0 <TIM_Base_SetConfig+0x40>
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	4a3d      	ldr	r2, [pc, #244]	@ (8014988 <TIM_Base_SetConfig+0x118>)
 8014894:	4293      	cmp	r3, r2
 8014896:	d00b      	beq.n	80148b0 <TIM_Base_SetConfig+0x40>
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	4a3c      	ldr	r2, [pc, #240]	@ (801498c <TIM_Base_SetConfig+0x11c>)
 801489c:	4293      	cmp	r3, r2
 801489e:	d007      	beq.n	80148b0 <TIM_Base_SetConfig+0x40>
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	4a3b      	ldr	r2, [pc, #236]	@ (8014990 <TIM_Base_SetConfig+0x120>)
 80148a4:	4293      	cmp	r3, r2
 80148a6:	d003      	beq.n	80148b0 <TIM_Base_SetConfig+0x40>
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	4a3a      	ldr	r2, [pc, #232]	@ (8014994 <TIM_Base_SetConfig+0x124>)
 80148ac:	4293      	cmp	r3, r2
 80148ae:	d108      	bne.n	80148c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80148b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80148b8:	683b      	ldr	r3, [r7, #0]
 80148ba:	685b      	ldr	r3, [r3, #4]
 80148bc:	68fa      	ldr	r2, [r7, #12]
 80148be:	4313      	orrs	r3, r2
 80148c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	4a2f      	ldr	r2, [pc, #188]	@ (8014984 <TIM_Base_SetConfig+0x114>)
 80148c6:	4293      	cmp	r3, r2
 80148c8:	d02b      	beq.n	8014922 <TIM_Base_SetConfig+0xb2>
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80148d0:	d027      	beq.n	8014922 <TIM_Base_SetConfig+0xb2>
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	4a2c      	ldr	r2, [pc, #176]	@ (8014988 <TIM_Base_SetConfig+0x118>)
 80148d6:	4293      	cmp	r3, r2
 80148d8:	d023      	beq.n	8014922 <TIM_Base_SetConfig+0xb2>
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	4a2b      	ldr	r2, [pc, #172]	@ (801498c <TIM_Base_SetConfig+0x11c>)
 80148de:	4293      	cmp	r3, r2
 80148e0:	d01f      	beq.n	8014922 <TIM_Base_SetConfig+0xb2>
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	4a2a      	ldr	r2, [pc, #168]	@ (8014990 <TIM_Base_SetConfig+0x120>)
 80148e6:	4293      	cmp	r3, r2
 80148e8:	d01b      	beq.n	8014922 <TIM_Base_SetConfig+0xb2>
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	4a29      	ldr	r2, [pc, #164]	@ (8014994 <TIM_Base_SetConfig+0x124>)
 80148ee:	4293      	cmp	r3, r2
 80148f0:	d017      	beq.n	8014922 <TIM_Base_SetConfig+0xb2>
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	4a28      	ldr	r2, [pc, #160]	@ (8014998 <TIM_Base_SetConfig+0x128>)
 80148f6:	4293      	cmp	r3, r2
 80148f8:	d013      	beq.n	8014922 <TIM_Base_SetConfig+0xb2>
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	4a27      	ldr	r2, [pc, #156]	@ (801499c <TIM_Base_SetConfig+0x12c>)
 80148fe:	4293      	cmp	r3, r2
 8014900:	d00f      	beq.n	8014922 <TIM_Base_SetConfig+0xb2>
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	4a26      	ldr	r2, [pc, #152]	@ (80149a0 <TIM_Base_SetConfig+0x130>)
 8014906:	4293      	cmp	r3, r2
 8014908:	d00b      	beq.n	8014922 <TIM_Base_SetConfig+0xb2>
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	4a25      	ldr	r2, [pc, #148]	@ (80149a4 <TIM_Base_SetConfig+0x134>)
 801490e:	4293      	cmp	r3, r2
 8014910:	d007      	beq.n	8014922 <TIM_Base_SetConfig+0xb2>
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	4a24      	ldr	r2, [pc, #144]	@ (80149a8 <TIM_Base_SetConfig+0x138>)
 8014916:	4293      	cmp	r3, r2
 8014918:	d003      	beq.n	8014922 <TIM_Base_SetConfig+0xb2>
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	4a23      	ldr	r2, [pc, #140]	@ (80149ac <TIM_Base_SetConfig+0x13c>)
 801491e:	4293      	cmp	r3, r2
 8014920:	d108      	bne.n	8014934 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8014928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801492a:	683b      	ldr	r3, [r7, #0]
 801492c:	68db      	ldr	r3, [r3, #12]
 801492e:	68fa      	ldr	r2, [r7, #12]
 8014930:	4313      	orrs	r3, r2
 8014932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801493a:	683b      	ldr	r3, [r7, #0]
 801493c:	695b      	ldr	r3, [r3, #20]
 801493e:	4313      	orrs	r3, r2
 8014940:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	68fa      	ldr	r2, [r7, #12]
 8014946:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8014948:	683b      	ldr	r3, [r7, #0]
 801494a:	689a      	ldr	r2, [r3, #8]
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8014950:	683b      	ldr	r3, [r7, #0]
 8014952:	681a      	ldr	r2, [r3, #0]
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	4a0a      	ldr	r2, [pc, #40]	@ (8014984 <TIM_Base_SetConfig+0x114>)
 801495c:	4293      	cmp	r3, r2
 801495e:	d003      	beq.n	8014968 <TIM_Base_SetConfig+0xf8>
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	4a0c      	ldr	r2, [pc, #48]	@ (8014994 <TIM_Base_SetConfig+0x124>)
 8014964:	4293      	cmp	r3, r2
 8014966:	d103      	bne.n	8014970 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8014968:	683b      	ldr	r3, [r7, #0]
 801496a:	691a      	ldr	r2, [r3, #16]
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	2201      	movs	r2, #1
 8014974:	615a      	str	r2, [r3, #20]
}
 8014976:	bf00      	nop
 8014978:	3714      	adds	r7, #20
 801497a:	46bd      	mov	sp, r7
 801497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014980:	4770      	bx	lr
 8014982:	bf00      	nop
 8014984:	40010000 	.word	0x40010000
 8014988:	40000400 	.word	0x40000400
 801498c:	40000800 	.word	0x40000800
 8014990:	40000c00 	.word	0x40000c00
 8014994:	40010400 	.word	0x40010400
 8014998:	40014000 	.word	0x40014000
 801499c:	40014400 	.word	0x40014400
 80149a0:	40014800 	.word	0x40014800
 80149a4:	40001800 	.word	0x40001800
 80149a8:	40001c00 	.word	0x40001c00
 80149ac:	40002000 	.word	0x40002000

080149b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80149b0:	b480      	push	{r7}
 80149b2:	b087      	sub	sp, #28
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	60f8      	str	r0, [r7, #12]
 80149b8:	60b9      	str	r1, [r7, #8]
 80149ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	6a1b      	ldr	r3, [r3, #32]
 80149c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	6a1b      	ldr	r3, [r3, #32]
 80149c6:	f023 0201 	bic.w	r2, r3, #1
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	699b      	ldr	r3, [r3, #24]
 80149d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80149d4:	693b      	ldr	r3, [r7, #16]
 80149d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80149da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	011b      	lsls	r3, r3, #4
 80149e0:	693a      	ldr	r2, [r7, #16]
 80149e2:	4313      	orrs	r3, r2
 80149e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80149e6:	697b      	ldr	r3, [r7, #20]
 80149e8:	f023 030a 	bic.w	r3, r3, #10
 80149ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80149ee:	697a      	ldr	r2, [r7, #20]
 80149f0:	68bb      	ldr	r3, [r7, #8]
 80149f2:	4313      	orrs	r3, r2
 80149f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	693a      	ldr	r2, [r7, #16]
 80149fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	697a      	ldr	r2, [r7, #20]
 8014a00:	621a      	str	r2, [r3, #32]
}
 8014a02:	bf00      	nop
 8014a04:	371c      	adds	r7, #28
 8014a06:	46bd      	mov	sp, r7
 8014a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a0c:	4770      	bx	lr

08014a0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014a0e:	b480      	push	{r7}
 8014a10:	b087      	sub	sp, #28
 8014a12:	af00      	add	r7, sp, #0
 8014a14:	60f8      	str	r0, [r7, #12]
 8014a16:	60b9      	str	r1, [r7, #8]
 8014a18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	6a1b      	ldr	r3, [r3, #32]
 8014a1e:	f023 0210 	bic.w	r2, r3, #16
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	699b      	ldr	r3, [r3, #24]
 8014a2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8014a2c:	68fb      	ldr	r3, [r7, #12]
 8014a2e:	6a1b      	ldr	r3, [r3, #32]
 8014a30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8014a32:	697b      	ldr	r3, [r7, #20]
 8014a34:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8014a38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	031b      	lsls	r3, r3, #12
 8014a3e:	697a      	ldr	r2, [r7, #20]
 8014a40:	4313      	orrs	r3, r2
 8014a42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8014a44:	693b      	ldr	r3, [r7, #16]
 8014a46:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8014a4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8014a4c:	68bb      	ldr	r3, [r7, #8]
 8014a4e:	011b      	lsls	r3, r3, #4
 8014a50:	693a      	ldr	r2, [r7, #16]
 8014a52:	4313      	orrs	r3, r2
 8014a54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	697a      	ldr	r2, [r7, #20]
 8014a5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014a5c:	68fb      	ldr	r3, [r7, #12]
 8014a5e:	693a      	ldr	r2, [r7, #16]
 8014a60:	621a      	str	r2, [r3, #32]
}
 8014a62:	bf00      	nop
 8014a64:	371c      	adds	r7, #28
 8014a66:	46bd      	mov	sp, r7
 8014a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a6c:	4770      	bx	lr

08014a6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8014a6e:	b480      	push	{r7}
 8014a70:	b085      	sub	sp, #20
 8014a72:	af00      	add	r7, sp, #0
 8014a74:	6078      	str	r0, [r7, #4]
 8014a76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	689b      	ldr	r3, [r3, #8]
 8014a7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8014a7e:	68fb      	ldr	r3, [r7, #12]
 8014a80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8014a84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8014a86:	683a      	ldr	r2, [r7, #0]
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	4313      	orrs	r3, r2
 8014a8c:	f043 0307 	orr.w	r3, r3, #7
 8014a90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	68fa      	ldr	r2, [r7, #12]
 8014a96:	609a      	str	r2, [r3, #8]
}
 8014a98:	bf00      	nop
 8014a9a:	3714      	adds	r7, #20
 8014a9c:	46bd      	mov	sp, r7
 8014a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aa2:	4770      	bx	lr

08014aa4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8014aa4:	b480      	push	{r7}
 8014aa6:	b087      	sub	sp, #28
 8014aa8:	af00      	add	r7, sp, #0
 8014aaa:	60f8      	str	r0, [r7, #12]
 8014aac:	60b9      	str	r1, [r7, #8]
 8014aae:	607a      	str	r2, [r7, #4]
 8014ab0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	689b      	ldr	r3, [r3, #8]
 8014ab6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014ab8:	697b      	ldr	r3, [r7, #20]
 8014aba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8014abe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8014ac0:	683b      	ldr	r3, [r7, #0]
 8014ac2:	021a      	lsls	r2, r3, #8
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	431a      	orrs	r2, r3
 8014ac8:	68bb      	ldr	r3, [r7, #8]
 8014aca:	4313      	orrs	r3, r2
 8014acc:	697a      	ldr	r2, [r7, #20]
 8014ace:	4313      	orrs	r3, r2
 8014ad0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014ad2:	68fb      	ldr	r3, [r7, #12]
 8014ad4:	697a      	ldr	r2, [r7, #20]
 8014ad6:	609a      	str	r2, [r3, #8]
}
 8014ad8:	bf00      	nop
 8014ada:	371c      	adds	r7, #28
 8014adc:	46bd      	mov	sp, r7
 8014ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ae2:	4770      	bx	lr

08014ae4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8014ae4:	b480      	push	{r7}
 8014ae6:	b083      	sub	sp, #12
 8014ae8:	af00      	add	r7, sp, #0
 8014aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8014aec:	bf00      	nop
 8014aee:	370c      	adds	r7, #12
 8014af0:	46bd      	mov	sp, r7
 8014af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014af6:	4770      	bx	lr

08014af8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8014af8:	b480      	push	{r7}
 8014afa:	b083      	sub	sp, #12
 8014afc:	af00      	add	r7, sp, #0
 8014afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8014b00:	bf00      	nop
 8014b02:	370c      	adds	r7, #12
 8014b04:	46bd      	mov	sp, r7
 8014b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b0a:	4770      	bx	lr

08014b0c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8014b0c:	b580      	push	{r7, lr}
 8014b0e:	b086      	sub	sp, #24
 8014b10:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
	  /* IP addresses initialization */
	  int i;

	  // Verifica se o IP salvo na BattRam2 parece válido (evita IP 0.0.0.0 ou 255.255.255.255)
	  if ((BattRam2.buffer[0] == 0xFF) || (BattRam2.buffer[0] == 0x00)) {
 8014b12:	4b2b      	ldr	r3, [pc, #172]	@ (8014bc0 <MX_LWIP_Init+0xb4>)
 8014b14:	681b      	ldr	r3, [r3, #0]
 8014b16:	2bff      	cmp	r3, #255	@ 0xff
 8014b18:	d003      	beq.n	8014b22 <MX_LWIP_Init+0x16>
 8014b1a:	4b29      	ldr	r3, [pc, #164]	@ (8014bc0 <MX_LWIP_Init+0xb4>)
 8014b1c:	681b      	ldr	r3, [r3, #0]
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d124      	bne.n	8014b6c <MX_LWIP_Init+0x60>
		  // Se não houver IP válido salvo, usa o default (10.1.25.100)
	    IP_ADDRESS[0] = 10;
 8014b22:	4b28      	ldr	r3, [pc, #160]	@ (8014bc4 <MX_LWIP_Init+0xb8>)
 8014b24:	220a      	movs	r2, #10
 8014b26:	701a      	strb	r2, [r3, #0]
	    IP_ADDRESS[1] = 1;
 8014b28:	4b26      	ldr	r3, [pc, #152]	@ (8014bc4 <MX_LWIP_Init+0xb8>)
 8014b2a:	2201      	movs	r2, #1
 8014b2c:	705a      	strb	r2, [r3, #1]
	    IP_ADDRESS[2] = 25;
 8014b2e:	4b25      	ldr	r3, [pc, #148]	@ (8014bc4 <MX_LWIP_Init+0xb8>)
 8014b30:	2219      	movs	r2, #25
 8014b32:	709a      	strb	r2, [r3, #2]
	    IP_ADDRESS[3] = 100;
 8014b34:	4b23      	ldr	r3, [pc, #140]	@ (8014bc4 <MX_LWIP_Init+0xb8>)
 8014b36:	2264      	movs	r2, #100	@ 0x64
 8014b38:	70da      	strb	r2, [r3, #3]

	    NETMASK_ADDRESS[0] = 255;
 8014b3a:	4b23      	ldr	r3, [pc, #140]	@ (8014bc8 <MX_LWIP_Init+0xbc>)
 8014b3c:	22ff      	movs	r2, #255	@ 0xff
 8014b3e:	701a      	strb	r2, [r3, #0]
	    NETMASK_ADDRESS[1] = 255;
 8014b40:	4b21      	ldr	r3, [pc, #132]	@ (8014bc8 <MX_LWIP_Init+0xbc>)
 8014b42:	22ff      	movs	r2, #255	@ 0xff
 8014b44:	705a      	strb	r2, [r3, #1]
	    NETMASK_ADDRESS[2] = 255;
 8014b46:	4b20      	ldr	r3, [pc, #128]	@ (8014bc8 <MX_LWIP_Init+0xbc>)
 8014b48:	22ff      	movs	r2, #255	@ 0xff
 8014b4a:	709a      	strb	r2, [r3, #2]
	    NETMASK_ADDRESS[3] = 0;
 8014b4c:	4b1e      	ldr	r3, [pc, #120]	@ (8014bc8 <MX_LWIP_Init+0xbc>)
 8014b4e:	2200      	movs	r2, #0
 8014b50:	70da      	strb	r2, [r3, #3]

	    GATEWAY_ADDRESS[0] = 10;
 8014b52:	4b1e      	ldr	r3, [pc, #120]	@ (8014bcc <MX_LWIP_Init+0xc0>)
 8014b54:	220a      	movs	r2, #10
 8014b56:	701a      	strb	r2, [r3, #0]
	    GATEWAY_ADDRESS[1] = 1;
 8014b58:	4b1c      	ldr	r3, [pc, #112]	@ (8014bcc <MX_LWIP_Init+0xc0>)
 8014b5a:	2201      	movs	r2, #1
 8014b5c:	705a      	strb	r2, [r3, #1]
	    GATEWAY_ADDRESS[2] = 1;
 8014b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8014bcc <MX_LWIP_Init+0xc0>)
 8014b60:	2201      	movs	r2, #1
 8014b62:	709a      	strb	r2, [r3, #2]
	    GATEWAY_ADDRESS[3] = 1;
 8014b64:	4b19      	ldr	r3, [pc, #100]	@ (8014bcc <MX_LWIP_Init+0xc0>)
 8014b66:	2201      	movs	r2, #1
 8014b68:	70da      	strb	r2, [r3, #3]
 8014b6a:	e042      	b.n	8014bf2 <MX_LWIP_Init+0xe6>
	  } else {


	    // Lê IP da BATT-RAM
	    for (i = 0; i < 4; i++)
 8014b6c:	2300      	movs	r3, #0
 8014b6e:	607b      	str	r3, [r7, #4]
 8014b70:	e00c      	b.n	8014b8c <MX_LWIP_Init+0x80>
	      IP_ADDRESS[i] = BattRam2.buffer[i];
 8014b72:	4a13      	ldr	r2, [pc, #76]	@ (8014bc0 <MX_LWIP_Init+0xb4>)
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014b7a:	b2d9      	uxtb	r1, r3
 8014b7c:	4a11      	ldr	r2, [pc, #68]	@ (8014bc4 <MX_LWIP_Init+0xb8>)
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	4413      	add	r3, r2
 8014b82:	460a      	mov	r2, r1
 8014b84:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 4; i++)
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	3301      	adds	r3, #1
 8014b8a:	607b      	str	r3, [r7, #4]
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	2b03      	cmp	r3, #3
 8014b90:	ddef      	ble.n	8014b72 <MX_LWIP_Init+0x66>
	    for (i = 0; i < 4; i++)
 8014b92:	2300      	movs	r3, #0
 8014b94:	607b      	str	r3, [r7, #4]
 8014b96:	e00d      	b.n	8014bb4 <MX_LWIP_Init+0xa8>
	      NETMASK_ADDRESS[i] = BattRam2.buffer[i + 4];
 8014b98:	4a09      	ldr	r2, [pc, #36]	@ (8014bc0 <MX_LWIP_Init+0xb4>)
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	3304      	adds	r3, #4
 8014b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014ba2:	b2d9      	uxtb	r1, r3
 8014ba4:	4a08      	ldr	r2, [pc, #32]	@ (8014bc8 <MX_LWIP_Init+0xbc>)
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	4413      	add	r3, r2
 8014baa:	460a      	mov	r2, r1
 8014bac:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 4; i++)
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	3301      	adds	r3, #1
 8014bb2:	607b      	str	r3, [r7, #4]
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	2b03      	cmp	r3, #3
 8014bb8:	ddee      	ble.n	8014b98 <MX_LWIP_Init+0x8c>
	    for (i = 0; i < 4; i++)
 8014bba:	2300      	movs	r3, #0
 8014bbc:	607b      	str	r3, [r7, #4]
 8014bbe:	e015      	b.n	8014bec <MX_LWIP_Init+0xe0>
 8014bc0:	400249ff 	.word	0x400249ff
 8014bc4:	20010194 	.word	0x20010194
 8014bc8:	20010198 	.word	0x20010198
 8014bcc:	2001019c 	.word	0x2001019c
	      GATEWAY_ADDRESS[i] = BattRam2.buffer[i + 8];
 8014bd0:	4a84      	ldr	r2, [pc, #528]	@ (8014de4 <MX_LWIP_Init+0x2d8>)
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	3308      	adds	r3, #8
 8014bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014bda:	b2d9      	uxtb	r1, r3
 8014bdc:	4a82      	ldr	r2, [pc, #520]	@ (8014de8 <MX_LWIP_Init+0x2dc>)
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	4413      	add	r3, r2
 8014be2:	460a      	mov	r2, r1
 8014be4:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 4; i++)
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	3301      	adds	r3, #1
 8014bea:	607b      	str	r3, [r7, #4]
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	2b03      	cmp	r3, #3
 8014bf0:	ddee      	ble.n	8014bd0 <MX_LWIP_Init+0xc4>
*/

/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8014bf2:	f000 fcc1 	bl	8015578 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8014bf6:	4b7d      	ldr	r3, [pc, #500]	@ (8014dec <MX_LWIP_Init+0x2e0>)
 8014bf8:	781b      	ldrb	r3, [r3, #0]
 8014bfa:	061a      	lsls	r2, r3, #24
 8014bfc:	4b7b      	ldr	r3, [pc, #492]	@ (8014dec <MX_LWIP_Init+0x2e0>)
 8014bfe:	785b      	ldrb	r3, [r3, #1]
 8014c00:	041b      	lsls	r3, r3, #16
 8014c02:	431a      	orrs	r2, r3
 8014c04:	4b79      	ldr	r3, [pc, #484]	@ (8014dec <MX_LWIP_Init+0x2e0>)
 8014c06:	789b      	ldrb	r3, [r3, #2]
 8014c08:	021b      	lsls	r3, r3, #8
 8014c0a:	4313      	orrs	r3, r2
 8014c0c:	4a77      	ldr	r2, [pc, #476]	@ (8014dec <MX_LWIP_Init+0x2e0>)
 8014c0e:	78d2      	ldrb	r2, [r2, #3]
 8014c10:	4313      	orrs	r3, r2
 8014c12:	061a      	lsls	r2, r3, #24
 8014c14:	4b75      	ldr	r3, [pc, #468]	@ (8014dec <MX_LWIP_Init+0x2e0>)
 8014c16:	781b      	ldrb	r3, [r3, #0]
 8014c18:	0619      	lsls	r1, r3, #24
 8014c1a:	4b74      	ldr	r3, [pc, #464]	@ (8014dec <MX_LWIP_Init+0x2e0>)
 8014c1c:	785b      	ldrb	r3, [r3, #1]
 8014c1e:	041b      	lsls	r3, r3, #16
 8014c20:	4319      	orrs	r1, r3
 8014c22:	4b72      	ldr	r3, [pc, #456]	@ (8014dec <MX_LWIP_Init+0x2e0>)
 8014c24:	789b      	ldrb	r3, [r3, #2]
 8014c26:	021b      	lsls	r3, r3, #8
 8014c28:	430b      	orrs	r3, r1
 8014c2a:	4970      	ldr	r1, [pc, #448]	@ (8014dec <MX_LWIP_Init+0x2e0>)
 8014c2c:	78c9      	ldrb	r1, [r1, #3]
 8014c2e:	430b      	orrs	r3, r1
 8014c30:	021b      	lsls	r3, r3, #8
 8014c32:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014c36:	431a      	orrs	r2, r3
 8014c38:	4b6c      	ldr	r3, [pc, #432]	@ (8014dec <MX_LWIP_Init+0x2e0>)
 8014c3a:	781b      	ldrb	r3, [r3, #0]
 8014c3c:	0619      	lsls	r1, r3, #24
 8014c3e:	4b6b      	ldr	r3, [pc, #428]	@ (8014dec <MX_LWIP_Init+0x2e0>)
 8014c40:	785b      	ldrb	r3, [r3, #1]
 8014c42:	041b      	lsls	r3, r3, #16
 8014c44:	4319      	orrs	r1, r3
 8014c46:	4b69      	ldr	r3, [pc, #420]	@ (8014dec <MX_LWIP_Init+0x2e0>)
 8014c48:	789b      	ldrb	r3, [r3, #2]
 8014c4a:	021b      	lsls	r3, r3, #8
 8014c4c:	430b      	orrs	r3, r1
 8014c4e:	4967      	ldr	r1, [pc, #412]	@ (8014dec <MX_LWIP_Init+0x2e0>)
 8014c50:	78c9      	ldrb	r1, [r1, #3]
 8014c52:	430b      	orrs	r3, r1
 8014c54:	0a1b      	lsrs	r3, r3, #8
 8014c56:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014c5a:	431a      	orrs	r2, r3
 8014c5c:	4b63      	ldr	r3, [pc, #396]	@ (8014dec <MX_LWIP_Init+0x2e0>)
 8014c5e:	781b      	ldrb	r3, [r3, #0]
 8014c60:	0619      	lsls	r1, r3, #24
 8014c62:	4b62      	ldr	r3, [pc, #392]	@ (8014dec <MX_LWIP_Init+0x2e0>)
 8014c64:	785b      	ldrb	r3, [r3, #1]
 8014c66:	041b      	lsls	r3, r3, #16
 8014c68:	4319      	orrs	r1, r3
 8014c6a:	4b60      	ldr	r3, [pc, #384]	@ (8014dec <MX_LWIP_Init+0x2e0>)
 8014c6c:	789b      	ldrb	r3, [r3, #2]
 8014c6e:	021b      	lsls	r3, r3, #8
 8014c70:	430b      	orrs	r3, r1
 8014c72:	495e      	ldr	r1, [pc, #376]	@ (8014dec <MX_LWIP_Init+0x2e0>)
 8014c74:	78c9      	ldrb	r1, [r1, #3]
 8014c76:	430b      	orrs	r3, r1
 8014c78:	0e1b      	lsrs	r3, r3, #24
 8014c7a:	4313      	orrs	r3, r2
 8014c7c:	4a5c      	ldr	r2, [pc, #368]	@ (8014df0 <MX_LWIP_Init+0x2e4>)
 8014c7e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8014c80:	4b5c      	ldr	r3, [pc, #368]	@ (8014df4 <MX_LWIP_Init+0x2e8>)
 8014c82:	781b      	ldrb	r3, [r3, #0]
 8014c84:	061a      	lsls	r2, r3, #24
 8014c86:	4b5b      	ldr	r3, [pc, #364]	@ (8014df4 <MX_LWIP_Init+0x2e8>)
 8014c88:	785b      	ldrb	r3, [r3, #1]
 8014c8a:	041b      	lsls	r3, r3, #16
 8014c8c:	431a      	orrs	r2, r3
 8014c8e:	4b59      	ldr	r3, [pc, #356]	@ (8014df4 <MX_LWIP_Init+0x2e8>)
 8014c90:	789b      	ldrb	r3, [r3, #2]
 8014c92:	021b      	lsls	r3, r3, #8
 8014c94:	4313      	orrs	r3, r2
 8014c96:	4a57      	ldr	r2, [pc, #348]	@ (8014df4 <MX_LWIP_Init+0x2e8>)
 8014c98:	78d2      	ldrb	r2, [r2, #3]
 8014c9a:	4313      	orrs	r3, r2
 8014c9c:	061a      	lsls	r2, r3, #24
 8014c9e:	4b55      	ldr	r3, [pc, #340]	@ (8014df4 <MX_LWIP_Init+0x2e8>)
 8014ca0:	781b      	ldrb	r3, [r3, #0]
 8014ca2:	0619      	lsls	r1, r3, #24
 8014ca4:	4b53      	ldr	r3, [pc, #332]	@ (8014df4 <MX_LWIP_Init+0x2e8>)
 8014ca6:	785b      	ldrb	r3, [r3, #1]
 8014ca8:	041b      	lsls	r3, r3, #16
 8014caa:	4319      	orrs	r1, r3
 8014cac:	4b51      	ldr	r3, [pc, #324]	@ (8014df4 <MX_LWIP_Init+0x2e8>)
 8014cae:	789b      	ldrb	r3, [r3, #2]
 8014cb0:	021b      	lsls	r3, r3, #8
 8014cb2:	430b      	orrs	r3, r1
 8014cb4:	494f      	ldr	r1, [pc, #316]	@ (8014df4 <MX_LWIP_Init+0x2e8>)
 8014cb6:	78c9      	ldrb	r1, [r1, #3]
 8014cb8:	430b      	orrs	r3, r1
 8014cba:	021b      	lsls	r3, r3, #8
 8014cbc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014cc0:	431a      	orrs	r2, r3
 8014cc2:	4b4c      	ldr	r3, [pc, #304]	@ (8014df4 <MX_LWIP_Init+0x2e8>)
 8014cc4:	781b      	ldrb	r3, [r3, #0]
 8014cc6:	0619      	lsls	r1, r3, #24
 8014cc8:	4b4a      	ldr	r3, [pc, #296]	@ (8014df4 <MX_LWIP_Init+0x2e8>)
 8014cca:	785b      	ldrb	r3, [r3, #1]
 8014ccc:	041b      	lsls	r3, r3, #16
 8014cce:	4319      	orrs	r1, r3
 8014cd0:	4b48      	ldr	r3, [pc, #288]	@ (8014df4 <MX_LWIP_Init+0x2e8>)
 8014cd2:	789b      	ldrb	r3, [r3, #2]
 8014cd4:	021b      	lsls	r3, r3, #8
 8014cd6:	430b      	orrs	r3, r1
 8014cd8:	4946      	ldr	r1, [pc, #280]	@ (8014df4 <MX_LWIP_Init+0x2e8>)
 8014cda:	78c9      	ldrb	r1, [r1, #3]
 8014cdc:	430b      	orrs	r3, r1
 8014cde:	0a1b      	lsrs	r3, r3, #8
 8014ce0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014ce4:	431a      	orrs	r2, r3
 8014ce6:	4b43      	ldr	r3, [pc, #268]	@ (8014df4 <MX_LWIP_Init+0x2e8>)
 8014ce8:	781b      	ldrb	r3, [r3, #0]
 8014cea:	0619      	lsls	r1, r3, #24
 8014cec:	4b41      	ldr	r3, [pc, #260]	@ (8014df4 <MX_LWIP_Init+0x2e8>)
 8014cee:	785b      	ldrb	r3, [r3, #1]
 8014cf0:	041b      	lsls	r3, r3, #16
 8014cf2:	4319      	orrs	r1, r3
 8014cf4:	4b3f      	ldr	r3, [pc, #252]	@ (8014df4 <MX_LWIP_Init+0x2e8>)
 8014cf6:	789b      	ldrb	r3, [r3, #2]
 8014cf8:	021b      	lsls	r3, r3, #8
 8014cfa:	430b      	orrs	r3, r1
 8014cfc:	493d      	ldr	r1, [pc, #244]	@ (8014df4 <MX_LWIP_Init+0x2e8>)
 8014cfe:	78c9      	ldrb	r1, [r1, #3]
 8014d00:	430b      	orrs	r3, r1
 8014d02:	0e1b      	lsrs	r3, r3, #24
 8014d04:	4313      	orrs	r3, r2
 8014d06:	4a3c      	ldr	r2, [pc, #240]	@ (8014df8 <MX_LWIP_Init+0x2ec>)
 8014d08:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8014d0a:	4b37      	ldr	r3, [pc, #220]	@ (8014de8 <MX_LWIP_Init+0x2dc>)
 8014d0c:	781b      	ldrb	r3, [r3, #0]
 8014d0e:	061a      	lsls	r2, r3, #24
 8014d10:	4b35      	ldr	r3, [pc, #212]	@ (8014de8 <MX_LWIP_Init+0x2dc>)
 8014d12:	785b      	ldrb	r3, [r3, #1]
 8014d14:	041b      	lsls	r3, r3, #16
 8014d16:	431a      	orrs	r2, r3
 8014d18:	4b33      	ldr	r3, [pc, #204]	@ (8014de8 <MX_LWIP_Init+0x2dc>)
 8014d1a:	789b      	ldrb	r3, [r3, #2]
 8014d1c:	021b      	lsls	r3, r3, #8
 8014d1e:	4313      	orrs	r3, r2
 8014d20:	4a31      	ldr	r2, [pc, #196]	@ (8014de8 <MX_LWIP_Init+0x2dc>)
 8014d22:	78d2      	ldrb	r2, [r2, #3]
 8014d24:	4313      	orrs	r3, r2
 8014d26:	061a      	lsls	r2, r3, #24
 8014d28:	4b2f      	ldr	r3, [pc, #188]	@ (8014de8 <MX_LWIP_Init+0x2dc>)
 8014d2a:	781b      	ldrb	r3, [r3, #0]
 8014d2c:	0619      	lsls	r1, r3, #24
 8014d2e:	4b2e      	ldr	r3, [pc, #184]	@ (8014de8 <MX_LWIP_Init+0x2dc>)
 8014d30:	785b      	ldrb	r3, [r3, #1]
 8014d32:	041b      	lsls	r3, r3, #16
 8014d34:	4319      	orrs	r1, r3
 8014d36:	4b2c      	ldr	r3, [pc, #176]	@ (8014de8 <MX_LWIP_Init+0x2dc>)
 8014d38:	789b      	ldrb	r3, [r3, #2]
 8014d3a:	021b      	lsls	r3, r3, #8
 8014d3c:	430b      	orrs	r3, r1
 8014d3e:	492a      	ldr	r1, [pc, #168]	@ (8014de8 <MX_LWIP_Init+0x2dc>)
 8014d40:	78c9      	ldrb	r1, [r1, #3]
 8014d42:	430b      	orrs	r3, r1
 8014d44:	021b      	lsls	r3, r3, #8
 8014d46:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014d4a:	431a      	orrs	r2, r3
 8014d4c:	4b26      	ldr	r3, [pc, #152]	@ (8014de8 <MX_LWIP_Init+0x2dc>)
 8014d4e:	781b      	ldrb	r3, [r3, #0]
 8014d50:	0619      	lsls	r1, r3, #24
 8014d52:	4b25      	ldr	r3, [pc, #148]	@ (8014de8 <MX_LWIP_Init+0x2dc>)
 8014d54:	785b      	ldrb	r3, [r3, #1]
 8014d56:	041b      	lsls	r3, r3, #16
 8014d58:	4319      	orrs	r1, r3
 8014d5a:	4b23      	ldr	r3, [pc, #140]	@ (8014de8 <MX_LWIP_Init+0x2dc>)
 8014d5c:	789b      	ldrb	r3, [r3, #2]
 8014d5e:	021b      	lsls	r3, r3, #8
 8014d60:	430b      	orrs	r3, r1
 8014d62:	4921      	ldr	r1, [pc, #132]	@ (8014de8 <MX_LWIP_Init+0x2dc>)
 8014d64:	78c9      	ldrb	r1, [r1, #3]
 8014d66:	430b      	orrs	r3, r1
 8014d68:	0a1b      	lsrs	r3, r3, #8
 8014d6a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014d6e:	431a      	orrs	r2, r3
 8014d70:	4b1d      	ldr	r3, [pc, #116]	@ (8014de8 <MX_LWIP_Init+0x2dc>)
 8014d72:	781b      	ldrb	r3, [r3, #0]
 8014d74:	0619      	lsls	r1, r3, #24
 8014d76:	4b1c      	ldr	r3, [pc, #112]	@ (8014de8 <MX_LWIP_Init+0x2dc>)
 8014d78:	785b      	ldrb	r3, [r3, #1]
 8014d7a:	041b      	lsls	r3, r3, #16
 8014d7c:	4319      	orrs	r1, r3
 8014d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8014de8 <MX_LWIP_Init+0x2dc>)
 8014d80:	789b      	ldrb	r3, [r3, #2]
 8014d82:	021b      	lsls	r3, r3, #8
 8014d84:	430b      	orrs	r3, r1
 8014d86:	4918      	ldr	r1, [pc, #96]	@ (8014de8 <MX_LWIP_Init+0x2dc>)
 8014d88:	78c9      	ldrb	r1, [r1, #3]
 8014d8a:	430b      	orrs	r3, r1
 8014d8c:	0e1b      	lsrs	r3, r3, #24
 8014d8e:	4313      	orrs	r3, r2
 8014d90:	4a1a      	ldr	r2, [pc, #104]	@ (8014dfc <MX_LWIP_Init+0x2f0>)
 8014d92:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8014d94:	4b1a      	ldr	r3, [pc, #104]	@ (8014e00 <MX_LWIP_Init+0x2f4>)
 8014d96:	9302      	str	r3, [sp, #8]
 8014d98:	4b1a      	ldr	r3, [pc, #104]	@ (8014e04 <MX_LWIP_Init+0x2f8>)
 8014d9a:	9301      	str	r3, [sp, #4]
 8014d9c:	2300      	movs	r3, #0
 8014d9e:	9300      	str	r3, [sp, #0]
 8014da0:	4b16      	ldr	r3, [pc, #88]	@ (8014dfc <MX_LWIP_Init+0x2f0>)
 8014da2:	4a15      	ldr	r2, [pc, #84]	@ (8014df8 <MX_LWIP_Init+0x2ec>)
 8014da4:	4912      	ldr	r1, [pc, #72]	@ (8014df0 <MX_LWIP_Init+0x2e4>)
 8014da6:	4818      	ldr	r0, [pc, #96]	@ (8014e08 <MX_LWIP_Init+0x2fc>)
 8014da8:	f001 f88a 	bl	8015ec0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8014dac:	4816      	ldr	r0, [pc, #88]	@ (8014e08 <MX_LWIP_Init+0x2fc>)
 8014dae:	f001 fa35 	bl	801621c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8014db2:	4b15      	ldr	r3, [pc, #84]	@ (8014e08 <MX_LWIP_Init+0x2fc>)
 8014db4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014db8:	089b      	lsrs	r3, r3, #2
 8014dba:	f003 0301 	and.w	r3, r3, #1
 8014dbe:	b2db      	uxtb	r3, r3
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d003      	beq.n	8014dcc <MX_LWIP_Init+0x2c0>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8014dc4:	4810      	ldr	r0, [pc, #64]	@ (8014e08 <MX_LWIP_Init+0x2fc>)
 8014dc6:	f001 fa39 	bl	801623c <netif_set_up>
 8014dca:	e002      	b.n	8014dd2 <MX_LWIP_Init+0x2c6>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8014dcc:	480e      	ldr	r0, [pc, #56]	@ (8014e08 <MX_LWIP_Init+0x2fc>)
 8014dce:	f001 faa1 	bl	8016314 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8014dd2:	490e      	ldr	r1, [pc, #56]	@ (8014e0c <MX_LWIP_Init+0x300>)
 8014dd4:	480c      	ldr	r0, [pc, #48]	@ (8014e08 <MX_LWIP_Init+0x2fc>)
 8014dd6:	f001 facf 	bl	8016378 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8014dda:	bf00      	nop
 8014ddc:	3708      	adds	r7, #8
 8014dde:	46bd      	mov	sp, r7
 8014de0:	bd80      	pop	{r7, pc}
 8014de2:	bf00      	nop
 8014de4:	400249ff 	.word	0x400249ff
 8014de8:	2001019c 	.word	0x2001019c
 8014dec:	20010194 	.word	0x20010194
 8014df0:	20010188 	.word	0x20010188
 8014df4:	20010198 	.word	0x20010198
 8014df8:	2001018c 	.word	0x2001018c
 8014dfc:	20010190 	.word	0x20010190
 8014e00:	08019f05 	.word	0x08019f05
 8014e04:	080153d5 	.word	0x080153d5
 8014e08:	20010154 	.word	0x20010154
 8014e0c:	08015441 	.word	0x08015441

08014e10 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8014e10:	b580      	push	{r7, lr}
 8014e12:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8014e14:	4803      	ldr	r0, [pc, #12]	@ (8014e24 <MX_LWIP_Process+0x14>)
 8014e16:	f000 fabd 	bl	8015394 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8014e1a:	f002 f913 	bl	8017044 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8014e1e:	bf00      	nop
 8014e20:	bd80      	pop	{r7, pc}
 8014e22:	bf00      	nop
 8014e24:	20010154 	.word	0x20010154

08014e28 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8014e28:	b580      	push	{r7, lr}
 8014e2a:	b08e      	sub	sp, #56	@ 0x38
 8014e2c:	af00      	add	r7, sp, #0
 8014e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014e30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014e34:	2200      	movs	r2, #0
 8014e36:	601a      	str	r2, [r3, #0]
 8014e38:	605a      	str	r2, [r3, #4]
 8014e3a:	609a      	str	r2, [r3, #8]
 8014e3c:	60da      	str	r2, [r3, #12]
 8014e3e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	681b      	ldr	r3, [r3, #0]
 8014e44:	4a4a      	ldr	r2, [pc, #296]	@ (8014f70 <HAL_ETH_MspInit+0x148>)
 8014e46:	4293      	cmp	r3, r2
 8014e48:	f040 808d 	bne.w	8014f66 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8014e4c:	2300      	movs	r3, #0
 8014e4e:	623b      	str	r3, [r7, #32]
 8014e50:	4b48      	ldr	r3, [pc, #288]	@ (8014f74 <HAL_ETH_MspInit+0x14c>)
 8014e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014e54:	4a47      	ldr	r2, [pc, #284]	@ (8014f74 <HAL_ETH_MspInit+0x14c>)
 8014e56:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8014e5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8014e5c:	4b45      	ldr	r3, [pc, #276]	@ (8014f74 <HAL_ETH_MspInit+0x14c>)
 8014e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014e60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014e64:	623b      	str	r3, [r7, #32]
 8014e66:	6a3b      	ldr	r3, [r7, #32]
 8014e68:	2300      	movs	r3, #0
 8014e6a:	61fb      	str	r3, [r7, #28]
 8014e6c:	4b41      	ldr	r3, [pc, #260]	@ (8014f74 <HAL_ETH_MspInit+0x14c>)
 8014e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014e70:	4a40      	ldr	r2, [pc, #256]	@ (8014f74 <HAL_ETH_MspInit+0x14c>)
 8014e72:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8014e76:	6313      	str	r3, [r2, #48]	@ 0x30
 8014e78:	4b3e      	ldr	r3, [pc, #248]	@ (8014f74 <HAL_ETH_MspInit+0x14c>)
 8014e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014e7c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8014e80:	61fb      	str	r3, [r7, #28]
 8014e82:	69fb      	ldr	r3, [r7, #28]
 8014e84:	2300      	movs	r3, #0
 8014e86:	61bb      	str	r3, [r7, #24]
 8014e88:	4b3a      	ldr	r3, [pc, #232]	@ (8014f74 <HAL_ETH_MspInit+0x14c>)
 8014e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014e8c:	4a39      	ldr	r2, [pc, #228]	@ (8014f74 <HAL_ETH_MspInit+0x14c>)
 8014e8e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8014e92:	6313      	str	r3, [r2, #48]	@ 0x30
 8014e94:	4b37      	ldr	r3, [pc, #220]	@ (8014f74 <HAL_ETH_MspInit+0x14c>)
 8014e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014e98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014e9c:	61bb      	str	r3, [r7, #24]
 8014e9e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8014ea0:	2300      	movs	r3, #0
 8014ea2:	617b      	str	r3, [r7, #20]
 8014ea4:	4b33      	ldr	r3, [pc, #204]	@ (8014f74 <HAL_ETH_MspInit+0x14c>)
 8014ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014ea8:	4a32      	ldr	r2, [pc, #200]	@ (8014f74 <HAL_ETH_MspInit+0x14c>)
 8014eaa:	f043 0304 	orr.w	r3, r3, #4
 8014eae:	6313      	str	r3, [r2, #48]	@ 0x30
 8014eb0:	4b30      	ldr	r3, [pc, #192]	@ (8014f74 <HAL_ETH_MspInit+0x14c>)
 8014eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014eb4:	f003 0304 	and.w	r3, r3, #4
 8014eb8:	617b      	str	r3, [r7, #20]
 8014eba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014ebc:	2300      	movs	r3, #0
 8014ebe:	613b      	str	r3, [r7, #16]
 8014ec0:	4b2c      	ldr	r3, [pc, #176]	@ (8014f74 <HAL_ETH_MspInit+0x14c>)
 8014ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014ec4:	4a2b      	ldr	r2, [pc, #172]	@ (8014f74 <HAL_ETH_MspInit+0x14c>)
 8014ec6:	f043 0301 	orr.w	r3, r3, #1
 8014eca:	6313      	str	r3, [r2, #48]	@ 0x30
 8014ecc:	4b29      	ldr	r3, [pc, #164]	@ (8014f74 <HAL_ETH_MspInit+0x14c>)
 8014ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014ed0:	f003 0301 	and.w	r3, r3, #1
 8014ed4:	613b      	str	r3, [r7, #16]
 8014ed6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014ed8:	2300      	movs	r3, #0
 8014eda:	60fb      	str	r3, [r7, #12]
 8014edc:	4b25      	ldr	r3, [pc, #148]	@ (8014f74 <HAL_ETH_MspInit+0x14c>)
 8014ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014ee0:	4a24      	ldr	r2, [pc, #144]	@ (8014f74 <HAL_ETH_MspInit+0x14c>)
 8014ee2:	f043 0302 	orr.w	r3, r3, #2
 8014ee6:	6313      	str	r3, [r2, #48]	@ 0x30
 8014ee8:	4b22      	ldr	r3, [pc, #136]	@ (8014f74 <HAL_ETH_MspInit+0x14c>)
 8014eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014eec:	f003 0302 	and.w	r3, r3, #2
 8014ef0:	60fb      	str	r3, [r7, #12]
 8014ef2:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB13     ------> ETH_TXD1
    PB12     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8014ef4:	2332      	movs	r3, #50	@ 0x32
 8014ef6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014ef8:	2302      	movs	r3, #2
 8014efa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014efc:	2300      	movs	r3, #0
 8014efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014f00:	2303      	movs	r3, #3
 8014f02:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8014f04:	230b      	movs	r3, #11
 8014f06:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014f08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014f0c:	4619      	mov	r1, r3
 8014f0e:	481a      	ldr	r0, [pc, #104]	@ (8014f78 <HAL_ETH_MspInit+0x150>)
 8014f10:	f7fe f950 	bl	80131b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8014f14:	2386      	movs	r3, #134	@ 0x86
 8014f16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014f18:	2302      	movs	r3, #2
 8014f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014f1c:	2300      	movs	r3, #0
 8014f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014f20:	2303      	movs	r3, #3
 8014f22:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8014f24:	230b      	movs	r3, #11
 8014f26:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014f28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014f2c:	4619      	mov	r1, r3
 8014f2e:	4813      	ldr	r0, [pc, #76]	@ (8014f7c <HAL_ETH_MspInit+0x154>)
 8014f30:	f7fe f940 	bl	80131b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_12;
 8014f34:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8014f38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014f3a:	2302      	movs	r3, #2
 8014f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014f3e:	2300      	movs	r3, #0
 8014f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014f42:	2303      	movs	r3, #3
 8014f44:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8014f46:	230b      	movs	r3, #11
 8014f48:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014f4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014f4e:	4619      	mov	r1, r3
 8014f50:	480b      	ldr	r0, [pc, #44]	@ (8014f80 <HAL_ETH_MspInit+0x158>)
 8014f52:	f7fe f92f 	bl	80131b4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8014f56:	2200      	movs	r2, #0
 8014f58:	2100      	movs	r1, #0
 8014f5a:	203d      	movs	r0, #61	@ 0x3d
 8014f5c:	f7fc fbe1 	bl	8011722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8014f60:	203d      	movs	r0, #61	@ 0x3d
 8014f62:	f7fc fbfa 	bl	801175a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8014f66:	bf00      	nop
 8014f68:	3738      	adds	r7, #56	@ 0x38
 8014f6a:	46bd      	mov	sp, r7
 8014f6c:	bd80      	pop	{r7, pc}
 8014f6e:	bf00      	nop
 8014f70:	40028000 	.word	0x40028000
 8014f74:	40023800 	.word	0x40023800
 8014f78:	40020800 	.word	0x40020800
 8014f7c:	40020000 	.word	0x40020000
 8014f80:	40020400 	.word	0x40020400

08014f84 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8014f84:	b580      	push	{r7, lr}
 8014f86:	b086      	sub	sp, #24
 8014f88:	af00      	add	r7, sp, #0
 8014f8a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8014f8c:	2300      	movs	r3, #0
 8014f8e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8014f90:	4b52      	ldr	r3, [pc, #328]	@ (80150dc <low_level_init+0x158>)
 8014f92:	4a53      	ldr	r2, [pc, #332]	@ (80150e0 <low_level_init+0x15c>)
 8014f94:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8014f96:	4b51      	ldr	r3, [pc, #324]	@ (80150dc <low_level_init+0x158>)
 8014f98:	2201      	movs	r2, #1
 8014f9a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8014f9c:	4b4f      	ldr	r3, [pc, #316]	@ (80150dc <low_level_init+0x158>)
 8014f9e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8014fa2:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8014fa4:	4b4d      	ldr	r3, [pc, #308]	@ (80150dc <low_level_init+0x158>)
 8014fa6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014faa:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 8014fac:	4b4b      	ldr	r3, [pc, #300]	@ (80150dc <low_level_init+0x158>)
 8014fae:	2201      	movs	r2, #1
 8014fb0:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8014fb2:	2300      	movs	r3, #0
 8014fb4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8014fb6:	2380      	movs	r3, #128	@ 0x80
 8014fb8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8014fba:	23e1      	movs	r3, #225	@ 0xe1
 8014fbc:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8014fc2:	2300      	movs	r3, #0
 8014fc4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8014fc6:	2300      	movs	r3, #0
 8014fc8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8014fca:	4a44      	ldr	r2, [pc, #272]	@ (80150dc <low_level_init+0x158>)
 8014fcc:	f107 0308 	add.w	r3, r7, #8
 8014fd0:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8014fd2:	4b42      	ldr	r3, [pc, #264]	@ (80150dc <low_level_init+0x158>)
 8014fd4:	2200      	movs	r2, #0
 8014fd6:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8014fd8:	4b40      	ldr	r3, [pc, #256]	@ (80150dc <low_level_init+0x158>)
 8014fda:	2200      	movs	r2, #0
 8014fdc:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8014fde:	4b3f      	ldr	r3, [pc, #252]	@ (80150dc <low_level_init+0x158>)
 8014fe0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8014fe4:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8014fe6:	483d      	ldr	r0, [pc, #244]	@ (80150dc <low_level_init+0x158>)
 8014fe8:	f7fc fbf2 	bl	80117d0 <HAL_ETH_Init>
 8014fec:	4603      	mov	r3, r0
 8014fee:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8014ff0:	7dfb      	ldrb	r3, [r7, #23]
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	d108      	bne.n	8015008 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014ffc:	f043 0304 	orr.w	r3, r3, #4
 8015000:	b2da      	uxtb	r2, r3
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8015008:	2304      	movs	r3, #4
 801500a:	4a36      	ldr	r2, [pc, #216]	@ (80150e4 <low_level_init+0x160>)
 801500c:	4936      	ldr	r1, [pc, #216]	@ (80150e8 <low_level_init+0x164>)
 801500e:	4833      	ldr	r0, [pc, #204]	@ (80150dc <low_level_init+0x158>)
 8015010:	f7fc fd86 	bl	8011b20 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8015014:	2304      	movs	r3, #4
 8015016:	4a35      	ldr	r2, [pc, #212]	@ (80150ec <low_level_init+0x168>)
 8015018:	4935      	ldr	r1, [pc, #212]	@ (80150f0 <low_level_init+0x16c>)
 801501a:	4830      	ldr	r0, [pc, #192]	@ (80150dc <low_level_init+0x158>)
 801501c:	f7fc fde8 	bl	8011bf0 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	2206      	movs	r2, #6
 8015024:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8015028:	4b2c      	ldr	r3, [pc, #176]	@ (80150dc <low_level_init+0x158>)
 801502a:	695b      	ldr	r3, [r3, #20]
 801502c:	781a      	ldrb	r2, [r3, #0]
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8015034:	4b29      	ldr	r3, [pc, #164]	@ (80150dc <low_level_init+0x158>)
 8015036:	695b      	ldr	r3, [r3, #20]
 8015038:	785a      	ldrb	r2, [r3, #1]
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8015040:	4b26      	ldr	r3, [pc, #152]	@ (80150dc <low_level_init+0x158>)
 8015042:	695b      	ldr	r3, [r3, #20]
 8015044:	789a      	ldrb	r2, [r3, #2]
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 801504c:	4b23      	ldr	r3, [pc, #140]	@ (80150dc <low_level_init+0x158>)
 801504e:	695b      	ldr	r3, [r3, #20]
 8015050:	78da      	ldrb	r2, [r3, #3]
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8015058:	4b20      	ldr	r3, [pc, #128]	@ (80150dc <low_level_init+0x158>)
 801505a:	695b      	ldr	r3, [r3, #20]
 801505c:	791a      	ldrb	r2, [r3, #4]
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8015064:	4b1d      	ldr	r3, [pc, #116]	@ (80150dc <low_level_init+0x158>)
 8015066:	695b      	ldr	r3, [r3, #20]
 8015068:	795a      	ldrb	r2, [r3, #5]
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8015076:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801507e:	f043 030a 	orr.w	r3, r3, #10
 8015082:	b2da      	uxtb	r2, r3
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 801508a:	4814      	ldr	r0, [pc, #80]	@ (80150dc <low_level_init+0x158>)
 801508c:	f7fd f8dd 	bl	801224a <HAL_ETH_Start>

/* USER CODE END PHY_PRE_CONFIG */

  /**** Configure PHY to generate an interrupt when Eth Link state changes ****/
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MICR, &regvalue);
 8015090:	f107 0310 	add.w	r3, r7, #16
 8015094:	461a      	mov	r2, r3
 8015096:	2111      	movs	r1, #17
 8015098:	4810      	ldr	r0, [pc, #64]	@ (80150dc <low_level_init+0x158>)
 801509a:	f7fd f808 	bl	80120ae <HAL_ETH_ReadPHYRegister>

  regvalue |= (PHY_MICR_INT_EN | PHY_MICR_INT_OE);
 801509e:	693b      	ldr	r3, [r7, #16]
 80150a0:	f043 0303 	orr.w	r3, r3, #3
 80150a4:	613b      	str	r3, [r7, #16]

  /* Enable Interrupts */
  HAL_ETH_WritePHYRegister(&heth, PHY_MICR, regvalue );
 80150a6:	693b      	ldr	r3, [r7, #16]
 80150a8:	461a      	mov	r2, r3
 80150aa:	2111      	movs	r1, #17
 80150ac:	480b      	ldr	r0, [pc, #44]	@ (80150dc <low_level_init+0x158>)
 80150ae:	f7fd f866 	bl	801217e <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MISR, &regvalue);
 80150b2:	f107 0310 	add.w	r3, r7, #16
 80150b6:	461a      	mov	r2, r3
 80150b8:	2112      	movs	r1, #18
 80150ba:	4808      	ldr	r0, [pc, #32]	@ (80150dc <low_level_init+0x158>)
 80150bc:	f7fc fff7 	bl	80120ae <HAL_ETH_ReadPHYRegister>

  regvalue |= PHY_MISR_LINK_INT_EN;
 80150c0:	693b      	ldr	r3, [r7, #16]
 80150c2:	f043 0320 	orr.w	r3, r3, #32
 80150c6:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_MISR, regvalue);
 80150c8:	693b      	ldr	r3, [r7, #16]
 80150ca:	461a      	mov	r2, r3
 80150cc:	2112      	movs	r1, #18
 80150ce:	4803      	ldr	r0, [pc, #12]	@ (80150dc <low_level_init+0x158>)
 80150d0:	f7fd f855 	bl	801217e <HAL_ETH_WritePHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80150d4:	bf00      	nop
 80150d6:	3718      	adds	r7, #24
 80150d8:	46bd      	mov	sp, r7
 80150da:	bd80      	pop	{r7, pc}
 80150dc:	20013240 	.word	0x20013240
 80150e0:	40028000 	.word	0x40028000
 80150e4:	20011a70 	.word	0x20011a70
 80150e8:	20010220 	.word	0x20010220
 80150ec:	200102a0 	.word	0x200102a0
 80150f0:	200101a0 	.word	0x200101a0

080150f4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80150f4:	b580      	push	{r7, lr}
 80150f6:	b08a      	sub	sp, #40	@ 0x28
 80150f8:	af00      	add	r7, sp, #0
 80150fa:	6078      	str	r0, [r7, #4]
 80150fc:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80150fe:	4b4b      	ldr	r3, [pc, #300]	@ (801522c <low_level_output+0x138>)
 8015100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015102:	689b      	ldr	r3, [r3, #8]
 8015104:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8015106:	2300      	movs	r3, #0
 8015108:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 801510a:	2300      	movs	r3, #0
 801510c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 801510e:	2300      	movs	r3, #0
 8015110:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8015112:	2300      	movs	r3, #0
 8015114:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8015116:	4b45      	ldr	r3, [pc, #276]	@ (801522c <low_level_output+0x138>)
 8015118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801511a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 801511c:	2300      	movs	r3, #0
 801511e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8015120:	683b      	ldr	r3, [r7, #0]
 8015122:	623b      	str	r3, [r7, #32]
 8015124:	e05a      	b.n	80151dc <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8015126:	69bb      	ldr	r3, [r7, #24]
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	2b00      	cmp	r3, #0
 801512c:	da03      	bge.n	8015136 <low_level_output+0x42>
      {
        errval = ERR_USE;
 801512e:	23f8      	movs	r3, #248	@ 0xf8
 8015130:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
 8015134:	e05c      	b.n	80151f0 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8015136:	6a3b      	ldr	r3, [r7, #32]
 8015138:	895b      	ldrh	r3, [r3, #10]
 801513a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 801513c:	2300      	movs	r3, #0
 801513e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8015140:	e02f      	b.n	80151a2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8015142:	69fa      	ldr	r2, [r7, #28]
 8015144:	693b      	ldr	r3, [r7, #16]
 8015146:	18d0      	adds	r0, r2, r3
 8015148:	6a3b      	ldr	r3, [r7, #32]
 801514a:	685a      	ldr	r2, [r3, #4]
 801514c:	68bb      	ldr	r3, [r7, #8]
 801514e:	18d1      	adds	r1, r2, r3
 8015150:	693b      	ldr	r3, [r7, #16]
 8015152:	f5c3 63be 	rsb	r3, r3, #1520	@ 0x5f0
 8015156:	3304      	adds	r3, #4
 8015158:	461a      	mov	r2, r3
 801515a:	f005 fa52 	bl	801a602 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 801515e:	69bb      	ldr	r3, [r7, #24]
 8015160:	68db      	ldr	r3, [r3, #12]
 8015162:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8015164:	69bb      	ldr	r3, [r7, #24]
 8015166:	681b      	ldr	r3, [r3, #0]
 8015168:	2b00      	cmp	r3, #0
 801516a:	da03      	bge.n	8015174 <low_level_output+0x80>
        {
          errval = ERR_USE;
 801516c:	23f8      	movs	r3, #248	@ 0xf8
 801516e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
 8015172:	e03d      	b.n	80151f0 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8015174:	69bb      	ldr	r3, [r7, #24]
 8015176:	689b      	ldr	r3, [r3, #8]
 8015178:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 801517a:	693a      	ldr	r2, [r7, #16]
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	4413      	add	r3, r2
 8015180:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 8015184:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8015186:	68ba      	ldr	r2, [r7, #8]
 8015188:	693b      	ldr	r3, [r7, #16]
 801518a:	1ad3      	subs	r3, r2, r3
 801518c:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8015190:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8015192:	697a      	ldr	r2, [r7, #20]
 8015194:	693b      	ldr	r3, [r7, #16]
 8015196:	1ad3      	subs	r3, r2, r3
 8015198:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 801519c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 801519e:	2300      	movs	r3, #0
 80151a0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80151a2:	68fa      	ldr	r2, [r7, #12]
 80151a4:	693b      	ldr	r3, [r7, #16]
 80151a6:	4413      	add	r3, r2
 80151a8:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80151ac:	4293      	cmp	r3, r2
 80151ae:	d8c8      	bhi.n	8015142 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80151b0:	69fa      	ldr	r2, [r7, #28]
 80151b2:	693b      	ldr	r3, [r7, #16]
 80151b4:	18d0      	adds	r0, r2, r3
 80151b6:	6a3b      	ldr	r3, [r7, #32]
 80151b8:	685a      	ldr	r2, [r3, #4]
 80151ba:	68bb      	ldr	r3, [r7, #8]
 80151bc:	4413      	add	r3, r2
 80151be:	68fa      	ldr	r2, [r7, #12]
 80151c0:	4619      	mov	r1, r3
 80151c2:	f005 fa1e 	bl	801a602 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80151c6:	693a      	ldr	r2, [r7, #16]
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	4413      	add	r3, r2
 80151cc:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80151ce:	697a      	ldr	r2, [r7, #20]
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	4413      	add	r3, r2
 80151d4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80151d6:	6a3b      	ldr	r3, [r7, #32]
 80151d8:	681b      	ldr	r3, [r3, #0]
 80151da:	623b      	str	r3, [r7, #32]
 80151dc:	6a3b      	ldr	r3, [r7, #32]
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d1a1      	bne.n	8015126 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80151e2:	6979      	ldr	r1, [r7, #20]
 80151e4:	4811      	ldr	r0, [pc, #68]	@ (801522c <low_level_output+0x138>)
 80151e6:	f7fc fd6f 	bl	8011cc8 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80151ea:	2300      	movs	r3, #0
 80151ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80151f0:	4b0e      	ldr	r3, [pc, #56]	@ (801522c <low_level_output+0x138>)
 80151f2:	681b      	ldr	r3, [r3, #0]
 80151f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80151f8:	695b      	ldr	r3, [r3, #20]
 80151fa:	f003 0320 	and.w	r3, r3, #32
 80151fe:	2b00      	cmp	r3, #0
 8015200:	d00d      	beq.n	801521e <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8015202:	4b0a      	ldr	r3, [pc, #40]	@ (801522c <low_level_output+0x138>)
 8015204:	681b      	ldr	r3, [r3, #0]
 8015206:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801520a:	461a      	mov	r2, r3
 801520c:	2320      	movs	r3, #32
 801520e:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8015210:	4b06      	ldr	r3, [pc, #24]	@ (801522c <low_level_output+0x138>)
 8015212:	681b      	ldr	r3, [r3, #0]
 8015214:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015218:	461a      	mov	r2, r3
 801521a:	2300      	movs	r3, #0
 801521c:	6053      	str	r3, [r2, #4]
  }
  return errval;
 801521e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8015222:	4618      	mov	r0, r3
 8015224:	3728      	adds	r7, #40	@ 0x28
 8015226:	46bd      	mov	sp, r7
 8015228:	bd80      	pop	{r7, pc}
 801522a:	bf00      	nop
 801522c:	20013240 	.word	0x20013240

08015230 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8015230:	b580      	push	{r7, lr}
 8015232:	b08c      	sub	sp, #48	@ 0x30
 8015234:	af00      	add	r7, sp, #0
 8015236:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8015238:	2300      	movs	r3, #0
 801523a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct pbuf *q = NULL;
 801523c:	2300      	movs	r3, #0
 801523e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint16_t len = 0;
 8015240:	2300      	movs	r3, #0
 8015242:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8015244:	2300      	movs	r3, #0
 8015246:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8015248:	2300      	movs	r3, #0
 801524a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 801524c:	2300      	movs	r3, #0
 801524e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8015250:	2300      	movs	r3, #0
 8015252:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8015254:	484e      	ldr	r0, [pc, #312]	@ (8015390 <low_level_input+0x160>)
 8015256:	f7fc fe21 	bl	8011e9c <HAL_ETH_GetReceivedFrame>
 801525a:	4603      	mov	r3, r0
 801525c:	2b00      	cmp	r3, #0
 801525e:	d001      	beq.n	8015264 <low_level_input+0x34>

    return NULL;
 8015260:	2300      	movs	r3, #0
 8015262:	e091      	b.n	8015388 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8015264:	4b4a      	ldr	r3, [pc, #296]	@ (8015390 <low_level_input+0x160>)
 8015266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015268:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 801526a:	4b49      	ldr	r3, [pc, #292]	@ (8015390 <low_level_input+0x160>)
 801526c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801526e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (len > 0)
 8015270:	89fb      	ldrh	r3, [r7, #14]
 8015272:	2b00      	cmp	r3, #0
 8015274:	d007      	beq.n	8015286 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8015276:	89fb      	ldrh	r3, [r7, #14]
 8015278:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 801527c:	4619      	mov	r1, r3
 801527e:	2000      	movs	r0, #0
 8015280:	f001 f8ea 	bl	8016458 <pbuf_alloc>
 8015284:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  if (p != NULL)
 8015286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015288:	2b00      	cmp	r3, #0
 801528a:	d04b      	beq.n	8015324 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 801528c:	4b40      	ldr	r3, [pc, #256]	@ (8015390 <low_level_input+0x160>)
 801528e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015290:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8015292:	2300      	movs	r3, #0
 8015294:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8015296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015298:	62bb      	str	r3, [r7, #40]	@ 0x28
 801529a:	e040      	b.n	801531e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 801529c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801529e:	895b      	ldrh	r3, [r3, #10]
 80152a0:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80152a2:	2300      	movs	r3, #0
 80152a4:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80152a6:	e021      	b.n	80152ec <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80152a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152aa:	685a      	ldr	r2, [r3, #4]
 80152ac:	69bb      	ldr	r3, [r7, #24]
 80152ae:	18d0      	adds	r0, r2, r3
 80152b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80152b2:	69fb      	ldr	r3, [r7, #28]
 80152b4:	18d1      	adds	r1, r2, r3
 80152b6:	69fb      	ldr	r3, [r7, #28]
 80152b8:	f5c3 63be 	rsb	r3, r3, #1520	@ 0x5f0
 80152bc:	3304      	adds	r3, #4
 80152be:	461a      	mov	r2, r3
 80152c0:	f005 f99f 	bl	801a602 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80152c4:	6a3b      	ldr	r3, [r7, #32]
 80152c6:	68db      	ldr	r3, [r3, #12]
 80152c8:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80152ca:	6a3b      	ldr	r3, [r7, #32]
 80152cc:	689b      	ldr	r3, [r3, #8]
 80152ce:	627b      	str	r3, [r7, #36]	@ 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80152d0:	69fa      	ldr	r2, [r7, #28]
 80152d2:	697b      	ldr	r3, [r7, #20]
 80152d4:	4413      	add	r3, r2
 80152d6:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 80152da:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80152dc:	69ba      	ldr	r2, [r7, #24]
 80152de:	69fb      	ldr	r3, [r7, #28]
 80152e0:	1ad3      	subs	r3, r2, r3
 80152e2:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 80152e6:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80152e8:	2300      	movs	r3, #0
 80152ea:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80152ec:	697a      	ldr	r2, [r7, #20]
 80152ee:	69fb      	ldr	r3, [r7, #28]
 80152f0:	4413      	add	r3, r2
 80152f2:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80152f6:	4293      	cmp	r3, r2
 80152f8:	d8d6      	bhi.n	80152a8 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80152fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152fc:	685a      	ldr	r2, [r3, #4]
 80152fe:	69bb      	ldr	r3, [r7, #24]
 8015300:	18d0      	adds	r0, r2, r3
 8015302:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015304:	69fb      	ldr	r3, [r7, #28]
 8015306:	4413      	add	r3, r2
 8015308:	697a      	ldr	r2, [r7, #20]
 801530a:	4619      	mov	r1, r3
 801530c:	f005 f979 	bl	801a602 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8015310:	69fa      	ldr	r2, [r7, #28]
 8015312:	697b      	ldr	r3, [r7, #20]
 8015314:	4413      	add	r3, r2
 8015316:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8015318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801531e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015320:	2b00      	cmp	r3, #0
 8015322:	d1bb      	bne.n	801529c <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8015324:	4b1a      	ldr	r3, [pc, #104]	@ (8015390 <low_level_input+0x160>)
 8015326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015328:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 801532a:	2300      	movs	r3, #0
 801532c:	613b      	str	r3, [r7, #16]
 801532e:	e00b      	b.n	8015348 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8015330:	6a3b      	ldr	r3, [r7, #32]
 8015332:	681b      	ldr	r3, [r3, #0]
 8015334:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8015338:	6a3b      	ldr	r3, [r7, #32]
 801533a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 801533c:	6a3b      	ldr	r3, [r7, #32]
 801533e:	68db      	ldr	r3, [r3, #12]
 8015340:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8015342:	693b      	ldr	r3, [r7, #16]
 8015344:	3301      	adds	r3, #1
 8015346:	613b      	str	r3, [r7, #16]
 8015348:	4b11      	ldr	r3, [pc, #68]	@ (8015390 <low_level_input+0x160>)
 801534a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801534c:	693a      	ldr	r2, [r7, #16]
 801534e:	429a      	cmp	r2, r3
 8015350:	d3ee      	bcc.n	8015330 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8015352:	4b0f      	ldr	r3, [pc, #60]	@ (8015390 <low_level_input+0x160>)
 8015354:	2200      	movs	r2, #0
 8015356:	639a      	str	r2, [r3, #56]	@ 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8015358:	4b0d      	ldr	r3, [pc, #52]	@ (8015390 <low_level_input+0x160>)
 801535a:	681b      	ldr	r3, [r3, #0]
 801535c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015360:	695b      	ldr	r3, [r3, #20]
 8015362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015366:	2b00      	cmp	r3, #0
 8015368:	d00d      	beq.n	8015386 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 801536a:	4b09      	ldr	r3, [pc, #36]	@ (8015390 <low_level_input+0x160>)
 801536c:	681b      	ldr	r3, [r3, #0]
 801536e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015372:	461a      	mov	r2, r3
 8015374:	2380      	movs	r3, #128	@ 0x80
 8015376:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8015378:	4b05      	ldr	r3, [pc, #20]	@ (8015390 <low_level_input+0x160>)
 801537a:	681b      	ldr	r3, [r3, #0]
 801537c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015380:	461a      	mov	r2, r3
 8015382:	2300      	movs	r3, #0
 8015384:	6093      	str	r3, [r2, #8]
  }
  return p;
 8015386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8015388:	4618      	mov	r0, r3
 801538a:	3730      	adds	r7, #48	@ 0x30
 801538c:	46bd      	mov	sp, r7
 801538e:	bd80      	pop	{r7, pc}
 8015390:	20013240 	.word	0x20013240

08015394 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8015394:	b580      	push	{r7, lr}
 8015396:	b084      	sub	sp, #16
 8015398:	af00      	add	r7, sp, #0
 801539a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 801539c:	6878      	ldr	r0, [r7, #4]
 801539e:	f7ff ff47 	bl	8015230 <low_level_input>
 80153a2:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d010      	beq.n	80153cc <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	691b      	ldr	r3, [r3, #16]
 80153ae:	6879      	ldr	r1, [r7, #4]
 80153b0:	68f8      	ldr	r0, [r7, #12]
 80153b2:	4798      	blx	r3
 80153b4:	4603      	mov	r3, r0
 80153b6:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 80153b8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d006      	beq.n	80153ce <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 80153c0:	68f8      	ldr	r0, [r7, #12]
 80153c2:	f001 fb2b 	bl	8016a1c <pbuf_free>
    p = NULL;
 80153c6:	2300      	movs	r3, #0
 80153c8:	60fb      	str	r3, [r7, #12]
 80153ca:	e000      	b.n	80153ce <ethernetif_input+0x3a>
  if (p == NULL) return;
 80153cc:	bf00      	nop
  }
}
 80153ce:	3710      	adds	r7, #16
 80153d0:	46bd      	mov	sp, r7
 80153d2:	bd80      	pop	{r7, pc}

080153d4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80153d4:	b580      	push	{r7, lr}
 80153d6:	b082      	sub	sp, #8
 80153d8:	af00      	add	r7, sp, #0
 80153da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d106      	bne.n	80153f0 <ethernetif_init+0x1c>
 80153e2:	4b0e      	ldr	r3, [pc, #56]	@ (801541c <ethernetif_init+0x48>)
 80153e4:	f44f 7205 	mov.w	r2, #532	@ 0x214
 80153e8:	490d      	ldr	r1, [pc, #52]	@ (8015420 <ethernetif_init+0x4c>)
 80153ea:	480e      	ldr	r0, [pc, #56]	@ (8015424 <ethernetif_init+0x50>)
 80153ec:	f005 f81e 	bl	801a42c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	2273      	movs	r2, #115	@ 0x73
 80153f4:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	2274      	movs	r2, #116	@ 0x74
 80153fc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	4a09      	ldr	r2, [pc, #36]	@ (8015428 <ethernetif_init+0x54>)
 8015404:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	4a08      	ldr	r2, [pc, #32]	@ (801542c <ethernetif_init+0x58>)
 801540a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 801540c:	6878      	ldr	r0, [r7, #4]
 801540e:	f7ff fdb9 	bl	8014f84 <low_level_init>

  return ERR_OK;
 8015412:	2300      	movs	r3, #0
}
 8015414:	4618      	mov	r0, r3
 8015416:	3708      	adds	r7, #8
 8015418:	46bd      	mov	sp, r7
 801541a:	bd80      	pop	{r7, pc}
 801541c:	0801b110 	.word	0x0801b110
 8015420:	0801b12c 	.word	0x0801b12c
 8015424:	0801b13c 	.word	0x0801b13c
 8015428:	080183d1 	.word	0x080183d1
 801542c:	080150f5 	.word	0x080150f5

08015430 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8015430:	b580      	push	{r7, lr}
 8015432:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8015434:	f7fc f854 	bl	80114e0 <HAL_GetTick>
 8015438:	4603      	mov	r3, r0
}
 801543a:	4618      	mov	r0, r3
 801543c:	bd80      	pop	{r7, pc}
	...

08015440 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8015440:	b580      	push	{r7, lr}
 8015442:	b084      	sub	sp, #16
 8015444:	af00      	add	r7, sp, #0
 8015446:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8015448:	2300      	movs	r3, #0
 801544a:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 801544c:	2300      	movs	r3, #0
 801544e:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015456:	089b      	lsrs	r3, r3, #2
 8015458:	f003 0301 	and.w	r3, r3, #1
 801545c:	b2db      	uxtb	r3, r3
 801545e:	2b00      	cmp	r3, #0
 8015460:	d05d      	beq.n	801551e <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8015462:	4b34      	ldr	r3, [pc, #208]	@ (8015534 <ethernetif_update_config+0xf4>)
 8015464:	685b      	ldr	r3, [r3, #4]
 8015466:	2b00      	cmp	r3, #0
 8015468:	d03f      	beq.n	80154ea <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 801546a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801546e:	2100      	movs	r1, #0
 8015470:	4830      	ldr	r0, [pc, #192]	@ (8015534 <ethernetif_update_config+0xf4>)
 8015472:	f7fc fe84 	bl	801217e <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8015476:	f7fc f833 	bl	80114e0 <HAL_GetTick>
 801547a:	4603      	mov	r3, r0
 801547c:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 801547e:	f107 0308 	add.w	r3, r7, #8
 8015482:	461a      	mov	r2, r3
 8015484:	2101      	movs	r1, #1
 8015486:	482b      	ldr	r0, [pc, #172]	@ (8015534 <ethernetif_update_config+0xf4>)
 8015488:	f7fc fe11 	bl	80120ae <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 801548c:	f7fc f828 	bl	80114e0 <HAL_GetTick>
 8015490:	4602      	mov	r2, r0
 8015492:	68fb      	ldr	r3, [r7, #12]
 8015494:	1ad3      	subs	r3, r2, r3
 8015496:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801549a:	d828      	bhi.n	80154ee <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 801549c:	68bb      	ldr	r3, [r7, #8]
 801549e:	f003 0320 	and.w	r3, r3, #32
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d0eb      	beq.n	801547e <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80154a6:	f107 0308 	add.w	r3, r7, #8
 80154aa:	461a      	mov	r2, r3
 80154ac:	2110      	movs	r1, #16
 80154ae:	4821      	ldr	r0, [pc, #132]	@ (8015534 <ethernetif_update_config+0xf4>)
 80154b0:	f7fc fdfd 	bl	80120ae <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80154b4:	68bb      	ldr	r3, [r7, #8]
 80154b6:	f003 0304 	and.w	r3, r3, #4
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d004      	beq.n	80154c8 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80154be:	4b1d      	ldr	r3, [pc, #116]	@ (8015534 <ethernetif_update_config+0xf4>)
 80154c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80154c4:	60da      	str	r2, [r3, #12]
 80154c6:	e002      	b.n	80154ce <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80154c8:	4b1a      	ldr	r3, [pc, #104]	@ (8015534 <ethernetif_update_config+0xf4>)
 80154ca:	2200      	movs	r2, #0
 80154cc:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80154ce:	68bb      	ldr	r3, [r7, #8]
 80154d0:	f003 0302 	and.w	r3, r3, #2
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d003      	beq.n	80154e0 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80154d8:	4b16      	ldr	r3, [pc, #88]	@ (8015534 <ethernetif_update_config+0xf4>)
 80154da:	2200      	movs	r2, #0
 80154dc:	609a      	str	r2, [r3, #8]
 80154de:	e016      	b.n	801550e <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80154e0:	4b14      	ldr	r3, [pc, #80]	@ (8015534 <ethernetif_update_config+0xf4>)
 80154e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80154e6:	609a      	str	r2, [r3, #8]
 80154e8:	e011      	b.n	801550e <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80154ea:	bf00      	nop
 80154ec:	e000      	b.n	80154f0 <ethernetif_update_config+0xb0>
          goto error;
 80154ee:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80154f0:	4b10      	ldr	r3, [pc, #64]	@ (8015534 <ethernetif_update_config+0xf4>)
 80154f2:	68db      	ldr	r3, [r3, #12]
 80154f4:	08db      	lsrs	r3, r3, #3
 80154f6:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80154f8:	4b0e      	ldr	r3, [pc, #56]	@ (8015534 <ethernetif_update_config+0xf4>)
 80154fa:	689b      	ldr	r3, [r3, #8]
 80154fc:	085b      	lsrs	r3, r3, #1
 80154fe:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8015500:	4313      	orrs	r3, r2
 8015502:	b29b      	uxth	r3, r3
 8015504:	461a      	mov	r2, r3
 8015506:	2100      	movs	r1, #0
 8015508:	480a      	ldr	r0, [pc, #40]	@ (8015534 <ethernetif_update_config+0xf4>)
 801550a:	f7fc fe38 	bl	801217e <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 801550e:	2100      	movs	r1, #0
 8015510:	4808      	ldr	r0, [pc, #32]	@ (8015534 <ethernetif_update_config+0xf4>)
 8015512:	f7fc fef9 	bl	8012308 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8015516:	4807      	ldr	r0, [pc, #28]	@ (8015534 <ethernetif_update_config+0xf4>)
 8015518:	f7fc fe97 	bl	801224a <HAL_ETH_Start>
 801551c:	e002      	b.n	8015524 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 801551e:	4805      	ldr	r0, [pc, #20]	@ (8015534 <ethernetif_update_config+0xf4>)
 8015520:	f7fc fec2 	bl	80122a8 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8015524:	6878      	ldr	r0, [r7, #4]
 8015526:	f000 f807 	bl	8015538 <ethernetif_notify_conn_changed>
}
 801552a:	bf00      	nop
 801552c:	3710      	adds	r7, #16
 801552e:	46bd      	mov	sp, r7
 8015530:	bd80      	pop	{r7, pc}
 8015532:	bf00      	nop
 8015534:	20013240 	.word	0x20013240

08015538 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8015538:	b480      	push	{r7}
 801553a:	b083      	sub	sp, #12
 801553c:	af00      	add	r7, sp, #0
 801553e:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8015540:	bf00      	nop
 8015542:	370c      	adds	r7, #12
 8015544:	46bd      	mov	sp, r7
 8015546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801554a:	4770      	bx	lr

0801554c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 801554c:	b480      	push	{r7}
 801554e:	b083      	sub	sp, #12
 8015550:	af00      	add	r7, sp, #0
 8015552:	4603      	mov	r3, r0
 8015554:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8015556:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801555a:	021b      	lsls	r3, r3, #8
 801555c:	b21a      	sxth	r2, r3
 801555e:	88fb      	ldrh	r3, [r7, #6]
 8015560:	0a1b      	lsrs	r3, r3, #8
 8015562:	b29b      	uxth	r3, r3
 8015564:	b21b      	sxth	r3, r3
 8015566:	4313      	orrs	r3, r2
 8015568:	b21b      	sxth	r3, r3
 801556a:	b29b      	uxth	r3, r3
}
 801556c:	4618      	mov	r0, r3
 801556e:	370c      	adds	r7, #12
 8015570:	46bd      	mov	sp, r7
 8015572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015576:	4770      	bx	lr

08015578 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8015578:	b580      	push	{r7, lr}
 801557a:	b082      	sub	sp, #8
 801557c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801557e:	2300      	movs	r3, #0
 8015580:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8015582:	f000 f8d3 	bl	801572c <mem_init>
  memp_init();
 8015586:	f000 fbd9 	bl	8015d3c <memp_init>
  pbuf_init();
  netif_init();
 801558a:	f000 fc91 	bl	8015eb0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801558e:	f001 fd93 	bl	80170b8 <udp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8015592:	f001 fd0f 	bl	8016fb4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8015596:	bf00      	nop
 8015598:	3708      	adds	r7, #8
 801559a:	46bd      	mov	sp, r7
 801559c:	bd80      	pop	{r7, pc}
	...

080155a0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80155a0:	b480      	push	{r7}
 80155a2:	b083      	sub	sp, #12
 80155a4:	af00      	add	r7, sp, #0
 80155a6:	4603      	mov	r3, r0
 80155a8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80155aa:	4b05      	ldr	r3, [pc, #20]	@ (80155c0 <ptr_to_mem+0x20>)
 80155ac:	681a      	ldr	r2, [r3, #0]
 80155ae:	88fb      	ldrh	r3, [r7, #6]
 80155b0:	4413      	add	r3, r2
}
 80155b2:	4618      	mov	r0, r3
 80155b4:	370c      	adds	r7, #12
 80155b6:	46bd      	mov	sp, r7
 80155b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155bc:	4770      	bx	lr
 80155be:	bf00      	nop
 80155c0:	20013908 	.word	0x20013908

080155c4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80155c4:	b480      	push	{r7}
 80155c6:	b083      	sub	sp, #12
 80155c8:	af00      	add	r7, sp, #0
 80155ca:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80155cc:	4b05      	ldr	r3, [pc, #20]	@ (80155e4 <mem_to_ptr+0x20>)
 80155ce:	681b      	ldr	r3, [r3, #0]
 80155d0:	687a      	ldr	r2, [r7, #4]
 80155d2:	1ad3      	subs	r3, r2, r3
 80155d4:	b29b      	uxth	r3, r3
}
 80155d6:	4618      	mov	r0, r3
 80155d8:	370c      	adds	r7, #12
 80155da:	46bd      	mov	sp, r7
 80155dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155e0:	4770      	bx	lr
 80155e2:	bf00      	nop
 80155e4:	20013908 	.word	0x20013908

080155e8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80155e8:	b590      	push	{r4, r7, lr}
 80155ea:	b085      	sub	sp, #20
 80155ec:	af00      	add	r7, sp, #0
 80155ee:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80155f0:	4b45      	ldr	r3, [pc, #276]	@ (8015708 <plug_holes+0x120>)
 80155f2:	681b      	ldr	r3, [r3, #0]
 80155f4:	687a      	ldr	r2, [r7, #4]
 80155f6:	429a      	cmp	r2, r3
 80155f8:	d206      	bcs.n	8015608 <plug_holes+0x20>
 80155fa:	4b44      	ldr	r3, [pc, #272]	@ (801570c <plug_holes+0x124>)
 80155fc:	f240 12df 	movw	r2, #479	@ 0x1df
 8015600:	4943      	ldr	r1, [pc, #268]	@ (8015710 <plug_holes+0x128>)
 8015602:	4844      	ldr	r0, [pc, #272]	@ (8015714 <plug_holes+0x12c>)
 8015604:	f004 ff12 	bl	801a42c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8015608:	4b43      	ldr	r3, [pc, #268]	@ (8015718 <plug_holes+0x130>)
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	687a      	ldr	r2, [r7, #4]
 801560e:	429a      	cmp	r2, r3
 8015610:	d306      	bcc.n	8015620 <plug_holes+0x38>
 8015612:	4b3e      	ldr	r3, [pc, #248]	@ (801570c <plug_holes+0x124>)
 8015614:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8015618:	4940      	ldr	r1, [pc, #256]	@ (801571c <plug_holes+0x134>)
 801561a:	483e      	ldr	r0, [pc, #248]	@ (8015714 <plug_holes+0x12c>)
 801561c:	f004 ff06 	bl	801a42c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	791b      	ldrb	r3, [r3, #4]
 8015624:	2b00      	cmp	r3, #0
 8015626:	d006      	beq.n	8015636 <plug_holes+0x4e>
 8015628:	4b38      	ldr	r3, [pc, #224]	@ (801570c <plug_holes+0x124>)
 801562a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 801562e:	493c      	ldr	r1, [pc, #240]	@ (8015720 <plug_holes+0x138>)
 8015630:	4838      	ldr	r0, [pc, #224]	@ (8015714 <plug_holes+0x12c>)
 8015632:	f004 fefb 	bl	801a42c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	881b      	ldrh	r3, [r3, #0]
 801563a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801563e:	d906      	bls.n	801564e <plug_holes+0x66>
 8015640:	4b32      	ldr	r3, [pc, #200]	@ (801570c <plug_holes+0x124>)
 8015642:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8015646:	4937      	ldr	r1, [pc, #220]	@ (8015724 <plug_holes+0x13c>)
 8015648:	4832      	ldr	r0, [pc, #200]	@ (8015714 <plug_holes+0x12c>)
 801564a:	f004 feef 	bl	801a42c <iprintf>

  nmem = ptr_to_mem(mem->next);
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	881b      	ldrh	r3, [r3, #0]
 8015652:	4618      	mov	r0, r3
 8015654:	f7ff ffa4 	bl	80155a0 <ptr_to_mem>
 8015658:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801565a:	687a      	ldr	r2, [r7, #4]
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	429a      	cmp	r2, r3
 8015660:	d024      	beq.n	80156ac <plug_holes+0xc4>
 8015662:	68fb      	ldr	r3, [r7, #12]
 8015664:	791b      	ldrb	r3, [r3, #4]
 8015666:	2b00      	cmp	r3, #0
 8015668:	d120      	bne.n	80156ac <plug_holes+0xc4>
 801566a:	4b2b      	ldr	r3, [pc, #172]	@ (8015718 <plug_holes+0x130>)
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	68fa      	ldr	r2, [r7, #12]
 8015670:	429a      	cmp	r2, r3
 8015672:	d01b      	beq.n	80156ac <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8015674:	4b2c      	ldr	r3, [pc, #176]	@ (8015728 <plug_holes+0x140>)
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	68fa      	ldr	r2, [r7, #12]
 801567a:	429a      	cmp	r2, r3
 801567c:	d102      	bne.n	8015684 <plug_holes+0x9c>
      lfree = mem;
 801567e:	4a2a      	ldr	r2, [pc, #168]	@ (8015728 <plug_holes+0x140>)
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8015684:	68fb      	ldr	r3, [r7, #12]
 8015686:	881a      	ldrh	r2, [r3, #0]
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801568c:	68fb      	ldr	r3, [r7, #12]
 801568e:	881b      	ldrh	r3, [r3, #0]
 8015690:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8015694:	d00a      	beq.n	80156ac <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8015696:	68fb      	ldr	r3, [r7, #12]
 8015698:	881b      	ldrh	r3, [r3, #0]
 801569a:	4618      	mov	r0, r3
 801569c:	f7ff ff80 	bl	80155a0 <ptr_to_mem>
 80156a0:	4604      	mov	r4, r0
 80156a2:	6878      	ldr	r0, [r7, #4]
 80156a4:	f7ff ff8e 	bl	80155c4 <mem_to_ptr>
 80156a8:	4603      	mov	r3, r0
 80156aa:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	885b      	ldrh	r3, [r3, #2]
 80156b0:	4618      	mov	r0, r3
 80156b2:	f7ff ff75 	bl	80155a0 <ptr_to_mem>
 80156b6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80156b8:	68ba      	ldr	r2, [r7, #8]
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	429a      	cmp	r2, r3
 80156be:	d01f      	beq.n	8015700 <plug_holes+0x118>
 80156c0:	68bb      	ldr	r3, [r7, #8]
 80156c2:	791b      	ldrb	r3, [r3, #4]
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d11b      	bne.n	8015700 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80156c8:	4b17      	ldr	r3, [pc, #92]	@ (8015728 <plug_holes+0x140>)
 80156ca:	681b      	ldr	r3, [r3, #0]
 80156cc:	687a      	ldr	r2, [r7, #4]
 80156ce:	429a      	cmp	r2, r3
 80156d0:	d102      	bne.n	80156d8 <plug_holes+0xf0>
      lfree = pmem;
 80156d2:	4a15      	ldr	r2, [pc, #84]	@ (8015728 <plug_holes+0x140>)
 80156d4:	68bb      	ldr	r3, [r7, #8]
 80156d6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	881a      	ldrh	r2, [r3, #0]
 80156dc:	68bb      	ldr	r3, [r7, #8]
 80156de:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	881b      	ldrh	r3, [r3, #0]
 80156e4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80156e8:	d00a      	beq.n	8015700 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	881b      	ldrh	r3, [r3, #0]
 80156ee:	4618      	mov	r0, r3
 80156f0:	f7ff ff56 	bl	80155a0 <ptr_to_mem>
 80156f4:	4604      	mov	r4, r0
 80156f6:	68b8      	ldr	r0, [r7, #8]
 80156f8:	f7ff ff64 	bl	80155c4 <mem_to_ptr>
 80156fc:	4603      	mov	r3, r0
 80156fe:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8015700:	bf00      	nop
 8015702:	3714      	adds	r7, #20
 8015704:	46bd      	mov	sp, r7
 8015706:	bd90      	pop	{r4, r7, pc}
 8015708:	20013908 	.word	0x20013908
 801570c:	0801b164 	.word	0x0801b164
 8015710:	0801b194 	.word	0x0801b194
 8015714:	0801b1ac 	.word	0x0801b1ac
 8015718:	2001390c 	.word	0x2001390c
 801571c:	0801b1d4 	.word	0x0801b1d4
 8015720:	0801b1f0 	.word	0x0801b1f0
 8015724:	0801b20c 	.word	0x0801b20c
 8015728:	20013910 	.word	0x20013910

0801572c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 801572c:	b580      	push	{r7, lr}
 801572e:	b082      	sub	sp, #8
 8015730:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8015732:	4b18      	ldr	r3, [pc, #96]	@ (8015794 <mem_init+0x68>)
 8015734:	3303      	adds	r3, #3
 8015736:	f023 0303 	bic.w	r3, r3, #3
 801573a:	461a      	mov	r2, r3
 801573c:	4b16      	ldr	r3, [pc, #88]	@ (8015798 <mem_init+0x6c>)
 801573e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8015740:	4b15      	ldr	r3, [pc, #84]	@ (8015798 <mem_init+0x6c>)
 8015742:	681b      	ldr	r3, [r3, #0]
 8015744:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 801574c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	2200      	movs	r2, #0
 8015752:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	2200      	movs	r2, #0
 8015758:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801575a:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 801575e:	f7ff ff1f 	bl	80155a0 <ptr_to_mem>
 8015762:	4603      	mov	r3, r0
 8015764:	4a0d      	ldr	r2, [pc, #52]	@ (801579c <mem_init+0x70>)
 8015766:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8015768:	4b0c      	ldr	r3, [pc, #48]	@ (801579c <mem_init+0x70>)
 801576a:	681b      	ldr	r3, [r3, #0]
 801576c:	2201      	movs	r2, #1
 801576e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8015770:	4b0a      	ldr	r3, [pc, #40]	@ (801579c <mem_init+0x70>)
 8015772:	681b      	ldr	r3, [r3, #0]
 8015774:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8015778:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801577a:	4b08      	ldr	r3, [pc, #32]	@ (801579c <mem_init+0x70>)
 801577c:	681b      	ldr	r3, [r3, #0]
 801577e:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8015782:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8015784:	4b04      	ldr	r3, [pc, #16]	@ (8015798 <mem_init+0x6c>)
 8015786:	681b      	ldr	r3, [r3, #0]
 8015788:	4a05      	ldr	r2, [pc, #20]	@ (80157a0 <mem_init+0x74>)
 801578a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 801578c:	bf00      	nop
 801578e:	3708      	adds	r7, #8
 8015790:	46bd      	mov	sp, r7
 8015792:	bd80      	pop	{r7, pc}
 8015794:	200132b4 	.word	0x200132b4
 8015798:	20013908 	.word	0x20013908
 801579c:	2001390c 	.word	0x2001390c
 80157a0:	20013910 	.word	0x20013910

080157a4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80157a4:	b580      	push	{r7, lr}
 80157a6:	b086      	sub	sp, #24
 80157a8:	af00      	add	r7, sp, #0
 80157aa:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80157ac:	6878      	ldr	r0, [r7, #4]
 80157ae:	f7ff ff09 	bl	80155c4 <mem_to_ptr>
 80157b2:	4603      	mov	r3, r0
 80157b4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	881b      	ldrh	r3, [r3, #0]
 80157ba:	4618      	mov	r0, r3
 80157bc:	f7ff fef0 	bl	80155a0 <ptr_to_mem>
 80157c0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	885b      	ldrh	r3, [r3, #2]
 80157c6:	4618      	mov	r0, r3
 80157c8:	f7ff feea 	bl	80155a0 <ptr_to_mem>
 80157cc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	881b      	ldrh	r3, [r3, #0]
 80157d2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80157d6:	d818      	bhi.n	801580a <mem_link_valid+0x66>
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	885b      	ldrh	r3, [r3, #2]
 80157dc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80157e0:	d813      	bhi.n	801580a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80157e6:	8afa      	ldrh	r2, [r7, #22]
 80157e8:	429a      	cmp	r2, r3
 80157ea:	d004      	beq.n	80157f6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80157ec:	68fb      	ldr	r3, [r7, #12]
 80157ee:	881b      	ldrh	r3, [r3, #0]
 80157f0:	8afa      	ldrh	r2, [r7, #22]
 80157f2:	429a      	cmp	r2, r3
 80157f4:	d109      	bne.n	801580a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80157f6:	4b08      	ldr	r3, [pc, #32]	@ (8015818 <mem_link_valid+0x74>)
 80157f8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80157fa:	693a      	ldr	r2, [r7, #16]
 80157fc:	429a      	cmp	r2, r3
 80157fe:	d006      	beq.n	801580e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8015800:	693b      	ldr	r3, [r7, #16]
 8015802:	885b      	ldrh	r3, [r3, #2]
 8015804:	8afa      	ldrh	r2, [r7, #22]
 8015806:	429a      	cmp	r2, r3
 8015808:	d001      	beq.n	801580e <mem_link_valid+0x6a>
    return 0;
 801580a:	2300      	movs	r3, #0
 801580c:	e000      	b.n	8015810 <mem_link_valid+0x6c>
  }
  return 1;
 801580e:	2301      	movs	r3, #1
}
 8015810:	4618      	mov	r0, r3
 8015812:	3718      	adds	r7, #24
 8015814:	46bd      	mov	sp, r7
 8015816:	bd80      	pop	{r7, pc}
 8015818:	2001390c 	.word	0x2001390c

0801581c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801581c:	b580      	push	{r7, lr}
 801581e:	b084      	sub	sp, #16
 8015820:	af00      	add	r7, sp, #0
 8015822:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	2b00      	cmp	r3, #0
 8015828:	d04c      	beq.n	80158c4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	f003 0303 	and.w	r3, r3, #3
 8015830:	2b00      	cmp	r3, #0
 8015832:	d007      	beq.n	8015844 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8015834:	4b25      	ldr	r3, [pc, #148]	@ (80158cc <mem_free+0xb0>)
 8015836:	f240 2273 	movw	r2, #627	@ 0x273
 801583a:	4925      	ldr	r1, [pc, #148]	@ (80158d0 <mem_free+0xb4>)
 801583c:	4825      	ldr	r0, [pc, #148]	@ (80158d4 <mem_free+0xb8>)
 801583e:	f004 fdf5 	bl	801a42c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8015842:	e040      	b.n	80158c6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	3b08      	subs	r3, #8
 8015848:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801584a:	4b23      	ldr	r3, [pc, #140]	@ (80158d8 <mem_free+0xbc>)
 801584c:	681b      	ldr	r3, [r3, #0]
 801584e:	68fa      	ldr	r2, [r7, #12]
 8015850:	429a      	cmp	r2, r3
 8015852:	d306      	bcc.n	8015862 <mem_free+0x46>
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	f103 020c 	add.w	r2, r3, #12
 801585a:	4b20      	ldr	r3, [pc, #128]	@ (80158dc <mem_free+0xc0>)
 801585c:	681b      	ldr	r3, [r3, #0]
 801585e:	429a      	cmp	r2, r3
 8015860:	d907      	bls.n	8015872 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8015862:	4b1a      	ldr	r3, [pc, #104]	@ (80158cc <mem_free+0xb0>)
 8015864:	f240 227f 	movw	r2, #639	@ 0x27f
 8015868:	491d      	ldr	r1, [pc, #116]	@ (80158e0 <mem_free+0xc4>)
 801586a:	481a      	ldr	r0, [pc, #104]	@ (80158d4 <mem_free+0xb8>)
 801586c:	f004 fdde 	bl	801a42c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8015870:	e029      	b.n	80158c6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8015872:	68fb      	ldr	r3, [r7, #12]
 8015874:	791b      	ldrb	r3, [r3, #4]
 8015876:	2b00      	cmp	r3, #0
 8015878:	d107      	bne.n	801588a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801587a:	4b14      	ldr	r3, [pc, #80]	@ (80158cc <mem_free+0xb0>)
 801587c:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8015880:	4918      	ldr	r1, [pc, #96]	@ (80158e4 <mem_free+0xc8>)
 8015882:	4814      	ldr	r0, [pc, #80]	@ (80158d4 <mem_free+0xb8>)
 8015884:	f004 fdd2 	bl	801a42c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8015888:	e01d      	b.n	80158c6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 801588a:	68f8      	ldr	r0, [r7, #12]
 801588c:	f7ff ff8a 	bl	80157a4 <mem_link_valid>
 8015890:	4603      	mov	r3, r0
 8015892:	2b00      	cmp	r3, #0
 8015894:	d107      	bne.n	80158a6 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8015896:	4b0d      	ldr	r3, [pc, #52]	@ (80158cc <mem_free+0xb0>)
 8015898:	f240 2295 	movw	r2, #661	@ 0x295
 801589c:	4912      	ldr	r1, [pc, #72]	@ (80158e8 <mem_free+0xcc>)
 801589e:	480d      	ldr	r0, [pc, #52]	@ (80158d4 <mem_free+0xb8>)
 80158a0:	f004 fdc4 	bl	801a42c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80158a4:	e00f      	b.n	80158c6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	2200      	movs	r2, #0
 80158aa:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80158ac:	4b0f      	ldr	r3, [pc, #60]	@ (80158ec <mem_free+0xd0>)
 80158ae:	681b      	ldr	r3, [r3, #0]
 80158b0:	68fa      	ldr	r2, [r7, #12]
 80158b2:	429a      	cmp	r2, r3
 80158b4:	d202      	bcs.n	80158bc <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80158b6:	4a0d      	ldr	r2, [pc, #52]	@ (80158ec <mem_free+0xd0>)
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80158bc:	68f8      	ldr	r0, [r7, #12]
 80158be:	f7ff fe93 	bl	80155e8 <plug_holes>
 80158c2:	e000      	b.n	80158c6 <mem_free+0xaa>
    return;
 80158c4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80158c6:	3710      	adds	r7, #16
 80158c8:	46bd      	mov	sp, r7
 80158ca:	bd80      	pop	{r7, pc}
 80158cc:	0801b164 	.word	0x0801b164
 80158d0:	0801b238 	.word	0x0801b238
 80158d4:	0801b1ac 	.word	0x0801b1ac
 80158d8:	20013908 	.word	0x20013908
 80158dc:	2001390c 	.word	0x2001390c
 80158e0:	0801b25c 	.word	0x0801b25c
 80158e4:	0801b278 	.word	0x0801b278
 80158e8:	0801b2a0 	.word	0x0801b2a0
 80158ec:	20013910 	.word	0x20013910

080158f0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80158f0:	b580      	push	{r7, lr}
 80158f2:	b088      	sub	sp, #32
 80158f4:	af00      	add	r7, sp, #0
 80158f6:	6078      	str	r0, [r7, #4]
 80158f8:	460b      	mov	r3, r1
 80158fa:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80158fc:	887b      	ldrh	r3, [r7, #2]
 80158fe:	3303      	adds	r3, #3
 8015900:	b29b      	uxth	r3, r3
 8015902:	f023 0303 	bic.w	r3, r3, #3
 8015906:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8015908:	8bfb      	ldrh	r3, [r7, #30]
 801590a:	2b0b      	cmp	r3, #11
 801590c:	d801      	bhi.n	8015912 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801590e:	230c      	movs	r3, #12
 8015910:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8015912:	8bfb      	ldrh	r3, [r7, #30]
 8015914:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8015918:	d803      	bhi.n	8015922 <mem_trim+0x32>
 801591a:	8bfa      	ldrh	r2, [r7, #30]
 801591c:	887b      	ldrh	r3, [r7, #2]
 801591e:	429a      	cmp	r2, r3
 8015920:	d201      	bcs.n	8015926 <mem_trim+0x36>
    return NULL;
 8015922:	2300      	movs	r3, #0
 8015924:	e0cc      	b.n	8015ac0 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8015926:	4b68      	ldr	r3, [pc, #416]	@ (8015ac8 <mem_trim+0x1d8>)
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	687a      	ldr	r2, [r7, #4]
 801592c:	429a      	cmp	r2, r3
 801592e:	d304      	bcc.n	801593a <mem_trim+0x4a>
 8015930:	4b66      	ldr	r3, [pc, #408]	@ (8015acc <mem_trim+0x1dc>)
 8015932:	681b      	ldr	r3, [r3, #0]
 8015934:	687a      	ldr	r2, [r7, #4]
 8015936:	429a      	cmp	r2, r3
 8015938:	d306      	bcc.n	8015948 <mem_trim+0x58>
 801593a:	4b65      	ldr	r3, [pc, #404]	@ (8015ad0 <mem_trim+0x1e0>)
 801593c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8015940:	4964      	ldr	r1, [pc, #400]	@ (8015ad4 <mem_trim+0x1e4>)
 8015942:	4865      	ldr	r0, [pc, #404]	@ (8015ad8 <mem_trim+0x1e8>)
 8015944:	f004 fd72 	bl	801a42c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8015948:	4b5f      	ldr	r3, [pc, #380]	@ (8015ac8 <mem_trim+0x1d8>)
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	687a      	ldr	r2, [r7, #4]
 801594e:	429a      	cmp	r2, r3
 8015950:	d304      	bcc.n	801595c <mem_trim+0x6c>
 8015952:	4b5e      	ldr	r3, [pc, #376]	@ (8015acc <mem_trim+0x1dc>)
 8015954:	681b      	ldr	r3, [r3, #0]
 8015956:	687a      	ldr	r2, [r7, #4]
 8015958:	429a      	cmp	r2, r3
 801595a:	d301      	bcc.n	8015960 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	e0af      	b.n	8015ac0 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	3b08      	subs	r3, #8
 8015964:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8015966:	69b8      	ldr	r0, [r7, #24]
 8015968:	f7ff fe2c 	bl	80155c4 <mem_to_ptr>
 801596c:	4603      	mov	r3, r0
 801596e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8015970:	69bb      	ldr	r3, [r7, #24]
 8015972:	881a      	ldrh	r2, [r3, #0]
 8015974:	8afb      	ldrh	r3, [r7, #22]
 8015976:	1ad3      	subs	r3, r2, r3
 8015978:	b29b      	uxth	r3, r3
 801597a:	3b08      	subs	r3, #8
 801597c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801597e:	8bfa      	ldrh	r2, [r7, #30]
 8015980:	8abb      	ldrh	r3, [r7, #20]
 8015982:	429a      	cmp	r2, r3
 8015984:	d906      	bls.n	8015994 <mem_trim+0xa4>
 8015986:	4b52      	ldr	r3, [pc, #328]	@ (8015ad0 <mem_trim+0x1e0>)
 8015988:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 801598c:	4953      	ldr	r1, [pc, #332]	@ (8015adc <mem_trim+0x1ec>)
 801598e:	4852      	ldr	r0, [pc, #328]	@ (8015ad8 <mem_trim+0x1e8>)
 8015990:	f004 fd4c 	bl	801a42c <iprintf>
  if (newsize > size) {
 8015994:	8bfa      	ldrh	r2, [r7, #30]
 8015996:	8abb      	ldrh	r3, [r7, #20]
 8015998:	429a      	cmp	r2, r3
 801599a:	d901      	bls.n	80159a0 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 801599c:	2300      	movs	r3, #0
 801599e:	e08f      	b.n	8015ac0 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80159a0:	8bfa      	ldrh	r2, [r7, #30]
 80159a2:	8abb      	ldrh	r3, [r7, #20]
 80159a4:	429a      	cmp	r2, r3
 80159a6:	d101      	bne.n	80159ac <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	e089      	b.n	8015ac0 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80159ac:	69bb      	ldr	r3, [r7, #24]
 80159ae:	881b      	ldrh	r3, [r3, #0]
 80159b0:	4618      	mov	r0, r3
 80159b2:	f7ff fdf5 	bl	80155a0 <ptr_to_mem>
 80159b6:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80159b8:	693b      	ldr	r3, [r7, #16]
 80159ba:	791b      	ldrb	r3, [r3, #4]
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d13f      	bne.n	8015a40 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80159c0:	69bb      	ldr	r3, [r7, #24]
 80159c2:	881b      	ldrh	r3, [r3, #0]
 80159c4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80159c8:	d106      	bne.n	80159d8 <mem_trim+0xe8>
 80159ca:	4b41      	ldr	r3, [pc, #260]	@ (8015ad0 <mem_trim+0x1e0>)
 80159cc:	f240 22f5 	movw	r2, #757	@ 0x2f5
 80159d0:	4943      	ldr	r1, [pc, #268]	@ (8015ae0 <mem_trim+0x1f0>)
 80159d2:	4841      	ldr	r0, [pc, #260]	@ (8015ad8 <mem_trim+0x1e8>)
 80159d4:	f004 fd2a 	bl	801a42c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80159d8:	693b      	ldr	r3, [r7, #16]
 80159da:	881b      	ldrh	r3, [r3, #0]
 80159dc:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80159de:	8afa      	ldrh	r2, [r7, #22]
 80159e0:	8bfb      	ldrh	r3, [r7, #30]
 80159e2:	4413      	add	r3, r2
 80159e4:	b29b      	uxth	r3, r3
 80159e6:	3308      	adds	r3, #8
 80159e8:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80159ea:	4b3e      	ldr	r3, [pc, #248]	@ (8015ae4 <mem_trim+0x1f4>)
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	693a      	ldr	r2, [r7, #16]
 80159f0:	429a      	cmp	r2, r3
 80159f2:	d106      	bne.n	8015a02 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80159f4:	89fb      	ldrh	r3, [r7, #14]
 80159f6:	4618      	mov	r0, r3
 80159f8:	f7ff fdd2 	bl	80155a0 <ptr_to_mem>
 80159fc:	4603      	mov	r3, r0
 80159fe:	4a39      	ldr	r2, [pc, #228]	@ (8015ae4 <mem_trim+0x1f4>)
 8015a00:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8015a02:	89fb      	ldrh	r3, [r7, #14]
 8015a04:	4618      	mov	r0, r3
 8015a06:	f7ff fdcb 	bl	80155a0 <ptr_to_mem>
 8015a0a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8015a0c:	693b      	ldr	r3, [r7, #16]
 8015a0e:	2200      	movs	r2, #0
 8015a10:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8015a12:	693b      	ldr	r3, [r7, #16]
 8015a14:	89ba      	ldrh	r2, [r7, #12]
 8015a16:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8015a18:	693b      	ldr	r3, [r7, #16]
 8015a1a:	8afa      	ldrh	r2, [r7, #22]
 8015a1c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8015a1e:	69bb      	ldr	r3, [r7, #24]
 8015a20:	89fa      	ldrh	r2, [r7, #14]
 8015a22:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8015a24:	693b      	ldr	r3, [r7, #16]
 8015a26:	881b      	ldrh	r3, [r3, #0]
 8015a28:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8015a2c:	d047      	beq.n	8015abe <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8015a2e:	693b      	ldr	r3, [r7, #16]
 8015a30:	881b      	ldrh	r3, [r3, #0]
 8015a32:	4618      	mov	r0, r3
 8015a34:	f7ff fdb4 	bl	80155a0 <ptr_to_mem>
 8015a38:	4602      	mov	r2, r0
 8015a3a:	89fb      	ldrh	r3, [r7, #14]
 8015a3c:	8053      	strh	r3, [r2, #2]
 8015a3e:	e03e      	b.n	8015abe <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8015a40:	8bfb      	ldrh	r3, [r7, #30]
 8015a42:	f103 0214 	add.w	r2, r3, #20
 8015a46:	8abb      	ldrh	r3, [r7, #20]
 8015a48:	429a      	cmp	r2, r3
 8015a4a:	d838      	bhi.n	8015abe <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8015a4c:	8afa      	ldrh	r2, [r7, #22]
 8015a4e:	8bfb      	ldrh	r3, [r7, #30]
 8015a50:	4413      	add	r3, r2
 8015a52:	b29b      	uxth	r3, r3
 8015a54:	3308      	adds	r3, #8
 8015a56:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8015a58:	69bb      	ldr	r3, [r7, #24]
 8015a5a:	881b      	ldrh	r3, [r3, #0]
 8015a5c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8015a60:	d106      	bne.n	8015a70 <mem_trim+0x180>
 8015a62:	4b1b      	ldr	r3, [pc, #108]	@ (8015ad0 <mem_trim+0x1e0>)
 8015a64:	f240 3216 	movw	r2, #790	@ 0x316
 8015a68:	491d      	ldr	r1, [pc, #116]	@ (8015ae0 <mem_trim+0x1f0>)
 8015a6a:	481b      	ldr	r0, [pc, #108]	@ (8015ad8 <mem_trim+0x1e8>)
 8015a6c:	f004 fcde 	bl	801a42c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8015a70:	89fb      	ldrh	r3, [r7, #14]
 8015a72:	4618      	mov	r0, r3
 8015a74:	f7ff fd94 	bl	80155a0 <ptr_to_mem>
 8015a78:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8015a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8015ae4 <mem_trim+0x1f4>)
 8015a7c:	681b      	ldr	r3, [r3, #0]
 8015a7e:	693a      	ldr	r2, [r7, #16]
 8015a80:	429a      	cmp	r2, r3
 8015a82:	d202      	bcs.n	8015a8a <mem_trim+0x19a>
      lfree = mem2;
 8015a84:	4a17      	ldr	r2, [pc, #92]	@ (8015ae4 <mem_trim+0x1f4>)
 8015a86:	693b      	ldr	r3, [r7, #16]
 8015a88:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8015a8a:	693b      	ldr	r3, [r7, #16]
 8015a8c:	2200      	movs	r2, #0
 8015a8e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8015a90:	69bb      	ldr	r3, [r7, #24]
 8015a92:	881a      	ldrh	r2, [r3, #0]
 8015a94:	693b      	ldr	r3, [r7, #16]
 8015a96:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8015a98:	693b      	ldr	r3, [r7, #16]
 8015a9a:	8afa      	ldrh	r2, [r7, #22]
 8015a9c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8015a9e:	69bb      	ldr	r3, [r7, #24]
 8015aa0:	89fa      	ldrh	r2, [r7, #14]
 8015aa2:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8015aa4:	693b      	ldr	r3, [r7, #16]
 8015aa6:	881b      	ldrh	r3, [r3, #0]
 8015aa8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8015aac:	d007      	beq.n	8015abe <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8015aae:	693b      	ldr	r3, [r7, #16]
 8015ab0:	881b      	ldrh	r3, [r3, #0]
 8015ab2:	4618      	mov	r0, r3
 8015ab4:	f7ff fd74 	bl	80155a0 <ptr_to_mem>
 8015ab8:	4602      	mov	r2, r0
 8015aba:	89fb      	ldrh	r3, [r7, #14]
 8015abc:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8015abe:	687b      	ldr	r3, [r7, #4]
}
 8015ac0:	4618      	mov	r0, r3
 8015ac2:	3720      	adds	r7, #32
 8015ac4:	46bd      	mov	sp, r7
 8015ac6:	bd80      	pop	{r7, pc}
 8015ac8:	20013908 	.word	0x20013908
 8015acc:	2001390c 	.word	0x2001390c
 8015ad0:	0801b164 	.word	0x0801b164
 8015ad4:	0801b2d4 	.word	0x0801b2d4
 8015ad8:	0801b1ac 	.word	0x0801b1ac
 8015adc:	0801b2ec 	.word	0x0801b2ec
 8015ae0:	0801b30c 	.word	0x0801b30c
 8015ae4:	20013910 	.word	0x20013910

08015ae8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8015ae8:	b580      	push	{r7, lr}
 8015aea:	b088      	sub	sp, #32
 8015aec:	af00      	add	r7, sp, #0
 8015aee:	4603      	mov	r3, r0
 8015af0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8015af2:	88fb      	ldrh	r3, [r7, #6]
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d101      	bne.n	8015afc <mem_malloc+0x14>
    return NULL;
 8015af8:	2300      	movs	r3, #0
 8015afa:	e0d9      	b.n	8015cb0 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8015afc:	88fb      	ldrh	r3, [r7, #6]
 8015afe:	3303      	adds	r3, #3
 8015b00:	b29b      	uxth	r3, r3
 8015b02:	f023 0303 	bic.w	r3, r3, #3
 8015b06:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8015b08:	8bbb      	ldrh	r3, [r7, #28]
 8015b0a:	2b0b      	cmp	r3, #11
 8015b0c:	d801      	bhi.n	8015b12 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8015b0e:	230c      	movs	r3, #12
 8015b10:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8015b12:	8bbb      	ldrh	r3, [r7, #28]
 8015b14:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8015b18:	d803      	bhi.n	8015b22 <mem_malloc+0x3a>
 8015b1a:	8bba      	ldrh	r2, [r7, #28]
 8015b1c:	88fb      	ldrh	r3, [r7, #6]
 8015b1e:	429a      	cmp	r2, r3
 8015b20:	d201      	bcs.n	8015b26 <mem_malloc+0x3e>
    return NULL;
 8015b22:	2300      	movs	r3, #0
 8015b24:	e0c4      	b.n	8015cb0 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8015b26:	4b64      	ldr	r3, [pc, #400]	@ (8015cb8 <mem_malloc+0x1d0>)
 8015b28:	681b      	ldr	r3, [r3, #0]
 8015b2a:	4618      	mov	r0, r3
 8015b2c:	f7ff fd4a 	bl	80155c4 <mem_to_ptr>
 8015b30:	4603      	mov	r3, r0
 8015b32:	83fb      	strh	r3, [r7, #30]
 8015b34:	e0b4      	b.n	8015ca0 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8015b36:	8bfb      	ldrh	r3, [r7, #30]
 8015b38:	4618      	mov	r0, r3
 8015b3a:	f7ff fd31 	bl	80155a0 <ptr_to_mem>
 8015b3e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8015b40:	697b      	ldr	r3, [r7, #20]
 8015b42:	791b      	ldrb	r3, [r3, #4]
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	f040 80a4 	bne.w	8015c92 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8015b4a:	697b      	ldr	r3, [r7, #20]
 8015b4c:	881b      	ldrh	r3, [r3, #0]
 8015b4e:	461a      	mov	r2, r3
 8015b50:	8bfb      	ldrh	r3, [r7, #30]
 8015b52:	1ad3      	subs	r3, r2, r3
 8015b54:	f1a3 0208 	sub.w	r2, r3, #8
 8015b58:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8015b5a:	429a      	cmp	r2, r3
 8015b5c:	f0c0 8099 	bcc.w	8015c92 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8015b60:	697b      	ldr	r3, [r7, #20]
 8015b62:	881b      	ldrh	r3, [r3, #0]
 8015b64:	461a      	mov	r2, r3
 8015b66:	8bfb      	ldrh	r3, [r7, #30]
 8015b68:	1ad3      	subs	r3, r2, r3
 8015b6a:	f1a3 0208 	sub.w	r2, r3, #8
 8015b6e:	8bbb      	ldrh	r3, [r7, #28]
 8015b70:	3314      	adds	r3, #20
 8015b72:	429a      	cmp	r2, r3
 8015b74:	d333      	bcc.n	8015bde <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8015b76:	8bfa      	ldrh	r2, [r7, #30]
 8015b78:	8bbb      	ldrh	r3, [r7, #28]
 8015b7a:	4413      	add	r3, r2
 8015b7c:	b29b      	uxth	r3, r3
 8015b7e:	3308      	adds	r3, #8
 8015b80:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8015b82:	8a7b      	ldrh	r3, [r7, #18]
 8015b84:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8015b88:	d106      	bne.n	8015b98 <mem_malloc+0xb0>
 8015b8a:	4b4c      	ldr	r3, [pc, #304]	@ (8015cbc <mem_malloc+0x1d4>)
 8015b8c:	f240 3287 	movw	r2, #903	@ 0x387
 8015b90:	494b      	ldr	r1, [pc, #300]	@ (8015cc0 <mem_malloc+0x1d8>)
 8015b92:	484c      	ldr	r0, [pc, #304]	@ (8015cc4 <mem_malloc+0x1dc>)
 8015b94:	f004 fc4a 	bl	801a42c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8015b98:	8a7b      	ldrh	r3, [r7, #18]
 8015b9a:	4618      	mov	r0, r3
 8015b9c:	f7ff fd00 	bl	80155a0 <ptr_to_mem>
 8015ba0:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8015ba2:	68fb      	ldr	r3, [r7, #12]
 8015ba4:	2200      	movs	r2, #0
 8015ba6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8015ba8:	697b      	ldr	r3, [r7, #20]
 8015baa:	881a      	ldrh	r2, [r3, #0]
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8015bb0:	68fb      	ldr	r3, [r7, #12]
 8015bb2:	8bfa      	ldrh	r2, [r7, #30]
 8015bb4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8015bb6:	697b      	ldr	r3, [r7, #20]
 8015bb8:	8a7a      	ldrh	r2, [r7, #18]
 8015bba:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8015bbc:	697b      	ldr	r3, [r7, #20]
 8015bbe:	2201      	movs	r2, #1
 8015bc0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8015bc2:	68fb      	ldr	r3, [r7, #12]
 8015bc4:	881b      	ldrh	r3, [r3, #0]
 8015bc6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8015bca:	d00b      	beq.n	8015be4 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8015bcc:	68fb      	ldr	r3, [r7, #12]
 8015bce:	881b      	ldrh	r3, [r3, #0]
 8015bd0:	4618      	mov	r0, r3
 8015bd2:	f7ff fce5 	bl	80155a0 <ptr_to_mem>
 8015bd6:	4602      	mov	r2, r0
 8015bd8:	8a7b      	ldrh	r3, [r7, #18]
 8015bda:	8053      	strh	r3, [r2, #2]
 8015bdc:	e002      	b.n	8015be4 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8015bde:	697b      	ldr	r3, [r7, #20]
 8015be0:	2201      	movs	r2, #1
 8015be2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8015be4:	4b34      	ldr	r3, [pc, #208]	@ (8015cb8 <mem_malloc+0x1d0>)
 8015be6:	681b      	ldr	r3, [r3, #0]
 8015be8:	697a      	ldr	r2, [r7, #20]
 8015bea:	429a      	cmp	r2, r3
 8015bec:	d127      	bne.n	8015c3e <mem_malloc+0x156>
          struct mem *cur = lfree;
 8015bee:	4b32      	ldr	r3, [pc, #200]	@ (8015cb8 <mem_malloc+0x1d0>)
 8015bf0:	681b      	ldr	r3, [r3, #0]
 8015bf2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8015bf4:	e005      	b.n	8015c02 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8015bf6:	69bb      	ldr	r3, [r7, #24]
 8015bf8:	881b      	ldrh	r3, [r3, #0]
 8015bfa:	4618      	mov	r0, r3
 8015bfc:	f7ff fcd0 	bl	80155a0 <ptr_to_mem>
 8015c00:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8015c02:	69bb      	ldr	r3, [r7, #24]
 8015c04:	791b      	ldrb	r3, [r3, #4]
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	d004      	beq.n	8015c14 <mem_malloc+0x12c>
 8015c0a:	4b2f      	ldr	r3, [pc, #188]	@ (8015cc8 <mem_malloc+0x1e0>)
 8015c0c:	681b      	ldr	r3, [r3, #0]
 8015c0e:	69ba      	ldr	r2, [r7, #24]
 8015c10:	429a      	cmp	r2, r3
 8015c12:	d1f0      	bne.n	8015bf6 <mem_malloc+0x10e>
          }
          lfree = cur;
 8015c14:	4a28      	ldr	r2, [pc, #160]	@ (8015cb8 <mem_malloc+0x1d0>)
 8015c16:	69bb      	ldr	r3, [r7, #24]
 8015c18:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8015c1a:	4b27      	ldr	r3, [pc, #156]	@ (8015cb8 <mem_malloc+0x1d0>)
 8015c1c:	681a      	ldr	r2, [r3, #0]
 8015c1e:	4b2a      	ldr	r3, [pc, #168]	@ (8015cc8 <mem_malloc+0x1e0>)
 8015c20:	681b      	ldr	r3, [r3, #0]
 8015c22:	429a      	cmp	r2, r3
 8015c24:	d00b      	beq.n	8015c3e <mem_malloc+0x156>
 8015c26:	4b24      	ldr	r3, [pc, #144]	@ (8015cb8 <mem_malloc+0x1d0>)
 8015c28:	681b      	ldr	r3, [r3, #0]
 8015c2a:	791b      	ldrb	r3, [r3, #4]
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d006      	beq.n	8015c3e <mem_malloc+0x156>
 8015c30:	4b22      	ldr	r3, [pc, #136]	@ (8015cbc <mem_malloc+0x1d4>)
 8015c32:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8015c36:	4925      	ldr	r1, [pc, #148]	@ (8015ccc <mem_malloc+0x1e4>)
 8015c38:	4822      	ldr	r0, [pc, #136]	@ (8015cc4 <mem_malloc+0x1dc>)
 8015c3a:	f004 fbf7 	bl	801a42c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8015c3e:	8bba      	ldrh	r2, [r7, #28]
 8015c40:	697b      	ldr	r3, [r7, #20]
 8015c42:	4413      	add	r3, r2
 8015c44:	3308      	adds	r3, #8
 8015c46:	4a20      	ldr	r2, [pc, #128]	@ (8015cc8 <mem_malloc+0x1e0>)
 8015c48:	6812      	ldr	r2, [r2, #0]
 8015c4a:	4293      	cmp	r3, r2
 8015c4c:	d906      	bls.n	8015c5c <mem_malloc+0x174>
 8015c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8015cbc <mem_malloc+0x1d4>)
 8015c50:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8015c54:	491e      	ldr	r1, [pc, #120]	@ (8015cd0 <mem_malloc+0x1e8>)
 8015c56:	481b      	ldr	r0, [pc, #108]	@ (8015cc4 <mem_malloc+0x1dc>)
 8015c58:	f004 fbe8 	bl	801a42c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8015c5c:	697b      	ldr	r3, [r7, #20]
 8015c5e:	f003 0303 	and.w	r3, r3, #3
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d006      	beq.n	8015c74 <mem_malloc+0x18c>
 8015c66:	4b15      	ldr	r3, [pc, #84]	@ (8015cbc <mem_malloc+0x1d4>)
 8015c68:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8015c6c:	4919      	ldr	r1, [pc, #100]	@ (8015cd4 <mem_malloc+0x1ec>)
 8015c6e:	4815      	ldr	r0, [pc, #84]	@ (8015cc4 <mem_malloc+0x1dc>)
 8015c70:	f004 fbdc 	bl	801a42c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8015c74:	697b      	ldr	r3, [r7, #20]
 8015c76:	f003 0303 	and.w	r3, r3, #3
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d006      	beq.n	8015c8c <mem_malloc+0x1a4>
 8015c7e:	4b0f      	ldr	r3, [pc, #60]	@ (8015cbc <mem_malloc+0x1d4>)
 8015c80:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8015c84:	4914      	ldr	r1, [pc, #80]	@ (8015cd8 <mem_malloc+0x1f0>)
 8015c86:	480f      	ldr	r0, [pc, #60]	@ (8015cc4 <mem_malloc+0x1dc>)
 8015c88:	f004 fbd0 	bl	801a42c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8015c8c:	697b      	ldr	r3, [r7, #20]
 8015c8e:	3308      	adds	r3, #8
 8015c90:	e00e      	b.n	8015cb0 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8015c92:	8bfb      	ldrh	r3, [r7, #30]
 8015c94:	4618      	mov	r0, r3
 8015c96:	f7ff fc83 	bl	80155a0 <ptr_to_mem>
 8015c9a:	4603      	mov	r3, r0
 8015c9c:	881b      	ldrh	r3, [r3, #0]
 8015c9e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8015ca0:	8bfa      	ldrh	r2, [r7, #30]
 8015ca2:	8bbb      	ldrh	r3, [r7, #28]
 8015ca4:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8015ca8:	429a      	cmp	r2, r3
 8015caa:	f4ff af44 	bcc.w	8015b36 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8015cae:	2300      	movs	r3, #0
}
 8015cb0:	4618      	mov	r0, r3
 8015cb2:	3720      	adds	r7, #32
 8015cb4:	46bd      	mov	sp, r7
 8015cb6:	bd80      	pop	{r7, pc}
 8015cb8:	20013910 	.word	0x20013910
 8015cbc:	0801b164 	.word	0x0801b164
 8015cc0:	0801b30c 	.word	0x0801b30c
 8015cc4:	0801b1ac 	.word	0x0801b1ac
 8015cc8:	2001390c 	.word	0x2001390c
 8015ccc:	0801b320 	.word	0x0801b320
 8015cd0:	0801b33c 	.word	0x0801b33c
 8015cd4:	0801b36c 	.word	0x0801b36c
 8015cd8:	0801b39c 	.word	0x0801b39c

08015cdc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8015cdc:	b480      	push	{r7}
 8015cde:	b085      	sub	sp, #20
 8015ce0:	af00      	add	r7, sp, #0
 8015ce2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	689b      	ldr	r3, [r3, #8]
 8015ce8:	2200      	movs	r2, #0
 8015cea:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	685b      	ldr	r3, [r3, #4]
 8015cf0:	3303      	adds	r3, #3
 8015cf2:	f023 0303 	bic.w	r3, r3, #3
 8015cf6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8015cf8:	2300      	movs	r3, #0
 8015cfa:	60fb      	str	r3, [r7, #12]
 8015cfc:	e011      	b.n	8015d22 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	689b      	ldr	r3, [r3, #8]
 8015d02:	681a      	ldr	r2, [r3, #0]
 8015d04:	68bb      	ldr	r3, [r7, #8]
 8015d06:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	689b      	ldr	r3, [r3, #8]
 8015d0c:	68ba      	ldr	r2, [r7, #8]
 8015d0e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	881b      	ldrh	r3, [r3, #0]
 8015d14:	461a      	mov	r2, r3
 8015d16:	68bb      	ldr	r3, [r7, #8]
 8015d18:	4413      	add	r3, r2
 8015d1a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	3301      	adds	r3, #1
 8015d20:	60fb      	str	r3, [r7, #12]
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	885b      	ldrh	r3, [r3, #2]
 8015d26:	461a      	mov	r2, r3
 8015d28:	68fb      	ldr	r3, [r7, #12]
 8015d2a:	4293      	cmp	r3, r2
 8015d2c:	dbe7      	blt.n	8015cfe <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8015d2e:	bf00      	nop
 8015d30:	bf00      	nop
 8015d32:	3714      	adds	r7, #20
 8015d34:	46bd      	mov	sp, r7
 8015d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d3a:	4770      	bx	lr

08015d3c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8015d3c:	b580      	push	{r7, lr}
 8015d3e:	b082      	sub	sp, #8
 8015d40:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8015d42:	2300      	movs	r3, #0
 8015d44:	80fb      	strh	r3, [r7, #6]
 8015d46:	e009      	b.n	8015d5c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8015d48:	88fb      	ldrh	r3, [r7, #6]
 8015d4a:	4a08      	ldr	r2, [pc, #32]	@ (8015d6c <memp_init+0x30>)
 8015d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015d50:	4618      	mov	r0, r3
 8015d52:	f7ff ffc3 	bl	8015cdc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8015d56:	88fb      	ldrh	r3, [r7, #6]
 8015d58:	3301      	adds	r3, #1
 8015d5a:	80fb      	strh	r3, [r7, #6]
 8015d5c:	88fb      	ldrh	r3, [r7, #6]
 8015d5e:	2b05      	cmp	r3, #5
 8015d60:	d9f2      	bls.n	8015d48 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8015d62:	bf00      	nop
 8015d64:	bf00      	nop
 8015d66:	3708      	adds	r7, #8
 8015d68:	46bd      	mov	sp, r7
 8015d6a:	bd80      	pop	{r7, pc}
 8015d6c:	0801c6cc 	.word	0x0801c6cc

08015d70 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8015d70:	b580      	push	{r7, lr}
 8015d72:	b084      	sub	sp, #16
 8015d74:	af00      	add	r7, sp, #0
 8015d76:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	689b      	ldr	r3, [r3, #8]
 8015d7c:	681b      	ldr	r3, [r3, #0]
 8015d7e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8015d80:	68fb      	ldr	r3, [r7, #12]
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d012      	beq.n	8015dac <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	689b      	ldr	r3, [r3, #8]
 8015d8a:	68fa      	ldr	r2, [r7, #12]
 8015d8c:	6812      	ldr	r2, [r2, #0]
 8015d8e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8015d90:	68fb      	ldr	r3, [r7, #12]
 8015d92:	f003 0303 	and.w	r3, r3, #3
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d006      	beq.n	8015da8 <do_memp_malloc_pool+0x38>
 8015d9a:	4b07      	ldr	r3, [pc, #28]	@ (8015db8 <do_memp_malloc_pool+0x48>)
 8015d9c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8015da0:	4906      	ldr	r1, [pc, #24]	@ (8015dbc <do_memp_malloc_pool+0x4c>)
 8015da2:	4807      	ldr	r0, [pc, #28]	@ (8015dc0 <do_memp_malloc_pool+0x50>)
 8015da4:	f004 fb42 	bl	801a42c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8015da8:	68fb      	ldr	r3, [r7, #12]
 8015daa:	e000      	b.n	8015dae <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8015dac:	2300      	movs	r3, #0
}
 8015dae:	4618      	mov	r0, r3
 8015db0:	3710      	adds	r7, #16
 8015db2:	46bd      	mov	sp, r7
 8015db4:	bd80      	pop	{r7, pc}
 8015db6:	bf00      	nop
 8015db8:	0801b3c0 	.word	0x0801b3c0
 8015dbc:	0801b3f0 	.word	0x0801b3f0
 8015dc0:	0801b414 	.word	0x0801b414

08015dc4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8015dc4:	b580      	push	{r7, lr}
 8015dc6:	b084      	sub	sp, #16
 8015dc8:	af00      	add	r7, sp, #0
 8015dca:	4603      	mov	r3, r0
 8015dcc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8015dce:	79fb      	ldrb	r3, [r7, #7]
 8015dd0:	2b05      	cmp	r3, #5
 8015dd2:	d908      	bls.n	8015de6 <memp_malloc+0x22>
 8015dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8015e00 <memp_malloc+0x3c>)
 8015dd6:	f240 1257 	movw	r2, #343	@ 0x157
 8015dda:	490a      	ldr	r1, [pc, #40]	@ (8015e04 <memp_malloc+0x40>)
 8015ddc:	480a      	ldr	r0, [pc, #40]	@ (8015e08 <memp_malloc+0x44>)
 8015dde:	f004 fb25 	bl	801a42c <iprintf>
 8015de2:	2300      	movs	r3, #0
 8015de4:	e008      	b.n	8015df8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8015de6:	79fb      	ldrb	r3, [r7, #7]
 8015de8:	4a08      	ldr	r2, [pc, #32]	@ (8015e0c <memp_malloc+0x48>)
 8015dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015dee:	4618      	mov	r0, r3
 8015df0:	f7ff ffbe 	bl	8015d70 <do_memp_malloc_pool>
 8015df4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8015df6:	68fb      	ldr	r3, [r7, #12]
}
 8015df8:	4618      	mov	r0, r3
 8015dfa:	3710      	adds	r7, #16
 8015dfc:	46bd      	mov	sp, r7
 8015dfe:	bd80      	pop	{r7, pc}
 8015e00:	0801b3c0 	.word	0x0801b3c0
 8015e04:	0801b450 	.word	0x0801b450
 8015e08:	0801b414 	.word	0x0801b414
 8015e0c:	0801c6cc 	.word	0x0801c6cc

08015e10 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8015e10:	b580      	push	{r7, lr}
 8015e12:	b084      	sub	sp, #16
 8015e14:	af00      	add	r7, sp, #0
 8015e16:	6078      	str	r0, [r7, #4]
 8015e18:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8015e1a:	683b      	ldr	r3, [r7, #0]
 8015e1c:	f003 0303 	and.w	r3, r3, #3
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d006      	beq.n	8015e32 <do_memp_free_pool+0x22>
 8015e24:	4b0a      	ldr	r3, [pc, #40]	@ (8015e50 <do_memp_free_pool+0x40>)
 8015e26:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8015e2a:	490a      	ldr	r1, [pc, #40]	@ (8015e54 <do_memp_free_pool+0x44>)
 8015e2c:	480a      	ldr	r0, [pc, #40]	@ (8015e58 <do_memp_free_pool+0x48>)
 8015e2e:	f004 fafd 	bl	801a42c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8015e32:	683b      	ldr	r3, [r7, #0]
 8015e34:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	689b      	ldr	r3, [r3, #8]
 8015e3a:	681a      	ldr	r2, [r3, #0]
 8015e3c:	68fb      	ldr	r3, [r7, #12]
 8015e3e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	689b      	ldr	r3, [r3, #8]
 8015e44:	68fa      	ldr	r2, [r7, #12]
 8015e46:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8015e48:	bf00      	nop
 8015e4a:	3710      	adds	r7, #16
 8015e4c:	46bd      	mov	sp, r7
 8015e4e:	bd80      	pop	{r7, pc}
 8015e50:	0801b3c0 	.word	0x0801b3c0
 8015e54:	0801b470 	.word	0x0801b470
 8015e58:	0801b414 	.word	0x0801b414

08015e5c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8015e5c:	b580      	push	{r7, lr}
 8015e5e:	b082      	sub	sp, #8
 8015e60:	af00      	add	r7, sp, #0
 8015e62:	4603      	mov	r3, r0
 8015e64:	6039      	str	r1, [r7, #0]
 8015e66:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8015e68:	79fb      	ldrb	r3, [r7, #7]
 8015e6a:	2b05      	cmp	r3, #5
 8015e6c:	d907      	bls.n	8015e7e <memp_free+0x22>
 8015e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8015ea0 <memp_free+0x44>)
 8015e70:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8015e74:	490b      	ldr	r1, [pc, #44]	@ (8015ea4 <memp_free+0x48>)
 8015e76:	480c      	ldr	r0, [pc, #48]	@ (8015ea8 <memp_free+0x4c>)
 8015e78:	f004 fad8 	bl	801a42c <iprintf>
 8015e7c:	e00c      	b.n	8015e98 <memp_free+0x3c>

  if (mem == NULL) {
 8015e7e:	683b      	ldr	r3, [r7, #0]
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d008      	beq.n	8015e96 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8015e84:	79fb      	ldrb	r3, [r7, #7]
 8015e86:	4a09      	ldr	r2, [pc, #36]	@ (8015eac <memp_free+0x50>)
 8015e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015e8c:	6839      	ldr	r1, [r7, #0]
 8015e8e:	4618      	mov	r0, r3
 8015e90:	f7ff ffbe 	bl	8015e10 <do_memp_free_pool>
 8015e94:	e000      	b.n	8015e98 <memp_free+0x3c>
    return;
 8015e96:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8015e98:	3708      	adds	r7, #8
 8015e9a:	46bd      	mov	sp, r7
 8015e9c:	bd80      	pop	{r7, pc}
 8015e9e:	bf00      	nop
 8015ea0:	0801b3c0 	.word	0x0801b3c0
 8015ea4:	0801b490 	.word	0x0801b490
 8015ea8:	0801b414 	.word	0x0801b414
 8015eac:	0801c6cc 	.word	0x0801c6cc

08015eb0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8015eb0:	b480      	push	{r7}
 8015eb2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8015eb4:	bf00      	nop
 8015eb6:	46bd      	mov	sp, r7
 8015eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ebc:	4770      	bx	lr
	...

08015ec0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8015ec0:	b580      	push	{r7, lr}
 8015ec2:	b086      	sub	sp, #24
 8015ec4:	af00      	add	r7, sp, #0
 8015ec6:	60f8      	str	r0, [r7, #12]
 8015ec8:	60b9      	str	r1, [r7, #8]
 8015eca:	607a      	str	r2, [r7, #4]
 8015ecc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8015ece:	68fb      	ldr	r3, [r7, #12]
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d108      	bne.n	8015ee6 <netif_add+0x26>
 8015ed4:	4b57      	ldr	r3, [pc, #348]	@ (8016034 <netif_add+0x174>)
 8015ed6:	f240 1227 	movw	r2, #295	@ 0x127
 8015eda:	4957      	ldr	r1, [pc, #348]	@ (8016038 <netif_add+0x178>)
 8015edc:	4857      	ldr	r0, [pc, #348]	@ (801603c <netif_add+0x17c>)
 8015ede:	f004 faa5 	bl	801a42c <iprintf>
 8015ee2:	2300      	movs	r3, #0
 8015ee4:	e0a2      	b.n	801602c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8015ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d108      	bne.n	8015efe <netif_add+0x3e>
 8015eec:	4b51      	ldr	r3, [pc, #324]	@ (8016034 <netif_add+0x174>)
 8015eee:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8015ef2:	4953      	ldr	r1, [pc, #332]	@ (8016040 <netif_add+0x180>)
 8015ef4:	4851      	ldr	r0, [pc, #324]	@ (801603c <netif_add+0x17c>)
 8015ef6:	f004 fa99 	bl	801a42c <iprintf>
 8015efa:	2300      	movs	r3, #0
 8015efc:	e096      	b.n	801602c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8015efe:	68bb      	ldr	r3, [r7, #8]
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d101      	bne.n	8015f08 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8015f04:	4b4f      	ldr	r3, [pc, #316]	@ (8016044 <netif_add+0x184>)
 8015f06:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d101      	bne.n	8015f12 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8015f0e:	4b4d      	ldr	r3, [pc, #308]	@ (8016044 <netif_add+0x184>)
 8015f10:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8015f12:	683b      	ldr	r3, [r7, #0]
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	d101      	bne.n	8015f1c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8015f18:	4b4a      	ldr	r3, [pc, #296]	@ (8016044 <netif_add+0x184>)
 8015f1a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8015f1c:	68fb      	ldr	r3, [r7, #12]
 8015f1e:	2200      	movs	r2, #0
 8015f20:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8015f22:	68fb      	ldr	r3, [r7, #12]
 8015f24:	2200      	movs	r2, #0
 8015f26:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8015f28:	68fb      	ldr	r3, [r7, #12]
 8015f2a:	2200      	movs	r2, #0
 8015f2c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8015f2e:	68fb      	ldr	r3, [r7, #12]
 8015f30:	4a45      	ldr	r2, [pc, #276]	@ (8016048 <netif_add+0x188>)
 8015f32:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8015f34:	68fb      	ldr	r3, [r7, #12]
 8015f36:	2200      	movs	r2, #0
 8015f38:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8015f3a:	68fb      	ldr	r3, [r7, #12]
 8015f3c:	2200      	movs	r2, #0
 8015f3e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	2200      	movs	r2, #0
 8015f46:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8015f48:	68fb      	ldr	r3, [r7, #12]
 8015f4a:	6a3a      	ldr	r2, [r7, #32]
 8015f4c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8015f4e:	4b3f      	ldr	r3, [pc, #252]	@ (801604c <netif_add+0x18c>)
 8015f50:	781a      	ldrb	r2, [r3, #0]
 8015f52:	68fb      	ldr	r3, [r7, #12]
 8015f54:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8015f58:	68fb      	ldr	r3, [r7, #12]
 8015f5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015f5c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8015f5e:	683b      	ldr	r3, [r7, #0]
 8015f60:	687a      	ldr	r2, [r7, #4]
 8015f62:	68b9      	ldr	r1, [r7, #8]
 8015f64:	68f8      	ldr	r0, [r7, #12]
 8015f66:	f000 f90f 	bl	8016188 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8015f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f6c:	68f8      	ldr	r0, [r7, #12]
 8015f6e:	4798      	blx	r3
 8015f70:	4603      	mov	r3, r0
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d001      	beq.n	8015f7a <netif_add+0xba>
    return NULL;
 8015f76:	2300      	movs	r3, #0
 8015f78:	e058      	b.n	801602c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8015f7a:	68fb      	ldr	r3, [r7, #12]
 8015f7c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015f80:	2bff      	cmp	r3, #255	@ 0xff
 8015f82:	d103      	bne.n	8015f8c <netif_add+0xcc>
        netif->num = 0;
 8015f84:	68fb      	ldr	r3, [r7, #12]
 8015f86:	2200      	movs	r2, #0
 8015f88:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8015f8c:	2300      	movs	r3, #0
 8015f8e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8015f90:	4b2f      	ldr	r3, [pc, #188]	@ (8016050 <netif_add+0x190>)
 8015f92:	681b      	ldr	r3, [r3, #0]
 8015f94:	617b      	str	r3, [r7, #20]
 8015f96:	e02b      	b.n	8015ff0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8015f98:	697a      	ldr	r2, [r7, #20]
 8015f9a:	68fb      	ldr	r3, [r7, #12]
 8015f9c:	429a      	cmp	r2, r3
 8015f9e:	d106      	bne.n	8015fae <netif_add+0xee>
 8015fa0:	4b24      	ldr	r3, [pc, #144]	@ (8016034 <netif_add+0x174>)
 8015fa2:	f240 128b 	movw	r2, #395	@ 0x18b
 8015fa6:	492b      	ldr	r1, [pc, #172]	@ (8016054 <netif_add+0x194>)
 8015fa8:	4824      	ldr	r0, [pc, #144]	@ (801603c <netif_add+0x17c>)
 8015faa:	f004 fa3f 	bl	801a42c <iprintf>
        num_netifs++;
 8015fae:	693b      	ldr	r3, [r7, #16]
 8015fb0:	3301      	adds	r3, #1
 8015fb2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8015fb4:	693b      	ldr	r3, [r7, #16]
 8015fb6:	2bff      	cmp	r3, #255	@ 0xff
 8015fb8:	dd06      	ble.n	8015fc8 <netif_add+0x108>
 8015fba:	4b1e      	ldr	r3, [pc, #120]	@ (8016034 <netif_add+0x174>)
 8015fbc:	f240 128d 	movw	r2, #397	@ 0x18d
 8015fc0:	4925      	ldr	r1, [pc, #148]	@ (8016058 <netif_add+0x198>)
 8015fc2:	481e      	ldr	r0, [pc, #120]	@ (801603c <netif_add+0x17c>)
 8015fc4:	f004 fa32 	bl	801a42c <iprintf>
        if (netif2->num == netif->num) {
 8015fc8:	697b      	ldr	r3, [r7, #20]
 8015fca:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8015fce:	68fb      	ldr	r3, [r7, #12]
 8015fd0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015fd4:	429a      	cmp	r2, r3
 8015fd6:	d108      	bne.n	8015fea <netif_add+0x12a>
          netif->num++;
 8015fd8:	68fb      	ldr	r3, [r7, #12]
 8015fda:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015fde:	3301      	adds	r3, #1
 8015fe0:	b2da      	uxtb	r2, r3
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8015fe8:	e005      	b.n	8015ff6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8015fea:	697b      	ldr	r3, [r7, #20]
 8015fec:	681b      	ldr	r3, [r3, #0]
 8015fee:	617b      	str	r3, [r7, #20]
 8015ff0:	697b      	ldr	r3, [r7, #20]
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	d1d0      	bne.n	8015f98 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8015ff6:	697b      	ldr	r3, [r7, #20]
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d1be      	bne.n	8015f7a <netif_add+0xba>
  }
  if (netif->num == 254) {
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016002:	2bfe      	cmp	r3, #254	@ 0xfe
 8016004:	d103      	bne.n	801600e <netif_add+0x14e>
    netif_num = 0;
 8016006:	4b11      	ldr	r3, [pc, #68]	@ (801604c <netif_add+0x18c>)
 8016008:	2200      	movs	r2, #0
 801600a:	701a      	strb	r2, [r3, #0]
 801600c:	e006      	b.n	801601c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801600e:	68fb      	ldr	r3, [r7, #12]
 8016010:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016014:	3301      	adds	r3, #1
 8016016:	b2da      	uxtb	r2, r3
 8016018:	4b0c      	ldr	r3, [pc, #48]	@ (801604c <netif_add+0x18c>)
 801601a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801601c:	4b0c      	ldr	r3, [pc, #48]	@ (8016050 <netif_add+0x190>)
 801601e:	681a      	ldr	r2, [r3, #0]
 8016020:	68fb      	ldr	r3, [r7, #12]
 8016022:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8016024:	4a0a      	ldr	r2, [pc, #40]	@ (8016050 <netif_add+0x190>)
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801602a:	68fb      	ldr	r3, [r7, #12]
}
 801602c:	4618      	mov	r0, r3
 801602e:	3718      	adds	r7, #24
 8016030:	46bd      	mov	sp, r7
 8016032:	bd80      	pop	{r7, pc}
 8016034:	0801b4ac 	.word	0x0801b4ac
 8016038:	0801b540 	.word	0x0801b540
 801603c:	0801b4fc 	.word	0x0801b4fc
 8016040:	0801b55c 	.word	0x0801b55c
 8016044:	0801c6f4 	.word	0x0801c6f4
 8016048:	0801639b 	.word	0x0801639b
 801604c:	200162b4 	.word	0x200162b4
 8016050:	200162ac 	.word	0x200162ac
 8016054:	0801b580 	.word	0x0801b580
 8016058:	0801b594 	.word	0x0801b594

0801605c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801605c:	b580      	push	{r7, lr}
 801605e:	b082      	sub	sp, #8
 8016060:	af00      	add	r7, sp, #0
 8016062:	6078      	str	r0, [r7, #4]
 8016064:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8016066:	6839      	ldr	r1, [r7, #0]
 8016068:	6878      	ldr	r0, [r7, #4]
 801606a:	f001 fd35 	bl	8017ad8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801606e:	bf00      	nop
 8016070:	3708      	adds	r7, #8
 8016072:	46bd      	mov	sp, r7
 8016074:	bd80      	pop	{r7, pc}
	...

08016078 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8016078:	b580      	push	{r7, lr}
 801607a:	b086      	sub	sp, #24
 801607c:	af00      	add	r7, sp, #0
 801607e:	60f8      	str	r0, [r7, #12]
 8016080:	60b9      	str	r1, [r7, #8]
 8016082:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8016084:	68bb      	ldr	r3, [r7, #8]
 8016086:	2b00      	cmp	r3, #0
 8016088:	d106      	bne.n	8016098 <netif_do_set_ipaddr+0x20>
 801608a:	4b1d      	ldr	r3, [pc, #116]	@ (8016100 <netif_do_set_ipaddr+0x88>)
 801608c:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8016090:	491c      	ldr	r1, [pc, #112]	@ (8016104 <netif_do_set_ipaddr+0x8c>)
 8016092:	481d      	ldr	r0, [pc, #116]	@ (8016108 <netif_do_set_ipaddr+0x90>)
 8016094:	f004 f9ca 	bl	801a42c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	2b00      	cmp	r3, #0
 801609c:	d106      	bne.n	80160ac <netif_do_set_ipaddr+0x34>
 801609e:	4b18      	ldr	r3, [pc, #96]	@ (8016100 <netif_do_set_ipaddr+0x88>)
 80160a0:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 80160a4:	4917      	ldr	r1, [pc, #92]	@ (8016104 <netif_do_set_ipaddr+0x8c>)
 80160a6:	4818      	ldr	r0, [pc, #96]	@ (8016108 <netif_do_set_ipaddr+0x90>)
 80160a8:	f004 f9c0 	bl	801a42c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80160ac:	68bb      	ldr	r3, [r7, #8]
 80160ae:	681a      	ldr	r2, [r3, #0]
 80160b0:	68fb      	ldr	r3, [r7, #12]
 80160b2:	3304      	adds	r3, #4
 80160b4:	681b      	ldr	r3, [r3, #0]
 80160b6:	429a      	cmp	r2, r3
 80160b8:	d01c      	beq.n	80160f4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80160ba:	68bb      	ldr	r3, [r7, #8]
 80160bc:	681b      	ldr	r3, [r3, #0]
 80160be:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80160c0:	68fb      	ldr	r3, [r7, #12]
 80160c2:	3304      	adds	r3, #4
 80160c4:	681a      	ldr	r2, [r3, #0]
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80160ca:	f107 0314 	add.w	r3, r7, #20
 80160ce:	4619      	mov	r1, r3
 80160d0:	6878      	ldr	r0, [r7, #4]
 80160d2:	f7ff ffc3 	bl	801605c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80160d6:	68bb      	ldr	r3, [r7, #8]
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d002      	beq.n	80160e2 <netif_do_set_ipaddr+0x6a>
 80160dc:	68bb      	ldr	r3, [r7, #8]
 80160de:	681b      	ldr	r3, [r3, #0]
 80160e0:	e000      	b.n	80160e4 <netif_do_set_ipaddr+0x6c>
 80160e2:	2300      	movs	r3, #0
 80160e4:	68fa      	ldr	r2, [r7, #12]
 80160e6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80160e8:	2101      	movs	r1, #1
 80160ea:	68f8      	ldr	r0, [r7, #12]
 80160ec:	f000 f8d2 	bl	8016294 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80160f0:	2301      	movs	r3, #1
 80160f2:	e000      	b.n	80160f6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80160f4:	2300      	movs	r3, #0
}
 80160f6:	4618      	mov	r0, r3
 80160f8:	3718      	adds	r7, #24
 80160fa:	46bd      	mov	sp, r7
 80160fc:	bd80      	pop	{r7, pc}
 80160fe:	bf00      	nop
 8016100:	0801b4ac 	.word	0x0801b4ac
 8016104:	0801b5c4 	.word	0x0801b5c4
 8016108:	0801b4fc 	.word	0x0801b4fc

0801610c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 801610c:	b480      	push	{r7}
 801610e:	b085      	sub	sp, #20
 8016110:	af00      	add	r7, sp, #0
 8016112:	60f8      	str	r0, [r7, #12]
 8016114:	60b9      	str	r1, [r7, #8]
 8016116:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8016118:	68bb      	ldr	r3, [r7, #8]
 801611a:	681a      	ldr	r2, [r3, #0]
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	3308      	adds	r3, #8
 8016120:	681b      	ldr	r3, [r3, #0]
 8016122:	429a      	cmp	r2, r3
 8016124:	d00a      	beq.n	801613c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8016126:	68bb      	ldr	r3, [r7, #8]
 8016128:	2b00      	cmp	r3, #0
 801612a:	d002      	beq.n	8016132 <netif_do_set_netmask+0x26>
 801612c:	68bb      	ldr	r3, [r7, #8]
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	e000      	b.n	8016134 <netif_do_set_netmask+0x28>
 8016132:	2300      	movs	r3, #0
 8016134:	68fa      	ldr	r2, [r7, #12]
 8016136:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8016138:	2301      	movs	r3, #1
 801613a:	e000      	b.n	801613e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 801613c:	2300      	movs	r3, #0
}
 801613e:	4618      	mov	r0, r3
 8016140:	3714      	adds	r7, #20
 8016142:	46bd      	mov	sp, r7
 8016144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016148:	4770      	bx	lr

0801614a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801614a:	b480      	push	{r7}
 801614c:	b085      	sub	sp, #20
 801614e:	af00      	add	r7, sp, #0
 8016150:	60f8      	str	r0, [r7, #12]
 8016152:	60b9      	str	r1, [r7, #8]
 8016154:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8016156:	68bb      	ldr	r3, [r7, #8]
 8016158:	681a      	ldr	r2, [r3, #0]
 801615a:	68fb      	ldr	r3, [r7, #12]
 801615c:	330c      	adds	r3, #12
 801615e:	681b      	ldr	r3, [r3, #0]
 8016160:	429a      	cmp	r2, r3
 8016162:	d00a      	beq.n	801617a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8016164:	68bb      	ldr	r3, [r7, #8]
 8016166:	2b00      	cmp	r3, #0
 8016168:	d002      	beq.n	8016170 <netif_do_set_gw+0x26>
 801616a:	68bb      	ldr	r3, [r7, #8]
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	e000      	b.n	8016172 <netif_do_set_gw+0x28>
 8016170:	2300      	movs	r3, #0
 8016172:	68fa      	ldr	r2, [r7, #12]
 8016174:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8016176:	2301      	movs	r3, #1
 8016178:	e000      	b.n	801617c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801617a:	2300      	movs	r3, #0
}
 801617c:	4618      	mov	r0, r3
 801617e:	3714      	adds	r7, #20
 8016180:	46bd      	mov	sp, r7
 8016182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016186:	4770      	bx	lr

08016188 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8016188:	b580      	push	{r7, lr}
 801618a:	b088      	sub	sp, #32
 801618c:	af00      	add	r7, sp, #0
 801618e:	60f8      	str	r0, [r7, #12]
 8016190:	60b9      	str	r1, [r7, #8]
 8016192:	607a      	str	r2, [r7, #4]
 8016194:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8016196:	2300      	movs	r3, #0
 8016198:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801619a:	2300      	movs	r3, #0
 801619c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801619e:	68bb      	ldr	r3, [r7, #8]
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d101      	bne.n	80161a8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80161a4:	4b1c      	ldr	r3, [pc, #112]	@ (8016218 <netif_set_addr+0x90>)
 80161a6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d101      	bne.n	80161b2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80161ae:	4b1a      	ldr	r3, [pc, #104]	@ (8016218 <netif_set_addr+0x90>)
 80161b0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80161b2:	683b      	ldr	r3, [r7, #0]
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	d101      	bne.n	80161bc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80161b8:	4b17      	ldr	r3, [pc, #92]	@ (8016218 <netif_set_addr+0x90>)
 80161ba:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80161bc:	68bb      	ldr	r3, [r7, #8]
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d003      	beq.n	80161ca <netif_set_addr+0x42>
 80161c2:	68bb      	ldr	r3, [r7, #8]
 80161c4:	681b      	ldr	r3, [r3, #0]
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d101      	bne.n	80161ce <netif_set_addr+0x46>
 80161ca:	2301      	movs	r3, #1
 80161cc:	e000      	b.n	80161d0 <netif_set_addr+0x48>
 80161ce:	2300      	movs	r3, #0
 80161d0:	617b      	str	r3, [r7, #20]
  if (remove) {
 80161d2:	697b      	ldr	r3, [r7, #20]
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d006      	beq.n	80161e6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80161d8:	f107 0310 	add.w	r3, r7, #16
 80161dc:	461a      	mov	r2, r3
 80161de:	68b9      	ldr	r1, [r7, #8]
 80161e0:	68f8      	ldr	r0, [r7, #12]
 80161e2:	f7ff ff49 	bl	8016078 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80161e6:	69fa      	ldr	r2, [r7, #28]
 80161e8:	6879      	ldr	r1, [r7, #4]
 80161ea:	68f8      	ldr	r0, [r7, #12]
 80161ec:	f7ff ff8e 	bl	801610c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80161f0:	69ba      	ldr	r2, [r7, #24]
 80161f2:	6839      	ldr	r1, [r7, #0]
 80161f4:	68f8      	ldr	r0, [r7, #12]
 80161f6:	f7ff ffa8 	bl	801614a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80161fa:	697b      	ldr	r3, [r7, #20]
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d106      	bne.n	801620e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8016200:	f107 0310 	add.w	r3, r7, #16
 8016204:	461a      	mov	r2, r3
 8016206:	68b9      	ldr	r1, [r7, #8]
 8016208:	68f8      	ldr	r0, [r7, #12]
 801620a:	f7ff ff35 	bl	8016078 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801620e:	bf00      	nop
 8016210:	3720      	adds	r7, #32
 8016212:	46bd      	mov	sp, r7
 8016214:	bd80      	pop	{r7, pc}
 8016216:	bf00      	nop
 8016218:	0801c6f4 	.word	0x0801c6f4

0801621c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 801621c:	b480      	push	{r7}
 801621e:	b083      	sub	sp, #12
 8016220:	af00      	add	r7, sp, #0
 8016222:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8016224:	4a04      	ldr	r2, [pc, #16]	@ (8016238 <netif_set_default+0x1c>)
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801622a:	bf00      	nop
 801622c:	370c      	adds	r7, #12
 801622e:	46bd      	mov	sp, r7
 8016230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016234:	4770      	bx	lr
 8016236:	bf00      	nop
 8016238:	200162b0 	.word	0x200162b0

0801623c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801623c:	b580      	push	{r7, lr}
 801623e:	b082      	sub	sp, #8
 8016240:	af00      	add	r7, sp, #0
 8016242:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	2b00      	cmp	r3, #0
 8016248:	d107      	bne.n	801625a <netif_set_up+0x1e>
 801624a:	4b0f      	ldr	r3, [pc, #60]	@ (8016288 <netif_set_up+0x4c>)
 801624c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8016250:	490e      	ldr	r1, [pc, #56]	@ (801628c <netif_set_up+0x50>)
 8016252:	480f      	ldr	r0, [pc, #60]	@ (8016290 <netif_set_up+0x54>)
 8016254:	f004 f8ea 	bl	801a42c <iprintf>
 8016258:	e013      	b.n	8016282 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016260:	f003 0301 	and.w	r3, r3, #1
 8016264:	2b00      	cmp	r3, #0
 8016266:	d10c      	bne.n	8016282 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801626e:	f043 0301 	orr.w	r3, r3, #1
 8016272:	b2da      	uxtb	r2, r3
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801627a:	2103      	movs	r1, #3
 801627c:	6878      	ldr	r0, [r7, #4]
 801627e:	f000 f809 	bl	8016294 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8016282:	3708      	adds	r7, #8
 8016284:	46bd      	mov	sp, r7
 8016286:	bd80      	pop	{r7, pc}
 8016288:	0801b4ac 	.word	0x0801b4ac
 801628c:	0801b634 	.word	0x0801b634
 8016290:	0801b4fc 	.word	0x0801b4fc

08016294 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8016294:	b580      	push	{r7, lr}
 8016296:	b082      	sub	sp, #8
 8016298:	af00      	add	r7, sp, #0
 801629a:	6078      	str	r0, [r7, #4]
 801629c:	460b      	mov	r3, r1
 801629e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	d106      	bne.n	80162b4 <netif_issue_reports+0x20>
 80162a6:	4b18      	ldr	r3, [pc, #96]	@ (8016308 <netif_issue_reports+0x74>)
 80162a8:	f240 326d 	movw	r2, #877	@ 0x36d
 80162ac:	4917      	ldr	r1, [pc, #92]	@ (801630c <netif_issue_reports+0x78>)
 80162ae:	4818      	ldr	r0, [pc, #96]	@ (8016310 <netif_issue_reports+0x7c>)
 80162b0:	f004 f8bc 	bl	801a42c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80162ba:	f003 0304 	and.w	r3, r3, #4
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d01e      	beq.n	8016300 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80162c8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d017      	beq.n	8016300 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80162d0:	78fb      	ldrb	r3, [r7, #3]
 80162d2:	f003 0301 	and.w	r3, r3, #1
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	d013      	beq.n	8016302 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	3304      	adds	r3, #4
 80162de:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d00e      	beq.n	8016302 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80162ea:	f003 0308 	and.w	r3, r3, #8
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d007      	beq.n	8016302 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	3304      	adds	r3, #4
 80162f6:	4619      	mov	r1, r3
 80162f8:	6878      	ldr	r0, [r7, #4]
 80162fa:	f002 fb57 	bl	80189ac <etharp_request>
 80162fe:	e000      	b.n	8016302 <netif_issue_reports+0x6e>
    return;
 8016300:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8016302:	3708      	adds	r7, #8
 8016304:	46bd      	mov	sp, r7
 8016306:	bd80      	pop	{r7, pc}
 8016308:	0801b4ac 	.word	0x0801b4ac
 801630c:	0801b650 	.word	0x0801b650
 8016310:	0801b4fc 	.word	0x0801b4fc

08016314 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8016314:	b580      	push	{r7, lr}
 8016316:	b082      	sub	sp, #8
 8016318:	af00      	add	r7, sp, #0
 801631a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	2b00      	cmp	r3, #0
 8016320:	d107      	bne.n	8016332 <netif_set_down+0x1e>
 8016322:	4b12      	ldr	r3, [pc, #72]	@ (801636c <netif_set_down+0x58>)
 8016324:	f240 329b 	movw	r2, #923	@ 0x39b
 8016328:	4911      	ldr	r1, [pc, #68]	@ (8016370 <netif_set_down+0x5c>)
 801632a:	4812      	ldr	r0, [pc, #72]	@ (8016374 <netif_set_down+0x60>)
 801632c:	f004 f87e 	bl	801a42c <iprintf>
 8016330:	e019      	b.n	8016366 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016338:	f003 0301 	and.w	r3, r3, #1
 801633c:	2b00      	cmp	r3, #0
 801633e:	d012      	beq.n	8016366 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016346:	f023 0301 	bic.w	r3, r3, #1
 801634a:	b2da      	uxtb	r2, r3
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016358:	f003 0308 	and.w	r3, r3, #8
 801635c:	2b00      	cmp	r3, #0
 801635e:	d002      	beq.n	8016366 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8016360:	6878      	ldr	r0, [r7, #4]
 8016362:	f001 fee1 	bl	8018128 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8016366:	3708      	adds	r7, #8
 8016368:	46bd      	mov	sp, r7
 801636a:	bd80      	pop	{r7, pc}
 801636c:	0801b4ac 	.word	0x0801b4ac
 8016370:	0801b674 	.word	0x0801b674
 8016374:	0801b4fc 	.word	0x0801b4fc

08016378 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8016378:	b480      	push	{r7}
 801637a:	b083      	sub	sp, #12
 801637c:	af00      	add	r7, sp, #0
 801637e:	6078      	str	r0, [r7, #4]
 8016380:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	2b00      	cmp	r3, #0
 8016386:	d002      	beq.n	801638e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	683a      	ldr	r2, [r7, #0]
 801638c:	61da      	str	r2, [r3, #28]
  }
}
 801638e:	bf00      	nop
 8016390:	370c      	adds	r7, #12
 8016392:	46bd      	mov	sp, r7
 8016394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016398:	4770      	bx	lr

0801639a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801639a:	b480      	push	{r7}
 801639c:	b085      	sub	sp, #20
 801639e:	af00      	add	r7, sp, #0
 80163a0:	60f8      	str	r0, [r7, #12]
 80163a2:	60b9      	str	r1, [r7, #8]
 80163a4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80163a6:	f06f 030b 	mvn.w	r3, #11
}
 80163aa:	4618      	mov	r0, r3
 80163ac:	3714      	adds	r7, #20
 80163ae:	46bd      	mov	sp, r7
 80163b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163b4:	4770      	bx	lr
	...

080163b8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80163b8:	b480      	push	{r7}
 80163ba:	b085      	sub	sp, #20
 80163bc:	af00      	add	r7, sp, #0
 80163be:	4603      	mov	r3, r0
 80163c0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80163c2:	79fb      	ldrb	r3, [r7, #7]
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d013      	beq.n	80163f0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80163c8:	4b0d      	ldr	r3, [pc, #52]	@ (8016400 <netif_get_by_index+0x48>)
 80163ca:	681b      	ldr	r3, [r3, #0]
 80163cc:	60fb      	str	r3, [r7, #12]
 80163ce:	e00c      	b.n	80163ea <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80163d0:	68fb      	ldr	r3, [r7, #12]
 80163d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80163d6:	3301      	adds	r3, #1
 80163d8:	b2db      	uxtb	r3, r3
 80163da:	79fa      	ldrb	r2, [r7, #7]
 80163dc:	429a      	cmp	r2, r3
 80163de:	d101      	bne.n	80163e4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80163e0:	68fb      	ldr	r3, [r7, #12]
 80163e2:	e006      	b.n	80163f2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80163e4:	68fb      	ldr	r3, [r7, #12]
 80163e6:	681b      	ldr	r3, [r3, #0]
 80163e8:	60fb      	str	r3, [r7, #12]
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d1ef      	bne.n	80163d0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80163f0:	2300      	movs	r3, #0
}
 80163f2:	4618      	mov	r0, r3
 80163f4:	3714      	adds	r7, #20
 80163f6:	46bd      	mov	sp, r7
 80163f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163fc:	4770      	bx	lr
 80163fe:	bf00      	nop
 8016400:	200162ac 	.word	0x200162ac

08016404 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8016404:	b480      	push	{r7}
 8016406:	b085      	sub	sp, #20
 8016408:	af00      	add	r7, sp, #0
 801640a:	60f8      	str	r0, [r7, #12]
 801640c:	60b9      	str	r1, [r7, #8]
 801640e:	4611      	mov	r1, r2
 8016410:	461a      	mov	r2, r3
 8016412:	460b      	mov	r3, r1
 8016414:	80fb      	strh	r3, [r7, #6]
 8016416:	4613      	mov	r3, r2
 8016418:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801641a:	68fb      	ldr	r3, [r7, #12]
 801641c:	2200      	movs	r2, #0
 801641e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8016420:	68fb      	ldr	r3, [r7, #12]
 8016422:	68ba      	ldr	r2, [r7, #8]
 8016424:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	88fa      	ldrh	r2, [r7, #6]
 801642a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 801642c:	68fb      	ldr	r3, [r7, #12]
 801642e:	88ba      	ldrh	r2, [r7, #4]
 8016430:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8016432:	8b3b      	ldrh	r3, [r7, #24]
 8016434:	b2da      	uxtb	r2, r3
 8016436:	68fb      	ldr	r3, [r7, #12]
 8016438:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801643a:	68fb      	ldr	r3, [r7, #12]
 801643c:	7f3a      	ldrb	r2, [r7, #28]
 801643e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8016440:	68fb      	ldr	r3, [r7, #12]
 8016442:	2201      	movs	r2, #1
 8016444:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8016446:	68fb      	ldr	r3, [r7, #12]
 8016448:	2200      	movs	r2, #0
 801644a:	73da      	strb	r2, [r3, #15]
}
 801644c:	bf00      	nop
 801644e:	3714      	adds	r7, #20
 8016450:	46bd      	mov	sp, r7
 8016452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016456:	4770      	bx	lr

08016458 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8016458:	b580      	push	{r7, lr}
 801645a:	b08c      	sub	sp, #48	@ 0x30
 801645c:	af02      	add	r7, sp, #8
 801645e:	4603      	mov	r3, r0
 8016460:	71fb      	strb	r3, [r7, #7]
 8016462:	460b      	mov	r3, r1
 8016464:	80bb      	strh	r3, [r7, #4]
 8016466:	4613      	mov	r3, r2
 8016468:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801646a:	79fb      	ldrb	r3, [r7, #7]
 801646c:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801646e:	887b      	ldrh	r3, [r7, #2]
 8016470:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8016474:	d07d      	beq.n	8016572 <pbuf_alloc+0x11a>
 8016476:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 801647a:	f300 80c6 	bgt.w	801660a <pbuf_alloc+0x1b2>
 801647e:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8016482:	d010      	beq.n	80164a6 <pbuf_alloc+0x4e>
 8016484:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8016488:	f300 80bf 	bgt.w	801660a <pbuf_alloc+0x1b2>
 801648c:	2b01      	cmp	r3, #1
 801648e:	d002      	beq.n	8016496 <pbuf_alloc+0x3e>
 8016490:	2b41      	cmp	r3, #65	@ 0x41
 8016492:	f040 80ba 	bne.w	801660a <pbuf_alloc+0x1b2>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8016496:	887a      	ldrh	r2, [r7, #2]
 8016498:	88bb      	ldrh	r3, [r7, #4]
 801649a:	4619      	mov	r1, r3
 801649c:	2000      	movs	r0, #0
 801649e:	f000 f8cf 	bl	8016640 <pbuf_alloc_reference>
 80164a2:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 80164a4:	e0bb      	b.n	801661e <pbuf_alloc+0x1c6>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80164a6:	2300      	movs	r3, #0
 80164a8:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 80164aa:	2300      	movs	r3, #0
 80164ac:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80164ae:	88bb      	ldrh	r3, [r7, #4]
 80164b0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80164b2:	2005      	movs	r0, #5
 80164b4:	f7ff fc86 	bl	8015dc4 <memp_malloc>
 80164b8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80164ba:	693b      	ldr	r3, [r7, #16]
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d107      	bne.n	80164d0 <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 80164c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d002      	beq.n	80164cc <pbuf_alloc+0x74>
            pbuf_free(p);
 80164c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80164c8:	f000 faa8 	bl	8016a1c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80164cc:	2300      	movs	r3, #0
 80164ce:	e0a7      	b.n	8016620 <pbuf_alloc+0x1c8>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80164d0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80164d2:	3303      	adds	r3, #3
 80164d4:	b29b      	uxth	r3, r3
 80164d6:	f023 0303 	bic.w	r3, r3, #3
 80164da:	b29b      	uxth	r3, r3
 80164dc:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 80164e0:	b29b      	uxth	r3, r3
 80164e2:	8b7a      	ldrh	r2, [r7, #26]
 80164e4:	4293      	cmp	r3, r2
 80164e6:	bf28      	it	cs
 80164e8:	4613      	movcs	r3, r2
 80164ea:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80164ec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80164ee:	3310      	adds	r3, #16
 80164f0:	693a      	ldr	r2, [r7, #16]
 80164f2:	4413      	add	r3, r2
 80164f4:	3303      	adds	r3, #3
 80164f6:	f023 0303 	bic.w	r3, r3, #3
 80164fa:	4618      	mov	r0, r3
 80164fc:	89f9      	ldrh	r1, [r7, #14]
 80164fe:	8b7a      	ldrh	r2, [r7, #26]
 8016500:	2300      	movs	r3, #0
 8016502:	9301      	str	r3, [sp, #4]
 8016504:	887b      	ldrh	r3, [r7, #2]
 8016506:	9300      	str	r3, [sp, #0]
 8016508:	460b      	mov	r3, r1
 801650a:	4601      	mov	r1, r0
 801650c:	6938      	ldr	r0, [r7, #16]
 801650e:	f7ff ff79 	bl	8016404 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8016512:	693b      	ldr	r3, [r7, #16]
 8016514:	685b      	ldr	r3, [r3, #4]
 8016516:	f003 0303 	and.w	r3, r3, #3
 801651a:	2b00      	cmp	r3, #0
 801651c:	d006      	beq.n	801652c <pbuf_alloc+0xd4>
 801651e:	4b42      	ldr	r3, [pc, #264]	@ (8016628 <pbuf_alloc+0x1d0>)
 8016520:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016524:	4941      	ldr	r1, [pc, #260]	@ (801662c <pbuf_alloc+0x1d4>)
 8016526:	4842      	ldr	r0, [pc, #264]	@ (8016630 <pbuf_alloc+0x1d8>)
 8016528:	f003 ff80 	bl	801a42c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801652c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801652e:	3303      	adds	r3, #3
 8016530:	f023 0303 	bic.w	r3, r3, #3
 8016534:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8016538:	d106      	bne.n	8016548 <pbuf_alloc+0xf0>
 801653a:	4b3b      	ldr	r3, [pc, #236]	@ (8016628 <pbuf_alloc+0x1d0>)
 801653c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8016540:	493c      	ldr	r1, [pc, #240]	@ (8016634 <pbuf_alloc+0x1dc>)
 8016542:	483b      	ldr	r0, [pc, #236]	@ (8016630 <pbuf_alloc+0x1d8>)
 8016544:	f003 ff72 	bl	801a42c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8016548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801654a:	2b00      	cmp	r3, #0
 801654c:	d102      	bne.n	8016554 <pbuf_alloc+0xfc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801654e:	693b      	ldr	r3, [r7, #16]
 8016550:	627b      	str	r3, [r7, #36]	@ 0x24
 8016552:	e002      	b.n	801655a <pbuf_alloc+0x102>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8016554:	69fb      	ldr	r3, [r7, #28]
 8016556:	693a      	ldr	r2, [r7, #16]
 8016558:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801655a:	693b      	ldr	r3, [r7, #16]
 801655c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801655e:	8b7a      	ldrh	r2, [r7, #26]
 8016560:	89fb      	ldrh	r3, [r7, #14]
 8016562:	1ad3      	subs	r3, r2, r3
 8016564:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8016566:	2300      	movs	r3, #0
 8016568:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 801656a:	8b7b      	ldrh	r3, [r7, #26]
 801656c:	2b00      	cmp	r3, #0
 801656e:	d1a0      	bne.n	80164b2 <pbuf_alloc+0x5a>
      break;
 8016570:	e055      	b.n	801661e <pbuf_alloc+0x1c6>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8016572:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016574:	3303      	adds	r3, #3
 8016576:	b29b      	uxth	r3, r3
 8016578:	f023 0303 	bic.w	r3, r3, #3
 801657c:	b29a      	uxth	r2, r3
 801657e:	88bb      	ldrh	r3, [r7, #4]
 8016580:	3303      	adds	r3, #3
 8016582:	b29b      	uxth	r3, r3
 8016584:	f023 0303 	bic.w	r3, r3, #3
 8016588:	b29b      	uxth	r3, r3
 801658a:	4413      	add	r3, r2
 801658c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801658e:	8b3b      	ldrh	r3, [r7, #24]
 8016590:	3310      	adds	r3, #16
 8016592:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8016594:	8b3a      	ldrh	r2, [r7, #24]
 8016596:	88bb      	ldrh	r3, [r7, #4]
 8016598:	3303      	adds	r3, #3
 801659a:	f023 0303 	bic.w	r3, r3, #3
 801659e:	429a      	cmp	r2, r3
 80165a0:	d306      	bcc.n	80165b0 <pbuf_alloc+0x158>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80165a2:	8afa      	ldrh	r2, [r7, #22]
 80165a4:	88bb      	ldrh	r3, [r7, #4]
 80165a6:	3303      	adds	r3, #3
 80165a8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80165ac:	429a      	cmp	r2, r3
 80165ae:	d201      	bcs.n	80165b4 <pbuf_alloc+0x15c>
        return NULL;
 80165b0:	2300      	movs	r3, #0
 80165b2:	e035      	b.n	8016620 <pbuf_alloc+0x1c8>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80165b4:	8afb      	ldrh	r3, [r7, #22]
 80165b6:	4618      	mov	r0, r3
 80165b8:	f7ff fa96 	bl	8015ae8 <mem_malloc>
 80165bc:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 80165be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165c0:	2b00      	cmp	r3, #0
 80165c2:	d101      	bne.n	80165c8 <pbuf_alloc+0x170>
        return NULL;
 80165c4:	2300      	movs	r3, #0
 80165c6:	e02b      	b.n	8016620 <pbuf_alloc+0x1c8>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80165c8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80165ca:	3310      	adds	r3, #16
 80165cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80165ce:	4413      	add	r3, r2
 80165d0:	3303      	adds	r3, #3
 80165d2:	f023 0303 	bic.w	r3, r3, #3
 80165d6:	4618      	mov	r0, r3
 80165d8:	88b9      	ldrh	r1, [r7, #4]
 80165da:	88ba      	ldrh	r2, [r7, #4]
 80165dc:	2300      	movs	r3, #0
 80165de:	9301      	str	r3, [sp, #4]
 80165e0:	887b      	ldrh	r3, [r7, #2]
 80165e2:	9300      	str	r3, [sp, #0]
 80165e4:	460b      	mov	r3, r1
 80165e6:	4601      	mov	r1, r0
 80165e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80165ea:	f7ff ff0b 	bl	8016404 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80165ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165f0:	685b      	ldr	r3, [r3, #4]
 80165f2:	f003 0303 	and.w	r3, r3, #3
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d010      	beq.n	801661c <pbuf_alloc+0x1c4>
 80165fa:	4b0b      	ldr	r3, [pc, #44]	@ (8016628 <pbuf_alloc+0x1d0>)
 80165fc:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8016600:	490d      	ldr	r1, [pc, #52]	@ (8016638 <pbuf_alloc+0x1e0>)
 8016602:	480b      	ldr	r0, [pc, #44]	@ (8016630 <pbuf_alloc+0x1d8>)
 8016604:	f003 ff12 	bl	801a42c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8016608:	e008      	b.n	801661c <pbuf_alloc+0x1c4>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801660a:	4b07      	ldr	r3, [pc, #28]	@ (8016628 <pbuf_alloc+0x1d0>)
 801660c:	f240 1227 	movw	r2, #295	@ 0x127
 8016610:	490a      	ldr	r1, [pc, #40]	@ (801663c <pbuf_alloc+0x1e4>)
 8016612:	4807      	ldr	r0, [pc, #28]	@ (8016630 <pbuf_alloc+0x1d8>)
 8016614:	f003 ff0a 	bl	801a42c <iprintf>
      return NULL;
 8016618:	2300      	movs	r3, #0
 801661a:	e001      	b.n	8016620 <pbuf_alloc+0x1c8>
      break;
 801661c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801661e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8016620:	4618      	mov	r0, r3
 8016622:	3728      	adds	r7, #40	@ 0x28
 8016624:	46bd      	mov	sp, r7
 8016626:	bd80      	pop	{r7, pc}
 8016628:	0801b6dc 	.word	0x0801b6dc
 801662c:	0801b70c 	.word	0x0801b70c
 8016630:	0801b73c 	.word	0x0801b73c
 8016634:	0801b764 	.word	0x0801b764
 8016638:	0801b798 	.word	0x0801b798
 801663c:	0801b7c4 	.word	0x0801b7c4

08016640 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8016640:	b580      	push	{r7, lr}
 8016642:	b086      	sub	sp, #24
 8016644:	af02      	add	r7, sp, #8
 8016646:	6078      	str	r0, [r7, #4]
 8016648:	460b      	mov	r3, r1
 801664a:	807b      	strh	r3, [r7, #2]
 801664c:	4613      	mov	r3, r2
 801664e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8016650:	883b      	ldrh	r3, [r7, #0]
 8016652:	2b41      	cmp	r3, #65	@ 0x41
 8016654:	d009      	beq.n	801666a <pbuf_alloc_reference+0x2a>
 8016656:	883b      	ldrh	r3, [r7, #0]
 8016658:	2b01      	cmp	r3, #1
 801665a:	d006      	beq.n	801666a <pbuf_alloc_reference+0x2a>
 801665c:	4b0f      	ldr	r3, [pc, #60]	@ (801669c <pbuf_alloc_reference+0x5c>)
 801665e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8016662:	490f      	ldr	r1, [pc, #60]	@ (80166a0 <pbuf_alloc_reference+0x60>)
 8016664:	480f      	ldr	r0, [pc, #60]	@ (80166a4 <pbuf_alloc_reference+0x64>)
 8016666:	f003 fee1 	bl	801a42c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801666a:	2004      	movs	r0, #4
 801666c:	f7ff fbaa 	bl	8015dc4 <memp_malloc>
 8016670:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8016672:	68fb      	ldr	r3, [r7, #12]
 8016674:	2b00      	cmp	r3, #0
 8016676:	d101      	bne.n	801667c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8016678:	2300      	movs	r3, #0
 801667a:	e00b      	b.n	8016694 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 801667c:	8879      	ldrh	r1, [r7, #2]
 801667e:	887a      	ldrh	r2, [r7, #2]
 8016680:	2300      	movs	r3, #0
 8016682:	9301      	str	r3, [sp, #4]
 8016684:	883b      	ldrh	r3, [r7, #0]
 8016686:	9300      	str	r3, [sp, #0]
 8016688:	460b      	mov	r3, r1
 801668a:	6879      	ldr	r1, [r7, #4]
 801668c:	68f8      	ldr	r0, [r7, #12]
 801668e:	f7ff feb9 	bl	8016404 <pbuf_init_alloced_pbuf>
  return p;
 8016692:	68fb      	ldr	r3, [r7, #12]
}
 8016694:	4618      	mov	r0, r3
 8016696:	3710      	adds	r7, #16
 8016698:	46bd      	mov	sp, r7
 801669a:	bd80      	pop	{r7, pc}
 801669c:	0801b6dc 	.word	0x0801b6dc
 80166a0:	0801b7e0 	.word	0x0801b7e0
 80166a4:	0801b73c 	.word	0x0801b73c

080166a8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80166a8:	b580      	push	{r7, lr}
 80166aa:	b088      	sub	sp, #32
 80166ac:	af02      	add	r7, sp, #8
 80166ae:	607b      	str	r3, [r7, #4]
 80166b0:	4603      	mov	r3, r0
 80166b2:	73fb      	strb	r3, [r7, #15]
 80166b4:	460b      	mov	r3, r1
 80166b6:	81bb      	strh	r3, [r7, #12]
 80166b8:	4613      	mov	r3, r2
 80166ba:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80166bc:	7bfb      	ldrb	r3, [r7, #15]
 80166be:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80166c0:	8a7b      	ldrh	r3, [r7, #18]
 80166c2:	3303      	adds	r3, #3
 80166c4:	f023 0203 	bic.w	r2, r3, #3
 80166c8:	89bb      	ldrh	r3, [r7, #12]
 80166ca:	441a      	add	r2, r3
 80166cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80166ce:	429a      	cmp	r2, r3
 80166d0:	d901      	bls.n	80166d6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80166d2:	2300      	movs	r3, #0
 80166d4:	e018      	b.n	8016708 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80166d6:	6a3b      	ldr	r3, [r7, #32]
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d007      	beq.n	80166ec <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80166dc:	8a7b      	ldrh	r3, [r7, #18]
 80166de:	3303      	adds	r3, #3
 80166e0:	f023 0303 	bic.w	r3, r3, #3
 80166e4:	6a3a      	ldr	r2, [r7, #32]
 80166e6:	4413      	add	r3, r2
 80166e8:	617b      	str	r3, [r7, #20]
 80166ea:	e001      	b.n	80166f0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80166ec:	2300      	movs	r3, #0
 80166ee:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80166f0:	6878      	ldr	r0, [r7, #4]
 80166f2:	89b9      	ldrh	r1, [r7, #12]
 80166f4:	89ba      	ldrh	r2, [r7, #12]
 80166f6:	2302      	movs	r3, #2
 80166f8:	9301      	str	r3, [sp, #4]
 80166fa:	897b      	ldrh	r3, [r7, #10]
 80166fc:	9300      	str	r3, [sp, #0]
 80166fe:	460b      	mov	r3, r1
 8016700:	6979      	ldr	r1, [r7, #20]
 8016702:	f7ff fe7f 	bl	8016404 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8016706:	687b      	ldr	r3, [r7, #4]
}
 8016708:	4618      	mov	r0, r3
 801670a:	3718      	adds	r7, #24
 801670c:	46bd      	mov	sp, r7
 801670e:	bd80      	pop	{r7, pc}

08016710 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8016710:	b580      	push	{r7, lr}
 8016712:	b084      	sub	sp, #16
 8016714:	af00      	add	r7, sp, #0
 8016716:	6078      	str	r0, [r7, #4]
 8016718:	460b      	mov	r3, r1
 801671a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	2b00      	cmp	r3, #0
 8016720:	d106      	bne.n	8016730 <pbuf_realloc+0x20>
 8016722:	4b3a      	ldr	r3, [pc, #232]	@ (801680c <pbuf_realloc+0xfc>)
 8016724:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8016728:	4939      	ldr	r1, [pc, #228]	@ (8016810 <pbuf_realloc+0x100>)
 801672a:	483a      	ldr	r0, [pc, #232]	@ (8016814 <pbuf_realloc+0x104>)
 801672c:	f003 fe7e 	bl	801a42c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	891b      	ldrh	r3, [r3, #8]
 8016734:	887a      	ldrh	r2, [r7, #2]
 8016736:	429a      	cmp	r2, r3
 8016738:	d263      	bcs.n	8016802 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	891a      	ldrh	r2, [r3, #8]
 801673e:	887b      	ldrh	r3, [r7, #2]
 8016740:	1ad3      	subs	r3, r2, r3
 8016742:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8016744:	887b      	ldrh	r3, [r7, #2]
 8016746:	817b      	strh	r3, [r7, #10]
  q = p;
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801674c:	e018      	b.n	8016780 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801674e:	68fb      	ldr	r3, [r7, #12]
 8016750:	895b      	ldrh	r3, [r3, #10]
 8016752:	897a      	ldrh	r2, [r7, #10]
 8016754:	1ad3      	subs	r3, r2, r3
 8016756:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8016758:	68fb      	ldr	r3, [r7, #12]
 801675a:	891a      	ldrh	r2, [r3, #8]
 801675c:	893b      	ldrh	r3, [r7, #8]
 801675e:	1ad3      	subs	r3, r2, r3
 8016760:	b29a      	uxth	r2, r3
 8016762:	68fb      	ldr	r3, [r7, #12]
 8016764:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8016766:	68fb      	ldr	r3, [r7, #12]
 8016768:	681b      	ldr	r3, [r3, #0]
 801676a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	2b00      	cmp	r3, #0
 8016770:	d106      	bne.n	8016780 <pbuf_realloc+0x70>
 8016772:	4b26      	ldr	r3, [pc, #152]	@ (801680c <pbuf_realloc+0xfc>)
 8016774:	f240 12af 	movw	r2, #431	@ 0x1af
 8016778:	4927      	ldr	r1, [pc, #156]	@ (8016818 <pbuf_realloc+0x108>)
 801677a:	4826      	ldr	r0, [pc, #152]	@ (8016814 <pbuf_realloc+0x104>)
 801677c:	f003 fe56 	bl	801a42c <iprintf>
  while (rem_len > q->len) {
 8016780:	68fb      	ldr	r3, [r7, #12]
 8016782:	895b      	ldrh	r3, [r3, #10]
 8016784:	897a      	ldrh	r2, [r7, #10]
 8016786:	429a      	cmp	r2, r3
 8016788:	d8e1      	bhi.n	801674e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801678a:	68fb      	ldr	r3, [r7, #12]
 801678c:	7b1b      	ldrb	r3, [r3, #12]
 801678e:	f003 030f 	and.w	r3, r3, #15
 8016792:	2b00      	cmp	r3, #0
 8016794:	d121      	bne.n	80167da <pbuf_realloc+0xca>
 8016796:	68fb      	ldr	r3, [r7, #12]
 8016798:	895b      	ldrh	r3, [r3, #10]
 801679a:	897a      	ldrh	r2, [r7, #10]
 801679c:	429a      	cmp	r2, r3
 801679e:	d01c      	beq.n	80167da <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80167a0:	68fb      	ldr	r3, [r7, #12]
 80167a2:	7b5b      	ldrb	r3, [r3, #13]
 80167a4:	f003 0302 	and.w	r3, r3, #2
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	d116      	bne.n	80167da <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80167ac:	68fb      	ldr	r3, [r7, #12]
 80167ae:	685a      	ldr	r2, [r3, #4]
 80167b0:	68fb      	ldr	r3, [r7, #12]
 80167b2:	1ad3      	subs	r3, r2, r3
 80167b4:	b29a      	uxth	r2, r3
 80167b6:	897b      	ldrh	r3, [r7, #10]
 80167b8:	4413      	add	r3, r2
 80167ba:	b29b      	uxth	r3, r3
 80167bc:	4619      	mov	r1, r3
 80167be:	68f8      	ldr	r0, [r7, #12]
 80167c0:	f7ff f896 	bl	80158f0 <mem_trim>
 80167c4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80167c6:	68fb      	ldr	r3, [r7, #12]
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	d106      	bne.n	80167da <pbuf_realloc+0xca>
 80167cc:	4b0f      	ldr	r3, [pc, #60]	@ (801680c <pbuf_realloc+0xfc>)
 80167ce:	f240 12bd 	movw	r2, #445	@ 0x1bd
 80167d2:	4912      	ldr	r1, [pc, #72]	@ (801681c <pbuf_realloc+0x10c>)
 80167d4:	480f      	ldr	r0, [pc, #60]	@ (8016814 <pbuf_realloc+0x104>)
 80167d6:	f003 fe29 	bl	801a42c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80167da:	68fb      	ldr	r3, [r7, #12]
 80167dc:	897a      	ldrh	r2, [r7, #10]
 80167de:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80167e0:	68fb      	ldr	r3, [r7, #12]
 80167e2:	895a      	ldrh	r2, [r3, #10]
 80167e4:	68fb      	ldr	r3, [r7, #12]
 80167e6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80167e8:	68fb      	ldr	r3, [r7, #12]
 80167ea:	681b      	ldr	r3, [r3, #0]
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d004      	beq.n	80167fa <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80167f0:	68fb      	ldr	r3, [r7, #12]
 80167f2:	681b      	ldr	r3, [r3, #0]
 80167f4:	4618      	mov	r0, r3
 80167f6:	f000 f911 	bl	8016a1c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80167fa:	68fb      	ldr	r3, [r7, #12]
 80167fc:	2200      	movs	r2, #0
 80167fe:	601a      	str	r2, [r3, #0]
 8016800:	e000      	b.n	8016804 <pbuf_realloc+0xf4>
    return;
 8016802:	bf00      	nop

}
 8016804:	3710      	adds	r7, #16
 8016806:	46bd      	mov	sp, r7
 8016808:	bd80      	pop	{r7, pc}
 801680a:	bf00      	nop
 801680c:	0801b6dc 	.word	0x0801b6dc
 8016810:	0801b7f4 	.word	0x0801b7f4
 8016814:	0801b73c 	.word	0x0801b73c
 8016818:	0801b80c 	.word	0x0801b80c
 801681c:	0801b824 	.word	0x0801b824

08016820 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8016820:	b580      	push	{r7, lr}
 8016822:	b086      	sub	sp, #24
 8016824:	af00      	add	r7, sp, #0
 8016826:	60f8      	str	r0, [r7, #12]
 8016828:	60b9      	str	r1, [r7, #8]
 801682a:	4613      	mov	r3, r2
 801682c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801682e:	68fb      	ldr	r3, [r7, #12]
 8016830:	2b00      	cmp	r3, #0
 8016832:	d106      	bne.n	8016842 <pbuf_add_header_impl+0x22>
 8016834:	4b2b      	ldr	r3, [pc, #172]	@ (80168e4 <pbuf_add_header_impl+0xc4>)
 8016836:	f240 12df 	movw	r2, #479	@ 0x1df
 801683a:	492b      	ldr	r1, [pc, #172]	@ (80168e8 <pbuf_add_header_impl+0xc8>)
 801683c:	482b      	ldr	r0, [pc, #172]	@ (80168ec <pbuf_add_header_impl+0xcc>)
 801683e:	f003 fdf5 	bl	801a42c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8016842:	68fb      	ldr	r3, [r7, #12]
 8016844:	2b00      	cmp	r3, #0
 8016846:	d003      	beq.n	8016850 <pbuf_add_header_impl+0x30>
 8016848:	68bb      	ldr	r3, [r7, #8]
 801684a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801684e:	d301      	bcc.n	8016854 <pbuf_add_header_impl+0x34>
    return 1;
 8016850:	2301      	movs	r3, #1
 8016852:	e043      	b.n	80168dc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8016854:	68bb      	ldr	r3, [r7, #8]
 8016856:	2b00      	cmp	r3, #0
 8016858:	d101      	bne.n	801685e <pbuf_add_header_impl+0x3e>
    return 0;
 801685a:	2300      	movs	r3, #0
 801685c:	e03e      	b.n	80168dc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801685e:	68bb      	ldr	r3, [r7, #8]
 8016860:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8016862:	68fb      	ldr	r3, [r7, #12]
 8016864:	891a      	ldrh	r2, [r3, #8]
 8016866:	8a7b      	ldrh	r3, [r7, #18]
 8016868:	4413      	add	r3, r2
 801686a:	b29b      	uxth	r3, r3
 801686c:	8a7a      	ldrh	r2, [r7, #18]
 801686e:	429a      	cmp	r2, r3
 8016870:	d901      	bls.n	8016876 <pbuf_add_header_impl+0x56>
    return 1;
 8016872:	2301      	movs	r3, #1
 8016874:	e032      	b.n	80168dc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8016876:	68fb      	ldr	r3, [r7, #12]
 8016878:	7b1b      	ldrb	r3, [r3, #12]
 801687a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801687c:	8a3b      	ldrh	r3, [r7, #16]
 801687e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016882:	2b00      	cmp	r3, #0
 8016884:	d00c      	beq.n	80168a0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8016886:	68fb      	ldr	r3, [r7, #12]
 8016888:	685a      	ldr	r2, [r3, #4]
 801688a:	68bb      	ldr	r3, [r7, #8]
 801688c:	425b      	negs	r3, r3
 801688e:	4413      	add	r3, r2
 8016890:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8016892:	68fb      	ldr	r3, [r7, #12]
 8016894:	3310      	adds	r3, #16
 8016896:	697a      	ldr	r2, [r7, #20]
 8016898:	429a      	cmp	r2, r3
 801689a:	d20d      	bcs.n	80168b8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801689c:	2301      	movs	r3, #1
 801689e:	e01d      	b.n	80168dc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80168a0:	79fb      	ldrb	r3, [r7, #7]
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d006      	beq.n	80168b4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80168a6:	68fb      	ldr	r3, [r7, #12]
 80168a8:	685a      	ldr	r2, [r3, #4]
 80168aa:	68bb      	ldr	r3, [r7, #8]
 80168ac:	425b      	negs	r3, r3
 80168ae:	4413      	add	r3, r2
 80168b0:	617b      	str	r3, [r7, #20]
 80168b2:	e001      	b.n	80168b8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80168b4:	2301      	movs	r3, #1
 80168b6:	e011      	b.n	80168dc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80168b8:	68fb      	ldr	r3, [r7, #12]
 80168ba:	697a      	ldr	r2, [r7, #20]
 80168bc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80168be:	68fb      	ldr	r3, [r7, #12]
 80168c0:	895a      	ldrh	r2, [r3, #10]
 80168c2:	8a7b      	ldrh	r3, [r7, #18]
 80168c4:	4413      	add	r3, r2
 80168c6:	b29a      	uxth	r2, r3
 80168c8:	68fb      	ldr	r3, [r7, #12]
 80168ca:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80168cc:	68fb      	ldr	r3, [r7, #12]
 80168ce:	891a      	ldrh	r2, [r3, #8]
 80168d0:	8a7b      	ldrh	r3, [r7, #18]
 80168d2:	4413      	add	r3, r2
 80168d4:	b29a      	uxth	r2, r3
 80168d6:	68fb      	ldr	r3, [r7, #12]
 80168d8:	811a      	strh	r2, [r3, #8]


  return 0;
 80168da:	2300      	movs	r3, #0
}
 80168dc:	4618      	mov	r0, r3
 80168de:	3718      	adds	r7, #24
 80168e0:	46bd      	mov	sp, r7
 80168e2:	bd80      	pop	{r7, pc}
 80168e4:	0801b6dc 	.word	0x0801b6dc
 80168e8:	0801b840 	.word	0x0801b840
 80168ec:	0801b73c 	.word	0x0801b73c

080168f0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80168f0:	b580      	push	{r7, lr}
 80168f2:	b082      	sub	sp, #8
 80168f4:	af00      	add	r7, sp, #0
 80168f6:	6078      	str	r0, [r7, #4]
 80168f8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80168fa:	2200      	movs	r2, #0
 80168fc:	6839      	ldr	r1, [r7, #0]
 80168fe:	6878      	ldr	r0, [r7, #4]
 8016900:	f7ff ff8e 	bl	8016820 <pbuf_add_header_impl>
 8016904:	4603      	mov	r3, r0
}
 8016906:	4618      	mov	r0, r3
 8016908:	3708      	adds	r7, #8
 801690a:	46bd      	mov	sp, r7
 801690c:	bd80      	pop	{r7, pc}
	...

08016910 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8016910:	b580      	push	{r7, lr}
 8016912:	b084      	sub	sp, #16
 8016914:	af00      	add	r7, sp, #0
 8016916:	6078      	str	r0, [r7, #4]
 8016918:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	2b00      	cmp	r3, #0
 801691e:	d106      	bne.n	801692e <pbuf_remove_header+0x1e>
 8016920:	4b20      	ldr	r3, [pc, #128]	@ (80169a4 <pbuf_remove_header+0x94>)
 8016922:	f240 224b 	movw	r2, #587	@ 0x24b
 8016926:	4920      	ldr	r1, [pc, #128]	@ (80169a8 <pbuf_remove_header+0x98>)
 8016928:	4820      	ldr	r0, [pc, #128]	@ (80169ac <pbuf_remove_header+0x9c>)
 801692a:	f003 fd7f 	bl	801a42c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	2b00      	cmp	r3, #0
 8016932:	d003      	beq.n	801693c <pbuf_remove_header+0x2c>
 8016934:	683b      	ldr	r3, [r7, #0]
 8016936:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801693a:	d301      	bcc.n	8016940 <pbuf_remove_header+0x30>
    return 1;
 801693c:	2301      	movs	r3, #1
 801693e:	e02c      	b.n	801699a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8016940:	683b      	ldr	r3, [r7, #0]
 8016942:	2b00      	cmp	r3, #0
 8016944:	d101      	bne.n	801694a <pbuf_remove_header+0x3a>
    return 0;
 8016946:	2300      	movs	r3, #0
 8016948:	e027      	b.n	801699a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801694a:	683b      	ldr	r3, [r7, #0]
 801694c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	895b      	ldrh	r3, [r3, #10]
 8016952:	89fa      	ldrh	r2, [r7, #14]
 8016954:	429a      	cmp	r2, r3
 8016956:	d908      	bls.n	801696a <pbuf_remove_header+0x5a>
 8016958:	4b12      	ldr	r3, [pc, #72]	@ (80169a4 <pbuf_remove_header+0x94>)
 801695a:	f240 2255 	movw	r2, #597	@ 0x255
 801695e:	4914      	ldr	r1, [pc, #80]	@ (80169b0 <pbuf_remove_header+0xa0>)
 8016960:	4812      	ldr	r0, [pc, #72]	@ (80169ac <pbuf_remove_header+0x9c>)
 8016962:	f003 fd63 	bl	801a42c <iprintf>
 8016966:	2301      	movs	r3, #1
 8016968:	e017      	b.n	801699a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	685b      	ldr	r3, [r3, #4]
 801696e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	685a      	ldr	r2, [r3, #4]
 8016974:	683b      	ldr	r3, [r7, #0]
 8016976:	441a      	add	r2, r3
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	895a      	ldrh	r2, [r3, #10]
 8016980:	89fb      	ldrh	r3, [r7, #14]
 8016982:	1ad3      	subs	r3, r2, r3
 8016984:	b29a      	uxth	r2, r3
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	891a      	ldrh	r2, [r3, #8]
 801698e:	89fb      	ldrh	r3, [r7, #14]
 8016990:	1ad3      	subs	r3, r2, r3
 8016992:	b29a      	uxth	r2, r3
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8016998:	2300      	movs	r3, #0
}
 801699a:	4618      	mov	r0, r3
 801699c:	3710      	adds	r7, #16
 801699e:	46bd      	mov	sp, r7
 80169a0:	bd80      	pop	{r7, pc}
 80169a2:	bf00      	nop
 80169a4:	0801b6dc 	.word	0x0801b6dc
 80169a8:	0801b840 	.word	0x0801b840
 80169ac:	0801b73c 	.word	0x0801b73c
 80169b0:	0801b84c 	.word	0x0801b84c

080169b4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80169b4:	b580      	push	{r7, lr}
 80169b6:	b082      	sub	sp, #8
 80169b8:	af00      	add	r7, sp, #0
 80169ba:	6078      	str	r0, [r7, #4]
 80169bc:	460b      	mov	r3, r1
 80169be:	807b      	strh	r3, [r7, #2]
 80169c0:	4613      	mov	r3, r2
 80169c2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80169c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	da08      	bge.n	80169de <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80169cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80169d0:	425b      	negs	r3, r3
 80169d2:	4619      	mov	r1, r3
 80169d4:	6878      	ldr	r0, [r7, #4]
 80169d6:	f7ff ff9b 	bl	8016910 <pbuf_remove_header>
 80169da:	4603      	mov	r3, r0
 80169dc:	e007      	b.n	80169ee <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80169de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80169e2:	787a      	ldrb	r2, [r7, #1]
 80169e4:	4619      	mov	r1, r3
 80169e6:	6878      	ldr	r0, [r7, #4]
 80169e8:	f7ff ff1a 	bl	8016820 <pbuf_add_header_impl>
 80169ec:	4603      	mov	r3, r0
  }
}
 80169ee:	4618      	mov	r0, r3
 80169f0:	3708      	adds	r7, #8
 80169f2:	46bd      	mov	sp, r7
 80169f4:	bd80      	pop	{r7, pc}

080169f6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80169f6:	b580      	push	{r7, lr}
 80169f8:	b082      	sub	sp, #8
 80169fa:	af00      	add	r7, sp, #0
 80169fc:	6078      	str	r0, [r7, #4]
 80169fe:	460b      	mov	r3, r1
 8016a00:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8016a02:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016a06:	2201      	movs	r2, #1
 8016a08:	4619      	mov	r1, r3
 8016a0a:	6878      	ldr	r0, [r7, #4]
 8016a0c:	f7ff ffd2 	bl	80169b4 <pbuf_header_impl>
 8016a10:	4603      	mov	r3, r0
}
 8016a12:	4618      	mov	r0, r3
 8016a14:	3708      	adds	r7, #8
 8016a16:	46bd      	mov	sp, r7
 8016a18:	bd80      	pop	{r7, pc}
	...

08016a1c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8016a1c:	b580      	push	{r7, lr}
 8016a1e:	b086      	sub	sp, #24
 8016a20:	af00      	add	r7, sp, #0
 8016a22:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d10b      	bne.n	8016a42 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d106      	bne.n	8016a3e <pbuf_free+0x22>
 8016a30:	4b38      	ldr	r3, [pc, #224]	@ (8016b14 <pbuf_free+0xf8>)
 8016a32:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8016a36:	4938      	ldr	r1, [pc, #224]	@ (8016b18 <pbuf_free+0xfc>)
 8016a38:	4838      	ldr	r0, [pc, #224]	@ (8016b1c <pbuf_free+0x100>)
 8016a3a:	f003 fcf7 	bl	801a42c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8016a3e:	2300      	movs	r3, #0
 8016a40:	e063      	b.n	8016b0a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8016a42:	2300      	movs	r3, #0
 8016a44:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8016a46:	e05c      	b.n	8016b02 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	7b9b      	ldrb	r3, [r3, #14]
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	d106      	bne.n	8016a5e <pbuf_free+0x42>
 8016a50:	4b30      	ldr	r3, [pc, #192]	@ (8016b14 <pbuf_free+0xf8>)
 8016a52:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8016a56:	4932      	ldr	r1, [pc, #200]	@ (8016b20 <pbuf_free+0x104>)
 8016a58:	4830      	ldr	r0, [pc, #192]	@ (8016b1c <pbuf_free+0x100>)
 8016a5a:	f003 fce7 	bl	801a42c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	7b9b      	ldrb	r3, [r3, #14]
 8016a62:	3b01      	subs	r3, #1
 8016a64:	b2da      	uxtb	r2, r3
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	739a      	strb	r2, [r3, #14]
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	7b9b      	ldrb	r3, [r3, #14]
 8016a6e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8016a70:	7dbb      	ldrb	r3, [r7, #22]
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d143      	bne.n	8016afe <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	681b      	ldr	r3, [r3, #0]
 8016a7a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	7b1b      	ldrb	r3, [r3, #12]
 8016a80:	f003 030f 	and.w	r3, r3, #15
 8016a84:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	7b5b      	ldrb	r3, [r3, #13]
 8016a8a:	f003 0302 	and.w	r3, r3, #2
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d011      	beq.n	8016ab6 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8016a96:	68bb      	ldr	r3, [r7, #8]
 8016a98:	691b      	ldr	r3, [r3, #16]
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d106      	bne.n	8016aac <pbuf_free+0x90>
 8016a9e:	4b1d      	ldr	r3, [pc, #116]	@ (8016b14 <pbuf_free+0xf8>)
 8016aa0:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8016aa4:	491f      	ldr	r1, [pc, #124]	@ (8016b24 <pbuf_free+0x108>)
 8016aa6:	481d      	ldr	r0, [pc, #116]	@ (8016b1c <pbuf_free+0x100>)
 8016aa8:	f003 fcc0 	bl	801a42c <iprintf>
        pc->custom_free_function(p);
 8016aac:	68bb      	ldr	r3, [r7, #8]
 8016aae:	691b      	ldr	r3, [r3, #16]
 8016ab0:	6878      	ldr	r0, [r7, #4]
 8016ab2:	4798      	blx	r3
 8016ab4:	e01d      	b.n	8016af2 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8016ab6:	7bfb      	ldrb	r3, [r7, #15]
 8016ab8:	2b02      	cmp	r3, #2
 8016aba:	d104      	bne.n	8016ac6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8016abc:	6879      	ldr	r1, [r7, #4]
 8016abe:	2005      	movs	r0, #5
 8016ac0:	f7ff f9cc 	bl	8015e5c <memp_free>
 8016ac4:	e015      	b.n	8016af2 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8016ac6:	7bfb      	ldrb	r3, [r7, #15]
 8016ac8:	2b01      	cmp	r3, #1
 8016aca:	d104      	bne.n	8016ad6 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8016acc:	6879      	ldr	r1, [r7, #4]
 8016ace:	2004      	movs	r0, #4
 8016ad0:	f7ff f9c4 	bl	8015e5c <memp_free>
 8016ad4:	e00d      	b.n	8016af2 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8016ad6:	7bfb      	ldrb	r3, [r7, #15]
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d103      	bne.n	8016ae4 <pbuf_free+0xc8>
          mem_free(p);
 8016adc:	6878      	ldr	r0, [r7, #4]
 8016ade:	f7fe fe9d 	bl	801581c <mem_free>
 8016ae2:	e006      	b.n	8016af2 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8016ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8016b14 <pbuf_free+0xf8>)
 8016ae6:	f240 320f 	movw	r2, #783	@ 0x30f
 8016aea:	490f      	ldr	r1, [pc, #60]	@ (8016b28 <pbuf_free+0x10c>)
 8016aec:	480b      	ldr	r0, [pc, #44]	@ (8016b1c <pbuf_free+0x100>)
 8016aee:	f003 fc9d 	bl	801a42c <iprintf>
        }
      }
      count++;
 8016af2:	7dfb      	ldrb	r3, [r7, #23]
 8016af4:	3301      	adds	r3, #1
 8016af6:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8016af8:	693b      	ldr	r3, [r7, #16]
 8016afa:	607b      	str	r3, [r7, #4]
 8016afc:	e001      	b.n	8016b02 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8016afe:	2300      	movs	r3, #0
 8016b00:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	d19f      	bne.n	8016a48 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8016b08:	7dfb      	ldrb	r3, [r7, #23]
}
 8016b0a:	4618      	mov	r0, r3
 8016b0c:	3718      	adds	r7, #24
 8016b0e:	46bd      	mov	sp, r7
 8016b10:	bd80      	pop	{r7, pc}
 8016b12:	bf00      	nop
 8016b14:	0801b6dc 	.word	0x0801b6dc
 8016b18:	0801b840 	.word	0x0801b840
 8016b1c:	0801b73c 	.word	0x0801b73c
 8016b20:	0801b86c 	.word	0x0801b86c
 8016b24:	0801b884 	.word	0x0801b884
 8016b28:	0801b8a8 	.word	0x0801b8a8

08016b2c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8016b2c:	b480      	push	{r7}
 8016b2e:	b085      	sub	sp, #20
 8016b30:	af00      	add	r7, sp, #0
 8016b32:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8016b34:	2300      	movs	r3, #0
 8016b36:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8016b38:	e005      	b.n	8016b46 <pbuf_clen+0x1a>
    ++len;
 8016b3a:	89fb      	ldrh	r3, [r7, #14]
 8016b3c:	3301      	adds	r3, #1
 8016b3e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	d1f6      	bne.n	8016b3a <pbuf_clen+0xe>
  }
  return len;
 8016b4c:	89fb      	ldrh	r3, [r7, #14]
}
 8016b4e:	4618      	mov	r0, r3
 8016b50:	3714      	adds	r7, #20
 8016b52:	46bd      	mov	sp, r7
 8016b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b58:	4770      	bx	lr
	...

08016b5c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8016b5c:	b580      	push	{r7, lr}
 8016b5e:	b082      	sub	sp, #8
 8016b60:	af00      	add	r7, sp, #0
 8016b62:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	d010      	beq.n	8016b8c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	7b9b      	ldrb	r3, [r3, #14]
 8016b6e:	3301      	adds	r3, #1
 8016b70:	b2da      	uxtb	r2, r3
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	7b9b      	ldrb	r3, [r3, #14]
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d106      	bne.n	8016b8c <pbuf_ref+0x30>
 8016b7e:	4b05      	ldr	r3, [pc, #20]	@ (8016b94 <pbuf_ref+0x38>)
 8016b80:	f240 3242 	movw	r2, #834	@ 0x342
 8016b84:	4904      	ldr	r1, [pc, #16]	@ (8016b98 <pbuf_ref+0x3c>)
 8016b86:	4805      	ldr	r0, [pc, #20]	@ (8016b9c <pbuf_ref+0x40>)
 8016b88:	f003 fc50 	bl	801a42c <iprintf>
  }
}
 8016b8c:	bf00      	nop
 8016b8e:	3708      	adds	r7, #8
 8016b90:	46bd      	mov	sp, r7
 8016b92:	bd80      	pop	{r7, pc}
 8016b94:	0801b6dc 	.word	0x0801b6dc
 8016b98:	0801b8bc 	.word	0x0801b8bc
 8016b9c:	0801b73c 	.word	0x0801b73c

08016ba0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8016ba0:	b580      	push	{r7, lr}
 8016ba2:	b084      	sub	sp, #16
 8016ba4:	af00      	add	r7, sp, #0
 8016ba6:	6078      	str	r0, [r7, #4]
 8016ba8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d002      	beq.n	8016bb6 <pbuf_cat+0x16>
 8016bb0:	683b      	ldr	r3, [r7, #0]
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d107      	bne.n	8016bc6 <pbuf_cat+0x26>
 8016bb6:	4b20      	ldr	r3, [pc, #128]	@ (8016c38 <pbuf_cat+0x98>)
 8016bb8:	f240 3259 	movw	r2, #857	@ 0x359
 8016bbc:	491f      	ldr	r1, [pc, #124]	@ (8016c3c <pbuf_cat+0x9c>)
 8016bbe:	4820      	ldr	r0, [pc, #128]	@ (8016c40 <pbuf_cat+0xa0>)
 8016bc0:	f003 fc34 	bl	801a42c <iprintf>
 8016bc4:	e034      	b.n	8016c30 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	60fb      	str	r3, [r7, #12]
 8016bca:	e00a      	b.n	8016be2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8016bcc:	68fb      	ldr	r3, [r7, #12]
 8016bce:	891a      	ldrh	r2, [r3, #8]
 8016bd0:	683b      	ldr	r3, [r7, #0]
 8016bd2:	891b      	ldrh	r3, [r3, #8]
 8016bd4:	4413      	add	r3, r2
 8016bd6:	b29a      	uxth	r2, r3
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8016bdc:	68fb      	ldr	r3, [r7, #12]
 8016bde:	681b      	ldr	r3, [r3, #0]
 8016be0:	60fb      	str	r3, [r7, #12]
 8016be2:	68fb      	ldr	r3, [r7, #12]
 8016be4:	681b      	ldr	r3, [r3, #0]
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	d1f0      	bne.n	8016bcc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8016bea:	68fb      	ldr	r3, [r7, #12]
 8016bec:	891a      	ldrh	r2, [r3, #8]
 8016bee:	68fb      	ldr	r3, [r7, #12]
 8016bf0:	895b      	ldrh	r3, [r3, #10]
 8016bf2:	429a      	cmp	r2, r3
 8016bf4:	d006      	beq.n	8016c04 <pbuf_cat+0x64>
 8016bf6:	4b10      	ldr	r3, [pc, #64]	@ (8016c38 <pbuf_cat+0x98>)
 8016bf8:	f240 3262 	movw	r2, #866	@ 0x362
 8016bfc:	4911      	ldr	r1, [pc, #68]	@ (8016c44 <pbuf_cat+0xa4>)
 8016bfe:	4810      	ldr	r0, [pc, #64]	@ (8016c40 <pbuf_cat+0xa0>)
 8016c00:	f003 fc14 	bl	801a42c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8016c04:	68fb      	ldr	r3, [r7, #12]
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	d006      	beq.n	8016c1a <pbuf_cat+0x7a>
 8016c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8016c38 <pbuf_cat+0x98>)
 8016c0e:	f240 3263 	movw	r2, #867	@ 0x363
 8016c12:	490d      	ldr	r1, [pc, #52]	@ (8016c48 <pbuf_cat+0xa8>)
 8016c14:	480a      	ldr	r0, [pc, #40]	@ (8016c40 <pbuf_cat+0xa0>)
 8016c16:	f003 fc09 	bl	801a42c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8016c1a:	68fb      	ldr	r3, [r7, #12]
 8016c1c:	891a      	ldrh	r2, [r3, #8]
 8016c1e:	683b      	ldr	r3, [r7, #0]
 8016c20:	891b      	ldrh	r3, [r3, #8]
 8016c22:	4413      	add	r3, r2
 8016c24:	b29a      	uxth	r2, r3
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	683a      	ldr	r2, [r7, #0]
 8016c2e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8016c30:	3710      	adds	r7, #16
 8016c32:	46bd      	mov	sp, r7
 8016c34:	bd80      	pop	{r7, pc}
 8016c36:	bf00      	nop
 8016c38:	0801b6dc 	.word	0x0801b6dc
 8016c3c:	0801b8d0 	.word	0x0801b8d0
 8016c40:	0801b73c 	.word	0x0801b73c
 8016c44:	0801b908 	.word	0x0801b908
 8016c48:	0801b938 	.word	0x0801b938

08016c4c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8016c4c:	b580      	push	{r7, lr}
 8016c4e:	b082      	sub	sp, #8
 8016c50:	af00      	add	r7, sp, #0
 8016c52:	6078      	str	r0, [r7, #4]
 8016c54:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8016c56:	6839      	ldr	r1, [r7, #0]
 8016c58:	6878      	ldr	r0, [r7, #4]
 8016c5a:	f7ff ffa1 	bl	8016ba0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8016c5e:	6838      	ldr	r0, [r7, #0]
 8016c60:	f7ff ff7c 	bl	8016b5c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8016c64:	bf00      	nop
 8016c66:	3708      	adds	r7, #8
 8016c68:	46bd      	mov	sp, r7
 8016c6a:	bd80      	pop	{r7, pc}

08016c6c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8016c6c:	b580      	push	{r7, lr}
 8016c6e:	b086      	sub	sp, #24
 8016c70:	af00      	add	r7, sp, #0
 8016c72:	6078      	str	r0, [r7, #4]
 8016c74:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8016c76:	2300      	movs	r3, #0
 8016c78:	617b      	str	r3, [r7, #20]
 8016c7a:	2300      	movs	r3, #0
 8016c7c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	d008      	beq.n	8016c96 <pbuf_copy+0x2a>
 8016c84:	683b      	ldr	r3, [r7, #0]
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d005      	beq.n	8016c96 <pbuf_copy+0x2a>
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	891a      	ldrh	r2, [r3, #8]
 8016c8e:	683b      	ldr	r3, [r7, #0]
 8016c90:	891b      	ldrh	r3, [r3, #8]
 8016c92:	429a      	cmp	r2, r3
 8016c94:	d209      	bcs.n	8016caa <pbuf_copy+0x3e>
 8016c96:	4b57      	ldr	r3, [pc, #348]	@ (8016df4 <pbuf_copy+0x188>)
 8016c98:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8016c9c:	4956      	ldr	r1, [pc, #344]	@ (8016df8 <pbuf_copy+0x18c>)
 8016c9e:	4857      	ldr	r0, [pc, #348]	@ (8016dfc <pbuf_copy+0x190>)
 8016ca0:	f003 fbc4 	bl	801a42c <iprintf>
 8016ca4:	f06f 030f 	mvn.w	r3, #15
 8016ca8:	e09f      	b.n	8016dea <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	895b      	ldrh	r3, [r3, #10]
 8016cae:	461a      	mov	r2, r3
 8016cb0:	697b      	ldr	r3, [r7, #20]
 8016cb2:	1ad2      	subs	r2, r2, r3
 8016cb4:	683b      	ldr	r3, [r7, #0]
 8016cb6:	895b      	ldrh	r3, [r3, #10]
 8016cb8:	4619      	mov	r1, r3
 8016cba:	693b      	ldr	r3, [r7, #16]
 8016cbc:	1acb      	subs	r3, r1, r3
 8016cbe:	429a      	cmp	r2, r3
 8016cc0:	d306      	bcc.n	8016cd0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8016cc2:	683b      	ldr	r3, [r7, #0]
 8016cc4:	895b      	ldrh	r3, [r3, #10]
 8016cc6:	461a      	mov	r2, r3
 8016cc8:	693b      	ldr	r3, [r7, #16]
 8016cca:	1ad3      	subs	r3, r2, r3
 8016ccc:	60fb      	str	r3, [r7, #12]
 8016cce:	e005      	b.n	8016cdc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	895b      	ldrh	r3, [r3, #10]
 8016cd4:	461a      	mov	r2, r3
 8016cd6:	697b      	ldr	r3, [r7, #20]
 8016cd8:	1ad3      	subs	r3, r2, r3
 8016cda:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	685a      	ldr	r2, [r3, #4]
 8016ce0:	697b      	ldr	r3, [r7, #20]
 8016ce2:	18d0      	adds	r0, r2, r3
 8016ce4:	683b      	ldr	r3, [r7, #0]
 8016ce6:	685a      	ldr	r2, [r3, #4]
 8016ce8:	693b      	ldr	r3, [r7, #16]
 8016cea:	4413      	add	r3, r2
 8016cec:	68fa      	ldr	r2, [r7, #12]
 8016cee:	4619      	mov	r1, r3
 8016cf0:	f003 fc87 	bl	801a602 <memcpy>
    offset_to += len;
 8016cf4:	697a      	ldr	r2, [r7, #20]
 8016cf6:	68fb      	ldr	r3, [r7, #12]
 8016cf8:	4413      	add	r3, r2
 8016cfa:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8016cfc:	693a      	ldr	r2, [r7, #16]
 8016cfe:	68fb      	ldr	r3, [r7, #12]
 8016d00:	4413      	add	r3, r2
 8016d02:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	895b      	ldrh	r3, [r3, #10]
 8016d08:	461a      	mov	r2, r3
 8016d0a:	697b      	ldr	r3, [r7, #20]
 8016d0c:	4293      	cmp	r3, r2
 8016d0e:	d906      	bls.n	8016d1e <pbuf_copy+0xb2>
 8016d10:	4b38      	ldr	r3, [pc, #224]	@ (8016df4 <pbuf_copy+0x188>)
 8016d12:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8016d16:	493a      	ldr	r1, [pc, #232]	@ (8016e00 <pbuf_copy+0x194>)
 8016d18:	4838      	ldr	r0, [pc, #224]	@ (8016dfc <pbuf_copy+0x190>)
 8016d1a:	f003 fb87 	bl	801a42c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8016d1e:	683b      	ldr	r3, [r7, #0]
 8016d20:	895b      	ldrh	r3, [r3, #10]
 8016d22:	461a      	mov	r2, r3
 8016d24:	693b      	ldr	r3, [r7, #16]
 8016d26:	4293      	cmp	r3, r2
 8016d28:	d906      	bls.n	8016d38 <pbuf_copy+0xcc>
 8016d2a:	4b32      	ldr	r3, [pc, #200]	@ (8016df4 <pbuf_copy+0x188>)
 8016d2c:	f240 32da 	movw	r2, #986	@ 0x3da
 8016d30:	4934      	ldr	r1, [pc, #208]	@ (8016e04 <pbuf_copy+0x198>)
 8016d32:	4832      	ldr	r0, [pc, #200]	@ (8016dfc <pbuf_copy+0x190>)
 8016d34:	f003 fb7a 	bl	801a42c <iprintf>
    if (offset_from >= p_from->len) {
 8016d38:	683b      	ldr	r3, [r7, #0]
 8016d3a:	895b      	ldrh	r3, [r3, #10]
 8016d3c:	461a      	mov	r2, r3
 8016d3e:	693b      	ldr	r3, [r7, #16]
 8016d40:	4293      	cmp	r3, r2
 8016d42:	d304      	bcc.n	8016d4e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8016d44:	2300      	movs	r3, #0
 8016d46:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8016d48:	683b      	ldr	r3, [r7, #0]
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	895b      	ldrh	r3, [r3, #10]
 8016d52:	461a      	mov	r2, r3
 8016d54:	697b      	ldr	r3, [r7, #20]
 8016d56:	4293      	cmp	r3, r2
 8016d58:	d114      	bne.n	8016d84 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8016d5a:	2300      	movs	r3, #0
 8016d5c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	681b      	ldr	r3, [r3, #0]
 8016d62:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	d10c      	bne.n	8016d84 <pbuf_copy+0x118>
 8016d6a:	683b      	ldr	r3, [r7, #0]
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	d009      	beq.n	8016d84 <pbuf_copy+0x118>
 8016d70:	4b20      	ldr	r3, [pc, #128]	@ (8016df4 <pbuf_copy+0x188>)
 8016d72:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8016d76:	4924      	ldr	r1, [pc, #144]	@ (8016e08 <pbuf_copy+0x19c>)
 8016d78:	4820      	ldr	r0, [pc, #128]	@ (8016dfc <pbuf_copy+0x190>)
 8016d7a:	f003 fb57 	bl	801a42c <iprintf>
 8016d7e:	f06f 030f 	mvn.w	r3, #15
 8016d82:	e032      	b.n	8016dea <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8016d84:	683b      	ldr	r3, [r7, #0]
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d013      	beq.n	8016db2 <pbuf_copy+0x146>
 8016d8a:	683b      	ldr	r3, [r7, #0]
 8016d8c:	895a      	ldrh	r2, [r3, #10]
 8016d8e:	683b      	ldr	r3, [r7, #0]
 8016d90:	891b      	ldrh	r3, [r3, #8]
 8016d92:	429a      	cmp	r2, r3
 8016d94:	d10d      	bne.n	8016db2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8016d96:	683b      	ldr	r3, [r7, #0]
 8016d98:	681b      	ldr	r3, [r3, #0]
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	d009      	beq.n	8016db2 <pbuf_copy+0x146>
 8016d9e:	4b15      	ldr	r3, [pc, #84]	@ (8016df4 <pbuf_copy+0x188>)
 8016da0:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8016da4:	4919      	ldr	r1, [pc, #100]	@ (8016e0c <pbuf_copy+0x1a0>)
 8016da6:	4815      	ldr	r0, [pc, #84]	@ (8016dfc <pbuf_copy+0x190>)
 8016da8:	f003 fb40 	bl	801a42c <iprintf>
 8016dac:	f06f 0305 	mvn.w	r3, #5
 8016db0:	e01b      	b.n	8016dea <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	d013      	beq.n	8016de0 <pbuf_copy+0x174>
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	895a      	ldrh	r2, [r3, #10]
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	891b      	ldrh	r3, [r3, #8]
 8016dc0:	429a      	cmp	r2, r3
 8016dc2:	d10d      	bne.n	8016de0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	681b      	ldr	r3, [r3, #0]
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d009      	beq.n	8016de0 <pbuf_copy+0x174>
 8016dcc:	4b09      	ldr	r3, [pc, #36]	@ (8016df4 <pbuf_copy+0x188>)
 8016dce:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8016dd2:	490e      	ldr	r1, [pc, #56]	@ (8016e0c <pbuf_copy+0x1a0>)
 8016dd4:	4809      	ldr	r0, [pc, #36]	@ (8016dfc <pbuf_copy+0x190>)
 8016dd6:	f003 fb29 	bl	801a42c <iprintf>
 8016dda:	f06f 0305 	mvn.w	r3, #5
 8016dde:	e004      	b.n	8016dea <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8016de0:	683b      	ldr	r3, [r7, #0]
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	f47f af61 	bne.w	8016caa <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8016de8:	2300      	movs	r3, #0
}
 8016dea:	4618      	mov	r0, r3
 8016dec:	3718      	adds	r7, #24
 8016dee:	46bd      	mov	sp, r7
 8016df0:	bd80      	pop	{r7, pc}
 8016df2:	bf00      	nop
 8016df4:	0801b6dc 	.word	0x0801b6dc
 8016df8:	0801b984 	.word	0x0801b984
 8016dfc:	0801b73c 	.word	0x0801b73c
 8016e00:	0801b9b4 	.word	0x0801b9b4
 8016e04:	0801b9cc 	.word	0x0801b9cc
 8016e08:	0801b9e8 	.word	0x0801b9e8
 8016e0c:	0801b9f8 	.word	0x0801b9f8

08016e10 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8016e10:	b580      	push	{r7, lr}
 8016e12:	b084      	sub	sp, #16
 8016e14:	af00      	add	r7, sp, #0
 8016e16:	4603      	mov	r3, r0
 8016e18:	603a      	str	r2, [r7, #0]
 8016e1a:	71fb      	strb	r3, [r7, #7]
 8016e1c:	460b      	mov	r3, r1
 8016e1e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8016e20:	683b      	ldr	r3, [r7, #0]
 8016e22:	8919      	ldrh	r1, [r3, #8]
 8016e24:	88ba      	ldrh	r2, [r7, #4]
 8016e26:	79fb      	ldrb	r3, [r7, #7]
 8016e28:	4618      	mov	r0, r3
 8016e2a:	f7ff fb15 	bl	8016458 <pbuf_alloc>
 8016e2e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8016e30:	68fb      	ldr	r3, [r7, #12]
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	d101      	bne.n	8016e3a <pbuf_clone+0x2a>
    return NULL;
 8016e36:	2300      	movs	r3, #0
 8016e38:	e011      	b.n	8016e5e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8016e3a:	6839      	ldr	r1, [r7, #0]
 8016e3c:	68f8      	ldr	r0, [r7, #12]
 8016e3e:	f7ff ff15 	bl	8016c6c <pbuf_copy>
 8016e42:	4603      	mov	r3, r0
 8016e44:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8016e46:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	d006      	beq.n	8016e5c <pbuf_clone+0x4c>
 8016e4e:	4b06      	ldr	r3, [pc, #24]	@ (8016e68 <pbuf_clone+0x58>)
 8016e50:	f240 5224 	movw	r2, #1316	@ 0x524
 8016e54:	4905      	ldr	r1, [pc, #20]	@ (8016e6c <pbuf_clone+0x5c>)
 8016e56:	4806      	ldr	r0, [pc, #24]	@ (8016e70 <pbuf_clone+0x60>)
 8016e58:	f003 fae8 	bl	801a42c <iprintf>
  return q;
 8016e5c:	68fb      	ldr	r3, [r7, #12]
}
 8016e5e:	4618      	mov	r0, r3
 8016e60:	3710      	adds	r7, #16
 8016e62:	46bd      	mov	sp, r7
 8016e64:	bd80      	pop	{r7, pc}
 8016e66:	bf00      	nop
 8016e68:	0801b6dc 	.word	0x0801b6dc
 8016e6c:	0801bb50 	.word	0x0801bb50
 8016e70:	0801b73c 	.word	0x0801b73c

08016e74 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8016e74:	b580      	push	{r7, lr}
 8016e76:	b086      	sub	sp, #24
 8016e78:	af00      	add	r7, sp, #0
 8016e7a:	60f8      	str	r0, [r7, #12]
 8016e7c:	60b9      	str	r1, [r7, #8]
 8016e7e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8016e80:	2003      	movs	r0, #3
 8016e82:	f7fe ff9f 	bl	8015dc4 <memp_malloc>
 8016e86:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8016e88:	693b      	ldr	r3, [r7, #16]
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	d109      	bne.n	8016ea2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8016e8e:	693b      	ldr	r3, [r7, #16]
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d151      	bne.n	8016f38 <sys_timeout_abs+0xc4>
 8016e94:	4b2a      	ldr	r3, [pc, #168]	@ (8016f40 <sys_timeout_abs+0xcc>)
 8016e96:	22be      	movs	r2, #190	@ 0xbe
 8016e98:	492a      	ldr	r1, [pc, #168]	@ (8016f44 <sys_timeout_abs+0xd0>)
 8016e9a:	482b      	ldr	r0, [pc, #172]	@ (8016f48 <sys_timeout_abs+0xd4>)
 8016e9c:	f003 fac6 	bl	801a42c <iprintf>
    return;
 8016ea0:	e04a      	b.n	8016f38 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8016ea2:	693b      	ldr	r3, [r7, #16]
 8016ea4:	2200      	movs	r2, #0
 8016ea6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8016ea8:	693b      	ldr	r3, [r7, #16]
 8016eaa:	68ba      	ldr	r2, [r7, #8]
 8016eac:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8016eae:	693b      	ldr	r3, [r7, #16]
 8016eb0:	687a      	ldr	r2, [r7, #4]
 8016eb2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8016eb4:	693b      	ldr	r3, [r7, #16]
 8016eb6:	68fa      	ldr	r2, [r7, #12]
 8016eb8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8016eba:	4b24      	ldr	r3, [pc, #144]	@ (8016f4c <sys_timeout_abs+0xd8>)
 8016ebc:	681b      	ldr	r3, [r3, #0]
 8016ebe:	2b00      	cmp	r3, #0
 8016ec0:	d103      	bne.n	8016eca <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8016ec2:	4a22      	ldr	r2, [pc, #136]	@ (8016f4c <sys_timeout_abs+0xd8>)
 8016ec4:	693b      	ldr	r3, [r7, #16]
 8016ec6:	6013      	str	r3, [r2, #0]
    return;
 8016ec8:	e037      	b.n	8016f3a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8016eca:	693b      	ldr	r3, [r7, #16]
 8016ecc:	685a      	ldr	r2, [r3, #4]
 8016ece:	4b1f      	ldr	r3, [pc, #124]	@ (8016f4c <sys_timeout_abs+0xd8>)
 8016ed0:	681b      	ldr	r3, [r3, #0]
 8016ed2:	685b      	ldr	r3, [r3, #4]
 8016ed4:	1ad3      	subs	r3, r2, r3
 8016ed6:	0fdb      	lsrs	r3, r3, #31
 8016ed8:	f003 0301 	and.w	r3, r3, #1
 8016edc:	b2db      	uxtb	r3, r3
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	d007      	beq.n	8016ef2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8016ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8016f4c <sys_timeout_abs+0xd8>)
 8016ee4:	681a      	ldr	r2, [r3, #0]
 8016ee6:	693b      	ldr	r3, [r7, #16]
 8016ee8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8016eea:	4a18      	ldr	r2, [pc, #96]	@ (8016f4c <sys_timeout_abs+0xd8>)
 8016eec:	693b      	ldr	r3, [r7, #16]
 8016eee:	6013      	str	r3, [r2, #0]
 8016ef0:	e023      	b.n	8016f3a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8016ef2:	4b16      	ldr	r3, [pc, #88]	@ (8016f4c <sys_timeout_abs+0xd8>)
 8016ef4:	681b      	ldr	r3, [r3, #0]
 8016ef6:	617b      	str	r3, [r7, #20]
 8016ef8:	e01a      	b.n	8016f30 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8016efa:	697b      	ldr	r3, [r7, #20]
 8016efc:	681b      	ldr	r3, [r3, #0]
 8016efe:	2b00      	cmp	r3, #0
 8016f00:	d00b      	beq.n	8016f1a <sys_timeout_abs+0xa6>
 8016f02:	693b      	ldr	r3, [r7, #16]
 8016f04:	685a      	ldr	r2, [r3, #4]
 8016f06:	697b      	ldr	r3, [r7, #20]
 8016f08:	681b      	ldr	r3, [r3, #0]
 8016f0a:	685b      	ldr	r3, [r3, #4]
 8016f0c:	1ad3      	subs	r3, r2, r3
 8016f0e:	0fdb      	lsrs	r3, r3, #31
 8016f10:	f003 0301 	and.w	r3, r3, #1
 8016f14:	b2db      	uxtb	r3, r3
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d007      	beq.n	8016f2a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8016f1a:	697b      	ldr	r3, [r7, #20]
 8016f1c:	681a      	ldr	r2, [r3, #0]
 8016f1e:	693b      	ldr	r3, [r7, #16]
 8016f20:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8016f22:	697b      	ldr	r3, [r7, #20]
 8016f24:	693a      	ldr	r2, [r7, #16]
 8016f26:	601a      	str	r2, [r3, #0]
        break;
 8016f28:	e007      	b.n	8016f3a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8016f2a:	697b      	ldr	r3, [r7, #20]
 8016f2c:	681b      	ldr	r3, [r3, #0]
 8016f2e:	617b      	str	r3, [r7, #20]
 8016f30:	697b      	ldr	r3, [r7, #20]
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d1e1      	bne.n	8016efa <sys_timeout_abs+0x86>
 8016f36:	e000      	b.n	8016f3a <sys_timeout_abs+0xc6>
    return;
 8016f38:	bf00      	nop
      }
    }
  }
}
 8016f3a:	3718      	adds	r7, #24
 8016f3c:	46bd      	mov	sp, r7
 8016f3e:	bd80      	pop	{r7, pc}
 8016f40:	0801bb64 	.word	0x0801bb64
 8016f44:	0801bb98 	.word	0x0801bb98
 8016f48:	0801bbd8 	.word	0x0801bbd8
 8016f4c:	200162b8 	.word	0x200162b8

08016f50 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8016f50:	b580      	push	{r7, lr}
 8016f52:	b086      	sub	sp, #24
 8016f54:	af00      	add	r7, sp, #0
 8016f56:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8016f5c:	697b      	ldr	r3, [r7, #20]
 8016f5e:	685b      	ldr	r3, [r3, #4]
 8016f60:	4798      	blx	r3

  now = sys_now();
 8016f62:	f7fe fa65 	bl	8015430 <sys_now>
 8016f66:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8016f68:	697b      	ldr	r3, [r7, #20]
 8016f6a:	681a      	ldr	r2, [r3, #0]
 8016f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8016fac <lwip_cyclic_timer+0x5c>)
 8016f6e:	681b      	ldr	r3, [r3, #0]
 8016f70:	4413      	add	r3, r2
 8016f72:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8016f74:	68fa      	ldr	r2, [r7, #12]
 8016f76:	693b      	ldr	r3, [r7, #16]
 8016f78:	1ad3      	subs	r3, r2, r3
 8016f7a:	0fdb      	lsrs	r3, r3, #31
 8016f7c:	f003 0301 	and.w	r3, r3, #1
 8016f80:	b2db      	uxtb	r3, r3
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	d009      	beq.n	8016f9a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8016f86:	697b      	ldr	r3, [r7, #20]
 8016f88:	681a      	ldr	r2, [r3, #0]
 8016f8a:	693b      	ldr	r3, [r7, #16]
 8016f8c:	4413      	add	r3, r2
 8016f8e:	687a      	ldr	r2, [r7, #4]
 8016f90:	4907      	ldr	r1, [pc, #28]	@ (8016fb0 <lwip_cyclic_timer+0x60>)
 8016f92:	4618      	mov	r0, r3
 8016f94:	f7ff ff6e 	bl	8016e74 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8016f98:	e004      	b.n	8016fa4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8016f9a:	687a      	ldr	r2, [r7, #4]
 8016f9c:	4904      	ldr	r1, [pc, #16]	@ (8016fb0 <lwip_cyclic_timer+0x60>)
 8016f9e:	68f8      	ldr	r0, [r7, #12]
 8016fa0:	f7ff ff68 	bl	8016e74 <sys_timeout_abs>
}
 8016fa4:	bf00      	nop
 8016fa6:	3718      	adds	r7, #24
 8016fa8:	46bd      	mov	sp, r7
 8016faa:	bd80      	pop	{r7, pc}
 8016fac:	200162bc 	.word	0x200162bc
 8016fb0:	08016f51 	.word	0x08016f51

08016fb4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8016fb4:	b580      	push	{r7, lr}
 8016fb6:	b082      	sub	sp, #8
 8016fb8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016fba:	2300      	movs	r3, #0
 8016fbc:	607b      	str	r3, [r7, #4]
 8016fbe:	e00e      	b.n	8016fde <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8016fc0:	4a0b      	ldr	r2, [pc, #44]	@ (8016ff0 <sys_timeouts_init+0x3c>)
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	00db      	lsls	r3, r3, #3
 8016fcc:	4a08      	ldr	r2, [pc, #32]	@ (8016ff0 <sys_timeouts_init+0x3c>)
 8016fce:	4413      	add	r3, r2
 8016fd0:	461a      	mov	r2, r3
 8016fd2:	4908      	ldr	r1, [pc, #32]	@ (8016ff4 <sys_timeouts_init+0x40>)
 8016fd4:	f000 f810 	bl	8016ff8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	3301      	adds	r3, #1
 8016fdc:	607b      	str	r3, [r7, #4]
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	2b01      	cmp	r3, #1
 8016fe2:	d9ed      	bls.n	8016fc0 <sys_timeouts_init+0xc>
  }
}
 8016fe4:	bf00      	nop
 8016fe6:	bf00      	nop
 8016fe8:	3708      	adds	r7, #8
 8016fea:	46bd      	mov	sp, r7
 8016fec:	bd80      	pop	{r7, pc}
 8016fee:	bf00      	nop
 8016ff0:	0801c6e4 	.word	0x0801c6e4
 8016ff4:	08016f51 	.word	0x08016f51

08016ff8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8016ff8:	b580      	push	{r7, lr}
 8016ffa:	b086      	sub	sp, #24
 8016ffc:	af00      	add	r7, sp, #0
 8016ffe:	60f8      	str	r0, [r7, #12]
 8017000:	60b9      	str	r1, [r7, #8]
 8017002:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8017004:	68fb      	ldr	r3, [r7, #12]
 8017006:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801700a:	d306      	bcc.n	801701a <sys_timeout+0x22>
 801700c:	4b0a      	ldr	r3, [pc, #40]	@ (8017038 <sys_timeout+0x40>)
 801700e:	f240 1229 	movw	r2, #297	@ 0x129
 8017012:	490a      	ldr	r1, [pc, #40]	@ (801703c <sys_timeout+0x44>)
 8017014:	480a      	ldr	r0, [pc, #40]	@ (8017040 <sys_timeout+0x48>)
 8017016:	f003 fa09 	bl	801a42c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801701a:	f7fe fa09 	bl	8015430 <sys_now>
 801701e:	4602      	mov	r2, r0
 8017020:	68fb      	ldr	r3, [r7, #12]
 8017022:	4413      	add	r3, r2
 8017024:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8017026:	687a      	ldr	r2, [r7, #4]
 8017028:	68b9      	ldr	r1, [r7, #8]
 801702a:	6978      	ldr	r0, [r7, #20]
 801702c:	f7ff ff22 	bl	8016e74 <sys_timeout_abs>
#endif
}
 8017030:	bf00      	nop
 8017032:	3718      	adds	r7, #24
 8017034:	46bd      	mov	sp, r7
 8017036:	bd80      	pop	{r7, pc}
 8017038:	0801bb64 	.word	0x0801bb64
 801703c:	0801bc00 	.word	0x0801bc00
 8017040:	0801bbd8 	.word	0x0801bbd8

08017044 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8017044:	b580      	push	{r7, lr}
 8017046:	b084      	sub	sp, #16
 8017048:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801704a:	f7fe f9f1 	bl	8015430 <sys_now>
 801704e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8017050:	4b17      	ldr	r3, [pc, #92]	@ (80170b0 <sys_check_timeouts+0x6c>)
 8017052:	681b      	ldr	r3, [r3, #0]
 8017054:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8017056:	68bb      	ldr	r3, [r7, #8]
 8017058:	2b00      	cmp	r3, #0
 801705a:	d022      	beq.n	80170a2 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801705c:	68bb      	ldr	r3, [r7, #8]
 801705e:	685b      	ldr	r3, [r3, #4]
 8017060:	68fa      	ldr	r2, [r7, #12]
 8017062:	1ad3      	subs	r3, r2, r3
 8017064:	0fdb      	lsrs	r3, r3, #31
 8017066:	f003 0301 	and.w	r3, r3, #1
 801706a:	b2db      	uxtb	r3, r3
 801706c:	2b00      	cmp	r3, #0
 801706e:	d11a      	bne.n	80170a6 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8017070:	68bb      	ldr	r3, [r7, #8]
 8017072:	681b      	ldr	r3, [r3, #0]
 8017074:	4a0e      	ldr	r2, [pc, #56]	@ (80170b0 <sys_check_timeouts+0x6c>)
 8017076:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8017078:	68bb      	ldr	r3, [r7, #8]
 801707a:	689b      	ldr	r3, [r3, #8]
 801707c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801707e:	68bb      	ldr	r3, [r7, #8]
 8017080:	68db      	ldr	r3, [r3, #12]
 8017082:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8017084:	68bb      	ldr	r3, [r7, #8]
 8017086:	685b      	ldr	r3, [r3, #4]
 8017088:	4a0a      	ldr	r2, [pc, #40]	@ (80170b4 <sys_check_timeouts+0x70>)
 801708a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801708c:	68b9      	ldr	r1, [r7, #8]
 801708e:	2003      	movs	r0, #3
 8017090:	f7fe fee4 	bl	8015e5c <memp_free>
    if (handler != NULL) {
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	2b00      	cmp	r3, #0
 8017098:	d0da      	beq.n	8017050 <sys_check_timeouts+0xc>
      handler(arg);
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	6838      	ldr	r0, [r7, #0]
 801709e:	4798      	blx	r3
  do {
 80170a0:	e7d6      	b.n	8017050 <sys_check_timeouts+0xc>
      return;
 80170a2:	bf00      	nop
 80170a4:	e000      	b.n	80170a8 <sys_check_timeouts+0x64>
      return;
 80170a6:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80170a8:	3710      	adds	r7, #16
 80170aa:	46bd      	mov	sp, r7
 80170ac:	bd80      	pop	{r7, pc}
 80170ae:	bf00      	nop
 80170b0:	200162b8 	.word	0x200162b8
 80170b4:	200162bc 	.word	0x200162bc

080170b8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80170b8:	b580      	push	{r7, lr}
 80170ba:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80170bc:	f003 f8b6 	bl	801a22c <rand>
 80170c0:	4603      	mov	r3, r0
 80170c2:	b29b      	uxth	r3, r3
 80170c4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80170c8:	b29b      	uxth	r3, r3
 80170ca:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80170ce:	b29a      	uxth	r2, r3
 80170d0:	4b01      	ldr	r3, [pc, #4]	@ (80170d8 <udp_init+0x20>)
 80170d2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80170d4:	bf00      	nop
 80170d6:	bd80      	pop	{r7, pc}
 80170d8:	2000000a 	.word	0x2000000a

080170dc <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80170dc:	b480      	push	{r7}
 80170de:	b083      	sub	sp, #12
 80170e0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80170e2:	2300      	movs	r3, #0
 80170e4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80170e6:	4b17      	ldr	r3, [pc, #92]	@ (8017144 <udp_new_port+0x68>)
 80170e8:	881b      	ldrh	r3, [r3, #0]
 80170ea:	1c5a      	adds	r2, r3, #1
 80170ec:	b291      	uxth	r1, r2
 80170ee:	4a15      	ldr	r2, [pc, #84]	@ (8017144 <udp_new_port+0x68>)
 80170f0:	8011      	strh	r1, [r2, #0]
 80170f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80170f6:	4293      	cmp	r3, r2
 80170f8:	d103      	bne.n	8017102 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80170fa:	4b12      	ldr	r3, [pc, #72]	@ (8017144 <udp_new_port+0x68>)
 80170fc:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8017100:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017102:	4b11      	ldr	r3, [pc, #68]	@ (8017148 <udp_new_port+0x6c>)
 8017104:	681b      	ldr	r3, [r3, #0]
 8017106:	603b      	str	r3, [r7, #0]
 8017108:	e011      	b.n	801712e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801710a:	683b      	ldr	r3, [r7, #0]
 801710c:	8a5a      	ldrh	r2, [r3, #18]
 801710e:	4b0d      	ldr	r3, [pc, #52]	@ (8017144 <udp_new_port+0x68>)
 8017110:	881b      	ldrh	r3, [r3, #0]
 8017112:	429a      	cmp	r2, r3
 8017114:	d108      	bne.n	8017128 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8017116:	88fb      	ldrh	r3, [r7, #6]
 8017118:	3301      	adds	r3, #1
 801711a:	80fb      	strh	r3, [r7, #6]
 801711c:	88fb      	ldrh	r3, [r7, #6]
 801711e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8017122:	d3e0      	bcc.n	80170e6 <udp_new_port+0xa>
        return 0;
 8017124:	2300      	movs	r3, #0
 8017126:	e007      	b.n	8017138 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017128:	683b      	ldr	r3, [r7, #0]
 801712a:	68db      	ldr	r3, [r3, #12]
 801712c:	603b      	str	r3, [r7, #0]
 801712e:	683b      	ldr	r3, [r7, #0]
 8017130:	2b00      	cmp	r3, #0
 8017132:	d1ea      	bne.n	801710a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8017134:	4b03      	ldr	r3, [pc, #12]	@ (8017144 <udp_new_port+0x68>)
 8017136:	881b      	ldrh	r3, [r3, #0]
}
 8017138:	4618      	mov	r0, r3
 801713a:	370c      	adds	r7, #12
 801713c:	46bd      	mov	sp, r7
 801713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017142:	4770      	bx	lr
 8017144:	2000000a 	.word	0x2000000a
 8017148:	200162c0 	.word	0x200162c0

0801714c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801714c:	b580      	push	{r7, lr}
 801714e:	b084      	sub	sp, #16
 8017150:	af00      	add	r7, sp, #0
 8017152:	60f8      	str	r0, [r7, #12]
 8017154:	60b9      	str	r1, [r7, #8]
 8017156:	4613      	mov	r3, r2
 8017158:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801715a:	68fb      	ldr	r3, [r7, #12]
 801715c:	2b00      	cmp	r3, #0
 801715e:	d105      	bne.n	801716c <udp_input_local_match+0x20>
 8017160:	4b27      	ldr	r3, [pc, #156]	@ (8017200 <udp_input_local_match+0xb4>)
 8017162:	2287      	movs	r2, #135	@ 0x87
 8017164:	4927      	ldr	r1, [pc, #156]	@ (8017204 <udp_input_local_match+0xb8>)
 8017166:	4828      	ldr	r0, [pc, #160]	@ (8017208 <udp_input_local_match+0xbc>)
 8017168:	f003 f960 	bl	801a42c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801716c:	68bb      	ldr	r3, [r7, #8]
 801716e:	2b00      	cmp	r3, #0
 8017170:	d105      	bne.n	801717e <udp_input_local_match+0x32>
 8017172:	4b23      	ldr	r3, [pc, #140]	@ (8017200 <udp_input_local_match+0xb4>)
 8017174:	2288      	movs	r2, #136	@ 0x88
 8017176:	4925      	ldr	r1, [pc, #148]	@ (801720c <udp_input_local_match+0xc0>)
 8017178:	4823      	ldr	r0, [pc, #140]	@ (8017208 <udp_input_local_match+0xbc>)
 801717a:	f003 f957 	bl	801a42c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801717e:	68fb      	ldr	r3, [r7, #12]
 8017180:	7a1b      	ldrb	r3, [r3, #8]
 8017182:	2b00      	cmp	r3, #0
 8017184:	d00b      	beq.n	801719e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017186:	68fb      	ldr	r3, [r7, #12]
 8017188:	7a1a      	ldrb	r2, [r3, #8]
 801718a:	4b21      	ldr	r3, [pc, #132]	@ (8017210 <udp_input_local_match+0xc4>)
 801718c:	685b      	ldr	r3, [r3, #4]
 801718e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8017192:	3301      	adds	r3, #1
 8017194:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017196:	429a      	cmp	r2, r3
 8017198:	d001      	beq.n	801719e <udp_input_local_match+0x52>
    return 0;
 801719a:	2300      	movs	r3, #0
 801719c:	e02b      	b.n	80171f6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801719e:	79fb      	ldrb	r3, [r7, #7]
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d018      	beq.n	80171d6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	d013      	beq.n	80171d2 <udp_input_local_match+0x86>
 80171aa:	68fb      	ldr	r3, [r7, #12]
 80171ac:	681b      	ldr	r3, [r3, #0]
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	d00f      	beq.n	80171d2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80171b2:	4b17      	ldr	r3, [pc, #92]	@ (8017210 <udp_input_local_match+0xc4>)
 80171b4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80171b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80171ba:	d00a      	beq.n	80171d2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80171bc:	68fb      	ldr	r3, [r7, #12]
 80171be:	681a      	ldr	r2, [r3, #0]
 80171c0:	4b13      	ldr	r3, [pc, #76]	@ (8017210 <udp_input_local_match+0xc4>)
 80171c2:	695b      	ldr	r3, [r3, #20]
 80171c4:	405a      	eors	r2, r3
 80171c6:	68bb      	ldr	r3, [r7, #8]
 80171c8:	3308      	adds	r3, #8
 80171ca:	681b      	ldr	r3, [r3, #0]
 80171cc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	d110      	bne.n	80171f4 <udp_input_local_match+0xa8>
          return 1;
 80171d2:	2301      	movs	r3, #1
 80171d4:	e00f      	b.n	80171f6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80171d6:	68fb      	ldr	r3, [r7, #12]
 80171d8:	2b00      	cmp	r3, #0
 80171da:	d009      	beq.n	80171f0 <udp_input_local_match+0xa4>
 80171dc:	68fb      	ldr	r3, [r7, #12]
 80171de:	681b      	ldr	r3, [r3, #0]
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	d005      	beq.n	80171f0 <udp_input_local_match+0xa4>
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	681a      	ldr	r2, [r3, #0]
 80171e8:	4b09      	ldr	r3, [pc, #36]	@ (8017210 <udp_input_local_match+0xc4>)
 80171ea:	695b      	ldr	r3, [r3, #20]
 80171ec:	429a      	cmp	r2, r3
 80171ee:	d101      	bne.n	80171f4 <udp_input_local_match+0xa8>
        return 1;
 80171f0:	2301      	movs	r3, #1
 80171f2:	e000      	b.n	80171f6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80171f4:	2300      	movs	r3, #0
}
 80171f6:	4618      	mov	r0, r3
 80171f8:	3710      	adds	r7, #16
 80171fa:	46bd      	mov	sp, r7
 80171fc:	bd80      	pop	{r7, pc}
 80171fe:	bf00      	nop
 8017200:	0801bc4c 	.word	0x0801bc4c
 8017204:	0801bc7c 	.word	0x0801bc7c
 8017208:	0801bca0 	.word	0x0801bca0
 801720c:	0801bcc8 	.word	0x0801bcc8
 8017210:	2001329c 	.word	0x2001329c

08017214 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8017214:	b590      	push	{r4, r7, lr}
 8017216:	b08d      	sub	sp, #52	@ 0x34
 8017218:	af02      	add	r7, sp, #8
 801721a:	6078      	str	r0, [r7, #4]
 801721c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801721e:	2300      	movs	r3, #0
 8017220:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	2b00      	cmp	r3, #0
 8017226:	d105      	bne.n	8017234 <udp_input+0x20>
 8017228:	4b7c      	ldr	r3, [pc, #496]	@ (801741c <udp_input+0x208>)
 801722a:	22cf      	movs	r2, #207	@ 0xcf
 801722c:	497c      	ldr	r1, [pc, #496]	@ (8017420 <udp_input+0x20c>)
 801722e:	487d      	ldr	r0, [pc, #500]	@ (8017424 <udp_input+0x210>)
 8017230:	f003 f8fc 	bl	801a42c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8017234:	683b      	ldr	r3, [r7, #0]
 8017236:	2b00      	cmp	r3, #0
 8017238:	d105      	bne.n	8017246 <udp_input+0x32>
 801723a:	4b78      	ldr	r3, [pc, #480]	@ (801741c <udp_input+0x208>)
 801723c:	22d0      	movs	r2, #208	@ 0xd0
 801723e:	497a      	ldr	r1, [pc, #488]	@ (8017428 <udp_input+0x214>)
 8017240:	4878      	ldr	r0, [pc, #480]	@ (8017424 <udp_input+0x210>)
 8017242:	f003 f8f3 	bl	801a42c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	895b      	ldrh	r3, [r3, #10]
 801724a:	2b07      	cmp	r3, #7
 801724c:	d803      	bhi.n	8017256 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801724e:	6878      	ldr	r0, [r7, #4]
 8017250:	f7ff fbe4 	bl	8016a1c <pbuf_free>
    goto end;
 8017254:	e0de      	b.n	8017414 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	685b      	ldr	r3, [r3, #4]
 801725a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801725c:	4b73      	ldr	r3, [pc, #460]	@ (801742c <udp_input+0x218>)
 801725e:	695b      	ldr	r3, [r3, #20]
 8017260:	4a72      	ldr	r2, [pc, #456]	@ (801742c <udp_input+0x218>)
 8017262:	6812      	ldr	r2, [r2, #0]
 8017264:	4611      	mov	r1, r2
 8017266:	4618      	mov	r0, r3
 8017268:	f001 ffcc 	bl	8019204 <ip4_addr_isbroadcast_u32>
 801726c:	4603      	mov	r3, r0
 801726e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8017270:	697b      	ldr	r3, [r7, #20]
 8017272:	881b      	ldrh	r3, [r3, #0]
 8017274:	b29b      	uxth	r3, r3
 8017276:	4618      	mov	r0, r3
 8017278:	f7fe f968 	bl	801554c <lwip_htons>
 801727c:	4603      	mov	r3, r0
 801727e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8017280:	697b      	ldr	r3, [r7, #20]
 8017282:	885b      	ldrh	r3, [r3, #2]
 8017284:	b29b      	uxth	r3, r3
 8017286:	4618      	mov	r0, r3
 8017288:	f7fe f960 	bl	801554c <lwip_htons>
 801728c:	4603      	mov	r3, r0
 801728e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8017290:	2300      	movs	r3, #0
 8017292:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8017294:	2300      	movs	r3, #0
 8017296:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8017298:	2300      	movs	r3, #0
 801729a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801729c:	4b64      	ldr	r3, [pc, #400]	@ (8017430 <udp_input+0x21c>)
 801729e:	681b      	ldr	r3, [r3, #0]
 80172a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80172a2:	e054      	b.n	801734e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80172a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172a6:	8a5b      	ldrh	r3, [r3, #18]
 80172a8:	89fa      	ldrh	r2, [r7, #14]
 80172aa:	429a      	cmp	r2, r3
 80172ac:	d14a      	bne.n	8017344 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80172ae:	7cfb      	ldrb	r3, [r7, #19]
 80172b0:	461a      	mov	r2, r3
 80172b2:	6839      	ldr	r1, [r7, #0]
 80172b4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80172b6:	f7ff ff49 	bl	801714c <udp_input_local_match>
 80172ba:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d041      	beq.n	8017344 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80172c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172c2:	7c1b      	ldrb	r3, [r3, #16]
 80172c4:	f003 0304 	and.w	r3, r3, #4
 80172c8:	2b00      	cmp	r3, #0
 80172ca:	d11d      	bne.n	8017308 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80172cc:	69fb      	ldr	r3, [r7, #28]
 80172ce:	2b00      	cmp	r3, #0
 80172d0:	d102      	bne.n	80172d8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80172d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172d4:	61fb      	str	r3, [r7, #28]
 80172d6:	e017      	b.n	8017308 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80172d8:	7cfb      	ldrb	r3, [r7, #19]
 80172da:	2b00      	cmp	r3, #0
 80172dc:	d014      	beq.n	8017308 <udp_input+0xf4>
 80172de:	4b53      	ldr	r3, [pc, #332]	@ (801742c <udp_input+0x218>)
 80172e0:	695b      	ldr	r3, [r3, #20]
 80172e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80172e6:	d10f      	bne.n	8017308 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80172e8:	69fb      	ldr	r3, [r7, #28]
 80172ea:	681a      	ldr	r2, [r3, #0]
 80172ec:	683b      	ldr	r3, [r7, #0]
 80172ee:	3304      	adds	r3, #4
 80172f0:	681b      	ldr	r3, [r3, #0]
 80172f2:	429a      	cmp	r2, r3
 80172f4:	d008      	beq.n	8017308 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80172f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172f8:	681a      	ldr	r2, [r3, #0]
 80172fa:	683b      	ldr	r3, [r7, #0]
 80172fc:	3304      	adds	r3, #4
 80172fe:	681b      	ldr	r3, [r3, #0]
 8017300:	429a      	cmp	r2, r3
 8017302:	d101      	bne.n	8017308 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8017304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017306:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8017308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801730a:	8a9b      	ldrh	r3, [r3, #20]
 801730c:	8a3a      	ldrh	r2, [r7, #16]
 801730e:	429a      	cmp	r2, r3
 8017310:	d118      	bne.n	8017344 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017314:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8017316:	2b00      	cmp	r3, #0
 8017318:	d005      	beq.n	8017326 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801731a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801731c:	685a      	ldr	r2, [r3, #4]
 801731e:	4b43      	ldr	r3, [pc, #268]	@ (801742c <udp_input+0x218>)
 8017320:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017322:	429a      	cmp	r2, r3
 8017324:	d10e      	bne.n	8017344 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8017326:	6a3b      	ldr	r3, [r7, #32]
 8017328:	2b00      	cmp	r3, #0
 801732a:	d014      	beq.n	8017356 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801732c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801732e:	68da      	ldr	r2, [r3, #12]
 8017330:	6a3b      	ldr	r3, [r7, #32]
 8017332:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8017334:	4b3e      	ldr	r3, [pc, #248]	@ (8017430 <udp_input+0x21c>)
 8017336:	681a      	ldr	r2, [r3, #0]
 8017338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801733a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801733c:	4a3c      	ldr	r2, [pc, #240]	@ (8017430 <udp_input+0x21c>)
 801733e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017340:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8017342:	e008      	b.n	8017356 <udp_input+0x142>
      }
    }

    prev = pcb;
 8017344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017346:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801734a:	68db      	ldr	r3, [r3, #12]
 801734c:	627b      	str	r3, [r7, #36]	@ 0x24
 801734e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017350:	2b00      	cmp	r3, #0
 8017352:	d1a7      	bne.n	80172a4 <udp_input+0x90>
 8017354:	e000      	b.n	8017358 <udp_input+0x144>
        break;
 8017356:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8017358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801735a:	2b00      	cmp	r3, #0
 801735c:	d101      	bne.n	8017362 <udp_input+0x14e>
    pcb = uncon_pcb;
 801735e:	69fb      	ldr	r3, [r7, #28]
 8017360:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8017362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017364:	2b00      	cmp	r3, #0
 8017366:	d002      	beq.n	801736e <udp_input+0x15a>
    for_us = 1;
 8017368:	2301      	movs	r3, #1
 801736a:	76fb      	strb	r3, [r7, #27]
 801736c:	e00a      	b.n	8017384 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801736e:	683b      	ldr	r3, [r7, #0]
 8017370:	3304      	adds	r3, #4
 8017372:	681a      	ldr	r2, [r3, #0]
 8017374:	4b2d      	ldr	r3, [pc, #180]	@ (801742c <udp_input+0x218>)
 8017376:	695b      	ldr	r3, [r3, #20]
 8017378:	429a      	cmp	r2, r3
 801737a:	bf0c      	ite	eq
 801737c:	2301      	moveq	r3, #1
 801737e:	2300      	movne	r3, #0
 8017380:	b2db      	uxtb	r3, r3
 8017382:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8017384:	7efb      	ldrb	r3, [r7, #27]
 8017386:	2b00      	cmp	r3, #0
 8017388:	d041      	beq.n	801740e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801738a:	2108      	movs	r1, #8
 801738c:	6878      	ldr	r0, [r7, #4]
 801738e:	f7ff fabf 	bl	8016910 <pbuf_remove_header>
 8017392:	4603      	mov	r3, r0
 8017394:	2b00      	cmp	r3, #0
 8017396:	d00a      	beq.n	80173ae <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8017398:	4b20      	ldr	r3, [pc, #128]	@ (801741c <udp_input+0x208>)
 801739a:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801739e:	4925      	ldr	r1, [pc, #148]	@ (8017434 <udp_input+0x220>)
 80173a0:	4820      	ldr	r0, [pc, #128]	@ (8017424 <udp_input+0x210>)
 80173a2:	f003 f843 	bl	801a42c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80173a6:	6878      	ldr	r0, [r7, #4]
 80173a8:	f7ff fb38 	bl	8016a1c <pbuf_free>
      goto end;
 80173ac:	e032      	b.n	8017414 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80173ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	d012      	beq.n	80173da <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80173b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173b6:	699b      	ldr	r3, [r3, #24]
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	d00a      	beq.n	80173d2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80173bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173be:	699c      	ldr	r4, [r3, #24]
 80173c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173c2:	69d8      	ldr	r0, [r3, #28]
 80173c4:	8a3b      	ldrh	r3, [r7, #16]
 80173c6:	9300      	str	r3, [sp, #0]
 80173c8:	4b1b      	ldr	r3, [pc, #108]	@ (8017438 <udp_input+0x224>)
 80173ca:	687a      	ldr	r2, [r7, #4]
 80173cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80173ce:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80173d0:	e021      	b.n	8017416 <udp_input+0x202>
        pbuf_free(p);
 80173d2:	6878      	ldr	r0, [r7, #4]
 80173d4:	f7ff fb22 	bl	8016a1c <pbuf_free>
        goto end;
 80173d8:	e01c      	b.n	8017414 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80173da:	7cfb      	ldrb	r3, [r7, #19]
 80173dc:	2b00      	cmp	r3, #0
 80173de:	d112      	bne.n	8017406 <udp_input+0x1f2>
 80173e0:	4b12      	ldr	r3, [pc, #72]	@ (801742c <udp_input+0x218>)
 80173e2:	695b      	ldr	r3, [r3, #20]
 80173e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80173e8:	2be0      	cmp	r3, #224	@ 0xe0
 80173ea:	d00c      	beq.n	8017406 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80173ec:	4b0f      	ldr	r3, [pc, #60]	@ (801742c <udp_input+0x218>)
 80173ee:	899b      	ldrh	r3, [r3, #12]
 80173f0:	3308      	adds	r3, #8
 80173f2:	b29b      	uxth	r3, r3
 80173f4:	b21b      	sxth	r3, r3
 80173f6:	4619      	mov	r1, r3
 80173f8:	6878      	ldr	r0, [r7, #4]
 80173fa:	f7ff fafc 	bl	80169f6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80173fe:	2103      	movs	r1, #3
 8017400:	6878      	ldr	r0, [r7, #4]
 8017402:	f001 fbe9 	bl	8018bd8 <icmp_dest_unreach>
      pbuf_free(p);
 8017406:	6878      	ldr	r0, [r7, #4]
 8017408:	f7ff fb08 	bl	8016a1c <pbuf_free>
  return;
 801740c:	e003      	b.n	8017416 <udp_input+0x202>
    pbuf_free(p);
 801740e:	6878      	ldr	r0, [r7, #4]
 8017410:	f7ff fb04 	bl	8016a1c <pbuf_free>
  return;
 8017414:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8017416:	372c      	adds	r7, #44	@ 0x2c
 8017418:	46bd      	mov	sp, r7
 801741a:	bd90      	pop	{r4, r7, pc}
 801741c:	0801bc4c 	.word	0x0801bc4c
 8017420:	0801bcf0 	.word	0x0801bcf0
 8017424:	0801bca0 	.word	0x0801bca0
 8017428:	0801bd08 	.word	0x0801bd08
 801742c:	2001329c 	.word	0x2001329c
 8017430:	200162c0 	.word	0x200162c0
 8017434:	0801bd24 	.word	0x0801bd24
 8017438:	200132ac 	.word	0x200132ac

0801743c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801743c:	b580      	push	{r7, lr}
 801743e:	b088      	sub	sp, #32
 8017440:	af02      	add	r7, sp, #8
 8017442:	60f8      	str	r0, [r7, #12]
 8017444:	60b9      	str	r1, [r7, #8]
 8017446:	607a      	str	r2, [r7, #4]
 8017448:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801744a:	68fb      	ldr	r3, [r7, #12]
 801744c:	2b00      	cmp	r3, #0
 801744e:	d109      	bne.n	8017464 <udp_sendto+0x28>
 8017450:	4b23      	ldr	r3, [pc, #140]	@ (80174e0 <udp_sendto+0xa4>)
 8017452:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8017456:	4923      	ldr	r1, [pc, #140]	@ (80174e4 <udp_sendto+0xa8>)
 8017458:	4823      	ldr	r0, [pc, #140]	@ (80174e8 <udp_sendto+0xac>)
 801745a:	f002 ffe7 	bl	801a42c <iprintf>
 801745e:	f06f 030f 	mvn.w	r3, #15
 8017462:	e038      	b.n	80174d6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8017464:	68bb      	ldr	r3, [r7, #8]
 8017466:	2b00      	cmp	r3, #0
 8017468:	d109      	bne.n	801747e <udp_sendto+0x42>
 801746a:	4b1d      	ldr	r3, [pc, #116]	@ (80174e0 <udp_sendto+0xa4>)
 801746c:	f240 2219 	movw	r2, #537	@ 0x219
 8017470:	491e      	ldr	r1, [pc, #120]	@ (80174ec <udp_sendto+0xb0>)
 8017472:	481d      	ldr	r0, [pc, #116]	@ (80174e8 <udp_sendto+0xac>)
 8017474:	f002 ffda 	bl	801a42c <iprintf>
 8017478:	f06f 030f 	mvn.w	r3, #15
 801747c:	e02b      	b.n	80174d6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	2b00      	cmp	r3, #0
 8017482:	d109      	bne.n	8017498 <udp_sendto+0x5c>
 8017484:	4b16      	ldr	r3, [pc, #88]	@ (80174e0 <udp_sendto+0xa4>)
 8017486:	f240 221a 	movw	r2, #538	@ 0x21a
 801748a:	4919      	ldr	r1, [pc, #100]	@ (80174f0 <udp_sendto+0xb4>)
 801748c:	4816      	ldr	r0, [pc, #88]	@ (80174e8 <udp_sendto+0xac>)
 801748e:	f002 ffcd 	bl	801a42c <iprintf>
 8017492:	f06f 030f 	mvn.w	r3, #15
 8017496:	e01e      	b.n	80174d6 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8017498:	68fb      	ldr	r3, [r7, #12]
 801749a:	7a1b      	ldrb	r3, [r3, #8]
 801749c:	2b00      	cmp	r3, #0
 801749e:	d006      	beq.n	80174ae <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80174a0:	68fb      	ldr	r3, [r7, #12]
 80174a2:	7a1b      	ldrb	r3, [r3, #8]
 80174a4:	4618      	mov	r0, r3
 80174a6:	f7fe ff87 	bl	80163b8 <netif_get_by_index>
 80174aa:	6178      	str	r0, [r7, #20]
 80174ac:	e003      	b.n	80174b6 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80174ae:	6878      	ldr	r0, [r7, #4]
 80174b0:	f001 fc1c 	bl	8018cec <ip4_route>
 80174b4:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80174b6:	697b      	ldr	r3, [r7, #20]
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d102      	bne.n	80174c2 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80174bc:	f06f 0303 	mvn.w	r3, #3
 80174c0:	e009      	b.n	80174d6 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80174c2:	887a      	ldrh	r2, [r7, #2]
 80174c4:	697b      	ldr	r3, [r7, #20]
 80174c6:	9300      	str	r3, [sp, #0]
 80174c8:	4613      	mov	r3, r2
 80174ca:	687a      	ldr	r2, [r7, #4]
 80174cc:	68b9      	ldr	r1, [r7, #8]
 80174ce:	68f8      	ldr	r0, [r7, #12]
 80174d0:	f000 f810 	bl	80174f4 <udp_sendto_if>
 80174d4:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80174d6:	4618      	mov	r0, r3
 80174d8:	3718      	adds	r7, #24
 80174da:	46bd      	mov	sp, r7
 80174dc:	bd80      	pop	{r7, pc}
 80174de:	bf00      	nop
 80174e0:	0801bc4c 	.word	0x0801bc4c
 80174e4:	0801bd70 	.word	0x0801bd70
 80174e8:	0801bca0 	.word	0x0801bca0
 80174ec:	0801bd88 	.word	0x0801bd88
 80174f0:	0801bda4 	.word	0x0801bda4

080174f4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80174f4:	b580      	push	{r7, lr}
 80174f6:	b088      	sub	sp, #32
 80174f8:	af02      	add	r7, sp, #8
 80174fa:	60f8      	str	r0, [r7, #12]
 80174fc:	60b9      	str	r1, [r7, #8]
 80174fe:	607a      	str	r2, [r7, #4]
 8017500:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8017502:	68fb      	ldr	r3, [r7, #12]
 8017504:	2b00      	cmp	r3, #0
 8017506:	d109      	bne.n	801751c <udp_sendto_if+0x28>
 8017508:	4b2e      	ldr	r3, [pc, #184]	@ (80175c4 <udp_sendto_if+0xd0>)
 801750a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801750e:	492e      	ldr	r1, [pc, #184]	@ (80175c8 <udp_sendto_if+0xd4>)
 8017510:	482e      	ldr	r0, [pc, #184]	@ (80175cc <udp_sendto_if+0xd8>)
 8017512:	f002 ff8b 	bl	801a42c <iprintf>
 8017516:	f06f 030f 	mvn.w	r3, #15
 801751a:	e04f      	b.n	80175bc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801751c:	68bb      	ldr	r3, [r7, #8]
 801751e:	2b00      	cmp	r3, #0
 8017520:	d109      	bne.n	8017536 <udp_sendto_if+0x42>
 8017522:	4b28      	ldr	r3, [pc, #160]	@ (80175c4 <udp_sendto_if+0xd0>)
 8017524:	f240 2281 	movw	r2, #641	@ 0x281
 8017528:	4929      	ldr	r1, [pc, #164]	@ (80175d0 <udp_sendto_if+0xdc>)
 801752a:	4828      	ldr	r0, [pc, #160]	@ (80175cc <udp_sendto_if+0xd8>)
 801752c:	f002 ff7e 	bl	801a42c <iprintf>
 8017530:	f06f 030f 	mvn.w	r3, #15
 8017534:	e042      	b.n	80175bc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	2b00      	cmp	r3, #0
 801753a:	d109      	bne.n	8017550 <udp_sendto_if+0x5c>
 801753c:	4b21      	ldr	r3, [pc, #132]	@ (80175c4 <udp_sendto_if+0xd0>)
 801753e:	f240 2282 	movw	r2, #642	@ 0x282
 8017542:	4924      	ldr	r1, [pc, #144]	@ (80175d4 <udp_sendto_if+0xe0>)
 8017544:	4821      	ldr	r0, [pc, #132]	@ (80175cc <udp_sendto_if+0xd8>)
 8017546:	f002 ff71 	bl	801a42c <iprintf>
 801754a:	f06f 030f 	mvn.w	r3, #15
 801754e:	e035      	b.n	80175bc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8017550:	6a3b      	ldr	r3, [r7, #32]
 8017552:	2b00      	cmp	r3, #0
 8017554:	d109      	bne.n	801756a <udp_sendto_if+0x76>
 8017556:	4b1b      	ldr	r3, [pc, #108]	@ (80175c4 <udp_sendto_if+0xd0>)
 8017558:	f240 2283 	movw	r2, #643	@ 0x283
 801755c:	491e      	ldr	r1, [pc, #120]	@ (80175d8 <udp_sendto_if+0xe4>)
 801755e:	481b      	ldr	r0, [pc, #108]	@ (80175cc <udp_sendto_if+0xd8>)
 8017560:	f002 ff64 	bl	801a42c <iprintf>
 8017564:	f06f 030f 	mvn.w	r3, #15
 8017568:	e028      	b.n	80175bc <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801756a:	68fb      	ldr	r3, [r7, #12]
 801756c:	2b00      	cmp	r3, #0
 801756e:	d009      	beq.n	8017584 <udp_sendto_if+0x90>
 8017570:	68fb      	ldr	r3, [r7, #12]
 8017572:	681b      	ldr	r3, [r3, #0]
 8017574:	2b00      	cmp	r3, #0
 8017576:	d005      	beq.n	8017584 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8017578:	68fb      	ldr	r3, [r7, #12]
 801757a:	681b      	ldr	r3, [r3, #0]
 801757c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017580:	2be0      	cmp	r3, #224	@ 0xe0
 8017582:	d103      	bne.n	801758c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8017584:	6a3b      	ldr	r3, [r7, #32]
 8017586:	3304      	adds	r3, #4
 8017588:	617b      	str	r3, [r7, #20]
 801758a:	e00b      	b.n	80175a4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801758c:	68fb      	ldr	r3, [r7, #12]
 801758e:	681a      	ldr	r2, [r3, #0]
 8017590:	6a3b      	ldr	r3, [r7, #32]
 8017592:	3304      	adds	r3, #4
 8017594:	681b      	ldr	r3, [r3, #0]
 8017596:	429a      	cmp	r2, r3
 8017598:	d002      	beq.n	80175a0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801759a:	f06f 0303 	mvn.w	r3, #3
 801759e:	e00d      	b.n	80175bc <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80175a0:	68fb      	ldr	r3, [r7, #12]
 80175a2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80175a4:	887a      	ldrh	r2, [r7, #2]
 80175a6:	697b      	ldr	r3, [r7, #20]
 80175a8:	9301      	str	r3, [sp, #4]
 80175aa:	6a3b      	ldr	r3, [r7, #32]
 80175ac:	9300      	str	r3, [sp, #0]
 80175ae:	4613      	mov	r3, r2
 80175b0:	687a      	ldr	r2, [r7, #4]
 80175b2:	68b9      	ldr	r1, [r7, #8]
 80175b4:	68f8      	ldr	r0, [r7, #12]
 80175b6:	f000 f811 	bl	80175dc <udp_sendto_if_src>
 80175ba:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80175bc:	4618      	mov	r0, r3
 80175be:	3718      	adds	r7, #24
 80175c0:	46bd      	mov	sp, r7
 80175c2:	bd80      	pop	{r7, pc}
 80175c4:	0801bc4c 	.word	0x0801bc4c
 80175c8:	0801bdc0 	.word	0x0801bdc0
 80175cc:	0801bca0 	.word	0x0801bca0
 80175d0:	0801bddc 	.word	0x0801bddc
 80175d4:	0801bdf8 	.word	0x0801bdf8
 80175d8:	0801be18 	.word	0x0801be18

080175dc <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80175dc:	b580      	push	{r7, lr}
 80175de:	b08c      	sub	sp, #48	@ 0x30
 80175e0:	af04      	add	r7, sp, #16
 80175e2:	60f8      	str	r0, [r7, #12]
 80175e4:	60b9      	str	r1, [r7, #8]
 80175e6:	607a      	str	r2, [r7, #4]
 80175e8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80175ea:	68fb      	ldr	r3, [r7, #12]
 80175ec:	2b00      	cmp	r3, #0
 80175ee:	d109      	bne.n	8017604 <udp_sendto_if_src+0x28>
 80175f0:	4b65      	ldr	r3, [pc, #404]	@ (8017788 <udp_sendto_if_src+0x1ac>)
 80175f2:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80175f6:	4965      	ldr	r1, [pc, #404]	@ (801778c <udp_sendto_if_src+0x1b0>)
 80175f8:	4865      	ldr	r0, [pc, #404]	@ (8017790 <udp_sendto_if_src+0x1b4>)
 80175fa:	f002 ff17 	bl	801a42c <iprintf>
 80175fe:	f06f 030f 	mvn.w	r3, #15
 8017602:	e0bc      	b.n	801777e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8017604:	68bb      	ldr	r3, [r7, #8]
 8017606:	2b00      	cmp	r3, #0
 8017608:	d109      	bne.n	801761e <udp_sendto_if_src+0x42>
 801760a:	4b5f      	ldr	r3, [pc, #380]	@ (8017788 <udp_sendto_if_src+0x1ac>)
 801760c:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8017610:	4960      	ldr	r1, [pc, #384]	@ (8017794 <udp_sendto_if_src+0x1b8>)
 8017612:	485f      	ldr	r0, [pc, #380]	@ (8017790 <udp_sendto_if_src+0x1b4>)
 8017614:	f002 ff0a 	bl	801a42c <iprintf>
 8017618:	f06f 030f 	mvn.w	r3, #15
 801761c:	e0af      	b.n	801777e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	2b00      	cmp	r3, #0
 8017622:	d109      	bne.n	8017638 <udp_sendto_if_src+0x5c>
 8017624:	4b58      	ldr	r3, [pc, #352]	@ (8017788 <udp_sendto_if_src+0x1ac>)
 8017626:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801762a:	495b      	ldr	r1, [pc, #364]	@ (8017798 <udp_sendto_if_src+0x1bc>)
 801762c:	4858      	ldr	r0, [pc, #352]	@ (8017790 <udp_sendto_if_src+0x1b4>)
 801762e:	f002 fefd 	bl	801a42c <iprintf>
 8017632:	f06f 030f 	mvn.w	r3, #15
 8017636:	e0a2      	b.n	801777e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8017638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801763a:	2b00      	cmp	r3, #0
 801763c:	d109      	bne.n	8017652 <udp_sendto_if_src+0x76>
 801763e:	4b52      	ldr	r3, [pc, #328]	@ (8017788 <udp_sendto_if_src+0x1ac>)
 8017640:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8017644:	4955      	ldr	r1, [pc, #340]	@ (801779c <udp_sendto_if_src+0x1c0>)
 8017646:	4852      	ldr	r0, [pc, #328]	@ (8017790 <udp_sendto_if_src+0x1b4>)
 8017648:	f002 fef0 	bl	801a42c <iprintf>
 801764c:	f06f 030f 	mvn.w	r3, #15
 8017650:	e095      	b.n	801777e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8017652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017654:	2b00      	cmp	r3, #0
 8017656:	d109      	bne.n	801766c <udp_sendto_if_src+0x90>
 8017658:	4b4b      	ldr	r3, [pc, #300]	@ (8017788 <udp_sendto_if_src+0x1ac>)
 801765a:	f240 22d5 	movw	r2, #725	@ 0x2d5
 801765e:	4950      	ldr	r1, [pc, #320]	@ (80177a0 <udp_sendto_if_src+0x1c4>)
 8017660:	484b      	ldr	r0, [pc, #300]	@ (8017790 <udp_sendto_if_src+0x1b4>)
 8017662:	f002 fee3 	bl	801a42c <iprintf>
 8017666:	f06f 030f 	mvn.w	r3, #15
 801766a:	e088      	b.n	801777e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801766c:	68fb      	ldr	r3, [r7, #12]
 801766e:	8a5b      	ldrh	r3, [r3, #18]
 8017670:	2b00      	cmp	r3, #0
 8017672:	d10f      	bne.n	8017694 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8017674:	68f9      	ldr	r1, [r7, #12]
 8017676:	68fb      	ldr	r3, [r7, #12]
 8017678:	8a5b      	ldrh	r3, [r3, #18]
 801767a:	461a      	mov	r2, r3
 801767c:	68f8      	ldr	r0, [r7, #12]
 801767e:	f000 f893 	bl	80177a8 <udp_bind>
 8017682:	4603      	mov	r3, r0
 8017684:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8017686:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801768a:	2b00      	cmp	r3, #0
 801768c:	d002      	beq.n	8017694 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801768e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8017692:	e074      	b.n	801777e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8017694:	68bb      	ldr	r3, [r7, #8]
 8017696:	891b      	ldrh	r3, [r3, #8]
 8017698:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801769c:	4293      	cmp	r3, r2
 801769e:	d902      	bls.n	80176a6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80176a0:	f04f 33ff 	mov.w	r3, #4294967295
 80176a4:	e06b      	b.n	801777e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80176a6:	2108      	movs	r1, #8
 80176a8:	68b8      	ldr	r0, [r7, #8]
 80176aa:	f7ff f921 	bl	80168f0 <pbuf_add_header>
 80176ae:	4603      	mov	r3, r0
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	d015      	beq.n	80176e0 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80176b4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80176b8:	2108      	movs	r1, #8
 80176ba:	2022      	movs	r0, #34	@ 0x22
 80176bc:	f7fe fecc 	bl	8016458 <pbuf_alloc>
 80176c0:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80176c2:	69fb      	ldr	r3, [r7, #28]
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	d102      	bne.n	80176ce <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80176c8:	f04f 33ff 	mov.w	r3, #4294967295
 80176cc:	e057      	b.n	801777e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80176ce:	68bb      	ldr	r3, [r7, #8]
 80176d0:	891b      	ldrh	r3, [r3, #8]
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	d006      	beq.n	80176e4 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80176d6:	68b9      	ldr	r1, [r7, #8]
 80176d8:	69f8      	ldr	r0, [r7, #28]
 80176da:	f7ff fab7 	bl	8016c4c <pbuf_chain>
 80176de:	e001      	b.n	80176e4 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80176e0:	68bb      	ldr	r3, [r7, #8]
 80176e2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80176e4:	69fb      	ldr	r3, [r7, #28]
 80176e6:	895b      	ldrh	r3, [r3, #10]
 80176e8:	2b07      	cmp	r3, #7
 80176ea:	d806      	bhi.n	80176fa <udp_sendto_if_src+0x11e>
 80176ec:	4b26      	ldr	r3, [pc, #152]	@ (8017788 <udp_sendto_if_src+0x1ac>)
 80176ee:	f240 320d 	movw	r2, #781	@ 0x30d
 80176f2:	492c      	ldr	r1, [pc, #176]	@ (80177a4 <udp_sendto_if_src+0x1c8>)
 80176f4:	4826      	ldr	r0, [pc, #152]	@ (8017790 <udp_sendto_if_src+0x1b4>)
 80176f6:	f002 fe99 	bl	801a42c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80176fa:	69fb      	ldr	r3, [r7, #28]
 80176fc:	685b      	ldr	r3, [r3, #4]
 80176fe:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8017700:	68fb      	ldr	r3, [r7, #12]
 8017702:	8a5b      	ldrh	r3, [r3, #18]
 8017704:	4618      	mov	r0, r3
 8017706:	f7fd ff21 	bl	801554c <lwip_htons>
 801770a:	4603      	mov	r3, r0
 801770c:	461a      	mov	r2, r3
 801770e:	697b      	ldr	r3, [r7, #20]
 8017710:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8017712:	887b      	ldrh	r3, [r7, #2]
 8017714:	4618      	mov	r0, r3
 8017716:	f7fd ff19 	bl	801554c <lwip_htons>
 801771a:	4603      	mov	r3, r0
 801771c:	461a      	mov	r2, r3
 801771e:	697b      	ldr	r3, [r7, #20]
 8017720:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8017722:	697b      	ldr	r3, [r7, #20]
 8017724:	2200      	movs	r2, #0
 8017726:	719a      	strb	r2, [r3, #6]
 8017728:	2200      	movs	r2, #0
 801772a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801772c:	69fb      	ldr	r3, [r7, #28]
 801772e:	891b      	ldrh	r3, [r3, #8]
 8017730:	4618      	mov	r0, r3
 8017732:	f7fd ff0b 	bl	801554c <lwip_htons>
 8017736:	4603      	mov	r3, r0
 8017738:	461a      	mov	r2, r3
 801773a:	697b      	ldr	r3, [r7, #20]
 801773c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801773e:	2311      	movs	r3, #17
 8017740:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8017742:	68fb      	ldr	r3, [r7, #12]
 8017744:	7adb      	ldrb	r3, [r3, #11]
 8017746:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8017748:	68fb      	ldr	r3, [r7, #12]
 801774a:	7a9b      	ldrb	r3, [r3, #10]
 801774c:	7cb9      	ldrb	r1, [r7, #18]
 801774e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017750:	9202      	str	r2, [sp, #8]
 8017752:	7cfa      	ldrb	r2, [r7, #19]
 8017754:	9201      	str	r2, [sp, #4]
 8017756:	9300      	str	r3, [sp, #0]
 8017758:	460b      	mov	r3, r1
 801775a:	687a      	ldr	r2, [r7, #4]
 801775c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801775e:	69f8      	ldr	r0, [r7, #28]
 8017760:	f001 fca2 	bl	80190a8 <ip4_output_if_src>
 8017764:	4603      	mov	r3, r0
 8017766:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8017768:	69fa      	ldr	r2, [r7, #28]
 801776a:	68bb      	ldr	r3, [r7, #8]
 801776c:	429a      	cmp	r2, r3
 801776e:	d004      	beq.n	801777a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8017770:	69f8      	ldr	r0, [r7, #28]
 8017772:	f7ff f953 	bl	8016a1c <pbuf_free>
    q = NULL;
 8017776:	2300      	movs	r3, #0
 8017778:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801777a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801777e:	4618      	mov	r0, r3
 8017780:	3720      	adds	r7, #32
 8017782:	46bd      	mov	sp, r7
 8017784:	bd80      	pop	{r7, pc}
 8017786:	bf00      	nop
 8017788:	0801bc4c 	.word	0x0801bc4c
 801778c:	0801be38 	.word	0x0801be38
 8017790:	0801bca0 	.word	0x0801bca0
 8017794:	0801be58 	.word	0x0801be58
 8017798:	0801be78 	.word	0x0801be78
 801779c:	0801be9c 	.word	0x0801be9c
 80177a0:	0801bec0 	.word	0x0801bec0
 80177a4:	0801bee4 	.word	0x0801bee4

080177a8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80177a8:	b580      	push	{r7, lr}
 80177aa:	b086      	sub	sp, #24
 80177ac:	af00      	add	r7, sp, #0
 80177ae:	60f8      	str	r0, [r7, #12]
 80177b0:	60b9      	str	r1, [r7, #8]
 80177b2:	4613      	mov	r3, r2
 80177b4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80177b6:	68bb      	ldr	r3, [r7, #8]
 80177b8:	2b00      	cmp	r3, #0
 80177ba:	d101      	bne.n	80177c0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80177bc:	4b39      	ldr	r3, [pc, #228]	@ (80178a4 <udp_bind+0xfc>)
 80177be:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80177c0:	68fb      	ldr	r3, [r7, #12]
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	d109      	bne.n	80177da <udp_bind+0x32>
 80177c6:	4b38      	ldr	r3, [pc, #224]	@ (80178a8 <udp_bind+0x100>)
 80177c8:	f240 32b7 	movw	r2, #951	@ 0x3b7
 80177cc:	4937      	ldr	r1, [pc, #220]	@ (80178ac <udp_bind+0x104>)
 80177ce:	4838      	ldr	r0, [pc, #224]	@ (80178b0 <udp_bind+0x108>)
 80177d0:	f002 fe2c 	bl	801a42c <iprintf>
 80177d4:	f06f 030f 	mvn.w	r3, #15
 80177d8:	e060      	b.n	801789c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80177da:	2300      	movs	r3, #0
 80177dc:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80177de:	4b35      	ldr	r3, [pc, #212]	@ (80178b4 <udp_bind+0x10c>)
 80177e0:	681b      	ldr	r3, [r3, #0]
 80177e2:	617b      	str	r3, [r7, #20]
 80177e4:	e009      	b.n	80177fa <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80177e6:	68fa      	ldr	r2, [r7, #12]
 80177e8:	697b      	ldr	r3, [r7, #20]
 80177ea:	429a      	cmp	r2, r3
 80177ec:	d102      	bne.n	80177f4 <udp_bind+0x4c>
      rebind = 1;
 80177ee:	2301      	movs	r3, #1
 80177f0:	74fb      	strb	r3, [r7, #19]
      break;
 80177f2:	e005      	b.n	8017800 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80177f4:	697b      	ldr	r3, [r7, #20]
 80177f6:	68db      	ldr	r3, [r3, #12]
 80177f8:	617b      	str	r3, [r7, #20]
 80177fa:	697b      	ldr	r3, [r7, #20]
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	d1f2      	bne.n	80177e6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8017800:	88fb      	ldrh	r3, [r7, #6]
 8017802:	2b00      	cmp	r3, #0
 8017804:	d109      	bne.n	801781a <udp_bind+0x72>
    port = udp_new_port();
 8017806:	f7ff fc69 	bl	80170dc <udp_new_port>
 801780a:	4603      	mov	r3, r0
 801780c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801780e:	88fb      	ldrh	r3, [r7, #6]
 8017810:	2b00      	cmp	r3, #0
 8017812:	d12c      	bne.n	801786e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8017814:	f06f 0307 	mvn.w	r3, #7
 8017818:	e040      	b.n	801789c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801781a:	4b26      	ldr	r3, [pc, #152]	@ (80178b4 <udp_bind+0x10c>)
 801781c:	681b      	ldr	r3, [r3, #0]
 801781e:	617b      	str	r3, [r7, #20]
 8017820:	e022      	b.n	8017868 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8017822:	68fa      	ldr	r2, [r7, #12]
 8017824:	697b      	ldr	r3, [r7, #20]
 8017826:	429a      	cmp	r2, r3
 8017828:	d01b      	beq.n	8017862 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801782a:	697b      	ldr	r3, [r7, #20]
 801782c:	8a5b      	ldrh	r3, [r3, #18]
 801782e:	88fa      	ldrh	r2, [r7, #6]
 8017830:	429a      	cmp	r2, r3
 8017832:	d116      	bne.n	8017862 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8017834:	697b      	ldr	r3, [r7, #20]
 8017836:	681a      	ldr	r2, [r3, #0]
 8017838:	68bb      	ldr	r3, [r7, #8]
 801783a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801783c:	429a      	cmp	r2, r3
 801783e:	d00d      	beq.n	801785c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8017840:	68bb      	ldr	r3, [r7, #8]
 8017842:	2b00      	cmp	r3, #0
 8017844:	d00a      	beq.n	801785c <udp_bind+0xb4>
 8017846:	68bb      	ldr	r3, [r7, #8]
 8017848:	681b      	ldr	r3, [r3, #0]
 801784a:	2b00      	cmp	r3, #0
 801784c:	d006      	beq.n	801785c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801784e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8017850:	2b00      	cmp	r3, #0
 8017852:	d003      	beq.n	801785c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8017854:	697b      	ldr	r3, [r7, #20]
 8017856:	681b      	ldr	r3, [r3, #0]
 8017858:	2b00      	cmp	r3, #0
 801785a:	d102      	bne.n	8017862 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801785c:	f06f 0307 	mvn.w	r3, #7
 8017860:	e01c      	b.n	801789c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017862:	697b      	ldr	r3, [r7, #20]
 8017864:	68db      	ldr	r3, [r3, #12]
 8017866:	617b      	str	r3, [r7, #20]
 8017868:	697b      	ldr	r3, [r7, #20]
 801786a:	2b00      	cmp	r3, #0
 801786c:	d1d9      	bne.n	8017822 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801786e:	68bb      	ldr	r3, [r7, #8]
 8017870:	2b00      	cmp	r3, #0
 8017872:	d002      	beq.n	801787a <udp_bind+0xd2>
 8017874:	68bb      	ldr	r3, [r7, #8]
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	e000      	b.n	801787c <udp_bind+0xd4>
 801787a:	2300      	movs	r3, #0
 801787c:	68fa      	ldr	r2, [r7, #12]
 801787e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8017880:	68fb      	ldr	r3, [r7, #12]
 8017882:	88fa      	ldrh	r2, [r7, #6]
 8017884:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8017886:	7cfb      	ldrb	r3, [r7, #19]
 8017888:	2b00      	cmp	r3, #0
 801788a:	d106      	bne.n	801789a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801788c:	4b09      	ldr	r3, [pc, #36]	@ (80178b4 <udp_bind+0x10c>)
 801788e:	681a      	ldr	r2, [r3, #0]
 8017890:	68fb      	ldr	r3, [r7, #12]
 8017892:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8017894:	4a07      	ldr	r2, [pc, #28]	@ (80178b4 <udp_bind+0x10c>)
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801789a:	2300      	movs	r3, #0
}
 801789c:	4618      	mov	r0, r3
 801789e:	3718      	adds	r7, #24
 80178a0:	46bd      	mov	sp, r7
 80178a2:	bd80      	pop	{r7, pc}
 80178a4:	0801c6f4 	.word	0x0801c6f4
 80178a8:	0801bc4c 	.word	0x0801bc4c
 80178ac:	0801bf14 	.word	0x0801bf14
 80178b0:	0801bca0 	.word	0x0801bca0
 80178b4:	200162c0 	.word	0x200162c0

080178b8 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80178b8:	b580      	push	{r7, lr}
 80178ba:	b086      	sub	sp, #24
 80178bc:	af00      	add	r7, sp, #0
 80178be:	60f8      	str	r0, [r7, #12]
 80178c0:	60b9      	str	r1, [r7, #8]
 80178c2:	4613      	mov	r3, r2
 80178c4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80178c6:	68fb      	ldr	r3, [r7, #12]
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	d109      	bne.n	80178e0 <udp_connect+0x28>
 80178cc:	4b2c      	ldr	r3, [pc, #176]	@ (8017980 <udp_connect+0xc8>)
 80178ce:	f240 4235 	movw	r2, #1077	@ 0x435
 80178d2:	492c      	ldr	r1, [pc, #176]	@ (8017984 <udp_connect+0xcc>)
 80178d4:	482c      	ldr	r0, [pc, #176]	@ (8017988 <udp_connect+0xd0>)
 80178d6:	f002 fda9 	bl	801a42c <iprintf>
 80178da:	f06f 030f 	mvn.w	r3, #15
 80178de:	e04b      	b.n	8017978 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80178e0:	68bb      	ldr	r3, [r7, #8]
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	d109      	bne.n	80178fa <udp_connect+0x42>
 80178e6:	4b26      	ldr	r3, [pc, #152]	@ (8017980 <udp_connect+0xc8>)
 80178e8:	f240 4236 	movw	r2, #1078	@ 0x436
 80178ec:	4927      	ldr	r1, [pc, #156]	@ (801798c <udp_connect+0xd4>)
 80178ee:	4826      	ldr	r0, [pc, #152]	@ (8017988 <udp_connect+0xd0>)
 80178f0:	f002 fd9c 	bl	801a42c <iprintf>
 80178f4:	f06f 030f 	mvn.w	r3, #15
 80178f8:	e03e      	b.n	8017978 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80178fa:	68fb      	ldr	r3, [r7, #12]
 80178fc:	8a5b      	ldrh	r3, [r3, #18]
 80178fe:	2b00      	cmp	r3, #0
 8017900:	d10f      	bne.n	8017922 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8017902:	68f9      	ldr	r1, [r7, #12]
 8017904:	68fb      	ldr	r3, [r7, #12]
 8017906:	8a5b      	ldrh	r3, [r3, #18]
 8017908:	461a      	mov	r2, r3
 801790a:	68f8      	ldr	r0, [r7, #12]
 801790c:	f7ff ff4c 	bl	80177a8 <udp_bind>
 8017910:	4603      	mov	r3, r0
 8017912:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8017914:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017918:	2b00      	cmp	r3, #0
 801791a:	d002      	beq.n	8017922 <udp_connect+0x6a>
      return err;
 801791c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017920:	e02a      	b.n	8017978 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8017922:	68bb      	ldr	r3, [r7, #8]
 8017924:	2b00      	cmp	r3, #0
 8017926:	d002      	beq.n	801792e <udp_connect+0x76>
 8017928:	68bb      	ldr	r3, [r7, #8]
 801792a:	681b      	ldr	r3, [r3, #0]
 801792c:	e000      	b.n	8017930 <udp_connect+0x78>
 801792e:	2300      	movs	r3, #0
 8017930:	68fa      	ldr	r2, [r7, #12]
 8017932:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8017934:	68fb      	ldr	r3, [r7, #12]
 8017936:	88fa      	ldrh	r2, [r7, #6]
 8017938:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801793a:	68fb      	ldr	r3, [r7, #12]
 801793c:	7c1b      	ldrb	r3, [r3, #16]
 801793e:	f043 0304 	orr.w	r3, r3, #4
 8017942:	b2da      	uxtb	r2, r3
 8017944:	68fb      	ldr	r3, [r7, #12]
 8017946:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017948:	4b11      	ldr	r3, [pc, #68]	@ (8017990 <udp_connect+0xd8>)
 801794a:	681b      	ldr	r3, [r3, #0]
 801794c:	617b      	str	r3, [r7, #20]
 801794e:	e008      	b.n	8017962 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8017950:	68fa      	ldr	r2, [r7, #12]
 8017952:	697b      	ldr	r3, [r7, #20]
 8017954:	429a      	cmp	r2, r3
 8017956:	d101      	bne.n	801795c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8017958:	2300      	movs	r3, #0
 801795a:	e00d      	b.n	8017978 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801795c:	697b      	ldr	r3, [r7, #20]
 801795e:	68db      	ldr	r3, [r3, #12]
 8017960:	617b      	str	r3, [r7, #20]
 8017962:	697b      	ldr	r3, [r7, #20]
 8017964:	2b00      	cmp	r3, #0
 8017966:	d1f3      	bne.n	8017950 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8017968:	4b09      	ldr	r3, [pc, #36]	@ (8017990 <udp_connect+0xd8>)
 801796a:	681a      	ldr	r2, [r3, #0]
 801796c:	68fb      	ldr	r3, [r7, #12]
 801796e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8017970:	4a07      	ldr	r2, [pc, #28]	@ (8017990 <udp_connect+0xd8>)
 8017972:	68fb      	ldr	r3, [r7, #12]
 8017974:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8017976:	2300      	movs	r3, #0
}
 8017978:	4618      	mov	r0, r3
 801797a:	3718      	adds	r7, #24
 801797c:	46bd      	mov	sp, r7
 801797e:	bd80      	pop	{r7, pc}
 8017980:	0801bc4c 	.word	0x0801bc4c
 8017984:	0801bf2c 	.word	0x0801bf2c
 8017988:	0801bca0 	.word	0x0801bca0
 801798c:	0801bf48 	.word	0x0801bf48
 8017990:	200162c0 	.word	0x200162c0

08017994 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8017994:	b580      	push	{r7, lr}
 8017996:	b082      	sub	sp, #8
 8017998:	af00      	add	r7, sp, #0
 801799a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	2b00      	cmp	r3, #0
 80179a0:	d107      	bne.n	80179b2 <udp_disconnect+0x1e>
 80179a2:	4b0d      	ldr	r3, [pc, #52]	@ (80179d8 <udp_disconnect+0x44>)
 80179a4:	f240 426a 	movw	r2, #1130	@ 0x46a
 80179a8:	490c      	ldr	r1, [pc, #48]	@ (80179dc <udp_disconnect+0x48>)
 80179aa:	480d      	ldr	r0, [pc, #52]	@ (80179e0 <udp_disconnect+0x4c>)
 80179ac:	f002 fd3e 	bl	801a42c <iprintf>
 80179b0:	e00f      	b.n	80179d2 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	2200      	movs	r2, #0
 80179b6:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	2200      	movs	r2, #0
 80179bc:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	2200      	movs	r2, #0
 80179c2:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	7c1b      	ldrb	r3, [r3, #16]
 80179c8:	f023 0304 	bic.w	r3, r3, #4
 80179cc:	b2da      	uxtb	r2, r3
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	741a      	strb	r2, [r3, #16]
}
 80179d2:	3708      	adds	r7, #8
 80179d4:	46bd      	mov	sp, r7
 80179d6:	bd80      	pop	{r7, pc}
 80179d8:	0801bc4c 	.word	0x0801bc4c
 80179dc:	0801bf64 	.word	0x0801bf64
 80179e0:	0801bca0 	.word	0x0801bca0

080179e4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80179e4:	b580      	push	{r7, lr}
 80179e6:	b084      	sub	sp, #16
 80179e8:	af00      	add	r7, sp, #0
 80179ea:	60f8      	str	r0, [r7, #12]
 80179ec:	60b9      	str	r1, [r7, #8]
 80179ee:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80179f0:	68fb      	ldr	r3, [r7, #12]
 80179f2:	2b00      	cmp	r3, #0
 80179f4:	d107      	bne.n	8017a06 <udp_recv+0x22>
 80179f6:	4b08      	ldr	r3, [pc, #32]	@ (8017a18 <udp_recv+0x34>)
 80179f8:	f240 428a 	movw	r2, #1162	@ 0x48a
 80179fc:	4907      	ldr	r1, [pc, #28]	@ (8017a1c <udp_recv+0x38>)
 80179fe:	4808      	ldr	r0, [pc, #32]	@ (8017a20 <udp_recv+0x3c>)
 8017a00:	f002 fd14 	bl	801a42c <iprintf>
 8017a04:	e005      	b.n	8017a12 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8017a06:	68fb      	ldr	r3, [r7, #12]
 8017a08:	68ba      	ldr	r2, [r7, #8]
 8017a0a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8017a0c:	68fb      	ldr	r3, [r7, #12]
 8017a0e:	687a      	ldr	r2, [r7, #4]
 8017a10:	61da      	str	r2, [r3, #28]
}
 8017a12:	3710      	adds	r7, #16
 8017a14:	46bd      	mov	sp, r7
 8017a16:	bd80      	pop	{r7, pc}
 8017a18:	0801bc4c 	.word	0x0801bc4c
 8017a1c:	0801bf80 	.word	0x0801bf80
 8017a20:	0801bca0 	.word	0x0801bca0

08017a24 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8017a24:	b580      	push	{r7, lr}
 8017a26:	b084      	sub	sp, #16
 8017a28:	af00      	add	r7, sp, #0
 8017a2a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	d107      	bne.n	8017a42 <udp_remove+0x1e>
 8017a32:	4b19      	ldr	r3, [pc, #100]	@ (8017a98 <udp_remove+0x74>)
 8017a34:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8017a38:	4918      	ldr	r1, [pc, #96]	@ (8017a9c <udp_remove+0x78>)
 8017a3a:	4819      	ldr	r0, [pc, #100]	@ (8017aa0 <udp_remove+0x7c>)
 8017a3c:	f002 fcf6 	bl	801a42c <iprintf>
 8017a40:	e026      	b.n	8017a90 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8017a42:	4b18      	ldr	r3, [pc, #96]	@ (8017aa4 <udp_remove+0x80>)
 8017a44:	681b      	ldr	r3, [r3, #0]
 8017a46:	687a      	ldr	r2, [r7, #4]
 8017a48:	429a      	cmp	r2, r3
 8017a4a:	d105      	bne.n	8017a58 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8017a4c:	4b15      	ldr	r3, [pc, #84]	@ (8017aa4 <udp_remove+0x80>)
 8017a4e:	681b      	ldr	r3, [r3, #0]
 8017a50:	68db      	ldr	r3, [r3, #12]
 8017a52:	4a14      	ldr	r2, [pc, #80]	@ (8017aa4 <udp_remove+0x80>)
 8017a54:	6013      	str	r3, [r2, #0]
 8017a56:	e017      	b.n	8017a88 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8017a58:	4b12      	ldr	r3, [pc, #72]	@ (8017aa4 <udp_remove+0x80>)
 8017a5a:	681b      	ldr	r3, [r3, #0]
 8017a5c:	60fb      	str	r3, [r7, #12]
 8017a5e:	e010      	b.n	8017a82 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8017a60:	68fb      	ldr	r3, [r7, #12]
 8017a62:	68db      	ldr	r3, [r3, #12]
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d009      	beq.n	8017a7c <udp_remove+0x58>
 8017a68:	68fb      	ldr	r3, [r7, #12]
 8017a6a:	68db      	ldr	r3, [r3, #12]
 8017a6c:	687a      	ldr	r2, [r7, #4]
 8017a6e:	429a      	cmp	r2, r3
 8017a70:	d104      	bne.n	8017a7c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	68da      	ldr	r2, [r3, #12]
 8017a76:	68fb      	ldr	r3, [r7, #12]
 8017a78:	60da      	str	r2, [r3, #12]
        break;
 8017a7a:	e005      	b.n	8017a88 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8017a7c:	68fb      	ldr	r3, [r7, #12]
 8017a7e:	68db      	ldr	r3, [r3, #12]
 8017a80:	60fb      	str	r3, [r7, #12]
 8017a82:	68fb      	ldr	r3, [r7, #12]
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	d1eb      	bne.n	8017a60 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8017a88:	6879      	ldr	r1, [r7, #4]
 8017a8a:	2000      	movs	r0, #0
 8017a8c:	f7fe f9e6 	bl	8015e5c <memp_free>
}
 8017a90:	3710      	adds	r7, #16
 8017a92:	46bd      	mov	sp, r7
 8017a94:	bd80      	pop	{r7, pc}
 8017a96:	bf00      	nop
 8017a98:	0801bc4c 	.word	0x0801bc4c
 8017a9c:	0801bf98 	.word	0x0801bf98
 8017aa0:	0801bca0 	.word	0x0801bca0
 8017aa4:	200162c0 	.word	0x200162c0

08017aa8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8017aa8:	b580      	push	{r7, lr}
 8017aaa:	b082      	sub	sp, #8
 8017aac:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8017aae:	2000      	movs	r0, #0
 8017ab0:	f7fe f988 	bl	8015dc4 <memp_malloc>
 8017ab4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8017ab6:	687b      	ldr	r3, [r7, #4]
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	d007      	beq.n	8017acc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8017abc:	2220      	movs	r2, #32
 8017abe:	2100      	movs	r1, #0
 8017ac0:	6878      	ldr	r0, [r7, #4]
 8017ac2:	f002 fd18 	bl	801a4f6 <memset>
    pcb->ttl = UDP_TTL;
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	22ff      	movs	r2, #255	@ 0xff
 8017aca:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8017acc:	687b      	ldr	r3, [r7, #4]
}
 8017ace:	4618      	mov	r0, r3
 8017ad0:	3708      	adds	r7, #8
 8017ad2:	46bd      	mov	sp, r7
 8017ad4:	bd80      	pop	{r7, pc}
	...

08017ad8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8017ad8:	b480      	push	{r7}
 8017ada:	b085      	sub	sp, #20
 8017adc:	af00      	add	r7, sp, #0
 8017ade:	6078      	str	r0, [r7, #4]
 8017ae0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	2b00      	cmp	r3, #0
 8017ae6:	d01e      	beq.n	8017b26 <udp_netif_ip_addr_changed+0x4e>
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	681b      	ldr	r3, [r3, #0]
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	d01a      	beq.n	8017b26 <udp_netif_ip_addr_changed+0x4e>
 8017af0:	683b      	ldr	r3, [r7, #0]
 8017af2:	2b00      	cmp	r3, #0
 8017af4:	d017      	beq.n	8017b26 <udp_netif_ip_addr_changed+0x4e>
 8017af6:	683b      	ldr	r3, [r7, #0]
 8017af8:	681b      	ldr	r3, [r3, #0]
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	d013      	beq.n	8017b26 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8017afe:	4b0d      	ldr	r3, [pc, #52]	@ (8017b34 <udp_netif_ip_addr_changed+0x5c>)
 8017b00:	681b      	ldr	r3, [r3, #0]
 8017b02:	60fb      	str	r3, [r7, #12]
 8017b04:	e00c      	b.n	8017b20 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8017b06:	68fb      	ldr	r3, [r7, #12]
 8017b08:	681a      	ldr	r2, [r3, #0]
 8017b0a:	687b      	ldr	r3, [r7, #4]
 8017b0c:	681b      	ldr	r3, [r3, #0]
 8017b0e:	429a      	cmp	r2, r3
 8017b10:	d103      	bne.n	8017b1a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8017b12:	683b      	ldr	r3, [r7, #0]
 8017b14:	681a      	ldr	r2, [r3, #0]
 8017b16:	68fb      	ldr	r3, [r7, #12]
 8017b18:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8017b1a:	68fb      	ldr	r3, [r7, #12]
 8017b1c:	68db      	ldr	r3, [r3, #12]
 8017b1e:	60fb      	str	r3, [r7, #12]
 8017b20:	68fb      	ldr	r3, [r7, #12]
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	d1ef      	bne.n	8017b06 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8017b26:	bf00      	nop
 8017b28:	3714      	adds	r7, #20
 8017b2a:	46bd      	mov	sp, r7
 8017b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b30:	4770      	bx	lr
 8017b32:	bf00      	nop
 8017b34:	200162c0 	.word	0x200162c0

08017b38 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8017b38:	b580      	push	{r7, lr}
 8017b3a:	b082      	sub	sp, #8
 8017b3c:	af00      	add	r7, sp, #0
 8017b3e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8017b40:	4915      	ldr	r1, [pc, #84]	@ (8017b98 <etharp_free_entry+0x60>)
 8017b42:	687a      	ldr	r2, [r7, #4]
 8017b44:	4613      	mov	r3, r2
 8017b46:	005b      	lsls	r3, r3, #1
 8017b48:	4413      	add	r3, r2
 8017b4a:	00db      	lsls	r3, r3, #3
 8017b4c:	440b      	add	r3, r1
 8017b4e:	681b      	ldr	r3, [r3, #0]
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	d013      	beq.n	8017b7c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8017b54:	4910      	ldr	r1, [pc, #64]	@ (8017b98 <etharp_free_entry+0x60>)
 8017b56:	687a      	ldr	r2, [r7, #4]
 8017b58:	4613      	mov	r3, r2
 8017b5a:	005b      	lsls	r3, r3, #1
 8017b5c:	4413      	add	r3, r2
 8017b5e:	00db      	lsls	r3, r3, #3
 8017b60:	440b      	add	r3, r1
 8017b62:	681b      	ldr	r3, [r3, #0]
 8017b64:	4618      	mov	r0, r3
 8017b66:	f7fe ff59 	bl	8016a1c <pbuf_free>
    arp_table[i].q = NULL;
 8017b6a:	490b      	ldr	r1, [pc, #44]	@ (8017b98 <etharp_free_entry+0x60>)
 8017b6c:	687a      	ldr	r2, [r7, #4]
 8017b6e:	4613      	mov	r3, r2
 8017b70:	005b      	lsls	r3, r3, #1
 8017b72:	4413      	add	r3, r2
 8017b74:	00db      	lsls	r3, r3, #3
 8017b76:	440b      	add	r3, r1
 8017b78:	2200      	movs	r2, #0
 8017b7a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8017b7c:	4906      	ldr	r1, [pc, #24]	@ (8017b98 <etharp_free_entry+0x60>)
 8017b7e:	687a      	ldr	r2, [r7, #4]
 8017b80:	4613      	mov	r3, r2
 8017b82:	005b      	lsls	r3, r3, #1
 8017b84:	4413      	add	r3, r2
 8017b86:	00db      	lsls	r3, r3, #3
 8017b88:	440b      	add	r3, r1
 8017b8a:	3314      	adds	r3, #20
 8017b8c:	2200      	movs	r2, #0
 8017b8e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8017b90:	bf00      	nop
 8017b92:	3708      	adds	r7, #8
 8017b94:	46bd      	mov	sp, r7
 8017b96:	bd80      	pop	{r7, pc}
 8017b98:	200162c4 	.word	0x200162c4

08017b9c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8017b9c:	b580      	push	{r7, lr}
 8017b9e:	b082      	sub	sp, #8
 8017ba0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017ba2:	2300      	movs	r3, #0
 8017ba4:	607b      	str	r3, [r7, #4]
 8017ba6:	e096      	b.n	8017cd6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8017ba8:	494f      	ldr	r1, [pc, #316]	@ (8017ce8 <etharp_tmr+0x14c>)
 8017baa:	687a      	ldr	r2, [r7, #4]
 8017bac:	4613      	mov	r3, r2
 8017bae:	005b      	lsls	r3, r3, #1
 8017bb0:	4413      	add	r3, r2
 8017bb2:	00db      	lsls	r3, r3, #3
 8017bb4:	440b      	add	r3, r1
 8017bb6:	3314      	adds	r3, #20
 8017bb8:	781b      	ldrb	r3, [r3, #0]
 8017bba:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8017bbc:	78fb      	ldrb	r3, [r7, #3]
 8017bbe:	2b00      	cmp	r3, #0
 8017bc0:	f000 8086 	beq.w	8017cd0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8017bc4:	4948      	ldr	r1, [pc, #288]	@ (8017ce8 <etharp_tmr+0x14c>)
 8017bc6:	687a      	ldr	r2, [r7, #4]
 8017bc8:	4613      	mov	r3, r2
 8017bca:	005b      	lsls	r3, r3, #1
 8017bcc:	4413      	add	r3, r2
 8017bce:	00db      	lsls	r3, r3, #3
 8017bd0:	440b      	add	r3, r1
 8017bd2:	3312      	adds	r3, #18
 8017bd4:	881b      	ldrh	r3, [r3, #0]
 8017bd6:	3301      	adds	r3, #1
 8017bd8:	b298      	uxth	r0, r3
 8017bda:	4943      	ldr	r1, [pc, #268]	@ (8017ce8 <etharp_tmr+0x14c>)
 8017bdc:	687a      	ldr	r2, [r7, #4]
 8017bde:	4613      	mov	r3, r2
 8017be0:	005b      	lsls	r3, r3, #1
 8017be2:	4413      	add	r3, r2
 8017be4:	00db      	lsls	r3, r3, #3
 8017be6:	440b      	add	r3, r1
 8017be8:	3312      	adds	r3, #18
 8017bea:	4602      	mov	r2, r0
 8017bec:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8017bee:	493e      	ldr	r1, [pc, #248]	@ (8017ce8 <etharp_tmr+0x14c>)
 8017bf0:	687a      	ldr	r2, [r7, #4]
 8017bf2:	4613      	mov	r3, r2
 8017bf4:	005b      	lsls	r3, r3, #1
 8017bf6:	4413      	add	r3, r2
 8017bf8:	00db      	lsls	r3, r3, #3
 8017bfa:	440b      	add	r3, r1
 8017bfc:	3312      	adds	r3, #18
 8017bfe:	881b      	ldrh	r3, [r3, #0]
 8017c00:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8017c04:	d215      	bcs.n	8017c32 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8017c06:	4938      	ldr	r1, [pc, #224]	@ (8017ce8 <etharp_tmr+0x14c>)
 8017c08:	687a      	ldr	r2, [r7, #4]
 8017c0a:	4613      	mov	r3, r2
 8017c0c:	005b      	lsls	r3, r3, #1
 8017c0e:	4413      	add	r3, r2
 8017c10:	00db      	lsls	r3, r3, #3
 8017c12:	440b      	add	r3, r1
 8017c14:	3314      	adds	r3, #20
 8017c16:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8017c18:	2b01      	cmp	r3, #1
 8017c1a:	d10e      	bne.n	8017c3a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8017c1c:	4932      	ldr	r1, [pc, #200]	@ (8017ce8 <etharp_tmr+0x14c>)
 8017c1e:	687a      	ldr	r2, [r7, #4]
 8017c20:	4613      	mov	r3, r2
 8017c22:	005b      	lsls	r3, r3, #1
 8017c24:	4413      	add	r3, r2
 8017c26:	00db      	lsls	r3, r3, #3
 8017c28:	440b      	add	r3, r1
 8017c2a:	3312      	adds	r3, #18
 8017c2c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8017c2e:	2b04      	cmp	r3, #4
 8017c30:	d903      	bls.n	8017c3a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8017c32:	6878      	ldr	r0, [r7, #4]
 8017c34:	f7ff ff80 	bl	8017b38 <etharp_free_entry>
 8017c38:	e04a      	b.n	8017cd0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8017c3a:	492b      	ldr	r1, [pc, #172]	@ (8017ce8 <etharp_tmr+0x14c>)
 8017c3c:	687a      	ldr	r2, [r7, #4]
 8017c3e:	4613      	mov	r3, r2
 8017c40:	005b      	lsls	r3, r3, #1
 8017c42:	4413      	add	r3, r2
 8017c44:	00db      	lsls	r3, r3, #3
 8017c46:	440b      	add	r3, r1
 8017c48:	3314      	adds	r3, #20
 8017c4a:	781b      	ldrb	r3, [r3, #0]
 8017c4c:	2b03      	cmp	r3, #3
 8017c4e:	d10a      	bne.n	8017c66 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8017c50:	4925      	ldr	r1, [pc, #148]	@ (8017ce8 <etharp_tmr+0x14c>)
 8017c52:	687a      	ldr	r2, [r7, #4]
 8017c54:	4613      	mov	r3, r2
 8017c56:	005b      	lsls	r3, r3, #1
 8017c58:	4413      	add	r3, r2
 8017c5a:	00db      	lsls	r3, r3, #3
 8017c5c:	440b      	add	r3, r1
 8017c5e:	3314      	adds	r3, #20
 8017c60:	2204      	movs	r2, #4
 8017c62:	701a      	strb	r2, [r3, #0]
 8017c64:	e034      	b.n	8017cd0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8017c66:	4920      	ldr	r1, [pc, #128]	@ (8017ce8 <etharp_tmr+0x14c>)
 8017c68:	687a      	ldr	r2, [r7, #4]
 8017c6a:	4613      	mov	r3, r2
 8017c6c:	005b      	lsls	r3, r3, #1
 8017c6e:	4413      	add	r3, r2
 8017c70:	00db      	lsls	r3, r3, #3
 8017c72:	440b      	add	r3, r1
 8017c74:	3314      	adds	r3, #20
 8017c76:	781b      	ldrb	r3, [r3, #0]
 8017c78:	2b04      	cmp	r3, #4
 8017c7a:	d10a      	bne.n	8017c92 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8017c7c:	491a      	ldr	r1, [pc, #104]	@ (8017ce8 <etharp_tmr+0x14c>)
 8017c7e:	687a      	ldr	r2, [r7, #4]
 8017c80:	4613      	mov	r3, r2
 8017c82:	005b      	lsls	r3, r3, #1
 8017c84:	4413      	add	r3, r2
 8017c86:	00db      	lsls	r3, r3, #3
 8017c88:	440b      	add	r3, r1
 8017c8a:	3314      	adds	r3, #20
 8017c8c:	2202      	movs	r2, #2
 8017c8e:	701a      	strb	r2, [r3, #0]
 8017c90:	e01e      	b.n	8017cd0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017c92:	4915      	ldr	r1, [pc, #84]	@ (8017ce8 <etharp_tmr+0x14c>)
 8017c94:	687a      	ldr	r2, [r7, #4]
 8017c96:	4613      	mov	r3, r2
 8017c98:	005b      	lsls	r3, r3, #1
 8017c9a:	4413      	add	r3, r2
 8017c9c:	00db      	lsls	r3, r3, #3
 8017c9e:	440b      	add	r3, r1
 8017ca0:	3314      	adds	r3, #20
 8017ca2:	781b      	ldrb	r3, [r3, #0]
 8017ca4:	2b01      	cmp	r3, #1
 8017ca6:	d113      	bne.n	8017cd0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8017ca8:	490f      	ldr	r1, [pc, #60]	@ (8017ce8 <etharp_tmr+0x14c>)
 8017caa:	687a      	ldr	r2, [r7, #4]
 8017cac:	4613      	mov	r3, r2
 8017cae:	005b      	lsls	r3, r3, #1
 8017cb0:	4413      	add	r3, r2
 8017cb2:	00db      	lsls	r3, r3, #3
 8017cb4:	440b      	add	r3, r1
 8017cb6:	3308      	adds	r3, #8
 8017cb8:	6818      	ldr	r0, [r3, #0]
 8017cba:	687a      	ldr	r2, [r7, #4]
 8017cbc:	4613      	mov	r3, r2
 8017cbe:	005b      	lsls	r3, r3, #1
 8017cc0:	4413      	add	r3, r2
 8017cc2:	00db      	lsls	r3, r3, #3
 8017cc4:	4a08      	ldr	r2, [pc, #32]	@ (8017ce8 <etharp_tmr+0x14c>)
 8017cc6:	4413      	add	r3, r2
 8017cc8:	3304      	adds	r3, #4
 8017cca:	4619      	mov	r1, r3
 8017ccc:	f000 fe6e 	bl	80189ac <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	3301      	adds	r3, #1
 8017cd4:	607b      	str	r3, [r7, #4]
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	2b09      	cmp	r3, #9
 8017cda:	f77f af65 	ble.w	8017ba8 <etharp_tmr+0xc>
      }
    }
  }
}
 8017cde:	bf00      	nop
 8017ce0:	bf00      	nop
 8017ce2:	3708      	adds	r7, #8
 8017ce4:	46bd      	mov	sp, r7
 8017ce6:	bd80      	pop	{r7, pc}
 8017ce8:	200162c4 	.word	0x200162c4

08017cec <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8017cec:	b580      	push	{r7, lr}
 8017cee:	b08a      	sub	sp, #40	@ 0x28
 8017cf0:	af00      	add	r7, sp, #0
 8017cf2:	60f8      	str	r0, [r7, #12]
 8017cf4:	460b      	mov	r3, r1
 8017cf6:	607a      	str	r2, [r7, #4]
 8017cf8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8017cfa:	230a      	movs	r3, #10
 8017cfc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8017cfe:	230a      	movs	r3, #10
 8017d00:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8017d02:	230a      	movs	r3, #10
 8017d04:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8017d06:	2300      	movs	r3, #0
 8017d08:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8017d0a:	230a      	movs	r3, #10
 8017d0c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8017d0e:	2300      	movs	r3, #0
 8017d10:	83bb      	strh	r3, [r7, #28]
 8017d12:	2300      	movs	r3, #0
 8017d14:	837b      	strh	r3, [r7, #26]
 8017d16:	2300      	movs	r3, #0
 8017d18:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017d1a:	2300      	movs	r3, #0
 8017d1c:	843b      	strh	r3, [r7, #32]
 8017d1e:	e0ae      	b.n	8017e7e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8017d20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017d24:	49a6      	ldr	r1, [pc, #664]	@ (8017fc0 <etharp_find_entry+0x2d4>)
 8017d26:	4613      	mov	r3, r2
 8017d28:	005b      	lsls	r3, r3, #1
 8017d2a:	4413      	add	r3, r2
 8017d2c:	00db      	lsls	r3, r3, #3
 8017d2e:	440b      	add	r3, r1
 8017d30:	3314      	adds	r3, #20
 8017d32:	781b      	ldrb	r3, [r3, #0]
 8017d34:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8017d36:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8017d3a:	2b0a      	cmp	r3, #10
 8017d3c:	d105      	bne.n	8017d4a <etharp_find_entry+0x5e>
 8017d3e:	7dfb      	ldrb	r3, [r7, #23]
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	d102      	bne.n	8017d4a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8017d44:	8c3b      	ldrh	r3, [r7, #32]
 8017d46:	847b      	strh	r3, [r7, #34]	@ 0x22
 8017d48:	e095      	b.n	8017e76 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8017d4a:	7dfb      	ldrb	r3, [r7, #23]
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	f000 8092 	beq.w	8017e76 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8017d52:	7dfb      	ldrb	r3, [r7, #23]
 8017d54:	2b01      	cmp	r3, #1
 8017d56:	d009      	beq.n	8017d6c <etharp_find_entry+0x80>
 8017d58:	7dfb      	ldrb	r3, [r7, #23]
 8017d5a:	2b01      	cmp	r3, #1
 8017d5c:	d806      	bhi.n	8017d6c <etharp_find_entry+0x80>
 8017d5e:	4b99      	ldr	r3, [pc, #612]	@ (8017fc4 <etharp_find_entry+0x2d8>)
 8017d60:	f240 1223 	movw	r2, #291	@ 0x123
 8017d64:	4998      	ldr	r1, [pc, #608]	@ (8017fc8 <etharp_find_entry+0x2dc>)
 8017d66:	4899      	ldr	r0, [pc, #612]	@ (8017fcc <etharp_find_entry+0x2e0>)
 8017d68:	f002 fb60 	bl	801a42c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8017d6c:	68fb      	ldr	r3, [r7, #12]
 8017d6e:	2b00      	cmp	r3, #0
 8017d70:	d020      	beq.n	8017db4 <etharp_find_entry+0xc8>
 8017d72:	68fb      	ldr	r3, [r7, #12]
 8017d74:	6819      	ldr	r1, [r3, #0]
 8017d76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017d7a:	4891      	ldr	r0, [pc, #580]	@ (8017fc0 <etharp_find_entry+0x2d4>)
 8017d7c:	4613      	mov	r3, r2
 8017d7e:	005b      	lsls	r3, r3, #1
 8017d80:	4413      	add	r3, r2
 8017d82:	00db      	lsls	r3, r3, #3
 8017d84:	4403      	add	r3, r0
 8017d86:	3304      	adds	r3, #4
 8017d88:	681b      	ldr	r3, [r3, #0]
 8017d8a:	4299      	cmp	r1, r3
 8017d8c:	d112      	bne.n	8017db4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	d00c      	beq.n	8017dae <etharp_find_entry+0xc2>
 8017d94:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017d98:	4989      	ldr	r1, [pc, #548]	@ (8017fc0 <etharp_find_entry+0x2d4>)
 8017d9a:	4613      	mov	r3, r2
 8017d9c:	005b      	lsls	r3, r3, #1
 8017d9e:	4413      	add	r3, r2
 8017da0:	00db      	lsls	r3, r3, #3
 8017da2:	440b      	add	r3, r1
 8017da4:	3308      	adds	r3, #8
 8017da6:	681b      	ldr	r3, [r3, #0]
 8017da8:	687a      	ldr	r2, [r7, #4]
 8017daa:	429a      	cmp	r2, r3
 8017dac:	d102      	bne.n	8017db4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8017dae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017db2:	e100      	b.n	8017fb6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8017db4:	7dfb      	ldrb	r3, [r7, #23]
 8017db6:	2b01      	cmp	r3, #1
 8017db8:	d140      	bne.n	8017e3c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8017dba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017dbe:	4980      	ldr	r1, [pc, #512]	@ (8017fc0 <etharp_find_entry+0x2d4>)
 8017dc0:	4613      	mov	r3, r2
 8017dc2:	005b      	lsls	r3, r3, #1
 8017dc4:	4413      	add	r3, r2
 8017dc6:	00db      	lsls	r3, r3, #3
 8017dc8:	440b      	add	r3, r1
 8017dca:	681b      	ldr	r3, [r3, #0]
 8017dcc:	2b00      	cmp	r3, #0
 8017dce:	d01a      	beq.n	8017e06 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8017dd0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017dd4:	497a      	ldr	r1, [pc, #488]	@ (8017fc0 <etharp_find_entry+0x2d4>)
 8017dd6:	4613      	mov	r3, r2
 8017dd8:	005b      	lsls	r3, r3, #1
 8017dda:	4413      	add	r3, r2
 8017ddc:	00db      	lsls	r3, r3, #3
 8017dde:	440b      	add	r3, r1
 8017de0:	3312      	adds	r3, #18
 8017de2:	881b      	ldrh	r3, [r3, #0]
 8017de4:	8bba      	ldrh	r2, [r7, #28]
 8017de6:	429a      	cmp	r2, r3
 8017de8:	d845      	bhi.n	8017e76 <etharp_find_entry+0x18a>
            old_queue = i;
 8017dea:	8c3b      	ldrh	r3, [r7, #32]
 8017dec:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8017dee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017df2:	4973      	ldr	r1, [pc, #460]	@ (8017fc0 <etharp_find_entry+0x2d4>)
 8017df4:	4613      	mov	r3, r2
 8017df6:	005b      	lsls	r3, r3, #1
 8017df8:	4413      	add	r3, r2
 8017dfa:	00db      	lsls	r3, r3, #3
 8017dfc:	440b      	add	r3, r1
 8017dfe:	3312      	adds	r3, #18
 8017e00:	881b      	ldrh	r3, [r3, #0]
 8017e02:	83bb      	strh	r3, [r7, #28]
 8017e04:	e037      	b.n	8017e76 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8017e06:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017e0a:	496d      	ldr	r1, [pc, #436]	@ (8017fc0 <etharp_find_entry+0x2d4>)
 8017e0c:	4613      	mov	r3, r2
 8017e0e:	005b      	lsls	r3, r3, #1
 8017e10:	4413      	add	r3, r2
 8017e12:	00db      	lsls	r3, r3, #3
 8017e14:	440b      	add	r3, r1
 8017e16:	3312      	adds	r3, #18
 8017e18:	881b      	ldrh	r3, [r3, #0]
 8017e1a:	8b7a      	ldrh	r2, [r7, #26]
 8017e1c:	429a      	cmp	r2, r3
 8017e1e:	d82a      	bhi.n	8017e76 <etharp_find_entry+0x18a>
            old_pending = i;
 8017e20:	8c3b      	ldrh	r3, [r7, #32]
 8017e22:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8017e24:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017e28:	4965      	ldr	r1, [pc, #404]	@ (8017fc0 <etharp_find_entry+0x2d4>)
 8017e2a:	4613      	mov	r3, r2
 8017e2c:	005b      	lsls	r3, r3, #1
 8017e2e:	4413      	add	r3, r2
 8017e30:	00db      	lsls	r3, r3, #3
 8017e32:	440b      	add	r3, r1
 8017e34:	3312      	adds	r3, #18
 8017e36:	881b      	ldrh	r3, [r3, #0]
 8017e38:	837b      	strh	r3, [r7, #26]
 8017e3a:	e01c      	b.n	8017e76 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8017e3c:	7dfb      	ldrb	r3, [r7, #23]
 8017e3e:	2b01      	cmp	r3, #1
 8017e40:	d919      	bls.n	8017e76 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8017e42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017e46:	495e      	ldr	r1, [pc, #376]	@ (8017fc0 <etharp_find_entry+0x2d4>)
 8017e48:	4613      	mov	r3, r2
 8017e4a:	005b      	lsls	r3, r3, #1
 8017e4c:	4413      	add	r3, r2
 8017e4e:	00db      	lsls	r3, r3, #3
 8017e50:	440b      	add	r3, r1
 8017e52:	3312      	adds	r3, #18
 8017e54:	881b      	ldrh	r3, [r3, #0]
 8017e56:	8b3a      	ldrh	r2, [r7, #24]
 8017e58:	429a      	cmp	r2, r3
 8017e5a:	d80c      	bhi.n	8017e76 <etharp_find_entry+0x18a>
            old_stable = i;
 8017e5c:	8c3b      	ldrh	r3, [r7, #32]
 8017e5e:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8017e60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017e64:	4956      	ldr	r1, [pc, #344]	@ (8017fc0 <etharp_find_entry+0x2d4>)
 8017e66:	4613      	mov	r3, r2
 8017e68:	005b      	lsls	r3, r3, #1
 8017e6a:	4413      	add	r3, r2
 8017e6c:	00db      	lsls	r3, r3, #3
 8017e6e:	440b      	add	r3, r1
 8017e70:	3312      	adds	r3, #18
 8017e72:	881b      	ldrh	r3, [r3, #0]
 8017e74:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017e76:	8c3b      	ldrh	r3, [r7, #32]
 8017e78:	3301      	adds	r3, #1
 8017e7a:	b29b      	uxth	r3, r3
 8017e7c:	843b      	strh	r3, [r7, #32]
 8017e7e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017e82:	2b09      	cmp	r3, #9
 8017e84:	f77f af4c 	ble.w	8017d20 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8017e88:	7afb      	ldrb	r3, [r7, #11]
 8017e8a:	f003 0302 	and.w	r3, r3, #2
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	d108      	bne.n	8017ea4 <etharp_find_entry+0x1b8>
 8017e92:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8017e96:	2b0a      	cmp	r3, #10
 8017e98:	d107      	bne.n	8017eaa <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8017e9a:	7afb      	ldrb	r3, [r7, #11]
 8017e9c:	f003 0301 	and.w	r3, r3, #1
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	d102      	bne.n	8017eaa <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8017ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8017ea8:	e085      	b.n	8017fb6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8017eaa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8017eae:	2b09      	cmp	r3, #9
 8017eb0:	dc02      	bgt.n	8017eb8 <etharp_find_entry+0x1cc>
    i = empty;
 8017eb2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017eb4:	843b      	strh	r3, [r7, #32]
 8017eb6:	e039      	b.n	8017f2c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8017eb8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8017ebc:	2b09      	cmp	r3, #9
 8017ebe:	dc14      	bgt.n	8017eea <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8017ec0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017ec2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8017ec4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017ec8:	493d      	ldr	r1, [pc, #244]	@ (8017fc0 <etharp_find_entry+0x2d4>)
 8017eca:	4613      	mov	r3, r2
 8017ecc:	005b      	lsls	r3, r3, #1
 8017ece:	4413      	add	r3, r2
 8017ed0:	00db      	lsls	r3, r3, #3
 8017ed2:	440b      	add	r3, r1
 8017ed4:	681b      	ldr	r3, [r3, #0]
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	d018      	beq.n	8017f0c <etharp_find_entry+0x220>
 8017eda:	4b3a      	ldr	r3, [pc, #232]	@ (8017fc4 <etharp_find_entry+0x2d8>)
 8017edc:	f240 126d 	movw	r2, #365	@ 0x16d
 8017ee0:	493b      	ldr	r1, [pc, #236]	@ (8017fd0 <etharp_find_entry+0x2e4>)
 8017ee2:	483a      	ldr	r0, [pc, #232]	@ (8017fcc <etharp_find_entry+0x2e0>)
 8017ee4:	f002 faa2 	bl	801a42c <iprintf>
 8017ee8:	e010      	b.n	8017f0c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8017eea:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8017eee:	2b09      	cmp	r3, #9
 8017ef0:	dc02      	bgt.n	8017ef8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8017ef2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017ef4:	843b      	strh	r3, [r7, #32]
 8017ef6:	e009      	b.n	8017f0c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8017ef8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8017efc:	2b09      	cmp	r3, #9
 8017efe:	dc02      	bgt.n	8017f06 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8017f00:	8bfb      	ldrh	r3, [r7, #30]
 8017f02:	843b      	strh	r3, [r7, #32]
 8017f04:	e002      	b.n	8017f0c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8017f06:	f04f 33ff 	mov.w	r3, #4294967295
 8017f0a:	e054      	b.n	8017fb6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017f0c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017f10:	2b09      	cmp	r3, #9
 8017f12:	dd06      	ble.n	8017f22 <etharp_find_entry+0x236>
 8017f14:	4b2b      	ldr	r3, [pc, #172]	@ (8017fc4 <etharp_find_entry+0x2d8>)
 8017f16:	f240 127f 	movw	r2, #383	@ 0x17f
 8017f1a:	492e      	ldr	r1, [pc, #184]	@ (8017fd4 <etharp_find_entry+0x2e8>)
 8017f1c:	482b      	ldr	r0, [pc, #172]	@ (8017fcc <etharp_find_entry+0x2e0>)
 8017f1e:	f002 fa85 	bl	801a42c <iprintf>
    etharp_free_entry(i);
 8017f22:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017f26:	4618      	mov	r0, r3
 8017f28:	f7ff fe06 	bl	8017b38 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017f2c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017f30:	2b09      	cmp	r3, #9
 8017f32:	dd06      	ble.n	8017f42 <etharp_find_entry+0x256>
 8017f34:	4b23      	ldr	r3, [pc, #140]	@ (8017fc4 <etharp_find_entry+0x2d8>)
 8017f36:	f240 1283 	movw	r2, #387	@ 0x183
 8017f3a:	4926      	ldr	r1, [pc, #152]	@ (8017fd4 <etharp_find_entry+0x2e8>)
 8017f3c:	4823      	ldr	r0, [pc, #140]	@ (8017fcc <etharp_find_entry+0x2e0>)
 8017f3e:	f002 fa75 	bl	801a42c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8017f42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017f46:	491e      	ldr	r1, [pc, #120]	@ (8017fc0 <etharp_find_entry+0x2d4>)
 8017f48:	4613      	mov	r3, r2
 8017f4a:	005b      	lsls	r3, r3, #1
 8017f4c:	4413      	add	r3, r2
 8017f4e:	00db      	lsls	r3, r3, #3
 8017f50:	440b      	add	r3, r1
 8017f52:	3314      	adds	r3, #20
 8017f54:	781b      	ldrb	r3, [r3, #0]
 8017f56:	2b00      	cmp	r3, #0
 8017f58:	d006      	beq.n	8017f68 <etharp_find_entry+0x27c>
 8017f5a:	4b1a      	ldr	r3, [pc, #104]	@ (8017fc4 <etharp_find_entry+0x2d8>)
 8017f5c:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8017f60:	491d      	ldr	r1, [pc, #116]	@ (8017fd8 <etharp_find_entry+0x2ec>)
 8017f62:	481a      	ldr	r0, [pc, #104]	@ (8017fcc <etharp_find_entry+0x2e0>)
 8017f64:	f002 fa62 	bl	801a42c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8017f68:	68fb      	ldr	r3, [r7, #12]
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d00b      	beq.n	8017f86 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8017f6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017f72:	68fb      	ldr	r3, [r7, #12]
 8017f74:	6819      	ldr	r1, [r3, #0]
 8017f76:	4812      	ldr	r0, [pc, #72]	@ (8017fc0 <etharp_find_entry+0x2d4>)
 8017f78:	4613      	mov	r3, r2
 8017f7a:	005b      	lsls	r3, r3, #1
 8017f7c:	4413      	add	r3, r2
 8017f7e:	00db      	lsls	r3, r3, #3
 8017f80:	4403      	add	r3, r0
 8017f82:	3304      	adds	r3, #4
 8017f84:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8017f86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017f8a:	490d      	ldr	r1, [pc, #52]	@ (8017fc0 <etharp_find_entry+0x2d4>)
 8017f8c:	4613      	mov	r3, r2
 8017f8e:	005b      	lsls	r3, r3, #1
 8017f90:	4413      	add	r3, r2
 8017f92:	00db      	lsls	r3, r3, #3
 8017f94:	440b      	add	r3, r1
 8017f96:	3312      	adds	r3, #18
 8017f98:	2200      	movs	r2, #0
 8017f9a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8017f9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017fa0:	4907      	ldr	r1, [pc, #28]	@ (8017fc0 <etharp_find_entry+0x2d4>)
 8017fa2:	4613      	mov	r3, r2
 8017fa4:	005b      	lsls	r3, r3, #1
 8017fa6:	4413      	add	r3, r2
 8017fa8:	00db      	lsls	r3, r3, #3
 8017faa:	440b      	add	r3, r1
 8017fac:	3308      	adds	r3, #8
 8017fae:	687a      	ldr	r2, [r7, #4]
 8017fb0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8017fb2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8017fb6:	4618      	mov	r0, r3
 8017fb8:	3728      	adds	r7, #40	@ 0x28
 8017fba:	46bd      	mov	sp, r7
 8017fbc:	bd80      	pop	{r7, pc}
 8017fbe:	bf00      	nop
 8017fc0:	200162c4 	.word	0x200162c4
 8017fc4:	0801bfb0 	.word	0x0801bfb0
 8017fc8:	0801bfe8 	.word	0x0801bfe8
 8017fcc:	0801c028 	.word	0x0801c028
 8017fd0:	0801c050 	.word	0x0801c050
 8017fd4:	0801c068 	.word	0x0801c068
 8017fd8:	0801c07c 	.word	0x0801c07c

08017fdc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8017fdc:	b580      	push	{r7, lr}
 8017fde:	b088      	sub	sp, #32
 8017fe0:	af02      	add	r7, sp, #8
 8017fe2:	60f8      	str	r0, [r7, #12]
 8017fe4:	60b9      	str	r1, [r7, #8]
 8017fe6:	607a      	str	r2, [r7, #4]
 8017fe8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8017fea:	68fb      	ldr	r3, [r7, #12]
 8017fec:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8017ff0:	2b06      	cmp	r3, #6
 8017ff2:	d006      	beq.n	8018002 <etharp_update_arp_entry+0x26>
 8017ff4:	4b48      	ldr	r3, [pc, #288]	@ (8018118 <etharp_update_arp_entry+0x13c>)
 8017ff6:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8017ffa:	4948      	ldr	r1, [pc, #288]	@ (801811c <etharp_update_arp_entry+0x140>)
 8017ffc:	4848      	ldr	r0, [pc, #288]	@ (8018120 <etharp_update_arp_entry+0x144>)
 8017ffe:	f002 fa15 	bl	801a42c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8018002:	68bb      	ldr	r3, [r7, #8]
 8018004:	2b00      	cmp	r3, #0
 8018006:	d012      	beq.n	801802e <etharp_update_arp_entry+0x52>
 8018008:	68bb      	ldr	r3, [r7, #8]
 801800a:	681b      	ldr	r3, [r3, #0]
 801800c:	2b00      	cmp	r3, #0
 801800e:	d00e      	beq.n	801802e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018010:	68bb      	ldr	r3, [r7, #8]
 8018012:	681b      	ldr	r3, [r3, #0]
 8018014:	68f9      	ldr	r1, [r7, #12]
 8018016:	4618      	mov	r0, r3
 8018018:	f001 f8f4 	bl	8019204 <ip4_addr_isbroadcast_u32>
 801801c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801801e:	2b00      	cmp	r3, #0
 8018020:	d105      	bne.n	801802e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8018022:	68bb      	ldr	r3, [r7, #8]
 8018024:	681b      	ldr	r3, [r3, #0]
 8018026:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801802a:	2be0      	cmp	r3, #224	@ 0xe0
 801802c:	d102      	bne.n	8018034 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801802e:	f06f 030f 	mvn.w	r3, #15
 8018032:	e06c      	b.n	801810e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8018034:	78fb      	ldrb	r3, [r7, #3]
 8018036:	68fa      	ldr	r2, [r7, #12]
 8018038:	4619      	mov	r1, r3
 801803a:	68b8      	ldr	r0, [r7, #8]
 801803c:	f7ff fe56 	bl	8017cec <etharp_find_entry>
 8018040:	4603      	mov	r3, r0
 8018042:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8018044:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018048:	2b00      	cmp	r3, #0
 801804a:	da02      	bge.n	8018052 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801804c:	8afb      	ldrh	r3, [r7, #22]
 801804e:	b25b      	sxtb	r3, r3
 8018050:	e05d      	b.n	801810e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8018052:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018056:	4933      	ldr	r1, [pc, #204]	@ (8018124 <etharp_update_arp_entry+0x148>)
 8018058:	4613      	mov	r3, r2
 801805a:	005b      	lsls	r3, r3, #1
 801805c:	4413      	add	r3, r2
 801805e:	00db      	lsls	r3, r3, #3
 8018060:	440b      	add	r3, r1
 8018062:	3314      	adds	r3, #20
 8018064:	2202      	movs	r2, #2
 8018066:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8018068:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801806c:	492d      	ldr	r1, [pc, #180]	@ (8018124 <etharp_update_arp_entry+0x148>)
 801806e:	4613      	mov	r3, r2
 8018070:	005b      	lsls	r3, r3, #1
 8018072:	4413      	add	r3, r2
 8018074:	00db      	lsls	r3, r3, #3
 8018076:	440b      	add	r3, r1
 8018078:	3308      	adds	r3, #8
 801807a:	68fa      	ldr	r2, [r7, #12]
 801807c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801807e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018082:	4613      	mov	r3, r2
 8018084:	005b      	lsls	r3, r3, #1
 8018086:	4413      	add	r3, r2
 8018088:	00db      	lsls	r3, r3, #3
 801808a:	3308      	adds	r3, #8
 801808c:	4a25      	ldr	r2, [pc, #148]	@ (8018124 <etharp_update_arp_entry+0x148>)
 801808e:	4413      	add	r3, r2
 8018090:	3304      	adds	r3, #4
 8018092:	2206      	movs	r2, #6
 8018094:	6879      	ldr	r1, [r7, #4]
 8018096:	4618      	mov	r0, r3
 8018098:	f002 fab3 	bl	801a602 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801809c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80180a0:	4920      	ldr	r1, [pc, #128]	@ (8018124 <etharp_update_arp_entry+0x148>)
 80180a2:	4613      	mov	r3, r2
 80180a4:	005b      	lsls	r3, r3, #1
 80180a6:	4413      	add	r3, r2
 80180a8:	00db      	lsls	r3, r3, #3
 80180aa:	440b      	add	r3, r1
 80180ac:	3312      	adds	r3, #18
 80180ae:	2200      	movs	r2, #0
 80180b0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80180b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80180b6:	491b      	ldr	r1, [pc, #108]	@ (8018124 <etharp_update_arp_entry+0x148>)
 80180b8:	4613      	mov	r3, r2
 80180ba:	005b      	lsls	r3, r3, #1
 80180bc:	4413      	add	r3, r2
 80180be:	00db      	lsls	r3, r3, #3
 80180c0:	440b      	add	r3, r1
 80180c2:	681b      	ldr	r3, [r3, #0]
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	d021      	beq.n	801810c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80180c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80180cc:	4915      	ldr	r1, [pc, #84]	@ (8018124 <etharp_update_arp_entry+0x148>)
 80180ce:	4613      	mov	r3, r2
 80180d0:	005b      	lsls	r3, r3, #1
 80180d2:	4413      	add	r3, r2
 80180d4:	00db      	lsls	r3, r3, #3
 80180d6:	440b      	add	r3, r1
 80180d8:	681b      	ldr	r3, [r3, #0]
 80180da:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80180dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80180e0:	4910      	ldr	r1, [pc, #64]	@ (8018124 <etharp_update_arp_entry+0x148>)
 80180e2:	4613      	mov	r3, r2
 80180e4:	005b      	lsls	r3, r3, #1
 80180e6:	4413      	add	r3, r2
 80180e8:	00db      	lsls	r3, r3, #3
 80180ea:	440b      	add	r3, r1
 80180ec:	2200      	movs	r2, #0
 80180ee:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80180f0:	68fb      	ldr	r3, [r7, #12]
 80180f2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80180f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80180fa:	9300      	str	r3, [sp, #0]
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	6939      	ldr	r1, [r7, #16]
 8018100:	68f8      	ldr	r0, [r7, #12]
 8018102:	f001 ff8d 	bl	801a020 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8018106:	6938      	ldr	r0, [r7, #16]
 8018108:	f7fe fc88 	bl	8016a1c <pbuf_free>
  }
  return ERR_OK;
 801810c:	2300      	movs	r3, #0
}
 801810e:	4618      	mov	r0, r3
 8018110:	3718      	adds	r7, #24
 8018112:	46bd      	mov	sp, r7
 8018114:	bd80      	pop	{r7, pc}
 8018116:	bf00      	nop
 8018118:	0801bfb0 	.word	0x0801bfb0
 801811c:	0801c0a8 	.word	0x0801c0a8
 8018120:	0801c028 	.word	0x0801c028
 8018124:	200162c4 	.word	0x200162c4

08018128 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8018128:	b580      	push	{r7, lr}
 801812a:	b084      	sub	sp, #16
 801812c:	af00      	add	r7, sp, #0
 801812e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018130:	2300      	movs	r3, #0
 8018132:	60fb      	str	r3, [r7, #12]
 8018134:	e01e      	b.n	8018174 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8018136:	4913      	ldr	r1, [pc, #76]	@ (8018184 <etharp_cleanup_netif+0x5c>)
 8018138:	68fa      	ldr	r2, [r7, #12]
 801813a:	4613      	mov	r3, r2
 801813c:	005b      	lsls	r3, r3, #1
 801813e:	4413      	add	r3, r2
 8018140:	00db      	lsls	r3, r3, #3
 8018142:	440b      	add	r3, r1
 8018144:	3314      	adds	r3, #20
 8018146:	781b      	ldrb	r3, [r3, #0]
 8018148:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801814a:	7afb      	ldrb	r3, [r7, #11]
 801814c:	2b00      	cmp	r3, #0
 801814e:	d00e      	beq.n	801816e <etharp_cleanup_netif+0x46>
 8018150:	490c      	ldr	r1, [pc, #48]	@ (8018184 <etharp_cleanup_netif+0x5c>)
 8018152:	68fa      	ldr	r2, [r7, #12]
 8018154:	4613      	mov	r3, r2
 8018156:	005b      	lsls	r3, r3, #1
 8018158:	4413      	add	r3, r2
 801815a:	00db      	lsls	r3, r3, #3
 801815c:	440b      	add	r3, r1
 801815e:	3308      	adds	r3, #8
 8018160:	681b      	ldr	r3, [r3, #0]
 8018162:	687a      	ldr	r2, [r7, #4]
 8018164:	429a      	cmp	r2, r3
 8018166:	d102      	bne.n	801816e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8018168:	68f8      	ldr	r0, [r7, #12]
 801816a:	f7ff fce5 	bl	8017b38 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801816e:	68fb      	ldr	r3, [r7, #12]
 8018170:	3301      	adds	r3, #1
 8018172:	60fb      	str	r3, [r7, #12]
 8018174:	68fb      	ldr	r3, [r7, #12]
 8018176:	2b09      	cmp	r3, #9
 8018178:	dddd      	ble.n	8018136 <etharp_cleanup_netif+0xe>
    }
  }
}
 801817a:	bf00      	nop
 801817c:	bf00      	nop
 801817e:	3710      	adds	r7, #16
 8018180:	46bd      	mov	sp, r7
 8018182:	bd80      	pop	{r7, pc}
 8018184:	200162c4 	.word	0x200162c4

08018188 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8018188:	b5b0      	push	{r4, r5, r7, lr}
 801818a:	b08a      	sub	sp, #40	@ 0x28
 801818c:	af04      	add	r7, sp, #16
 801818e:	6078      	str	r0, [r7, #4]
 8018190:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8018192:	683b      	ldr	r3, [r7, #0]
 8018194:	2b00      	cmp	r3, #0
 8018196:	d107      	bne.n	80181a8 <etharp_input+0x20>
 8018198:	4b3d      	ldr	r3, [pc, #244]	@ (8018290 <etharp_input+0x108>)
 801819a:	f240 228a 	movw	r2, #650	@ 0x28a
 801819e:	493d      	ldr	r1, [pc, #244]	@ (8018294 <etharp_input+0x10c>)
 80181a0:	483d      	ldr	r0, [pc, #244]	@ (8018298 <etharp_input+0x110>)
 80181a2:	f002 f943 	bl	801a42c <iprintf>
 80181a6:	e06f      	b.n	8018288 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80181a8:	687b      	ldr	r3, [r7, #4]
 80181aa:	685b      	ldr	r3, [r3, #4]
 80181ac:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80181ae:	693b      	ldr	r3, [r7, #16]
 80181b0:	881b      	ldrh	r3, [r3, #0]
 80181b2:	b29b      	uxth	r3, r3
 80181b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80181b8:	d10c      	bne.n	80181d4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80181ba:	693b      	ldr	r3, [r7, #16]
 80181bc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80181be:	2b06      	cmp	r3, #6
 80181c0:	d108      	bne.n	80181d4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80181c2:	693b      	ldr	r3, [r7, #16]
 80181c4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80181c6:	2b04      	cmp	r3, #4
 80181c8:	d104      	bne.n	80181d4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80181ca:	693b      	ldr	r3, [r7, #16]
 80181cc:	885b      	ldrh	r3, [r3, #2]
 80181ce:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80181d0:	2b08      	cmp	r3, #8
 80181d2:	d003      	beq.n	80181dc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80181d4:	6878      	ldr	r0, [r7, #4]
 80181d6:	f7fe fc21 	bl	8016a1c <pbuf_free>
    return;
 80181da:	e055      	b.n	8018288 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80181dc:	693b      	ldr	r3, [r7, #16]
 80181de:	330e      	adds	r3, #14
 80181e0:	681b      	ldr	r3, [r3, #0]
 80181e2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80181e4:	693b      	ldr	r3, [r7, #16]
 80181e6:	3318      	adds	r3, #24
 80181e8:	681b      	ldr	r3, [r3, #0]
 80181ea:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80181ec:	683b      	ldr	r3, [r7, #0]
 80181ee:	3304      	adds	r3, #4
 80181f0:	681b      	ldr	r3, [r3, #0]
 80181f2:	2b00      	cmp	r3, #0
 80181f4:	d102      	bne.n	80181fc <etharp_input+0x74>
    for_us = 0;
 80181f6:	2300      	movs	r3, #0
 80181f8:	75fb      	strb	r3, [r7, #23]
 80181fa:	e009      	b.n	8018210 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80181fc:	68ba      	ldr	r2, [r7, #8]
 80181fe:	683b      	ldr	r3, [r7, #0]
 8018200:	3304      	adds	r3, #4
 8018202:	681b      	ldr	r3, [r3, #0]
 8018204:	429a      	cmp	r2, r3
 8018206:	bf0c      	ite	eq
 8018208:	2301      	moveq	r3, #1
 801820a:	2300      	movne	r3, #0
 801820c:	b2db      	uxtb	r3, r3
 801820e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8018210:	693b      	ldr	r3, [r7, #16]
 8018212:	f103 0208 	add.w	r2, r3, #8
 8018216:	7dfb      	ldrb	r3, [r7, #23]
 8018218:	2b00      	cmp	r3, #0
 801821a:	d001      	beq.n	8018220 <etharp_input+0x98>
 801821c:	2301      	movs	r3, #1
 801821e:	e000      	b.n	8018222 <etharp_input+0x9a>
 8018220:	2302      	movs	r3, #2
 8018222:	f107 010c 	add.w	r1, r7, #12
 8018226:	6838      	ldr	r0, [r7, #0]
 8018228:	f7ff fed8 	bl	8017fdc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801822c:	693b      	ldr	r3, [r7, #16]
 801822e:	88db      	ldrh	r3, [r3, #6]
 8018230:	b29b      	uxth	r3, r3
 8018232:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018236:	d003      	beq.n	8018240 <etharp_input+0xb8>
 8018238:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801823c:	d01e      	beq.n	801827c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801823e:	e020      	b.n	8018282 <etharp_input+0xfa>
      if (for_us) {
 8018240:	7dfb      	ldrb	r3, [r7, #23]
 8018242:	2b00      	cmp	r3, #0
 8018244:	d01c      	beq.n	8018280 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8018246:	683b      	ldr	r3, [r7, #0]
 8018248:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801824c:	693b      	ldr	r3, [r7, #16]
 801824e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8018252:	683b      	ldr	r3, [r7, #0]
 8018254:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8018258:	683b      	ldr	r3, [r7, #0]
 801825a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801825c:	693a      	ldr	r2, [r7, #16]
 801825e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8018260:	2102      	movs	r1, #2
 8018262:	9103      	str	r1, [sp, #12]
 8018264:	f107 010c 	add.w	r1, r7, #12
 8018268:	9102      	str	r1, [sp, #8]
 801826a:	9201      	str	r2, [sp, #4]
 801826c:	9300      	str	r3, [sp, #0]
 801826e:	462b      	mov	r3, r5
 8018270:	4622      	mov	r2, r4
 8018272:	4601      	mov	r1, r0
 8018274:	6838      	ldr	r0, [r7, #0]
 8018276:	f000 faeb 	bl	8018850 <etharp_raw>
      break;
 801827a:	e001      	b.n	8018280 <etharp_input+0xf8>
      break;
 801827c:	bf00      	nop
 801827e:	e000      	b.n	8018282 <etharp_input+0xfa>
      break;
 8018280:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8018282:	6878      	ldr	r0, [r7, #4]
 8018284:	f7fe fbca 	bl	8016a1c <pbuf_free>
}
 8018288:	3718      	adds	r7, #24
 801828a:	46bd      	mov	sp, r7
 801828c:	bdb0      	pop	{r4, r5, r7, pc}
 801828e:	bf00      	nop
 8018290:	0801bfb0 	.word	0x0801bfb0
 8018294:	0801c100 	.word	0x0801c100
 8018298:	0801c028 	.word	0x0801c028

0801829c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801829c:	b580      	push	{r7, lr}
 801829e:	b086      	sub	sp, #24
 80182a0:	af02      	add	r7, sp, #8
 80182a2:	60f8      	str	r0, [r7, #12]
 80182a4:	60b9      	str	r1, [r7, #8]
 80182a6:	4613      	mov	r3, r2
 80182a8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80182aa:	79fa      	ldrb	r2, [r7, #7]
 80182ac:	4944      	ldr	r1, [pc, #272]	@ (80183c0 <etharp_output_to_arp_index+0x124>)
 80182ae:	4613      	mov	r3, r2
 80182b0:	005b      	lsls	r3, r3, #1
 80182b2:	4413      	add	r3, r2
 80182b4:	00db      	lsls	r3, r3, #3
 80182b6:	440b      	add	r3, r1
 80182b8:	3314      	adds	r3, #20
 80182ba:	781b      	ldrb	r3, [r3, #0]
 80182bc:	2b01      	cmp	r3, #1
 80182be:	d806      	bhi.n	80182ce <etharp_output_to_arp_index+0x32>
 80182c0:	4b40      	ldr	r3, [pc, #256]	@ (80183c4 <etharp_output_to_arp_index+0x128>)
 80182c2:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80182c6:	4940      	ldr	r1, [pc, #256]	@ (80183c8 <etharp_output_to_arp_index+0x12c>)
 80182c8:	4840      	ldr	r0, [pc, #256]	@ (80183cc <etharp_output_to_arp_index+0x130>)
 80182ca:	f002 f8af 	bl	801a42c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80182ce:	79fa      	ldrb	r2, [r7, #7]
 80182d0:	493b      	ldr	r1, [pc, #236]	@ (80183c0 <etharp_output_to_arp_index+0x124>)
 80182d2:	4613      	mov	r3, r2
 80182d4:	005b      	lsls	r3, r3, #1
 80182d6:	4413      	add	r3, r2
 80182d8:	00db      	lsls	r3, r3, #3
 80182da:	440b      	add	r3, r1
 80182dc:	3314      	adds	r3, #20
 80182de:	781b      	ldrb	r3, [r3, #0]
 80182e0:	2b02      	cmp	r3, #2
 80182e2:	d153      	bne.n	801838c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80182e4:	79fa      	ldrb	r2, [r7, #7]
 80182e6:	4936      	ldr	r1, [pc, #216]	@ (80183c0 <etharp_output_to_arp_index+0x124>)
 80182e8:	4613      	mov	r3, r2
 80182ea:	005b      	lsls	r3, r3, #1
 80182ec:	4413      	add	r3, r2
 80182ee:	00db      	lsls	r3, r3, #3
 80182f0:	440b      	add	r3, r1
 80182f2:	3312      	adds	r3, #18
 80182f4:	881b      	ldrh	r3, [r3, #0]
 80182f6:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80182fa:	d919      	bls.n	8018330 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80182fc:	79fa      	ldrb	r2, [r7, #7]
 80182fe:	4613      	mov	r3, r2
 8018300:	005b      	lsls	r3, r3, #1
 8018302:	4413      	add	r3, r2
 8018304:	00db      	lsls	r3, r3, #3
 8018306:	4a2e      	ldr	r2, [pc, #184]	@ (80183c0 <etharp_output_to_arp_index+0x124>)
 8018308:	4413      	add	r3, r2
 801830a:	3304      	adds	r3, #4
 801830c:	4619      	mov	r1, r3
 801830e:	68f8      	ldr	r0, [r7, #12]
 8018310:	f000 fb4c 	bl	80189ac <etharp_request>
 8018314:	4603      	mov	r3, r0
 8018316:	2b00      	cmp	r3, #0
 8018318:	d138      	bne.n	801838c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801831a:	79fa      	ldrb	r2, [r7, #7]
 801831c:	4928      	ldr	r1, [pc, #160]	@ (80183c0 <etharp_output_to_arp_index+0x124>)
 801831e:	4613      	mov	r3, r2
 8018320:	005b      	lsls	r3, r3, #1
 8018322:	4413      	add	r3, r2
 8018324:	00db      	lsls	r3, r3, #3
 8018326:	440b      	add	r3, r1
 8018328:	3314      	adds	r3, #20
 801832a:	2203      	movs	r2, #3
 801832c:	701a      	strb	r2, [r3, #0]
 801832e:	e02d      	b.n	801838c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8018330:	79fa      	ldrb	r2, [r7, #7]
 8018332:	4923      	ldr	r1, [pc, #140]	@ (80183c0 <etharp_output_to_arp_index+0x124>)
 8018334:	4613      	mov	r3, r2
 8018336:	005b      	lsls	r3, r3, #1
 8018338:	4413      	add	r3, r2
 801833a:	00db      	lsls	r3, r3, #3
 801833c:	440b      	add	r3, r1
 801833e:	3312      	adds	r3, #18
 8018340:	881b      	ldrh	r3, [r3, #0]
 8018342:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8018346:	d321      	bcc.n	801838c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8018348:	79fa      	ldrb	r2, [r7, #7]
 801834a:	4613      	mov	r3, r2
 801834c:	005b      	lsls	r3, r3, #1
 801834e:	4413      	add	r3, r2
 8018350:	00db      	lsls	r3, r3, #3
 8018352:	4a1b      	ldr	r2, [pc, #108]	@ (80183c0 <etharp_output_to_arp_index+0x124>)
 8018354:	4413      	add	r3, r2
 8018356:	1d19      	adds	r1, r3, #4
 8018358:	79fa      	ldrb	r2, [r7, #7]
 801835a:	4613      	mov	r3, r2
 801835c:	005b      	lsls	r3, r3, #1
 801835e:	4413      	add	r3, r2
 8018360:	00db      	lsls	r3, r3, #3
 8018362:	3308      	adds	r3, #8
 8018364:	4a16      	ldr	r2, [pc, #88]	@ (80183c0 <etharp_output_to_arp_index+0x124>)
 8018366:	4413      	add	r3, r2
 8018368:	3304      	adds	r3, #4
 801836a:	461a      	mov	r2, r3
 801836c:	68f8      	ldr	r0, [r7, #12]
 801836e:	f000 fafb 	bl	8018968 <etharp_request_dst>
 8018372:	4603      	mov	r3, r0
 8018374:	2b00      	cmp	r3, #0
 8018376:	d109      	bne.n	801838c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018378:	79fa      	ldrb	r2, [r7, #7]
 801837a:	4911      	ldr	r1, [pc, #68]	@ (80183c0 <etharp_output_to_arp_index+0x124>)
 801837c:	4613      	mov	r3, r2
 801837e:	005b      	lsls	r3, r3, #1
 8018380:	4413      	add	r3, r2
 8018382:	00db      	lsls	r3, r3, #3
 8018384:	440b      	add	r3, r1
 8018386:	3314      	adds	r3, #20
 8018388:	2203      	movs	r2, #3
 801838a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801838c:	68fb      	ldr	r3, [r7, #12]
 801838e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8018392:	79fa      	ldrb	r2, [r7, #7]
 8018394:	4613      	mov	r3, r2
 8018396:	005b      	lsls	r3, r3, #1
 8018398:	4413      	add	r3, r2
 801839a:	00db      	lsls	r3, r3, #3
 801839c:	3308      	adds	r3, #8
 801839e:	4a08      	ldr	r2, [pc, #32]	@ (80183c0 <etharp_output_to_arp_index+0x124>)
 80183a0:	4413      	add	r3, r2
 80183a2:	3304      	adds	r3, #4
 80183a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80183a8:	9200      	str	r2, [sp, #0]
 80183aa:	460a      	mov	r2, r1
 80183ac:	68b9      	ldr	r1, [r7, #8]
 80183ae:	68f8      	ldr	r0, [r7, #12]
 80183b0:	f001 fe36 	bl	801a020 <ethernet_output>
 80183b4:	4603      	mov	r3, r0
}
 80183b6:	4618      	mov	r0, r3
 80183b8:	3710      	adds	r7, #16
 80183ba:	46bd      	mov	sp, r7
 80183bc:	bd80      	pop	{r7, pc}
 80183be:	bf00      	nop
 80183c0:	200162c4 	.word	0x200162c4
 80183c4:	0801bfb0 	.word	0x0801bfb0
 80183c8:	0801c120 	.word	0x0801c120
 80183cc:	0801c028 	.word	0x0801c028

080183d0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80183d0:	b580      	push	{r7, lr}
 80183d2:	b08a      	sub	sp, #40	@ 0x28
 80183d4:	af02      	add	r7, sp, #8
 80183d6:	60f8      	str	r0, [r7, #12]
 80183d8:	60b9      	str	r1, [r7, #8]
 80183da:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80183e0:	68fb      	ldr	r3, [r7, #12]
 80183e2:	2b00      	cmp	r3, #0
 80183e4:	d106      	bne.n	80183f4 <etharp_output+0x24>
 80183e6:	4b73      	ldr	r3, [pc, #460]	@ (80185b4 <etharp_output+0x1e4>)
 80183e8:	f240 321e 	movw	r2, #798	@ 0x31e
 80183ec:	4972      	ldr	r1, [pc, #456]	@ (80185b8 <etharp_output+0x1e8>)
 80183ee:	4873      	ldr	r0, [pc, #460]	@ (80185bc <etharp_output+0x1ec>)
 80183f0:	f002 f81c 	bl	801a42c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80183f4:	68bb      	ldr	r3, [r7, #8]
 80183f6:	2b00      	cmp	r3, #0
 80183f8:	d106      	bne.n	8018408 <etharp_output+0x38>
 80183fa:	4b6e      	ldr	r3, [pc, #440]	@ (80185b4 <etharp_output+0x1e4>)
 80183fc:	f240 321f 	movw	r2, #799	@ 0x31f
 8018400:	496f      	ldr	r1, [pc, #444]	@ (80185c0 <etharp_output+0x1f0>)
 8018402:	486e      	ldr	r0, [pc, #440]	@ (80185bc <etharp_output+0x1ec>)
 8018404:	f002 f812 	bl	801a42c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	2b00      	cmp	r3, #0
 801840c:	d106      	bne.n	801841c <etharp_output+0x4c>
 801840e:	4b69      	ldr	r3, [pc, #420]	@ (80185b4 <etharp_output+0x1e4>)
 8018410:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8018414:	496b      	ldr	r1, [pc, #428]	@ (80185c4 <etharp_output+0x1f4>)
 8018416:	4869      	ldr	r0, [pc, #420]	@ (80185bc <etharp_output+0x1ec>)
 8018418:	f002 f808 	bl	801a42c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	681b      	ldr	r3, [r3, #0]
 8018420:	68f9      	ldr	r1, [r7, #12]
 8018422:	4618      	mov	r0, r3
 8018424:	f000 feee 	bl	8019204 <ip4_addr_isbroadcast_u32>
 8018428:	4603      	mov	r3, r0
 801842a:	2b00      	cmp	r3, #0
 801842c:	d002      	beq.n	8018434 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801842e:	4b66      	ldr	r3, [pc, #408]	@ (80185c8 <etharp_output+0x1f8>)
 8018430:	61fb      	str	r3, [r7, #28]
 8018432:	e0af      	b.n	8018594 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	681b      	ldr	r3, [r3, #0]
 8018438:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801843c:	2be0      	cmp	r3, #224	@ 0xe0
 801843e:	d118      	bne.n	8018472 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8018440:	2301      	movs	r3, #1
 8018442:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8018444:	2300      	movs	r3, #0
 8018446:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8018448:	235e      	movs	r3, #94	@ 0x5e
 801844a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	3301      	adds	r3, #1
 8018450:	781b      	ldrb	r3, [r3, #0]
 8018452:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018456:	b2db      	uxtb	r3, r3
 8018458:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	3302      	adds	r3, #2
 801845e:	781b      	ldrb	r3, [r3, #0]
 8018460:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	3303      	adds	r3, #3
 8018466:	781b      	ldrb	r3, [r3, #0]
 8018468:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801846a:	f107 0310 	add.w	r3, r7, #16
 801846e:	61fb      	str	r3, [r7, #28]
 8018470:	e090      	b.n	8018594 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	681a      	ldr	r2, [r3, #0]
 8018476:	68fb      	ldr	r3, [r7, #12]
 8018478:	3304      	adds	r3, #4
 801847a:	681b      	ldr	r3, [r3, #0]
 801847c:	405a      	eors	r2, r3
 801847e:	68fb      	ldr	r3, [r7, #12]
 8018480:	3308      	adds	r3, #8
 8018482:	681b      	ldr	r3, [r3, #0]
 8018484:	4013      	ands	r3, r2
 8018486:	2b00      	cmp	r3, #0
 8018488:	d012      	beq.n	80184b0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	681b      	ldr	r3, [r3, #0]
 801848e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018490:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8018494:	4293      	cmp	r3, r2
 8018496:	d00b      	beq.n	80184b0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8018498:	68fb      	ldr	r3, [r7, #12]
 801849a:	330c      	adds	r3, #12
 801849c:	681b      	ldr	r3, [r3, #0]
 801849e:	2b00      	cmp	r3, #0
 80184a0:	d003      	beq.n	80184aa <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80184a2:	68fb      	ldr	r3, [r7, #12]
 80184a4:	330c      	adds	r3, #12
 80184a6:	61bb      	str	r3, [r7, #24]
 80184a8:	e002      	b.n	80184b0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80184aa:	f06f 0303 	mvn.w	r3, #3
 80184ae:	e07d      	b.n	80185ac <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80184b0:	4b46      	ldr	r3, [pc, #280]	@ (80185cc <etharp_output+0x1fc>)
 80184b2:	781b      	ldrb	r3, [r3, #0]
 80184b4:	4619      	mov	r1, r3
 80184b6:	4a46      	ldr	r2, [pc, #280]	@ (80185d0 <etharp_output+0x200>)
 80184b8:	460b      	mov	r3, r1
 80184ba:	005b      	lsls	r3, r3, #1
 80184bc:	440b      	add	r3, r1
 80184be:	00db      	lsls	r3, r3, #3
 80184c0:	4413      	add	r3, r2
 80184c2:	3314      	adds	r3, #20
 80184c4:	781b      	ldrb	r3, [r3, #0]
 80184c6:	2b01      	cmp	r3, #1
 80184c8:	d925      	bls.n	8018516 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80184ca:	4b40      	ldr	r3, [pc, #256]	@ (80185cc <etharp_output+0x1fc>)
 80184cc:	781b      	ldrb	r3, [r3, #0]
 80184ce:	4619      	mov	r1, r3
 80184d0:	4a3f      	ldr	r2, [pc, #252]	@ (80185d0 <etharp_output+0x200>)
 80184d2:	460b      	mov	r3, r1
 80184d4:	005b      	lsls	r3, r3, #1
 80184d6:	440b      	add	r3, r1
 80184d8:	00db      	lsls	r3, r3, #3
 80184da:	4413      	add	r3, r2
 80184dc:	3308      	adds	r3, #8
 80184de:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80184e0:	68fa      	ldr	r2, [r7, #12]
 80184e2:	429a      	cmp	r2, r3
 80184e4:	d117      	bne.n	8018516 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80184e6:	69bb      	ldr	r3, [r7, #24]
 80184e8:	681a      	ldr	r2, [r3, #0]
 80184ea:	4b38      	ldr	r3, [pc, #224]	@ (80185cc <etharp_output+0x1fc>)
 80184ec:	781b      	ldrb	r3, [r3, #0]
 80184ee:	4618      	mov	r0, r3
 80184f0:	4937      	ldr	r1, [pc, #220]	@ (80185d0 <etharp_output+0x200>)
 80184f2:	4603      	mov	r3, r0
 80184f4:	005b      	lsls	r3, r3, #1
 80184f6:	4403      	add	r3, r0
 80184f8:	00db      	lsls	r3, r3, #3
 80184fa:	440b      	add	r3, r1
 80184fc:	3304      	adds	r3, #4
 80184fe:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018500:	429a      	cmp	r2, r3
 8018502:	d108      	bne.n	8018516 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8018504:	4b31      	ldr	r3, [pc, #196]	@ (80185cc <etharp_output+0x1fc>)
 8018506:	781b      	ldrb	r3, [r3, #0]
 8018508:	461a      	mov	r2, r3
 801850a:	68b9      	ldr	r1, [r7, #8]
 801850c:	68f8      	ldr	r0, [r7, #12]
 801850e:	f7ff fec5 	bl	801829c <etharp_output_to_arp_index>
 8018512:	4603      	mov	r3, r0
 8018514:	e04a      	b.n	80185ac <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018516:	2300      	movs	r3, #0
 8018518:	75fb      	strb	r3, [r7, #23]
 801851a:	e031      	b.n	8018580 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801851c:	7dfa      	ldrb	r2, [r7, #23]
 801851e:	492c      	ldr	r1, [pc, #176]	@ (80185d0 <etharp_output+0x200>)
 8018520:	4613      	mov	r3, r2
 8018522:	005b      	lsls	r3, r3, #1
 8018524:	4413      	add	r3, r2
 8018526:	00db      	lsls	r3, r3, #3
 8018528:	440b      	add	r3, r1
 801852a:	3314      	adds	r3, #20
 801852c:	781b      	ldrb	r3, [r3, #0]
 801852e:	2b01      	cmp	r3, #1
 8018530:	d923      	bls.n	801857a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8018532:	7dfa      	ldrb	r2, [r7, #23]
 8018534:	4926      	ldr	r1, [pc, #152]	@ (80185d0 <etharp_output+0x200>)
 8018536:	4613      	mov	r3, r2
 8018538:	005b      	lsls	r3, r3, #1
 801853a:	4413      	add	r3, r2
 801853c:	00db      	lsls	r3, r3, #3
 801853e:	440b      	add	r3, r1
 8018540:	3308      	adds	r3, #8
 8018542:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018544:	68fa      	ldr	r2, [r7, #12]
 8018546:	429a      	cmp	r2, r3
 8018548:	d117      	bne.n	801857a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801854a:	69bb      	ldr	r3, [r7, #24]
 801854c:	6819      	ldr	r1, [r3, #0]
 801854e:	7dfa      	ldrb	r2, [r7, #23]
 8018550:	481f      	ldr	r0, [pc, #124]	@ (80185d0 <etharp_output+0x200>)
 8018552:	4613      	mov	r3, r2
 8018554:	005b      	lsls	r3, r3, #1
 8018556:	4413      	add	r3, r2
 8018558:	00db      	lsls	r3, r3, #3
 801855a:	4403      	add	r3, r0
 801855c:	3304      	adds	r3, #4
 801855e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8018560:	4299      	cmp	r1, r3
 8018562:	d10a      	bne.n	801857a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8018564:	4a19      	ldr	r2, [pc, #100]	@ (80185cc <etharp_output+0x1fc>)
 8018566:	7dfb      	ldrb	r3, [r7, #23]
 8018568:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801856a:	7dfb      	ldrb	r3, [r7, #23]
 801856c:	461a      	mov	r2, r3
 801856e:	68b9      	ldr	r1, [r7, #8]
 8018570:	68f8      	ldr	r0, [r7, #12]
 8018572:	f7ff fe93 	bl	801829c <etharp_output_to_arp_index>
 8018576:	4603      	mov	r3, r0
 8018578:	e018      	b.n	80185ac <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801857a:	7dfb      	ldrb	r3, [r7, #23]
 801857c:	3301      	adds	r3, #1
 801857e:	75fb      	strb	r3, [r7, #23]
 8018580:	7dfb      	ldrb	r3, [r7, #23]
 8018582:	2b09      	cmp	r3, #9
 8018584:	d9ca      	bls.n	801851c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8018586:	68ba      	ldr	r2, [r7, #8]
 8018588:	69b9      	ldr	r1, [r7, #24]
 801858a:	68f8      	ldr	r0, [r7, #12]
 801858c:	f000 f822 	bl	80185d4 <etharp_query>
 8018590:	4603      	mov	r3, r0
 8018592:	e00b      	b.n	80185ac <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8018594:	68fb      	ldr	r3, [r7, #12]
 8018596:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801859a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801859e:	9300      	str	r3, [sp, #0]
 80185a0:	69fb      	ldr	r3, [r7, #28]
 80185a2:	68b9      	ldr	r1, [r7, #8]
 80185a4:	68f8      	ldr	r0, [r7, #12]
 80185a6:	f001 fd3b 	bl	801a020 <ethernet_output>
 80185aa:	4603      	mov	r3, r0
}
 80185ac:	4618      	mov	r0, r3
 80185ae:	3720      	adds	r7, #32
 80185b0:	46bd      	mov	sp, r7
 80185b2:	bd80      	pop	{r7, pc}
 80185b4:	0801bfb0 	.word	0x0801bfb0
 80185b8:	0801c100 	.word	0x0801c100
 80185bc:	0801c028 	.word	0x0801c028
 80185c0:	0801c150 	.word	0x0801c150
 80185c4:	0801c0f0 	.word	0x0801c0f0
 80185c8:	0801c6f8 	.word	0x0801c6f8
 80185cc:	200163b4 	.word	0x200163b4
 80185d0:	200162c4 	.word	0x200162c4

080185d4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80185d4:	b580      	push	{r7, lr}
 80185d6:	b08c      	sub	sp, #48	@ 0x30
 80185d8:	af02      	add	r7, sp, #8
 80185da:	60f8      	str	r0, [r7, #12]
 80185dc:	60b9      	str	r1, [r7, #8]
 80185de:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80185e0:	68fb      	ldr	r3, [r7, #12]
 80185e2:	3326      	adds	r3, #38	@ 0x26
 80185e4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80185e6:	23ff      	movs	r3, #255	@ 0xff
 80185e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 80185ec:	2300      	movs	r3, #0
 80185ee:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80185f0:	68bb      	ldr	r3, [r7, #8]
 80185f2:	681b      	ldr	r3, [r3, #0]
 80185f4:	68f9      	ldr	r1, [r7, #12]
 80185f6:	4618      	mov	r0, r3
 80185f8:	f000 fe04 	bl	8019204 <ip4_addr_isbroadcast_u32>
 80185fc:	4603      	mov	r3, r0
 80185fe:	2b00      	cmp	r3, #0
 8018600:	d10c      	bne.n	801861c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018602:	68bb      	ldr	r3, [r7, #8]
 8018604:	681b      	ldr	r3, [r3, #0]
 8018606:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801860a:	2be0      	cmp	r3, #224	@ 0xe0
 801860c:	d006      	beq.n	801861c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801860e:	68bb      	ldr	r3, [r7, #8]
 8018610:	2b00      	cmp	r3, #0
 8018612:	d003      	beq.n	801861c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8018614:	68bb      	ldr	r3, [r7, #8]
 8018616:	681b      	ldr	r3, [r3, #0]
 8018618:	2b00      	cmp	r3, #0
 801861a:	d102      	bne.n	8018622 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801861c:	f06f 030f 	mvn.w	r3, #15
 8018620:	e101      	b.n	8018826 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8018622:	68fa      	ldr	r2, [r7, #12]
 8018624:	2101      	movs	r1, #1
 8018626:	68b8      	ldr	r0, [r7, #8]
 8018628:	f7ff fb60 	bl	8017cec <etharp_find_entry>
 801862c:	4603      	mov	r3, r0
 801862e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8018630:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018634:	2b00      	cmp	r3, #0
 8018636:	da02      	bge.n	801863e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8018638:	8a7b      	ldrh	r3, [r7, #18]
 801863a:	b25b      	sxtb	r3, r3
 801863c:	e0f3      	b.n	8018826 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801863e:	8a7b      	ldrh	r3, [r7, #18]
 8018640:	2b7e      	cmp	r3, #126	@ 0x7e
 8018642:	d906      	bls.n	8018652 <etharp_query+0x7e>
 8018644:	4b7a      	ldr	r3, [pc, #488]	@ (8018830 <etharp_query+0x25c>)
 8018646:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801864a:	497a      	ldr	r1, [pc, #488]	@ (8018834 <etharp_query+0x260>)
 801864c:	487a      	ldr	r0, [pc, #488]	@ (8018838 <etharp_query+0x264>)
 801864e:	f001 feed 	bl	801a42c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8018652:	8a7b      	ldrh	r3, [r7, #18]
 8018654:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8018656:	7c7a      	ldrb	r2, [r7, #17]
 8018658:	4978      	ldr	r1, [pc, #480]	@ (801883c <etharp_query+0x268>)
 801865a:	4613      	mov	r3, r2
 801865c:	005b      	lsls	r3, r3, #1
 801865e:	4413      	add	r3, r2
 8018660:	00db      	lsls	r3, r3, #3
 8018662:	440b      	add	r3, r1
 8018664:	3314      	adds	r3, #20
 8018666:	781b      	ldrb	r3, [r3, #0]
 8018668:	2b00      	cmp	r3, #0
 801866a:	d115      	bne.n	8018698 <etharp_query+0xc4>
    is_new_entry = 1;
 801866c:	2301      	movs	r3, #1
 801866e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8018670:	7c7a      	ldrb	r2, [r7, #17]
 8018672:	4972      	ldr	r1, [pc, #456]	@ (801883c <etharp_query+0x268>)
 8018674:	4613      	mov	r3, r2
 8018676:	005b      	lsls	r3, r3, #1
 8018678:	4413      	add	r3, r2
 801867a:	00db      	lsls	r3, r3, #3
 801867c:	440b      	add	r3, r1
 801867e:	3314      	adds	r3, #20
 8018680:	2201      	movs	r2, #1
 8018682:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8018684:	7c7a      	ldrb	r2, [r7, #17]
 8018686:	496d      	ldr	r1, [pc, #436]	@ (801883c <etharp_query+0x268>)
 8018688:	4613      	mov	r3, r2
 801868a:	005b      	lsls	r3, r3, #1
 801868c:	4413      	add	r3, r2
 801868e:	00db      	lsls	r3, r3, #3
 8018690:	440b      	add	r3, r1
 8018692:	3308      	adds	r3, #8
 8018694:	68fa      	ldr	r2, [r7, #12]
 8018696:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8018698:	7c7a      	ldrb	r2, [r7, #17]
 801869a:	4968      	ldr	r1, [pc, #416]	@ (801883c <etharp_query+0x268>)
 801869c:	4613      	mov	r3, r2
 801869e:	005b      	lsls	r3, r3, #1
 80186a0:	4413      	add	r3, r2
 80186a2:	00db      	lsls	r3, r3, #3
 80186a4:	440b      	add	r3, r1
 80186a6:	3314      	adds	r3, #20
 80186a8:	781b      	ldrb	r3, [r3, #0]
 80186aa:	2b01      	cmp	r3, #1
 80186ac:	d011      	beq.n	80186d2 <etharp_query+0xfe>
 80186ae:	7c7a      	ldrb	r2, [r7, #17]
 80186b0:	4962      	ldr	r1, [pc, #392]	@ (801883c <etharp_query+0x268>)
 80186b2:	4613      	mov	r3, r2
 80186b4:	005b      	lsls	r3, r3, #1
 80186b6:	4413      	add	r3, r2
 80186b8:	00db      	lsls	r3, r3, #3
 80186ba:	440b      	add	r3, r1
 80186bc:	3314      	adds	r3, #20
 80186be:	781b      	ldrb	r3, [r3, #0]
 80186c0:	2b01      	cmp	r3, #1
 80186c2:	d806      	bhi.n	80186d2 <etharp_query+0xfe>
 80186c4:	4b5a      	ldr	r3, [pc, #360]	@ (8018830 <etharp_query+0x25c>)
 80186c6:	f240 32cd 	movw	r2, #973	@ 0x3cd
 80186ca:	495d      	ldr	r1, [pc, #372]	@ (8018840 <etharp_query+0x26c>)
 80186cc:	485a      	ldr	r0, [pc, #360]	@ (8018838 <etharp_query+0x264>)
 80186ce:	f001 fead 	bl	801a42c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80186d2:	6a3b      	ldr	r3, [r7, #32]
 80186d4:	2b00      	cmp	r3, #0
 80186d6:	d102      	bne.n	80186de <etharp_query+0x10a>
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	2b00      	cmp	r3, #0
 80186dc:	d10c      	bne.n	80186f8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80186de:	68b9      	ldr	r1, [r7, #8]
 80186e0:	68f8      	ldr	r0, [r7, #12]
 80186e2:	f000 f963 	bl	80189ac <etharp_request>
 80186e6:	4603      	mov	r3, r0
 80186e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	d102      	bne.n	80186f8 <etharp_query+0x124>
      return result;
 80186f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80186f6:	e096      	b.n	8018826 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80186f8:	687b      	ldr	r3, [r7, #4]
 80186fa:	2b00      	cmp	r3, #0
 80186fc:	d106      	bne.n	801870c <etharp_query+0x138>
 80186fe:	4b4c      	ldr	r3, [pc, #304]	@ (8018830 <etharp_query+0x25c>)
 8018700:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8018704:	494f      	ldr	r1, [pc, #316]	@ (8018844 <etharp_query+0x270>)
 8018706:	484c      	ldr	r0, [pc, #304]	@ (8018838 <etharp_query+0x264>)
 8018708:	f001 fe90 	bl	801a42c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801870c:	7c7a      	ldrb	r2, [r7, #17]
 801870e:	494b      	ldr	r1, [pc, #300]	@ (801883c <etharp_query+0x268>)
 8018710:	4613      	mov	r3, r2
 8018712:	005b      	lsls	r3, r3, #1
 8018714:	4413      	add	r3, r2
 8018716:	00db      	lsls	r3, r3, #3
 8018718:	440b      	add	r3, r1
 801871a:	3314      	adds	r3, #20
 801871c:	781b      	ldrb	r3, [r3, #0]
 801871e:	2b01      	cmp	r3, #1
 8018720:	d917      	bls.n	8018752 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8018722:	4a49      	ldr	r2, [pc, #292]	@ (8018848 <etharp_query+0x274>)
 8018724:	7c7b      	ldrb	r3, [r7, #17]
 8018726:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8018728:	7c7a      	ldrb	r2, [r7, #17]
 801872a:	4613      	mov	r3, r2
 801872c:	005b      	lsls	r3, r3, #1
 801872e:	4413      	add	r3, r2
 8018730:	00db      	lsls	r3, r3, #3
 8018732:	3308      	adds	r3, #8
 8018734:	4a41      	ldr	r2, [pc, #260]	@ (801883c <etharp_query+0x268>)
 8018736:	4413      	add	r3, r2
 8018738:	3304      	adds	r3, #4
 801873a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801873e:	9200      	str	r2, [sp, #0]
 8018740:	697a      	ldr	r2, [r7, #20]
 8018742:	6879      	ldr	r1, [r7, #4]
 8018744:	68f8      	ldr	r0, [r7, #12]
 8018746:	f001 fc6b 	bl	801a020 <ethernet_output>
 801874a:	4603      	mov	r3, r0
 801874c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8018750:	e067      	b.n	8018822 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018752:	7c7a      	ldrb	r2, [r7, #17]
 8018754:	4939      	ldr	r1, [pc, #228]	@ (801883c <etharp_query+0x268>)
 8018756:	4613      	mov	r3, r2
 8018758:	005b      	lsls	r3, r3, #1
 801875a:	4413      	add	r3, r2
 801875c:	00db      	lsls	r3, r3, #3
 801875e:	440b      	add	r3, r1
 8018760:	3314      	adds	r3, #20
 8018762:	781b      	ldrb	r3, [r3, #0]
 8018764:	2b01      	cmp	r3, #1
 8018766:	d15c      	bne.n	8018822 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8018768:	2300      	movs	r3, #0
 801876a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801876c:	687b      	ldr	r3, [r7, #4]
 801876e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018770:	e01c      	b.n	80187ac <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8018772:	69fb      	ldr	r3, [r7, #28]
 8018774:	895a      	ldrh	r2, [r3, #10]
 8018776:	69fb      	ldr	r3, [r7, #28]
 8018778:	891b      	ldrh	r3, [r3, #8]
 801877a:	429a      	cmp	r2, r3
 801877c:	d10a      	bne.n	8018794 <etharp_query+0x1c0>
 801877e:	69fb      	ldr	r3, [r7, #28]
 8018780:	681b      	ldr	r3, [r3, #0]
 8018782:	2b00      	cmp	r3, #0
 8018784:	d006      	beq.n	8018794 <etharp_query+0x1c0>
 8018786:	4b2a      	ldr	r3, [pc, #168]	@ (8018830 <etharp_query+0x25c>)
 8018788:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801878c:	492f      	ldr	r1, [pc, #188]	@ (801884c <etharp_query+0x278>)
 801878e:	482a      	ldr	r0, [pc, #168]	@ (8018838 <etharp_query+0x264>)
 8018790:	f001 fe4c 	bl	801a42c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8018794:	69fb      	ldr	r3, [r7, #28]
 8018796:	7b1b      	ldrb	r3, [r3, #12]
 8018798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801879c:	2b00      	cmp	r3, #0
 801879e:	d002      	beq.n	80187a6 <etharp_query+0x1d2>
        copy_needed = 1;
 80187a0:	2301      	movs	r3, #1
 80187a2:	61bb      	str	r3, [r7, #24]
        break;
 80187a4:	e005      	b.n	80187b2 <etharp_query+0x1de>
      }
      p = p->next;
 80187a6:	69fb      	ldr	r3, [r7, #28]
 80187a8:	681b      	ldr	r3, [r3, #0]
 80187aa:	61fb      	str	r3, [r7, #28]
    while (p) {
 80187ac:	69fb      	ldr	r3, [r7, #28]
 80187ae:	2b00      	cmp	r3, #0
 80187b0:	d1df      	bne.n	8018772 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80187b2:	69bb      	ldr	r3, [r7, #24]
 80187b4:	2b00      	cmp	r3, #0
 80187b6:	d007      	beq.n	80187c8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80187b8:	687a      	ldr	r2, [r7, #4]
 80187ba:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80187be:	200e      	movs	r0, #14
 80187c0:	f7fe fb26 	bl	8016e10 <pbuf_clone>
 80187c4:	61f8      	str	r0, [r7, #28]
 80187c6:	e004      	b.n	80187d2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80187c8:	687b      	ldr	r3, [r7, #4]
 80187ca:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80187cc:	69f8      	ldr	r0, [r7, #28]
 80187ce:	f7fe f9c5 	bl	8016b5c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80187d2:	69fb      	ldr	r3, [r7, #28]
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	d021      	beq.n	801881c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80187d8:	7c7a      	ldrb	r2, [r7, #17]
 80187da:	4918      	ldr	r1, [pc, #96]	@ (801883c <etharp_query+0x268>)
 80187dc:	4613      	mov	r3, r2
 80187de:	005b      	lsls	r3, r3, #1
 80187e0:	4413      	add	r3, r2
 80187e2:	00db      	lsls	r3, r3, #3
 80187e4:	440b      	add	r3, r1
 80187e6:	681b      	ldr	r3, [r3, #0]
 80187e8:	2b00      	cmp	r3, #0
 80187ea:	d00a      	beq.n	8018802 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80187ec:	7c7a      	ldrb	r2, [r7, #17]
 80187ee:	4913      	ldr	r1, [pc, #76]	@ (801883c <etharp_query+0x268>)
 80187f0:	4613      	mov	r3, r2
 80187f2:	005b      	lsls	r3, r3, #1
 80187f4:	4413      	add	r3, r2
 80187f6:	00db      	lsls	r3, r3, #3
 80187f8:	440b      	add	r3, r1
 80187fa:	681b      	ldr	r3, [r3, #0]
 80187fc:	4618      	mov	r0, r3
 80187fe:	f7fe f90d 	bl	8016a1c <pbuf_free>
      }
      arp_table[i].q = p;
 8018802:	7c7a      	ldrb	r2, [r7, #17]
 8018804:	490d      	ldr	r1, [pc, #52]	@ (801883c <etharp_query+0x268>)
 8018806:	4613      	mov	r3, r2
 8018808:	005b      	lsls	r3, r3, #1
 801880a:	4413      	add	r3, r2
 801880c:	00db      	lsls	r3, r3, #3
 801880e:	440b      	add	r3, r1
 8018810:	69fa      	ldr	r2, [r7, #28]
 8018812:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8018814:	2300      	movs	r3, #0
 8018816:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801881a:	e002      	b.n	8018822 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801881c:	23ff      	movs	r3, #255	@ 0xff
 801881e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8018822:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8018826:	4618      	mov	r0, r3
 8018828:	3728      	adds	r7, #40	@ 0x28
 801882a:	46bd      	mov	sp, r7
 801882c:	bd80      	pop	{r7, pc}
 801882e:	bf00      	nop
 8018830:	0801bfb0 	.word	0x0801bfb0
 8018834:	0801c15c 	.word	0x0801c15c
 8018838:	0801c028 	.word	0x0801c028
 801883c:	200162c4 	.word	0x200162c4
 8018840:	0801c16c 	.word	0x0801c16c
 8018844:	0801c150 	.word	0x0801c150
 8018848:	200163b4 	.word	0x200163b4
 801884c:	0801c194 	.word	0x0801c194

08018850 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8018850:	b580      	push	{r7, lr}
 8018852:	b08a      	sub	sp, #40	@ 0x28
 8018854:	af02      	add	r7, sp, #8
 8018856:	60f8      	str	r0, [r7, #12]
 8018858:	60b9      	str	r1, [r7, #8]
 801885a:	607a      	str	r2, [r7, #4]
 801885c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801885e:	2300      	movs	r3, #0
 8018860:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018862:	68fb      	ldr	r3, [r7, #12]
 8018864:	2b00      	cmp	r3, #0
 8018866:	d106      	bne.n	8018876 <etharp_raw+0x26>
 8018868:	4b3a      	ldr	r3, [pc, #232]	@ (8018954 <etharp_raw+0x104>)
 801886a:	f240 4257 	movw	r2, #1111	@ 0x457
 801886e:	493a      	ldr	r1, [pc, #232]	@ (8018958 <etharp_raw+0x108>)
 8018870:	483a      	ldr	r0, [pc, #232]	@ (801895c <etharp_raw+0x10c>)
 8018872:	f001 fddb 	bl	801a42c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8018876:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801887a:	211c      	movs	r1, #28
 801887c:	200e      	movs	r0, #14
 801887e:	f7fd fdeb 	bl	8016458 <pbuf_alloc>
 8018882:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8018884:	69bb      	ldr	r3, [r7, #24]
 8018886:	2b00      	cmp	r3, #0
 8018888:	d102      	bne.n	8018890 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801888a:	f04f 33ff 	mov.w	r3, #4294967295
 801888e:	e05d      	b.n	801894c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8018890:	69bb      	ldr	r3, [r7, #24]
 8018892:	895b      	ldrh	r3, [r3, #10]
 8018894:	2b1b      	cmp	r3, #27
 8018896:	d806      	bhi.n	80188a6 <etharp_raw+0x56>
 8018898:	4b2e      	ldr	r3, [pc, #184]	@ (8018954 <etharp_raw+0x104>)
 801889a:	f240 4262 	movw	r2, #1122	@ 0x462
 801889e:	4930      	ldr	r1, [pc, #192]	@ (8018960 <etharp_raw+0x110>)
 80188a0:	482e      	ldr	r0, [pc, #184]	@ (801895c <etharp_raw+0x10c>)
 80188a2:	f001 fdc3 	bl	801a42c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80188a6:	69bb      	ldr	r3, [r7, #24]
 80188a8:	685b      	ldr	r3, [r3, #4]
 80188aa:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80188ac:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80188ae:	4618      	mov	r0, r3
 80188b0:	f7fc fe4c 	bl	801554c <lwip_htons>
 80188b4:	4603      	mov	r3, r0
 80188b6:	461a      	mov	r2, r3
 80188b8:	697b      	ldr	r3, [r7, #20]
 80188ba:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80188bc:	68fb      	ldr	r3, [r7, #12]
 80188be:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80188c2:	2b06      	cmp	r3, #6
 80188c4:	d006      	beq.n	80188d4 <etharp_raw+0x84>
 80188c6:	4b23      	ldr	r3, [pc, #140]	@ (8018954 <etharp_raw+0x104>)
 80188c8:	f240 4269 	movw	r2, #1129	@ 0x469
 80188cc:	4925      	ldr	r1, [pc, #148]	@ (8018964 <etharp_raw+0x114>)
 80188ce:	4823      	ldr	r0, [pc, #140]	@ (801895c <etharp_raw+0x10c>)
 80188d0:	f001 fdac 	bl	801a42c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80188d4:	697b      	ldr	r3, [r7, #20]
 80188d6:	3308      	adds	r3, #8
 80188d8:	2206      	movs	r2, #6
 80188da:	6839      	ldr	r1, [r7, #0]
 80188dc:	4618      	mov	r0, r3
 80188de:	f001 fe90 	bl	801a602 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80188e2:	697b      	ldr	r3, [r7, #20]
 80188e4:	3312      	adds	r3, #18
 80188e6:	2206      	movs	r2, #6
 80188e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80188ea:	4618      	mov	r0, r3
 80188ec:	f001 fe89 	bl	801a602 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80188f0:	697b      	ldr	r3, [r7, #20]
 80188f2:	330e      	adds	r3, #14
 80188f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80188f6:	6812      	ldr	r2, [r2, #0]
 80188f8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80188fa:	697b      	ldr	r3, [r7, #20]
 80188fc:	3318      	adds	r3, #24
 80188fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018900:	6812      	ldr	r2, [r2, #0]
 8018902:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8018904:	697b      	ldr	r3, [r7, #20]
 8018906:	2200      	movs	r2, #0
 8018908:	701a      	strb	r2, [r3, #0]
 801890a:	2200      	movs	r2, #0
 801890c:	f042 0201 	orr.w	r2, r2, #1
 8018910:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8018912:	697b      	ldr	r3, [r7, #20]
 8018914:	2200      	movs	r2, #0
 8018916:	f042 0208 	orr.w	r2, r2, #8
 801891a:	709a      	strb	r2, [r3, #2]
 801891c:	2200      	movs	r2, #0
 801891e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8018920:	697b      	ldr	r3, [r7, #20]
 8018922:	2206      	movs	r2, #6
 8018924:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8018926:	697b      	ldr	r3, [r7, #20]
 8018928:	2204      	movs	r2, #4
 801892a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801892c:	f640 0306 	movw	r3, #2054	@ 0x806
 8018930:	9300      	str	r3, [sp, #0]
 8018932:	687b      	ldr	r3, [r7, #4]
 8018934:	68ba      	ldr	r2, [r7, #8]
 8018936:	69b9      	ldr	r1, [r7, #24]
 8018938:	68f8      	ldr	r0, [r7, #12]
 801893a:	f001 fb71 	bl	801a020 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801893e:	69b8      	ldr	r0, [r7, #24]
 8018940:	f7fe f86c 	bl	8016a1c <pbuf_free>
  p = NULL;
 8018944:	2300      	movs	r3, #0
 8018946:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8018948:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801894c:	4618      	mov	r0, r3
 801894e:	3720      	adds	r7, #32
 8018950:	46bd      	mov	sp, r7
 8018952:	bd80      	pop	{r7, pc}
 8018954:	0801bfb0 	.word	0x0801bfb0
 8018958:	0801c100 	.word	0x0801c100
 801895c:	0801c028 	.word	0x0801c028
 8018960:	0801c1b0 	.word	0x0801c1b0
 8018964:	0801c1e4 	.word	0x0801c1e4

08018968 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8018968:	b580      	push	{r7, lr}
 801896a:	b088      	sub	sp, #32
 801896c:	af04      	add	r7, sp, #16
 801896e:	60f8      	str	r0, [r7, #12]
 8018970:	60b9      	str	r1, [r7, #8]
 8018972:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018974:	68fb      	ldr	r3, [r7, #12]
 8018976:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801897a:	68fb      	ldr	r3, [r7, #12]
 801897c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8018980:	68fb      	ldr	r3, [r7, #12]
 8018982:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018984:	2201      	movs	r2, #1
 8018986:	9203      	str	r2, [sp, #12]
 8018988:	68ba      	ldr	r2, [r7, #8]
 801898a:	9202      	str	r2, [sp, #8]
 801898c:	4a06      	ldr	r2, [pc, #24]	@ (80189a8 <etharp_request_dst+0x40>)
 801898e:	9201      	str	r2, [sp, #4]
 8018990:	9300      	str	r3, [sp, #0]
 8018992:	4603      	mov	r3, r0
 8018994:	687a      	ldr	r2, [r7, #4]
 8018996:	68f8      	ldr	r0, [r7, #12]
 8018998:	f7ff ff5a 	bl	8018850 <etharp_raw>
 801899c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801899e:	4618      	mov	r0, r3
 80189a0:	3710      	adds	r7, #16
 80189a2:	46bd      	mov	sp, r7
 80189a4:	bd80      	pop	{r7, pc}
 80189a6:	bf00      	nop
 80189a8:	0801c700 	.word	0x0801c700

080189ac <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80189ac:	b580      	push	{r7, lr}
 80189ae:	b082      	sub	sp, #8
 80189b0:	af00      	add	r7, sp, #0
 80189b2:	6078      	str	r0, [r7, #4]
 80189b4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80189b6:	4a05      	ldr	r2, [pc, #20]	@ (80189cc <etharp_request+0x20>)
 80189b8:	6839      	ldr	r1, [r7, #0]
 80189ba:	6878      	ldr	r0, [r7, #4]
 80189bc:	f7ff ffd4 	bl	8018968 <etharp_request_dst>
 80189c0:	4603      	mov	r3, r0
}
 80189c2:	4618      	mov	r0, r3
 80189c4:	3708      	adds	r7, #8
 80189c6:	46bd      	mov	sp, r7
 80189c8:	bd80      	pop	{r7, pc}
 80189ca:	bf00      	nop
 80189cc:	0801c6f8 	.word	0x0801c6f8

080189d0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80189d0:	b580      	push	{r7, lr}
 80189d2:	b08e      	sub	sp, #56	@ 0x38
 80189d4:	af04      	add	r7, sp, #16
 80189d6:	6078      	str	r0, [r7, #4]
 80189d8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80189da:	4b79      	ldr	r3, [pc, #484]	@ (8018bc0 <icmp_input+0x1f0>)
 80189dc:	689b      	ldr	r3, [r3, #8]
 80189de:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80189e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80189e2:	781b      	ldrb	r3, [r3, #0]
 80189e4:	f003 030f 	and.w	r3, r3, #15
 80189e8:	b2db      	uxtb	r3, r3
 80189ea:	009b      	lsls	r3, r3, #2
 80189ec:	b2db      	uxtb	r3, r3
 80189ee:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 80189f0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80189f2:	2b13      	cmp	r3, #19
 80189f4:	f240 80cd 	bls.w	8018b92 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	895b      	ldrh	r3, [r3, #10]
 80189fc:	2b03      	cmp	r3, #3
 80189fe:	f240 80ca 	bls.w	8018b96 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	685b      	ldr	r3, [r3, #4]
 8018a06:	781b      	ldrb	r3, [r3, #0]
 8018a08:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8018a0c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	f000 80b7 	beq.w	8018b84 <icmp_input+0x1b4>
 8018a16:	2b08      	cmp	r3, #8
 8018a18:	f040 80b7 	bne.w	8018b8a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8018a1c:	4b69      	ldr	r3, [pc, #420]	@ (8018bc4 <icmp_input+0x1f4>)
 8018a1e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018a20:	4b67      	ldr	r3, [pc, #412]	@ (8018bc0 <icmp_input+0x1f0>)
 8018a22:	695b      	ldr	r3, [r3, #20]
 8018a24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8018a28:	2be0      	cmp	r3, #224	@ 0xe0
 8018a2a:	f000 80bb 	beq.w	8018ba4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8018a2e:	4b64      	ldr	r3, [pc, #400]	@ (8018bc0 <icmp_input+0x1f0>)
 8018a30:	695b      	ldr	r3, [r3, #20]
 8018a32:	4a63      	ldr	r2, [pc, #396]	@ (8018bc0 <icmp_input+0x1f0>)
 8018a34:	6812      	ldr	r2, [r2, #0]
 8018a36:	4611      	mov	r1, r2
 8018a38:	4618      	mov	r0, r3
 8018a3a:	f000 fbe3 	bl	8019204 <ip4_addr_isbroadcast_u32>
 8018a3e:	4603      	mov	r3, r0
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	f040 80b1 	bne.w	8018ba8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8018a46:	687b      	ldr	r3, [r7, #4]
 8018a48:	891b      	ldrh	r3, [r3, #8]
 8018a4a:	2b07      	cmp	r3, #7
 8018a4c:	f240 80a5 	bls.w	8018b9a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8018a50:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018a52:	330e      	adds	r3, #14
 8018a54:	4619      	mov	r1, r3
 8018a56:	6878      	ldr	r0, [r7, #4]
 8018a58:	f7fd ff4a 	bl	80168f0 <pbuf_add_header>
 8018a5c:	4603      	mov	r3, r0
 8018a5e:	2b00      	cmp	r3, #0
 8018a60:	d04b      	beq.n	8018afa <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8018a62:	687b      	ldr	r3, [r7, #4]
 8018a64:	891a      	ldrh	r2, [r3, #8]
 8018a66:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018a68:	4413      	add	r3, r2
 8018a6a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8018a6c:	687b      	ldr	r3, [r7, #4]
 8018a6e:	891b      	ldrh	r3, [r3, #8]
 8018a70:	8b7a      	ldrh	r2, [r7, #26]
 8018a72:	429a      	cmp	r2, r3
 8018a74:	f0c0 809a 	bcc.w	8018bac <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8018a78:	8b7b      	ldrh	r3, [r7, #26]
 8018a7a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018a7e:	4619      	mov	r1, r3
 8018a80:	200e      	movs	r0, #14
 8018a82:	f7fd fce9 	bl	8016458 <pbuf_alloc>
 8018a86:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8018a88:	697b      	ldr	r3, [r7, #20]
 8018a8a:	2b00      	cmp	r3, #0
 8018a8c:	f000 8090 	beq.w	8018bb0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8018a90:	697b      	ldr	r3, [r7, #20]
 8018a92:	895b      	ldrh	r3, [r3, #10]
 8018a94:	461a      	mov	r2, r3
 8018a96:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018a98:	3308      	adds	r3, #8
 8018a9a:	429a      	cmp	r2, r3
 8018a9c:	d203      	bcs.n	8018aa6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8018a9e:	6978      	ldr	r0, [r7, #20]
 8018aa0:	f7fd ffbc 	bl	8016a1c <pbuf_free>
          goto icmperr;
 8018aa4:	e085      	b.n	8018bb2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8018aa6:	697b      	ldr	r3, [r7, #20]
 8018aa8:	685b      	ldr	r3, [r3, #4]
 8018aaa:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8018aac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018aae:	4618      	mov	r0, r3
 8018ab0:	f001 fda7 	bl	801a602 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8018ab4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018ab6:	4619      	mov	r1, r3
 8018ab8:	6978      	ldr	r0, [r7, #20]
 8018aba:	f7fd ff29 	bl	8016910 <pbuf_remove_header>
 8018abe:	4603      	mov	r3, r0
 8018ac0:	2b00      	cmp	r3, #0
 8018ac2:	d009      	beq.n	8018ad8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8018ac4:	4b40      	ldr	r3, [pc, #256]	@ (8018bc8 <icmp_input+0x1f8>)
 8018ac6:	22b6      	movs	r2, #182	@ 0xb6
 8018ac8:	4940      	ldr	r1, [pc, #256]	@ (8018bcc <icmp_input+0x1fc>)
 8018aca:	4841      	ldr	r0, [pc, #260]	@ (8018bd0 <icmp_input+0x200>)
 8018acc:	f001 fcae 	bl	801a42c <iprintf>
          pbuf_free(r);
 8018ad0:	6978      	ldr	r0, [r7, #20]
 8018ad2:	f7fd ffa3 	bl	8016a1c <pbuf_free>
          goto icmperr;
 8018ad6:	e06c      	b.n	8018bb2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8018ad8:	6879      	ldr	r1, [r7, #4]
 8018ada:	6978      	ldr	r0, [r7, #20]
 8018adc:	f7fe f8c6 	bl	8016c6c <pbuf_copy>
 8018ae0:	4603      	mov	r3, r0
 8018ae2:	2b00      	cmp	r3, #0
 8018ae4:	d003      	beq.n	8018aee <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8018ae6:	6978      	ldr	r0, [r7, #20]
 8018ae8:	f7fd ff98 	bl	8016a1c <pbuf_free>
          goto icmperr;
 8018aec:	e061      	b.n	8018bb2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8018aee:	6878      	ldr	r0, [r7, #4]
 8018af0:	f7fd ff94 	bl	8016a1c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8018af4:	697b      	ldr	r3, [r7, #20]
 8018af6:	607b      	str	r3, [r7, #4]
 8018af8:	e00f      	b.n	8018b1a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8018afa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018afc:	330e      	adds	r3, #14
 8018afe:	4619      	mov	r1, r3
 8018b00:	6878      	ldr	r0, [r7, #4]
 8018b02:	f7fd ff05 	bl	8016910 <pbuf_remove_header>
 8018b06:	4603      	mov	r3, r0
 8018b08:	2b00      	cmp	r3, #0
 8018b0a:	d006      	beq.n	8018b1a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8018b0c:	4b2e      	ldr	r3, [pc, #184]	@ (8018bc8 <icmp_input+0x1f8>)
 8018b0e:	22c7      	movs	r2, #199	@ 0xc7
 8018b10:	4930      	ldr	r1, [pc, #192]	@ (8018bd4 <icmp_input+0x204>)
 8018b12:	482f      	ldr	r0, [pc, #188]	@ (8018bd0 <icmp_input+0x200>)
 8018b14:	f001 fc8a 	bl	801a42c <iprintf>
          goto icmperr;
 8018b18:	e04b      	b.n	8018bb2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	685b      	ldr	r3, [r3, #4]
 8018b1e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8018b20:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018b22:	4619      	mov	r1, r3
 8018b24:	6878      	ldr	r0, [r7, #4]
 8018b26:	f7fd fee3 	bl	80168f0 <pbuf_add_header>
 8018b2a:	4603      	mov	r3, r0
 8018b2c:	2b00      	cmp	r3, #0
 8018b2e:	d12b      	bne.n	8018b88 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	685b      	ldr	r3, [r3, #4]
 8018b34:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8018b36:	69fb      	ldr	r3, [r7, #28]
 8018b38:	681a      	ldr	r2, [r3, #0]
 8018b3a:	68fb      	ldr	r3, [r7, #12]
 8018b3c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8018b3e:	4b20      	ldr	r3, [pc, #128]	@ (8018bc0 <icmp_input+0x1f0>)
 8018b40:	691a      	ldr	r2, [r3, #16]
 8018b42:	68fb      	ldr	r3, [r7, #12]
 8018b44:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8018b46:	693b      	ldr	r3, [r7, #16]
 8018b48:	2200      	movs	r2, #0
 8018b4a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8018b4c:	693b      	ldr	r3, [r7, #16]
 8018b4e:	2200      	movs	r2, #0
 8018b50:	709a      	strb	r2, [r3, #2]
 8018b52:	2200      	movs	r2, #0
 8018b54:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8018b56:	68fb      	ldr	r3, [r7, #12]
 8018b58:	22ff      	movs	r2, #255	@ 0xff
 8018b5a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8018b5c:	68fb      	ldr	r3, [r7, #12]
 8018b5e:	2200      	movs	r2, #0
 8018b60:	729a      	strb	r2, [r3, #10]
 8018b62:	2200      	movs	r2, #0
 8018b64:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8018b66:	683b      	ldr	r3, [r7, #0]
 8018b68:	9302      	str	r3, [sp, #8]
 8018b6a:	2301      	movs	r3, #1
 8018b6c:	9301      	str	r3, [sp, #4]
 8018b6e:	2300      	movs	r3, #0
 8018b70:	9300      	str	r3, [sp, #0]
 8018b72:	23ff      	movs	r3, #255	@ 0xff
 8018b74:	2200      	movs	r2, #0
 8018b76:	69f9      	ldr	r1, [r7, #28]
 8018b78:	6878      	ldr	r0, [r7, #4]
 8018b7a:	f000 fa6b 	bl	8019054 <ip4_output_if>
 8018b7e:	4603      	mov	r3, r0
 8018b80:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8018b82:	e001      	b.n	8018b88 <icmp_input+0x1b8>
      break;
 8018b84:	bf00      	nop
 8018b86:	e000      	b.n	8018b8a <icmp_input+0x1ba>
      break;
 8018b88:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8018b8a:	6878      	ldr	r0, [r7, #4]
 8018b8c:	f7fd ff46 	bl	8016a1c <pbuf_free>
  return;
 8018b90:	e013      	b.n	8018bba <icmp_input+0x1ea>
    goto lenerr;
 8018b92:	bf00      	nop
 8018b94:	e002      	b.n	8018b9c <icmp_input+0x1cc>
    goto lenerr;
 8018b96:	bf00      	nop
 8018b98:	e000      	b.n	8018b9c <icmp_input+0x1cc>
        goto lenerr;
 8018b9a:	bf00      	nop
lenerr:
  pbuf_free(p);
 8018b9c:	6878      	ldr	r0, [r7, #4]
 8018b9e:	f7fd ff3d 	bl	8016a1c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8018ba2:	e00a      	b.n	8018bba <icmp_input+0x1ea>
        goto icmperr;
 8018ba4:	bf00      	nop
 8018ba6:	e004      	b.n	8018bb2 <icmp_input+0x1e2>
        goto icmperr;
 8018ba8:	bf00      	nop
 8018baa:	e002      	b.n	8018bb2 <icmp_input+0x1e2>
          goto icmperr;
 8018bac:	bf00      	nop
 8018bae:	e000      	b.n	8018bb2 <icmp_input+0x1e2>
          goto icmperr;
 8018bb0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8018bb2:	6878      	ldr	r0, [r7, #4]
 8018bb4:	f7fd ff32 	bl	8016a1c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8018bb8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8018bba:	3728      	adds	r7, #40	@ 0x28
 8018bbc:	46bd      	mov	sp, r7
 8018bbe:	bd80      	pop	{r7, pc}
 8018bc0:	2001329c 	.word	0x2001329c
 8018bc4:	200132b0 	.word	0x200132b0
 8018bc8:	0801c228 	.word	0x0801c228
 8018bcc:	0801c260 	.word	0x0801c260
 8018bd0:	0801c298 	.word	0x0801c298
 8018bd4:	0801c2c0 	.word	0x0801c2c0

08018bd8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8018bd8:	b580      	push	{r7, lr}
 8018bda:	b082      	sub	sp, #8
 8018bdc:	af00      	add	r7, sp, #0
 8018bde:	6078      	str	r0, [r7, #4]
 8018be0:	460b      	mov	r3, r1
 8018be2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8018be4:	78fb      	ldrb	r3, [r7, #3]
 8018be6:	461a      	mov	r2, r3
 8018be8:	2103      	movs	r1, #3
 8018bea:	6878      	ldr	r0, [r7, #4]
 8018bec:	f000 f814 	bl	8018c18 <icmp_send_response>
}
 8018bf0:	bf00      	nop
 8018bf2:	3708      	adds	r7, #8
 8018bf4:	46bd      	mov	sp, r7
 8018bf6:	bd80      	pop	{r7, pc}

08018bf8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8018bf8:	b580      	push	{r7, lr}
 8018bfa:	b082      	sub	sp, #8
 8018bfc:	af00      	add	r7, sp, #0
 8018bfe:	6078      	str	r0, [r7, #4]
 8018c00:	460b      	mov	r3, r1
 8018c02:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8018c04:	78fb      	ldrb	r3, [r7, #3]
 8018c06:	461a      	mov	r2, r3
 8018c08:	210b      	movs	r1, #11
 8018c0a:	6878      	ldr	r0, [r7, #4]
 8018c0c:	f000 f804 	bl	8018c18 <icmp_send_response>
}
 8018c10:	bf00      	nop
 8018c12:	3708      	adds	r7, #8
 8018c14:	46bd      	mov	sp, r7
 8018c16:	bd80      	pop	{r7, pc}

08018c18 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8018c18:	b580      	push	{r7, lr}
 8018c1a:	b08c      	sub	sp, #48	@ 0x30
 8018c1c:	af04      	add	r7, sp, #16
 8018c1e:	6078      	str	r0, [r7, #4]
 8018c20:	460b      	mov	r3, r1
 8018c22:	70fb      	strb	r3, [r7, #3]
 8018c24:	4613      	mov	r3, r2
 8018c26:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8018c28:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018c2c:	2124      	movs	r1, #36	@ 0x24
 8018c2e:	2022      	movs	r0, #34	@ 0x22
 8018c30:	f7fd fc12 	bl	8016458 <pbuf_alloc>
 8018c34:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8018c36:	69fb      	ldr	r3, [r7, #28]
 8018c38:	2b00      	cmp	r3, #0
 8018c3a:	d04c      	beq.n	8018cd6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8018c3c:	69fb      	ldr	r3, [r7, #28]
 8018c3e:	895b      	ldrh	r3, [r3, #10]
 8018c40:	2b23      	cmp	r3, #35	@ 0x23
 8018c42:	d806      	bhi.n	8018c52 <icmp_send_response+0x3a>
 8018c44:	4b26      	ldr	r3, [pc, #152]	@ (8018ce0 <icmp_send_response+0xc8>)
 8018c46:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8018c4a:	4926      	ldr	r1, [pc, #152]	@ (8018ce4 <icmp_send_response+0xcc>)
 8018c4c:	4826      	ldr	r0, [pc, #152]	@ (8018ce8 <icmp_send_response+0xd0>)
 8018c4e:	f001 fbed 	bl	801a42c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	685b      	ldr	r3, [r3, #4]
 8018c56:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8018c58:	69fb      	ldr	r3, [r7, #28]
 8018c5a:	685b      	ldr	r3, [r3, #4]
 8018c5c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8018c5e:	697b      	ldr	r3, [r7, #20]
 8018c60:	78fa      	ldrb	r2, [r7, #3]
 8018c62:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8018c64:	697b      	ldr	r3, [r7, #20]
 8018c66:	78ba      	ldrb	r2, [r7, #2]
 8018c68:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8018c6a:	697b      	ldr	r3, [r7, #20]
 8018c6c:	2200      	movs	r2, #0
 8018c6e:	711a      	strb	r2, [r3, #4]
 8018c70:	2200      	movs	r2, #0
 8018c72:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8018c74:	697b      	ldr	r3, [r7, #20]
 8018c76:	2200      	movs	r2, #0
 8018c78:	719a      	strb	r2, [r3, #6]
 8018c7a:	2200      	movs	r2, #0
 8018c7c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8018c7e:	69fb      	ldr	r3, [r7, #28]
 8018c80:	685b      	ldr	r3, [r3, #4]
 8018c82:	f103 0008 	add.w	r0, r3, #8
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	685b      	ldr	r3, [r3, #4]
 8018c8a:	221c      	movs	r2, #28
 8018c8c:	4619      	mov	r1, r3
 8018c8e:	f001 fcb8 	bl	801a602 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8018c92:	69bb      	ldr	r3, [r7, #24]
 8018c94:	68db      	ldr	r3, [r3, #12]
 8018c96:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8018c98:	f107 030c 	add.w	r3, r7, #12
 8018c9c:	4618      	mov	r0, r3
 8018c9e:	f000 f825 	bl	8018cec <ip4_route>
 8018ca2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8018ca4:	693b      	ldr	r3, [r7, #16]
 8018ca6:	2b00      	cmp	r3, #0
 8018ca8:	d011      	beq.n	8018cce <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8018caa:	697b      	ldr	r3, [r7, #20]
 8018cac:	2200      	movs	r2, #0
 8018cae:	709a      	strb	r2, [r3, #2]
 8018cb0:	2200      	movs	r2, #0
 8018cb2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8018cb4:	f107 020c 	add.w	r2, r7, #12
 8018cb8:	693b      	ldr	r3, [r7, #16]
 8018cba:	9302      	str	r3, [sp, #8]
 8018cbc:	2301      	movs	r3, #1
 8018cbe:	9301      	str	r3, [sp, #4]
 8018cc0:	2300      	movs	r3, #0
 8018cc2:	9300      	str	r3, [sp, #0]
 8018cc4:	23ff      	movs	r3, #255	@ 0xff
 8018cc6:	2100      	movs	r1, #0
 8018cc8:	69f8      	ldr	r0, [r7, #28]
 8018cca:	f000 f9c3 	bl	8019054 <ip4_output_if>
  }
  pbuf_free(q);
 8018cce:	69f8      	ldr	r0, [r7, #28]
 8018cd0:	f7fd fea4 	bl	8016a1c <pbuf_free>
 8018cd4:	e000      	b.n	8018cd8 <icmp_send_response+0xc0>
    return;
 8018cd6:	bf00      	nop
}
 8018cd8:	3720      	adds	r7, #32
 8018cda:	46bd      	mov	sp, r7
 8018cdc:	bd80      	pop	{r7, pc}
 8018cde:	bf00      	nop
 8018ce0:	0801c228 	.word	0x0801c228
 8018ce4:	0801c2f4 	.word	0x0801c2f4
 8018ce8:	0801c298 	.word	0x0801c298

08018cec <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8018cec:	b480      	push	{r7}
 8018cee:	b085      	sub	sp, #20
 8018cf0:	af00      	add	r7, sp, #0
 8018cf2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8018cf4:	4b33      	ldr	r3, [pc, #204]	@ (8018dc4 <ip4_route+0xd8>)
 8018cf6:	681b      	ldr	r3, [r3, #0]
 8018cf8:	60fb      	str	r3, [r7, #12]
 8018cfa:	e036      	b.n	8018d6a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018cfc:	68fb      	ldr	r3, [r7, #12]
 8018cfe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8018d02:	f003 0301 	and.w	r3, r3, #1
 8018d06:	b2db      	uxtb	r3, r3
 8018d08:	2b00      	cmp	r3, #0
 8018d0a:	d02b      	beq.n	8018d64 <ip4_route+0x78>
 8018d0c:	68fb      	ldr	r3, [r7, #12]
 8018d0e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8018d12:	089b      	lsrs	r3, r3, #2
 8018d14:	f003 0301 	and.w	r3, r3, #1
 8018d18:	b2db      	uxtb	r3, r3
 8018d1a:	2b00      	cmp	r3, #0
 8018d1c:	d022      	beq.n	8018d64 <ip4_route+0x78>
 8018d1e:	68fb      	ldr	r3, [r7, #12]
 8018d20:	3304      	adds	r3, #4
 8018d22:	681b      	ldr	r3, [r3, #0]
 8018d24:	2b00      	cmp	r3, #0
 8018d26:	d01d      	beq.n	8018d64 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	681a      	ldr	r2, [r3, #0]
 8018d2c:	68fb      	ldr	r3, [r7, #12]
 8018d2e:	3304      	adds	r3, #4
 8018d30:	681b      	ldr	r3, [r3, #0]
 8018d32:	405a      	eors	r2, r3
 8018d34:	68fb      	ldr	r3, [r7, #12]
 8018d36:	3308      	adds	r3, #8
 8018d38:	681b      	ldr	r3, [r3, #0]
 8018d3a:	4013      	ands	r3, r2
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	d101      	bne.n	8018d44 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8018d40:	68fb      	ldr	r3, [r7, #12]
 8018d42:	e038      	b.n	8018db6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8018d44:	68fb      	ldr	r3, [r7, #12]
 8018d46:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8018d4a:	f003 0302 	and.w	r3, r3, #2
 8018d4e:	2b00      	cmp	r3, #0
 8018d50:	d108      	bne.n	8018d64 <ip4_route+0x78>
 8018d52:	687b      	ldr	r3, [r7, #4]
 8018d54:	681a      	ldr	r2, [r3, #0]
 8018d56:	68fb      	ldr	r3, [r7, #12]
 8018d58:	330c      	adds	r3, #12
 8018d5a:	681b      	ldr	r3, [r3, #0]
 8018d5c:	429a      	cmp	r2, r3
 8018d5e:	d101      	bne.n	8018d64 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8018d60:	68fb      	ldr	r3, [r7, #12]
 8018d62:	e028      	b.n	8018db6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8018d64:	68fb      	ldr	r3, [r7, #12]
 8018d66:	681b      	ldr	r3, [r3, #0]
 8018d68:	60fb      	str	r3, [r7, #12]
 8018d6a:	68fb      	ldr	r3, [r7, #12]
 8018d6c:	2b00      	cmp	r3, #0
 8018d6e:	d1c5      	bne.n	8018cfc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018d70:	4b15      	ldr	r3, [pc, #84]	@ (8018dc8 <ip4_route+0xdc>)
 8018d72:	681b      	ldr	r3, [r3, #0]
 8018d74:	2b00      	cmp	r3, #0
 8018d76:	d01a      	beq.n	8018dae <ip4_route+0xc2>
 8018d78:	4b13      	ldr	r3, [pc, #76]	@ (8018dc8 <ip4_route+0xdc>)
 8018d7a:	681b      	ldr	r3, [r3, #0]
 8018d7c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8018d80:	f003 0301 	and.w	r3, r3, #1
 8018d84:	2b00      	cmp	r3, #0
 8018d86:	d012      	beq.n	8018dae <ip4_route+0xc2>
 8018d88:	4b0f      	ldr	r3, [pc, #60]	@ (8018dc8 <ip4_route+0xdc>)
 8018d8a:	681b      	ldr	r3, [r3, #0]
 8018d8c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8018d90:	f003 0304 	and.w	r3, r3, #4
 8018d94:	2b00      	cmp	r3, #0
 8018d96:	d00a      	beq.n	8018dae <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8018d98:	4b0b      	ldr	r3, [pc, #44]	@ (8018dc8 <ip4_route+0xdc>)
 8018d9a:	681b      	ldr	r3, [r3, #0]
 8018d9c:	3304      	adds	r3, #4
 8018d9e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018da0:	2b00      	cmp	r3, #0
 8018da2:	d004      	beq.n	8018dae <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8018da4:	687b      	ldr	r3, [r7, #4]
 8018da6:	681b      	ldr	r3, [r3, #0]
 8018da8:	b2db      	uxtb	r3, r3
 8018daa:	2b7f      	cmp	r3, #127	@ 0x7f
 8018dac:	d101      	bne.n	8018db2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8018dae:	2300      	movs	r3, #0
 8018db0:	e001      	b.n	8018db6 <ip4_route+0xca>
  }

  return netif_default;
 8018db2:	4b05      	ldr	r3, [pc, #20]	@ (8018dc8 <ip4_route+0xdc>)
 8018db4:	681b      	ldr	r3, [r3, #0]
}
 8018db6:	4618      	mov	r0, r3
 8018db8:	3714      	adds	r7, #20
 8018dba:	46bd      	mov	sp, r7
 8018dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dc0:	4770      	bx	lr
 8018dc2:	bf00      	nop
 8018dc4:	200162ac 	.word	0x200162ac
 8018dc8:	200162b0 	.word	0x200162b0

08018dcc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8018dcc:	b580      	push	{r7, lr}
 8018dce:	b082      	sub	sp, #8
 8018dd0:	af00      	add	r7, sp, #0
 8018dd2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8018dda:	f003 0301 	and.w	r3, r3, #1
 8018dde:	b2db      	uxtb	r3, r3
 8018de0:	2b00      	cmp	r3, #0
 8018de2:	d016      	beq.n	8018e12 <ip4_input_accept+0x46>
 8018de4:	687b      	ldr	r3, [r7, #4]
 8018de6:	3304      	adds	r3, #4
 8018de8:	681b      	ldr	r3, [r3, #0]
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	d011      	beq.n	8018e12 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8018dee:	4b0b      	ldr	r3, [pc, #44]	@ (8018e1c <ip4_input_accept+0x50>)
 8018df0:	695a      	ldr	r2, [r3, #20]
 8018df2:	687b      	ldr	r3, [r7, #4]
 8018df4:	3304      	adds	r3, #4
 8018df6:	681b      	ldr	r3, [r3, #0]
 8018df8:	429a      	cmp	r2, r3
 8018dfa:	d008      	beq.n	8018e0e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8018dfc:	4b07      	ldr	r3, [pc, #28]	@ (8018e1c <ip4_input_accept+0x50>)
 8018dfe:	695b      	ldr	r3, [r3, #20]
 8018e00:	6879      	ldr	r1, [r7, #4]
 8018e02:	4618      	mov	r0, r3
 8018e04:	f000 f9fe 	bl	8019204 <ip4_addr_isbroadcast_u32>
 8018e08:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8018e0a:	2b00      	cmp	r3, #0
 8018e0c:	d001      	beq.n	8018e12 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8018e0e:	2301      	movs	r3, #1
 8018e10:	e000      	b.n	8018e14 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8018e12:	2300      	movs	r3, #0
}
 8018e14:	4618      	mov	r0, r3
 8018e16:	3708      	adds	r7, #8
 8018e18:	46bd      	mov	sp, r7
 8018e1a:	bd80      	pop	{r7, pc}
 8018e1c:	2001329c 	.word	0x2001329c

08018e20 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8018e20:	b580      	push	{r7, lr}
 8018e22:	b086      	sub	sp, #24
 8018e24:	af00      	add	r7, sp, #0
 8018e26:	6078      	str	r0, [r7, #4]
 8018e28:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	685b      	ldr	r3, [r3, #4]
 8018e2e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8018e30:	697b      	ldr	r3, [r7, #20]
 8018e32:	781b      	ldrb	r3, [r3, #0]
 8018e34:	091b      	lsrs	r3, r3, #4
 8018e36:	b2db      	uxtb	r3, r3
 8018e38:	2b04      	cmp	r3, #4
 8018e3a:	d004      	beq.n	8018e46 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8018e3c:	6878      	ldr	r0, [r7, #4]
 8018e3e:	f7fd fded 	bl	8016a1c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8018e42:	2300      	movs	r3, #0
 8018e44:	e0fd      	b.n	8019042 <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8018e46:	697b      	ldr	r3, [r7, #20]
 8018e48:	781b      	ldrb	r3, [r3, #0]
 8018e4a:	f003 030f 	and.w	r3, r3, #15
 8018e4e:	b2db      	uxtb	r3, r3
 8018e50:	009b      	lsls	r3, r3, #2
 8018e52:	b2db      	uxtb	r3, r3
 8018e54:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8018e56:	697b      	ldr	r3, [r7, #20]
 8018e58:	885b      	ldrh	r3, [r3, #2]
 8018e5a:	b29b      	uxth	r3, r3
 8018e5c:	4618      	mov	r0, r3
 8018e5e:	f7fc fb75 	bl	801554c <lwip_htons>
 8018e62:	4603      	mov	r3, r0
 8018e64:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8018e66:	687b      	ldr	r3, [r7, #4]
 8018e68:	891b      	ldrh	r3, [r3, #8]
 8018e6a:	89ba      	ldrh	r2, [r7, #12]
 8018e6c:	429a      	cmp	r2, r3
 8018e6e:	d204      	bcs.n	8018e7a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8018e70:	89bb      	ldrh	r3, [r7, #12]
 8018e72:	4619      	mov	r1, r3
 8018e74:	6878      	ldr	r0, [r7, #4]
 8018e76:	f7fd fc4b 	bl	8016710 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	895b      	ldrh	r3, [r3, #10]
 8018e7e:	89fa      	ldrh	r2, [r7, #14]
 8018e80:	429a      	cmp	r2, r3
 8018e82:	d807      	bhi.n	8018e94 <ip4_input+0x74>
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	891b      	ldrh	r3, [r3, #8]
 8018e88:	89ba      	ldrh	r2, [r7, #12]
 8018e8a:	429a      	cmp	r2, r3
 8018e8c:	d802      	bhi.n	8018e94 <ip4_input+0x74>
 8018e8e:	89fb      	ldrh	r3, [r7, #14]
 8018e90:	2b13      	cmp	r3, #19
 8018e92:	d804      	bhi.n	8018e9e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8018e94:	6878      	ldr	r0, [r7, #4]
 8018e96:	f7fd fdc1 	bl	8016a1c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8018e9a:	2300      	movs	r3, #0
 8018e9c:	e0d1      	b.n	8019042 <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8018e9e:	697b      	ldr	r3, [r7, #20]
 8018ea0:	691b      	ldr	r3, [r3, #16]
 8018ea2:	4a6a      	ldr	r2, [pc, #424]	@ (801904c <ip4_input+0x22c>)
 8018ea4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8018ea6:	697b      	ldr	r3, [r7, #20]
 8018ea8:	68db      	ldr	r3, [r3, #12]
 8018eaa:	4a68      	ldr	r2, [pc, #416]	@ (801904c <ip4_input+0x22c>)
 8018eac:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018eae:	4b67      	ldr	r3, [pc, #412]	@ (801904c <ip4_input+0x22c>)
 8018eb0:	695b      	ldr	r3, [r3, #20]
 8018eb2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8018eb6:	2be0      	cmp	r3, #224	@ 0xe0
 8018eb8:	d112      	bne.n	8018ee0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8018eba:	683b      	ldr	r3, [r7, #0]
 8018ebc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8018ec0:	f003 0301 	and.w	r3, r3, #1
 8018ec4:	b2db      	uxtb	r3, r3
 8018ec6:	2b00      	cmp	r3, #0
 8018ec8:	d007      	beq.n	8018eda <ip4_input+0xba>
 8018eca:	683b      	ldr	r3, [r7, #0]
 8018ecc:	3304      	adds	r3, #4
 8018ece:	681b      	ldr	r3, [r3, #0]
 8018ed0:	2b00      	cmp	r3, #0
 8018ed2:	d002      	beq.n	8018eda <ip4_input+0xba>
      netif = inp;
 8018ed4:	683b      	ldr	r3, [r7, #0]
 8018ed6:	613b      	str	r3, [r7, #16]
 8018ed8:	e02a      	b.n	8018f30 <ip4_input+0x110>
    } else {
      netif = NULL;
 8018eda:	2300      	movs	r3, #0
 8018edc:	613b      	str	r3, [r7, #16]
 8018ede:	e027      	b.n	8018f30 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8018ee0:	6838      	ldr	r0, [r7, #0]
 8018ee2:	f7ff ff73 	bl	8018dcc <ip4_input_accept>
 8018ee6:	4603      	mov	r3, r0
 8018ee8:	2b00      	cmp	r3, #0
 8018eea:	d002      	beq.n	8018ef2 <ip4_input+0xd2>
      netif = inp;
 8018eec:	683b      	ldr	r3, [r7, #0]
 8018eee:	613b      	str	r3, [r7, #16]
 8018ef0:	e01e      	b.n	8018f30 <ip4_input+0x110>
    } else {
      netif = NULL;
 8018ef2:	2300      	movs	r3, #0
 8018ef4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8018ef6:	4b55      	ldr	r3, [pc, #340]	@ (801904c <ip4_input+0x22c>)
 8018ef8:	695b      	ldr	r3, [r3, #20]
 8018efa:	b2db      	uxtb	r3, r3
 8018efc:	2b7f      	cmp	r3, #127	@ 0x7f
 8018efe:	d017      	beq.n	8018f30 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8018f00:	4b53      	ldr	r3, [pc, #332]	@ (8019050 <ip4_input+0x230>)
 8018f02:	681b      	ldr	r3, [r3, #0]
 8018f04:	613b      	str	r3, [r7, #16]
 8018f06:	e00e      	b.n	8018f26 <ip4_input+0x106>
          if (netif == inp) {
 8018f08:	693a      	ldr	r2, [r7, #16]
 8018f0a:	683b      	ldr	r3, [r7, #0]
 8018f0c:	429a      	cmp	r2, r3
 8018f0e:	d006      	beq.n	8018f1e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8018f10:	6938      	ldr	r0, [r7, #16]
 8018f12:	f7ff ff5b 	bl	8018dcc <ip4_input_accept>
 8018f16:	4603      	mov	r3, r0
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	d108      	bne.n	8018f2e <ip4_input+0x10e>
 8018f1c:	e000      	b.n	8018f20 <ip4_input+0x100>
            continue;
 8018f1e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8018f20:	693b      	ldr	r3, [r7, #16]
 8018f22:	681b      	ldr	r3, [r3, #0]
 8018f24:	613b      	str	r3, [r7, #16]
 8018f26:	693b      	ldr	r3, [r7, #16]
 8018f28:	2b00      	cmp	r3, #0
 8018f2a:	d1ed      	bne.n	8018f08 <ip4_input+0xe8>
 8018f2c:	e000      	b.n	8018f30 <ip4_input+0x110>
            break;
 8018f2e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018f30:	4b46      	ldr	r3, [pc, #280]	@ (801904c <ip4_input+0x22c>)
 8018f32:	691b      	ldr	r3, [r3, #16]
 8018f34:	6839      	ldr	r1, [r7, #0]
 8018f36:	4618      	mov	r0, r3
 8018f38:	f000 f964 	bl	8019204 <ip4_addr_isbroadcast_u32>
 8018f3c:	4603      	mov	r3, r0
 8018f3e:	2b00      	cmp	r3, #0
 8018f40:	d105      	bne.n	8018f4e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8018f42:	4b42      	ldr	r3, [pc, #264]	@ (801904c <ip4_input+0x22c>)
 8018f44:	691b      	ldr	r3, [r3, #16]
 8018f46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018f4a:	2be0      	cmp	r3, #224	@ 0xe0
 8018f4c:	d104      	bne.n	8018f58 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8018f4e:	6878      	ldr	r0, [r7, #4]
 8018f50:	f7fd fd64 	bl	8016a1c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8018f54:	2300      	movs	r3, #0
 8018f56:	e074      	b.n	8019042 <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8018f58:	693b      	ldr	r3, [r7, #16]
 8018f5a:	2b00      	cmp	r3, #0
 8018f5c:	d104      	bne.n	8018f68 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8018f5e:	6878      	ldr	r0, [r7, #4]
 8018f60:	f7fd fd5c 	bl	8016a1c <pbuf_free>
    return ERR_OK;
 8018f64:	2300      	movs	r3, #0
 8018f66:	e06c      	b.n	8019042 <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8018f68:	697b      	ldr	r3, [r7, #20]
 8018f6a:	88db      	ldrh	r3, [r3, #6]
 8018f6c:	b29b      	uxth	r3, r3
 8018f6e:	461a      	mov	r2, r3
 8018f70:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8018f74:	4013      	ands	r3, r2
 8018f76:	2b00      	cmp	r3, #0
 8018f78:	d00b      	beq.n	8018f92 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8018f7a:	6878      	ldr	r0, [r7, #4]
 8018f7c:	f000 fc88 	bl	8019890 <ip4_reass>
 8018f80:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8018f82:	687b      	ldr	r3, [r7, #4]
 8018f84:	2b00      	cmp	r3, #0
 8018f86:	d101      	bne.n	8018f8c <ip4_input+0x16c>
      return ERR_OK;
 8018f88:	2300      	movs	r3, #0
 8018f8a:	e05a      	b.n	8019042 <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8018f8c:	687b      	ldr	r3, [r7, #4]
 8018f8e:	685b      	ldr	r3, [r3, #4]
 8018f90:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8018f92:	4a2e      	ldr	r2, [pc, #184]	@ (801904c <ip4_input+0x22c>)
 8018f94:	693b      	ldr	r3, [r7, #16]
 8018f96:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8018f98:	4a2c      	ldr	r2, [pc, #176]	@ (801904c <ip4_input+0x22c>)
 8018f9a:	683b      	ldr	r3, [r7, #0]
 8018f9c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8018f9e:	4a2b      	ldr	r2, [pc, #172]	@ (801904c <ip4_input+0x22c>)
 8018fa0:	697b      	ldr	r3, [r7, #20]
 8018fa2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8018fa4:	697b      	ldr	r3, [r7, #20]
 8018fa6:	781b      	ldrb	r3, [r3, #0]
 8018fa8:	f003 030f 	and.w	r3, r3, #15
 8018fac:	b2db      	uxtb	r3, r3
 8018fae:	009b      	lsls	r3, r3, #2
 8018fb0:	b2db      	uxtb	r3, r3
 8018fb2:	461a      	mov	r2, r3
 8018fb4:	4b25      	ldr	r3, [pc, #148]	@ (801904c <ip4_input+0x22c>)
 8018fb6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8018fb8:	89fb      	ldrh	r3, [r7, #14]
 8018fba:	4619      	mov	r1, r3
 8018fbc:	6878      	ldr	r0, [r7, #4]
 8018fbe:	f7fd fca7 	bl	8016910 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8018fc2:	697b      	ldr	r3, [r7, #20]
 8018fc4:	7a5b      	ldrb	r3, [r3, #9]
 8018fc6:	2b01      	cmp	r3, #1
 8018fc8:	d006      	beq.n	8018fd8 <ip4_input+0x1b8>
 8018fca:	2b11      	cmp	r3, #17
 8018fcc:	d109      	bne.n	8018fe2 <ip4_input+0x1c2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8018fce:	6839      	ldr	r1, [r7, #0]
 8018fd0:	6878      	ldr	r0, [r7, #4]
 8018fd2:	f7fe f91f 	bl	8017214 <udp_input>
        break;
 8018fd6:	e021      	b.n	801901c <ip4_input+0x1fc>
        break;
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8018fd8:	6839      	ldr	r1, [r7, #0]
 8018fda:	6878      	ldr	r0, [r7, #4]
 8018fdc:	f7ff fcf8 	bl	80189d0 <icmp_input>
        break;
 8018fe0:	e01c      	b.n	801901c <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018fe2:	4b1a      	ldr	r3, [pc, #104]	@ (801904c <ip4_input+0x22c>)
 8018fe4:	695b      	ldr	r3, [r3, #20]
 8018fe6:	6939      	ldr	r1, [r7, #16]
 8018fe8:	4618      	mov	r0, r3
 8018fea:	f000 f90b 	bl	8019204 <ip4_addr_isbroadcast_u32>
 8018fee:	4603      	mov	r3, r0
 8018ff0:	2b00      	cmp	r3, #0
 8018ff2:	d10f      	bne.n	8019014 <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018ff4:	4b15      	ldr	r3, [pc, #84]	@ (801904c <ip4_input+0x22c>)
 8018ff6:	695b      	ldr	r3, [r3, #20]
 8018ff8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018ffc:	2be0      	cmp	r3, #224	@ 0xe0
 8018ffe:	d009      	beq.n	8019014 <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8019000:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8019004:	4619      	mov	r1, r3
 8019006:	6878      	ldr	r0, [r7, #4]
 8019008:	f7fd fcf5 	bl	80169f6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801900c:	2102      	movs	r1, #2
 801900e:	6878      	ldr	r0, [r7, #4]
 8019010:	f7ff fde2 	bl	8018bd8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8019014:	6878      	ldr	r0, [r7, #4]
 8019016:	f7fd fd01 	bl	8016a1c <pbuf_free>
        break;
 801901a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801901c:	4b0b      	ldr	r3, [pc, #44]	@ (801904c <ip4_input+0x22c>)
 801901e:	2200      	movs	r2, #0
 8019020:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8019022:	4b0a      	ldr	r3, [pc, #40]	@ (801904c <ip4_input+0x22c>)
 8019024:	2200      	movs	r2, #0
 8019026:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8019028:	4b08      	ldr	r3, [pc, #32]	@ (801904c <ip4_input+0x22c>)
 801902a:	2200      	movs	r2, #0
 801902c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801902e:	4b07      	ldr	r3, [pc, #28]	@ (801904c <ip4_input+0x22c>)
 8019030:	2200      	movs	r2, #0
 8019032:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8019034:	4b05      	ldr	r3, [pc, #20]	@ (801904c <ip4_input+0x22c>)
 8019036:	2200      	movs	r2, #0
 8019038:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801903a:	4b04      	ldr	r3, [pc, #16]	@ (801904c <ip4_input+0x22c>)
 801903c:	2200      	movs	r2, #0
 801903e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8019040:	2300      	movs	r3, #0
}
 8019042:	4618      	mov	r0, r3
 8019044:	3718      	adds	r7, #24
 8019046:	46bd      	mov	sp, r7
 8019048:	bd80      	pop	{r7, pc}
 801904a:	bf00      	nop
 801904c:	2001329c 	.word	0x2001329c
 8019050:	200162ac 	.word	0x200162ac

08019054 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8019054:	b580      	push	{r7, lr}
 8019056:	b08a      	sub	sp, #40	@ 0x28
 8019058:	af04      	add	r7, sp, #16
 801905a:	60f8      	str	r0, [r7, #12]
 801905c:	60b9      	str	r1, [r7, #8]
 801905e:	607a      	str	r2, [r7, #4]
 8019060:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8019062:	68bb      	ldr	r3, [r7, #8]
 8019064:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	2b00      	cmp	r3, #0
 801906a:	d009      	beq.n	8019080 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801906c:	68bb      	ldr	r3, [r7, #8]
 801906e:	2b00      	cmp	r3, #0
 8019070:	d003      	beq.n	801907a <ip4_output_if+0x26>
 8019072:	68bb      	ldr	r3, [r7, #8]
 8019074:	681b      	ldr	r3, [r3, #0]
 8019076:	2b00      	cmp	r3, #0
 8019078:	d102      	bne.n	8019080 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801907a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801907c:	3304      	adds	r3, #4
 801907e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8019080:	78fa      	ldrb	r2, [r7, #3]
 8019082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019084:	9302      	str	r3, [sp, #8]
 8019086:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801908a:	9301      	str	r3, [sp, #4]
 801908c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019090:	9300      	str	r3, [sp, #0]
 8019092:	4613      	mov	r3, r2
 8019094:	687a      	ldr	r2, [r7, #4]
 8019096:	6979      	ldr	r1, [r7, #20]
 8019098:	68f8      	ldr	r0, [r7, #12]
 801909a:	f000 f805 	bl	80190a8 <ip4_output_if_src>
 801909e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80190a0:	4618      	mov	r0, r3
 80190a2:	3718      	adds	r7, #24
 80190a4:	46bd      	mov	sp, r7
 80190a6:	bd80      	pop	{r7, pc}

080190a8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80190a8:	b580      	push	{r7, lr}
 80190aa:	b088      	sub	sp, #32
 80190ac:	af00      	add	r7, sp, #0
 80190ae:	60f8      	str	r0, [r7, #12]
 80190b0:	60b9      	str	r1, [r7, #8]
 80190b2:	607a      	str	r2, [r7, #4]
 80190b4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80190b6:	68fb      	ldr	r3, [r7, #12]
 80190b8:	7b9b      	ldrb	r3, [r3, #14]
 80190ba:	2b01      	cmp	r3, #1
 80190bc:	d006      	beq.n	80190cc <ip4_output_if_src+0x24>
 80190be:	4b4b      	ldr	r3, [pc, #300]	@ (80191ec <ip4_output_if_src+0x144>)
 80190c0:	f44f 7255 	mov.w	r2, #852	@ 0x354
 80190c4:	494a      	ldr	r1, [pc, #296]	@ (80191f0 <ip4_output_if_src+0x148>)
 80190c6:	484b      	ldr	r0, [pc, #300]	@ (80191f4 <ip4_output_if_src+0x14c>)
 80190c8:	f001 f9b0 	bl	801a42c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80190cc:	687b      	ldr	r3, [r7, #4]
 80190ce:	2b00      	cmp	r3, #0
 80190d0:	d060      	beq.n	8019194 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80190d2:	2314      	movs	r3, #20
 80190d4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80190d6:	2114      	movs	r1, #20
 80190d8:	68f8      	ldr	r0, [r7, #12]
 80190da:	f7fd fc09 	bl	80168f0 <pbuf_add_header>
 80190de:	4603      	mov	r3, r0
 80190e0:	2b00      	cmp	r3, #0
 80190e2:	d002      	beq.n	80190ea <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80190e4:	f06f 0301 	mvn.w	r3, #1
 80190e8:	e07c      	b.n	80191e4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80190ea:	68fb      	ldr	r3, [r7, #12]
 80190ec:	685b      	ldr	r3, [r3, #4]
 80190ee:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80190f0:	68fb      	ldr	r3, [r7, #12]
 80190f2:	895b      	ldrh	r3, [r3, #10]
 80190f4:	2b13      	cmp	r3, #19
 80190f6:	d806      	bhi.n	8019106 <ip4_output_if_src+0x5e>
 80190f8:	4b3c      	ldr	r3, [pc, #240]	@ (80191ec <ip4_output_if_src+0x144>)
 80190fa:	f44f 7262 	mov.w	r2, #904	@ 0x388
 80190fe:	493e      	ldr	r1, [pc, #248]	@ (80191f8 <ip4_output_if_src+0x150>)
 8019100:	483c      	ldr	r0, [pc, #240]	@ (80191f4 <ip4_output_if_src+0x14c>)
 8019102:	f001 f993 	bl	801a42c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8019106:	69fb      	ldr	r3, [r7, #28]
 8019108:	78fa      	ldrb	r2, [r7, #3]
 801910a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801910c:	69fb      	ldr	r3, [r7, #28]
 801910e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8019112:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8019114:	687b      	ldr	r3, [r7, #4]
 8019116:	681a      	ldr	r2, [r3, #0]
 8019118:	69fb      	ldr	r3, [r7, #28]
 801911a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801911c:	8b7b      	ldrh	r3, [r7, #26]
 801911e:	089b      	lsrs	r3, r3, #2
 8019120:	b29b      	uxth	r3, r3
 8019122:	b2db      	uxtb	r3, r3
 8019124:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019128:	b2da      	uxtb	r2, r3
 801912a:	69fb      	ldr	r3, [r7, #28]
 801912c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801912e:	69fb      	ldr	r3, [r7, #28]
 8019130:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8019134:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8019136:	68fb      	ldr	r3, [r7, #12]
 8019138:	891b      	ldrh	r3, [r3, #8]
 801913a:	4618      	mov	r0, r3
 801913c:	f7fc fa06 	bl	801554c <lwip_htons>
 8019140:	4603      	mov	r3, r0
 8019142:	461a      	mov	r2, r3
 8019144:	69fb      	ldr	r3, [r7, #28]
 8019146:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8019148:	69fb      	ldr	r3, [r7, #28]
 801914a:	2200      	movs	r2, #0
 801914c:	719a      	strb	r2, [r3, #6]
 801914e:	2200      	movs	r2, #0
 8019150:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8019152:	4b2a      	ldr	r3, [pc, #168]	@ (80191fc <ip4_output_if_src+0x154>)
 8019154:	881b      	ldrh	r3, [r3, #0]
 8019156:	4618      	mov	r0, r3
 8019158:	f7fc f9f8 	bl	801554c <lwip_htons>
 801915c:	4603      	mov	r3, r0
 801915e:	461a      	mov	r2, r3
 8019160:	69fb      	ldr	r3, [r7, #28]
 8019162:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8019164:	4b25      	ldr	r3, [pc, #148]	@ (80191fc <ip4_output_if_src+0x154>)
 8019166:	881b      	ldrh	r3, [r3, #0]
 8019168:	3301      	adds	r3, #1
 801916a:	b29a      	uxth	r2, r3
 801916c:	4b23      	ldr	r3, [pc, #140]	@ (80191fc <ip4_output_if_src+0x154>)
 801916e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8019170:	68bb      	ldr	r3, [r7, #8]
 8019172:	2b00      	cmp	r3, #0
 8019174:	d104      	bne.n	8019180 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8019176:	4b22      	ldr	r3, [pc, #136]	@ (8019200 <ip4_output_if_src+0x158>)
 8019178:	681a      	ldr	r2, [r3, #0]
 801917a:	69fb      	ldr	r3, [r7, #28]
 801917c:	60da      	str	r2, [r3, #12]
 801917e:	e003      	b.n	8019188 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8019180:	68bb      	ldr	r3, [r7, #8]
 8019182:	681a      	ldr	r2, [r3, #0]
 8019184:	69fb      	ldr	r3, [r7, #28]
 8019186:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8019188:	69fb      	ldr	r3, [r7, #28]
 801918a:	2200      	movs	r2, #0
 801918c:	729a      	strb	r2, [r3, #10]
 801918e:	2200      	movs	r2, #0
 8019190:	72da      	strb	r2, [r3, #11]
 8019192:	e00f      	b.n	80191b4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8019194:	68fb      	ldr	r3, [r7, #12]
 8019196:	895b      	ldrh	r3, [r3, #10]
 8019198:	2b13      	cmp	r3, #19
 801919a:	d802      	bhi.n	80191a2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801919c:	f06f 0301 	mvn.w	r3, #1
 80191a0:	e020      	b.n	80191e4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80191a2:	68fb      	ldr	r3, [r7, #12]
 80191a4:	685b      	ldr	r3, [r3, #4]
 80191a6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80191a8:	69fb      	ldr	r3, [r7, #28]
 80191aa:	691b      	ldr	r3, [r3, #16]
 80191ac:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80191ae:	f107 0314 	add.w	r3, r7, #20
 80191b2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80191b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80191b6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80191b8:	2b00      	cmp	r3, #0
 80191ba:	d00c      	beq.n	80191d6 <ip4_output_if_src+0x12e>
 80191bc:	68fb      	ldr	r3, [r7, #12]
 80191be:	891a      	ldrh	r2, [r3, #8]
 80191c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80191c2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80191c4:	429a      	cmp	r2, r3
 80191c6:	d906      	bls.n	80191d6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80191c8:	687a      	ldr	r2, [r7, #4]
 80191ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80191cc:	68f8      	ldr	r0, [r7, #12]
 80191ce:	f000 fd53 	bl	8019c78 <ip4_frag>
 80191d2:	4603      	mov	r3, r0
 80191d4:	e006      	b.n	80191e4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80191d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80191d8:	695b      	ldr	r3, [r3, #20]
 80191da:	687a      	ldr	r2, [r7, #4]
 80191dc:	68f9      	ldr	r1, [r7, #12]
 80191de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80191e0:	4798      	blx	r3
 80191e2:	4603      	mov	r3, r0
}
 80191e4:	4618      	mov	r0, r3
 80191e6:	3720      	adds	r7, #32
 80191e8:	46bd      	mov	sp, r7
 80191ea:	bd80      	pop	{r7, pc}
 80191ec:	0801c320 	.word	0x0801c320
 80191f0:	0801c354 	.word	0x0801c354
 80191f4:	0801c360 	.word	0x0801c360
 80191f8:	0801c388 	.word	0x0801c388
 80191fc:	200163b6 	.word	0x200163b6
 8019200:	0801c6f4 	.word	0x0801c6f4

08019204 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8019204:	b480      	push	{r7}
 8019206:	b085      	sub	sp, #20
 8019208:	af00      	add	r7, sp, #0
 801920a:	6078      	str	r0, [r7, #4]
 801920c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801920e:	687b      	ldr	r3, [r7, #4]
 8019210:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8019212:	687b      	ldr	r3, [r7, #4]
 8019214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019218:	d002      	beq.n	8019220 <ip4_addr_isbroadcast_u32+0x1c>
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	2b00      	cmp	r3, #0
 801921e:	d101      	bne.n	8019224 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8019220:	2301      	movs	r3, #1
 8019222:	e02a      	b.n	801927a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8019224:	683b      	ldr	r3, [r7, #0]
 8019226:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801922a:	f003 0302 	and.w	r3, r3, #2
 801922e:	2b00      	cmp	r3, #0
 8019230:	d101      	bne.n	8019236 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8019232:	2300      	movs	r3, #0
 8019234:	e021      	b.n	801927a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8019236:	683b      	ldr	r3, [r7, #0]
 8019238:	3304      	adds	r3, #4
 801923a:	681b      	ldr	r3, [r3, #0]
 801923c:	687a      	ldr	r2, [r7, #4]
 801923e:	429a      	cmp	r2, r3
 8019240:	d101      	bne.n	8019246 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8019242:	2300      	movs	r3, #0
 8019244:	e019      	b.n	801927a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8019246:	68fa      	ldr	r2, [r7, #12]
 8019248:	683b      	ldr	r3, [r7, #0]
 801924a:	3304      	adds	r3, #4
 801924c:	681b      	ldr	r3, [r3, #0]
 801924e:	405a      	eors	r2, r3
 8019250:	683b      	ldr	r3, [r7, #0]
 8019252:	3308      	adds	r3, #8
 8019254:	681b      	ldr	r3, [r3, #0]
 8019256:	4013      	ands	r3, r2
 8019258:	2b00      	cmp	r3, #0
 801925a:	d10d      	bne.n	8019278 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801925c:	683b      	ldr	r3, [r7, #0]
 801925e:	3308      	adds	r3, #8
 8019260:	681b      	ldr	r3, [r3, #0]
 8019262:	43da      	mvns	r2, r3
 8019264:	687b      	ldr	r3, [r7, #4]
 8019266:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8019268:	683b      	ldr	r3, [r7, #0]
 801926a:	3308      	adds	r3, #8
 801926c:	681b      	ldr	r3, [r3, #0]
 801926e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019270:	429a      	cmp	r2, r3
 8019272:	d101      	bne.n	8019278 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8019274:	2301      	movs	r3, #1
 8019276:	e000      	b.n	801927a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8019278:	2300      	movs	r3, #0
  }
}
 801927a:	4618      	mov	r0, r3
 801927c:	3714      	adds	r7, #20
 801927e:	46bd      	mov	sp, r7
 8019280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019284:	4770      	bx	lr
	...

08019288 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8019288:	b580      	push	{r7, lr}
 801928a:	b084      	sub	sp, #16
 801928c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801928e:	2300      	movs	r3, #0
 8019290:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8019292:	4b12      	ldr	r3, [pc, #72]	@ (80192dc <ip_reass_tmr+0x54>)
 8019294:	681b      	ldr	r3, [r3, #0]
 8019296:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8019298:	e018      	b.n	80192cc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801929a:	68fb      	ldr	r3, [r7, #12]
 801929c:	7fdb      	ldrb	r3, [r3, #31]
 801929e:	2b00      	cmp	r3, #0
 80192a0:	d00b      	beq.n	80192ba <ip_reass_tmr+0x32>
      r->timer--;
 80192a2:	68fb      	ldr	r3, [r7, #12]
 80192a4:	7fdb      	ldrb	r3, [r3, #31]
 80192a6:	3b01      	subs	r3, #1
 80192a8:	b2da      	uxtb	r2, r3
 80192aa:	68fb      	ldr	r3, [r7, #12]
 80192ac:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80192ae:	68fb      	ldr	r3, [r7, #12]
 80192b0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80192b2:	68fb      	ldr	r3, [r7, #12]
 80192b4:	681b      	ldr	r3, [r3, #0]
 80192b6:	60fb      	str	r3, [r7, #12]
 80192b8:	e008      	b.n	80192cc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80192ba:	68fb      	ldr	r3, [r7, #12]
 80192bc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80192be:	68fb      	ldr	r3, [r7, #12]
 80192c0:	681b      	ldr	r3, [r3, #0]
 80192c2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80192c4:	68b9      	ldr	r1, [r7, #8]
 80192c6:	6878      	ldr	r0, [r7, #4]
 80192c8:	f000 f80a 	bl	80192e0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80192cc:	68fb      	ldr	r3, [r7, #12]
 80192ce:	2b00      	cmp	r3, #0
 80192d0:	d1e3      	bne.n	801929a <ip_reass_tmr+0x12>
    }
  }
}
 80192d2:	bf00      	nop
 80192d4:	bf00      	nop
 80192d6:	3710      	adds	r7, #16
 80192d8:	46bd      	mov	sp, r7
 80192da:	bd80      	pop	{r7, pc}
 80192dc:	200163b8 	.word	0x200163b8

080192e0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80192e0:	b580      	push	{r7, lr}
 80192e2:	b088      	sub	sp, #32
 80192e4:	af00      	add	r7, sp, #0
 80192e6:	6078      	str	r0, [r7, #4]
 80192e8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80192ea:	2300      	movs	r3, #0
 80192ec:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80192ee:	683a      	ldr	r2, [r7, #0]
 80192f0:	687b      	ldr	r3, [r7, #4]
 80192f2:	429a      	cmp	r2, r3
 80192f4:	d105      	bne.n	8019302 <ip_reass_free_complete_datagram+0x22>
 80192f6:	4b45      	ldr	r3, [pc, #276]	@ (801940c <ip_reass_free_complete_datagram+0x12c>)
 80192f8:	22ab      	movs	r2, #171	@ 0xab
 80192fa:	4945      	ldr	r1, [pc, #276]	@ (8019410 <ip_reass_free_complete_datagram+0x130>)
 80192fc:	4845      	ldr	r0, [pc, #276]	@ (8019414 <ip_reass_free_complete_datagram+0x134>)
 80192fe:	f001 f895 	bl	801a42c <iprintf>
  if (prev != NULL) {
 8019302:	683b      	ldr	r3, [r7, #0]
 8019304:	2b00      	cmp	r3, #0
 8019306:	d00a      	beq.n	801931e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8019308:	683b      	ldr	r3, [r7, #0]
 801930a:	681b      	ldr	r3, [r3, #0]
 801930c:	687a      	ldr	r2, [r7, #4]
 801930e:	429a      	cmp	r2, r3
 8019310:	d005      	beq.n	801931e <ip_reass_free_complete_datagram+0x3e>
 8019312:	4b3e      	ldr	r3, [pc, #248]	@ (801940c <ip_reass_free_complete_datagram+0x12c>)
 8019314:	22ad      	movs	r2, #173	@ 0xad
 8019316:	4940      	ldr	r1, [pc, #256]	@ (8019418 <ip_reass_free_complete_datagram+0x138>)
 8019318:	483e      	ldr	r0, [pc, #248]	@ (8019414 <ip_reass_free_complete_datagram+0x134>)
 801931a:	f001 f887 	bl	801a42c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	685b      	ldr	r3, [r3, #4]
 8019322:	685b      	ldr	r3, [r3, #4]
 8019324:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8019326:	697b      	ldr	r3, [r7, #20]
 8019328:	889b      	ldrh	r3, [r3, #4]
 801932a:	b29b      	uxth	r3, r3
 801932c:	2b00      	cmp	r3, #0
 801932e:	d12a      	bne.n	8019386 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	685b      	ldr	r3, [r3, #4]
 8019334:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8019336:	697b      	ldr	r3, [r7, #20]
 8019338:	681a      	ldr	r2, [r3, #0]
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801933e:	69bb      	ldr	r3, [r7, #24]
 8019340:	6858      	ldr	r0, [r3, #4]
 8019342:	687b      	ldr	r3, [r7, #4]
 8019344:	3308      	adds	r3, #8
 8019346:	2214      	movs	r2, #20
 8019348:	4619      	mov	r1, r3
 801934a:	f001 f95a 	bl	801a602 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801934e:	2101      	movs	r1, #1
 8019350:	69b8      	ldr	r0, [r7, #24]
 8019352:	f7ff fc51 	bl	8018bf8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8019356:	69b8      	ldr	r0, [r7, #24]
 8019358:	f7fd fbe8 	bl	8016b2c <pbuf_clen>
 801935c:	4603      	mov	r3, r0
 801935e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019360:	8bfa      	ldrh	r2, [r7, #30]
 8019362:	8a7b      	ldrh	r3, [r7, #18]
 8019364:	4413      	add	r3, r2
 8019366:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801936a:	db05      	blt.n	8019378 <ip_reass_free_complete_datagram+0x98>
 801936c:	4b27      	ldr	r3, [pc, #156]	@ (801940c <ip_reass_free_complete_datagram+0x12c>)
 801936e:	22bc      	movs	r2, #188	@ 0xbc
 8019370:	492a      	ldr	r1, [pc, #168]	@ (801941c <ip_reass_free_complete_datagram+0x13c>)
 8019372:	4828      	ldr	r0, [pc, #160]	@ (8019414 <ip_reass_free_complete_datagram+0x134>)
 8019374:	f001 f85a 	bl	801a42c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019378:	8bfa      	ldrh	r2, [r7, #30]
 801937a:	8a7b      	ldrh	r3, [r7, #18]
 801937c:	4413      	add	r3, r2
 801937e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8019380:	69b8      	ldr	r0, [r7, #24]
 8019382:	f7fd fb4b 	bl	8016a1c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8019386:	687b      	ldr	r3, [r7, #4]
 8019388:	685b      	ldr	r3, [r3, #4]
 801938a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801938c:	e01f      	b.n	80193ce <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801938e:	69bb      	ldr	r3, [r7, #24]
 8019390:	685b      	ldr	r3, [r3, #4]
 8019392:	617b      	str	r3, [r7, #20]
    pcur = p;
 8019394:	69bb      	ldr	r3, [r7, #24]
 8019396:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8019398:	697b      	ldr	r3, [r7, #20]
 801939a:	681b      	ldr	r3, [r3, #0]
 801939c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801939e:	68f8      	ldr	r0, [r7, #12]
 80193a0:	f7fd fbc4 	bl	8016b2c <pbuf_clen>
 80193a4:	4603      	mov	r3, r0
 80193a6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80193a8:	8bfa      	ldrh	r2, [r7, #30]
 80193aa:	8a7b      	ldrh	r3, [r7, #18]
 80193ac:	4413      	add	r3, r2
 80193ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80193b2:	db05      	blt.n	80193c0 <ip_reass_free_complete_datagram+0xe0>
 80193b4:	4b15      	ldr	r3, [pc, #84]	@ (801940c <ip_reass_free_complete_datagram+0x12c>)
 80193b6:	22cc      	movs	r2, #204	@ 0xcc
 80193b8:	4918      	ldr	r1, [pc, #96]	@ (801941c <ip_reass_free_complete_datagram+0x13c>)
 80193ba:	4816      	ldr	r0, [pc, #88]	@ (8019414 <ip_reass_free_complete_datagram+0x134>)
 80193bc:	f001 f836 	bl	801a42c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80193c0:	8bfa      	ldrh	r2, [r7, #30]
 80193c2:	8a7b      	ldrh	r3, [r7, #18]
 80193c4:	4413      	add	r3, r2
 80193c6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80193c8:	68f8      	ldr	r0, [r7, #12]
 80193ca:	f7fd fb27 	bl	8016a1c <pbuf_free>
  while (p != NULL) {
 80193ce:	69bb      	ldr	r3, [r7, #24]
 80193d0:	2b00      	cmp	r3, #0
 80193d2:	d1dc      	bne.n	801938e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80193d4:	6839      	ldr	r1, [r7, #0]
 80193d6:	6878      	ldr	r0, [r7, #4]
 80193d8:	f000 f8c2 	bl	8019560 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80193dc:	4b10      	ldr	r3, [pc, #64]	@ (8019420 <ip_reass_free_complete_datagram+0x140>)
 80193de:	881b      	ldrh	r3, [r3, #0]
 80193e0:	8bfa      	ldrh	r2, [r7, #30]
 80193e2:	429a      	cmp	r2, r3
 80193e4:	d905      	bls.n	80193f2 <ip_reass_free_complete_datagram+0x112>
 80193e6:	4b09      	ldr	r3, [pc, #36]	@ (801940c <ip_reass_free_complete_datagram+0x12c>)
 80193e8:	22d2      	movs	r2, #210	@ 0xd2
 80193ea:	490e      	ldr	r1, [pc, #56]	@ (8019424 <ip_reass_free_complete_datagram+0x144>)
 80193ec:	4809      	ldr	r0, [pc, #36]	@ (8019414 <ip_reass_free_complete_datagram+0x134>)
 80193ee:	f001 f81d 	bl	801a42c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80193f2:	4b0b      	ldr	r3, [pc, #44]	@ (8019420 <ip_reass_free_complete_datagram+0x140>)
 80193f4:	881a      	ldrh	r2, [r3, #0]
 80193f6:	8bfb      	ldrh	r3, [r7, #30]
 80193f8:	1ad3      	subs	r3, r2, r3
 80193fa:	b29a      	uxth	r2, r3
 80193fc:	4b08      	ldr	r3, [pc, #32]	@ (8019420 <ip_reass_free_complete_datagram+0x140>)
 80193fe:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8019400:	8bfb      	ldrh	r3, [r7, #30]
}
 8019402:	4618      	mov	r0, r3
 8019404:	3720      	adds	r7, #32
 8019406:	46bd      	mov	sp, r7
 8019408:	bd80      	pop	{r7, pc}
 801940a:	bf00      	nop
 801940c:	0801c3b8 	.word	0x0801c3b8
 8019410:	0801c3f4 	.word	0x0801c3f4
 8019414:	0801c400 	.word	0x0801c400
 8019418:	0801c428 	.word	0x0801c428
 801941c:	0801c43c 	.word	0x0801c43c
 8019420:	200163bc 	.word	0x200163bc
 8019424:	0801c45c 	.word	0x0801c45c

08019428 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8019428:	b580      	push	{r7, lr}
 801942a:	b08a      	sub	sp, #40	@ 0x28
 801942c:	af00      	add	r7, sp, #0
 801942e:	6078      	str	r0, [r7, #4]
 8019430:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8019432:	2300      	movs	r3, #0
 8019434:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8019436:	2300      	movs	r3, #0
 8019438:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801943a:	2300      	movs	r3, #0
 801943c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801943e:	2300      	movs	r3, #0
 8019440:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8019442:	2300      	movs	r3, #0
 8019444:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8019446:	4b28      	ldr	r3, [pc, #160]	@ (80194e8 <ip_reass_remove_oldest_datagram+0xc0>)
 8019448:	681b      	ldr	r3, [r3, #0]
 801944a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801944c:	e030      	b.n	80194b0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801944e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019450:	695a      	ldr	r2, [r3, #20]
 8019452:	687b      	ldr	r3, [r7, #4]
 8019454:	68db      	ldr	r3, [r3, #12]
 8019456:	429a      	cmp	r2, r3
 8019458:	d10c      	bne.n	8019474 <ip_reass_remove_oldest_datagram+0x4c>
 801945a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801945c:	699a      	ldr	r2, [r3, #24]
 801945e:	687b      	ldr	r3, [r7, #4]
 8019460:	691b      	ldr	r3, [r3, #16]
 8019462:	429a      	cmp	r2, r3
 8019464:	d106      	bne.n	8019474 <ip_reass_remove_oldest_datagram+0x4c>
 8019466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019468:	899a      	ldrh	r2, [r3, #12]
 801946a:	687b      	ldr	r3, [r7, #4]
 801946c:	889b      	ldrh	r3, [r3, #4]
 801946e:	b29b      	uxth	r3, r3
 8019470:	429a      	cmp	r2, r3
 8019472:	d014      	beq.n	801949e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8019474:	693b      	ldr	r3, [r7, #16]
 8019476:	3301      	adds	r3, #1
 8019478:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801947a:	6a3b      	ldr	r3, [r7, #32]
 801947c:	2b00      	cmp	r3, #0
 801947e:	d104      	bne.n	801948a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8019480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019482:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019484:	69fb      	ldr	r3, [r7, #28]
 8019486:	61bb      	str	r3, [r7, #24]
 8019488:	e009      	b.n	801949e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801948a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801948c:	7fda      	ldrb	r2, [r3, #31]
 801948e:	6a3b      	ldr	r3, [r7, #32]
 8019490:	7fdb      	ldrb	r3, [r3, #31]
 8019492:	429a      	cmp	r2, r3
 8019494:	d803      	bhi.n	801949e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8019496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019498:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801949a:	69fb      	ldr	r3, [r7, #28]
 801949c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801949e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194a0:	681b      	ldr	r3, [r3, #0]
 80194a2:	2b00      	cmp	r3, #0
 80194a4:	d001      	beq.n	80194aa <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80194a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194a8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80194aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194ac:	681b      	ldr	r3, [r3, #0]
 80194ae:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80194b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194b2:	2b00      	cmp	r3, #0
 80194b4:	d1cb      	bne.n	801944e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80194b6:	6a3b      	ldr	r3, [r7, #32]
 80194b8:	2b00      	cmp	r3, #0
 80194ba:	d008      	beq.n	80194ce <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80194bc:	69b9      	ldr	r1, [r7, #24]
 80194be:	6a38      	ldr	r0, [r7, #32]
 80194c0:	f7ff ff0e 	bl	80192e0 <ip_reass_free_complete_datagram>
 80194c4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80194c6:	697a      	ldr	r2, [r7, #20]
 80194c8:	68fb      	ldr	r3, [r7, #12]
 80194ca:	4413      	add	r3, r2
 80194cc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80194ce:	697a      	ldr	r2, [r7, #20]
 80194d0:	683b      	ldr	r3, [r7, #0]
 80194d2:	429a      	cmp	r2, r3
 80194d4:	da02      	bge.n	80194dc <ip_reass_remove_oldest_datagram+0xb4>
 80194d6:	693b      	ldr	r3, [r7, #16]
 80194d8:	2b01      	cmp	r3, #1
 80194da:	dcac      	bgt.n	8019436 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80194dc:	697b      	ldr	r3, [r7, #20]
}
 80194de:	4618      	mov	r0, r3
 80194e0:	3728      	adds	r7, #40	@ 0x28
 80194e2:	46bd      	mov	sp, r7
 80194e4:	bd80      	pop	{r7, pc}
 80194e6:	bf00      	nop
 80194e8:	200163b8 	.word	0x200163b8

080194ec <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80194ec:	b580      	push	{r7, lr}
 80194ee:	b084      	sub	sp, #16
 80194f0:	af00      	add	r7, sp, #0
 80194f2:	6078      	str	r0, [r7, #4]
 80194f4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80194f6:	2001      	movs	r0, #1
 80194f8:	f7fc fc64 	bl	8015dc4 <memp_malloc>
 80194fc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80194fe:	68fb      	ldr	r3, [r7, #12]
 8019500:	2b00      	cmp	r3, #0
 8019502:	d110      	bne.n	8019526 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8019504:	6839      	ldr	r1, [r7, #0]
 8019506:	6878      	ldr	r0, [r7, #4]
 8019508:	f7ff ff8e 	bl	8019428 <ip_reass_remove_oldest_datagram>
 801950c:	4602      	mov	r2, r0
 801950e:	683b      	ldr	r3, [r7, #0]
 8019510:	4293      	cmp	r3, r2
 8019512:	dc03      	bgt.n	801951c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019514:	2001      	movs	r0, #1
 8019516:	f7fc fc55 	bl	8015dc4 <memp_malloc>
 801951a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801951c:	68fb      	ldr	r3, [r7, #12]
 801951e:	2b00      	cmp	r3, #0
 8019520:	d101      	bne.n	8019526 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8019522:	2300      	movs	r3, #0
 8019524:	e016      	b.n	8019554 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8019526:	2220      	movs	r2, #32
 8019528:	2100      	movs	r1, #0
 801952a:	68f8      	ldr	r0, [r7, #12]
 801952c:	f000 ffe3 	bl	801a4f6 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8019530:	68fb      	ldr	r3, [r7, #12]
 8019532:	220f      	movs	r2, #15
 8019534:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8019536:	4b09      	ldr	r3, [pc, #36]	@ (801955c <ip_reass_enqueue_new_datagram+0x70>)
 8019538:	681a      	ldr	r2, [r3, #0]
 801953a:	68fb      	ldr	r3, [r7, #12]
 801953c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801953e:	4a07      	ldr	r2, [pc, #28]	@ (801955c <ip_reass_enqueue_new_datagram+0x70>)
 8019540:	68fb      	ldr	r3, [r7, #12]
 8019542:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8019544:	68fb      	ldr	r3, [r7, #12]
 8019546:	3308      	adds	r3, #8
 8019548:	2214      	movs	r2, #20
 801954a:	6879      	ldr	r1, [r7, #4]
 801954c:	4618      	mov	r0, r3
 801954e:	f001 f858 	bl	801a602 <memcpy>
  return ipr;
 8019552:	68fb      	ldr	r3, [r7, #12]
}
 8019554:	4618      	mov	r0, r3
 8019556:	3710      	adds	r7, #16
 8019558:	46bd      	mov	sp, r7
 801955a:	bd80      	pop	{r7, pc}
 801955c:	200163b8 	.word	0x200163b8

08019560 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019560:	b580      	push	{r7, lr}
 8019562:	b082      	sub	sp, #8
 8019564:	af00      	add	r7, sp, #0
 8019566:	6078      	str	r0, [r7, #4]
 8019568:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801956a:	4b10      	ldr	r3, [pc, #64]	@ (80195ac <ip_reass_dequeue_datagram+0x4c>)
 801956c:	681b      	ldr	r3, [r3, #0]
 801956e:	687a      	ldr	r2, [r7, #4]
 8019570:	429a      	cmp	r2, r3
 8019572:	d104      	bne.n	801957e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8019574:	687b      	ldr	r3, [r7, #4]
 8019576:	681b      	ldr	r3, [r3, #0]
 8019578:	4a0c      	ldr	r2, [pc, #48]	@ (80195ac <ip_reass_dequeue_datagram+0x4c>)
 801957a:	6013      	str	r3, [r2, #0]
 801957c:	e00d      	b.n	801959a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801957e:	683b      	ldr	r3, [r7, #0]
 8019580:	2b00      	cmp	r3, #0
 8019582:	d106      	bne.n	8019592 <ip_reass_dequeue_datagram+0x32>
 8019584:	4b0a      	ldr	r3, [pc, #40]	@ (80195b0 <ip_reass_dequeue_datagram+0x50>)
 8019586:	f240 1245 	movw	r2, #325	@ 0x145
 801958a:	490a      	ldr	r1, [pc, #40]	@ (80195b4 <ip_reass_dequeue_datagram+0x54>)
 801958c:	480a      	ldr	r0, [pc, #40]	@ (80195b8 <ip_reass_dequeue_datagram+0x58>)
 801958e:	f000 ff4d 	bl	801a42c <iprintf>
    prev->next = ipr->next;
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	681a      	ldr	r2, [r3, #0]
 8019596:	683b      	ldr	r3, [r7, #0]
 8019598:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801959a:	6879      	ldr	r1, [r7, #4]
 801959c:	2001      	movs	r0, #1
 801959e:	f7fc fc5d 	bl	8015e5c <memp_free>
}
 80195a2:	bf00      	nop
 80195a4:	3708      	adds	r7, #8
 80195a6:	46bd      	mov	sp, r7
 80195a8:	bd80      	pop	{r7, pc}
 80195aa:	bf00      	nop
 80195ac:	200163b8 	.word	0x200163b8
 80195b0:	0801c3b8 	.word	0x0801c3b8
 80195b4:	0801c480 	.word	0x0801c480
 80195b8:	0801c400 	.word	0x0801c400

080195bc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80195bc:	b580      	push	{r7, lr}
 80195be:	b08c      	sub	sp, #48	@ 0x30
 80195c0:	af00      	add	r7, sp, #0
 80195c2:	60f8      	str	r0, [r7, #12]
 80195c4:	60b9      	str	r1, [r7, #8]
 80195c6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80195c8:	2300      	movs	r3, #0
 80195ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80195cc:	2301      	movs	r3, #1
 80195ce:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80195d0:	68bb      	ldr	r3, [r7, #8]
 80195d2:	685b      	ldr	r3, [r3, #4]
 80195d4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80195d6:	69fb      	ldr	r3, [r7, #28]
 80195d8:	885b      	ldrh	r3, [r3, #2]
 80195da:	b29b      	uxth	r3, r3
 80195dc:	4618      	mov	r0, r3
 80195de:	f7fb ffb5 	bl	801554c <lwip_htons>
 80195e2:	4603      	mov	r3, r0
 80195e4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80195e6:	69fb      	ldr	r3, [r7, #28]
 80195e8:	781b      	ldrb	r3, [r3, #0]
 80195ea:	f003 030f 	and.w	r3, r3, #15
 80195ee:	b2db      	uxtb	r3, r3
 80195f0:	009b      	lsls	r3, r3, #2
 80195f2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80195f4:	7e7b      	ldrb	r3, [r7, #25]
 80195f6:	b29b      	uxth	r3, r3
 80195f8:	8b7a      	ldrh	r2, [r7, #26]
 80195fa:	429a      	cmp	r2, r3
 80195fc:	d202      	bcs.n	8019604 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80195fe:	f04f 33ff 	mov.w	r3, #4294967295
 8019602:	e135      	b.n	8019870 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8019604:	7e7b      	ldrb	r3, [r7, #25]
 8019606:	b29b      	uxth	r3, r3
 8019608:	8b7a      	ldrh	r2, [r7, #26]
 801960a:	1ad3      	subs	r3, r2, r3
 801960c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801960e:	69fb      	ldr	r3, [r7, #28]
 8019610:	88db      	ldrh	r3, [r3, #6]
 8019612:	b29b      	uxth	r3, r3
 8019614:	4618      	mov	r0, r3
 8019616:	f7fb ff99 	bl	801554c <lwip_htons>
 801961a:	4603      	mov	r3, r0
 801961c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019620:	b29b      	uxth	r3, r3
 8019622:	00db      	lsls	r3, r3, #3
 8019624:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8019626:	68bb      	ldr	r3, [r7, #8]
 8019628:	685b      	ldr	r3, [r3, #4]
 801962a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801962c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801962e:	2200      	movs	r2, #0
 8019630:	701a      	strb	r2, [r3, #0]
 8019632:	2200      	movs	r2, #0
 8019634:	705a      	strb	r2, [r3, #1]
 8019636:	2200      	movs	r2, #0
 8019638:	709a      	strb	r2, [r3, #2]
 801963a:	2200      	movs	r2, #0
 801963c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801963e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019640:	8afa      	ldrh	r2, [r7, #22]
 8019642:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8019644:	8afa      	ldrh	r2, [r7, #22]
 8019646:	8b7b      	ldrh	r3, [r7, #26]
 8019648:	4413      	add	r3, r2
 801964a:	b29a      	uxth	r2, r3
 801964c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801964e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8019650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019652:	88db      	ldrh	r3, [r3, #6]
 8019654:	b29b      	uxth	r3, r3
 8019656:	8afa      	ldrh	r2, [r7, #22]
 8019658:	429a      	cmp	r2, r3
 801965a:	d902      	bls.n	8019662 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801965c:	f04f 33ff 	mov.w	r3, #4294967295
 8019660:	e106      	b.n	8019870 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8019662:	68fb      	ldr	r3, [r7, #12]
 8019664:	685b      	ldr	r3, [r3, #4]
 8019666:	627b      	str	r3, [r7, #36]	@ 0x24
 8019668:	e068      	b.n	801973c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801966a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801966c:	685b      	ldr	r3, [r3, #4]
 801966e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8019670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019672:	889b      	ldrh	r3, [r3, #4]
 8019674:	b29a      	uxth	r2, r3
 8019676:	693b      	ldr	r3, [r7, #16]
 8019678:	889b      	ldrh	r3, [r3, #4]
 801967a:	b29b      	uxth	r3, r3
 801967c:	429a      	cmp	r2, r3
 801967e:	d235      	bcs.n	80196ec <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8019680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019682:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019684:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8019686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019688:	2b00      	cmp	r3, #0
 801968a:	d020      	beq.n	80196ce <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801968c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801968e:	889b      	ldrh	r3, [r3, #4]
 8019690:	b29a      	uxth	r2, r3
 8019692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019694:	88db      	ldrh	r3, [r3, #6]
 8019696:	b29b      	uxth	r3, r3
 8019698:	429a      	cmp	r2, r3
 801969a:	d307      	bcc.n	80196ac <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801969c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801969e:	88db      	ldrh	r3, [r3, #6]
 80196a0:	b29a      	uxth	r2, r3
 80196a2:	693b      	ldr	r3, [r7, #16]
 80196a4:	889b      	ldrh	r3, [r3, #4]
 80196a6:	b29b      	uxth	r3, r3
 80196a8:	429a      	cmp	r2, r3
 80196aa:	d902      	bls.n	80196b2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80196ac:	f04f 33ff 	mov.w	r3, #4294967295
 80196b0:	e0de      	b.n	8019870 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80196b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80196b4:	68ba      	ldr	r2, [r7, #8]
 80196b6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80196b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80196ba:	88db      	ldrh	r3, [r3, #6]
 80196bc:	b29a      	uxth	r2, r3
 80196be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80196c0:	889b      	ldrh	r3, [r3, #4]
 80196c2:	b29b      	uxth	r3, r3
 80196c4:	429a      	cmp	r2, r3
 80196c6:	d03d      	beq.n	8019744 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80196c8:	2300      	movs	r3, #0
 80196ca:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80196cc:	e03a      	b.n	8019744 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80196ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80196d0:	88db      	ldrh	r3, [r3, #6]
 80196d2:	b29a      	uxth	r2, r3
 80196d4:	693b      	ldr	r3, [r7, #16]
 80196d6:	889b      	ldrh	r3, [r3, #4]
 80196d8:	b29b      	uxth	r3, r3
 80196da:	429a      	cmp	r2, r3
 80196dc:	d902      	bls.n	80196e4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80196de:	f04f 33ff 	mov.w	r3, #4294967295
 80196e2:	e0c5      	b.n	8019870 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80196e4:	68fb      	ldr	r3, [r7, #12]
 80196e6:	68ba      	ldr	r2, [r7, #8]
 80196e8:	605a      	str	r2, [r3, #4]
      break;
 80196ea:	e02b      	b.n	8019744 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80196ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80196ee:	889b      	ldrh	r3, [r3, #4]
 80196f0:	b29a      	uxth	r2, r3
 80196f2:	693b      	ldr	r3, [r7, #16]
 80196f4:	889b      	ldrh	r3, [r3, #4]
 80196f6:	b29b      	uxth	r3, r3
 80196f8:	429a      	cmp	r2, r3
 80196fa:	d102      	bne.n	8019702 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80196fc:	f04f 33ff 	mov.w	r3, #4294967295
 8019700:	e0b6      	b.n	8019870 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8019702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019704:	889b      	ldrh	r3, [r3, #4]
 8019706:	b29a      	uxth	r2, r3
 8019708:	693b      	ldr	r3, [r7, #16]
 801970a:	88db      	ldrh	r3, [r3, #6]
 801970c:	b29b      	uxth	r3, r3
 801970e:	429a      	cmp	r2, r3
 8019710:	d202      	bcs.n	8019718 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019712:	f04f 33ff 	mov.w	r3, #4294967295
 8019716:	e0ab      	b.n	8019870 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8019718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801971a:	2b00      	cmp	r3, #0
 801971c:	d009      	beq.n	8019732 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801971e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019720:	88db      	ldrh	r3, [r3, #6]
 8019722:	b29a      	uxth	r2, r3
 8019724:	693b      	ldr	r3, [r7, #16]
 8019726:	889b      	ldrh	r3, [r3, #4]
 8019728:	b29b      	uxth	r3, r3
 801972a:	429a      	cmp	r2, r3
 801972c:	d001      	beq.n	8019732 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801972e:	2300      	movs	r3, #0
 8019730:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8019732:	693b      	ldr	r3, [r7, #16]
 8019734:	681b      	ldr	r3, [r3, #0]
 8019736:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8019738:	693b      	ldr	r3, [r7, #16]
 801973a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801973c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801973e:	2b00      	cmp	r3, #0
 8019740:	d193      	bne.n	801966a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8019742:	e000      	b.n	8019746 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8019744:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8019746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019748:	2b00      	cmp	r3, #0
 801974a:	d12d      	bne.n	80197a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801974c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801974e:	2b00      	cmp	r3, #0
 8019750:	d01c      	beq.n	801978c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8019752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019754:	88db      	ldrh	r3, [r3, #6]
 8019756:	b29a      	uxth	r2, r3
 8019758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801975a:	889b      	ldrh	r3, [r3, #4]
 801975c:	b29b      	uxth	r3, r3
 801975e:	429a      	cmp	r2, r3
 8019760:	d906      	bls.n	8019770 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8019762:	4b45      	ldr	r3, [pc, #276]	@ (8019878 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019764:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8019768:	4944      	ldr	r1, [pc, #272]	@ (801987c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801976a:	4845      	ldr	r0, [pc, #276]	@ (8019880 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801976c:	f000 fe5e 	bl	801a42c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8019770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019772:	68ba      	ldr	r2, [r7, #8]
 8019774:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8019776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019778:	88db      	ldrh	r3, [r3, #6]
 801977a:	b29a      	uxth	r2, r3
 801977c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801977e:	889b      	ldrh	r3, [r3, #4]
 8019780:	b29b      	uxth	r3, r3
 8019782:	429a      	cmp	r2, r3
 8019784:	d010      	beq.n	80197a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8019786:	2300      	movs	r3, #0
 8019788:	623b      	str	r3, [r7, #32]
 801978a:	e00d      	b.n	80197a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801978c:	68fb      	ldr	r3, [r7, #12]
 801978e:	685b      	ldr	r3, [r3, #4]
 8019790:	2b00      	cmp	r3, #0
 8019792:	d006      	beq.n	80197a2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8019794:	4b38      	ldr	r3, [pc, #224]	@ (8019878 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019796:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801979a:	493a      	ldr	r1, [pc, #232]	@ (8019884 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801979c:	4838      	ldr	r0, [pc, #224]	@ (8019880 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801979e:	f000 fe45 	bl	801a42c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80197a2:	68fb      	ldr	r3, [r7, #12]
 80197a4:	68ba      	ldr	r2, [r7, #8]
 80197a6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	2b00      	cmp	r3, #0
 80197ac:	d105      	bne.n	80197ba <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80197ae:	68fb      	ldr	r3, [r7, #12]
 80197b0:	7f9b      	ldrb	r3, [r3, #30]
 80197b2:	f003 0301 	and.w	r3, r3, #1
 80197b6:	2b00      	cmp	r3, #0
 80197b8:	d059      	beq.n	801986e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80197ba:	6a3b      	ldr	r3, [r7, #32]
 80197bc:	2b00      	cmp	r3, #0
 80197be:	d04f      	beq.n	8019860 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80197c0:	68fb      	ldr	r3, [r7, #12]
 80197c2:	685b      	ldr	r3, [r3, #4]
 80197c4:	2b00      	cmp	r3, #0
 80197c6:	d006      	beq.n	80197d6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80197c8:	68fb      	ldr	r3, [r7, #12]
 80197ca:	685b      	ldr	r3, [r3, #4]
 80197cc:	685b      	ldr	r3, [r3, #4]
 80197ce:	889b      	ldrh	r3, [r3, #4]
 80197d0:	b29b      	uxth	r3, r3
 80197d2:	2b00      	cmp	r3, #0
 80197d4:	d002      	beq.n	80197dc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80197d6:	2300      	movs	r3, #0
 80197d8:	623b      	str	r3, [r7, #32]
 80197da:	e041      	b.n	8019860 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80197dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80197de:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 80197e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80197e2:	681b      	ldr	r3, [r3, #0]
 80197e4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80197e6:	e012      	b.n	801980e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80197e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80197ea:	685b      	ldr	r3, [r3, #4]
 80197ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 80197ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80197f0:	88db      	ldrh	r3, [r3, #6]
 80197f2:	b29a      	uxth	r2, r3
 80197f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80197f6:	889b      	ldrh	r3, [r3, #4]
 80197f8:	b29b      	uxth	r3, r3
 80197fa:	429a      	cmp	r2, r3
 80197fc:	d002      	beq.n	8019804 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80197fe:	2300      	movs	r3, #0
 8019800:	623b      	str	r3, [r7, #32]
            break;
 8019802:	e007      	b.n	8019814 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8019804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019806:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8019808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801980a:	681b      	ldr	r3, [r3, #0]
 801980c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801980e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019810:	2b00      	cmp	r3, #0
 8019812:	d1e9      	bne.n	80197e8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8019814:	6a3b      	ldr	r3, [r7, #32]
 8019816:	2b00      	cmp	r3, #0
 8019818:	d022      	beq.n	8019860 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801981a:	68fb      	ldr	r3, [r7, #12]
 801981c:	685b      	ldr	r3, [r3, #4]
 801981e:	2b00      	cmp	r3, #0
 8019820:	d106      	bne.n	8019830 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8019822:	4b15      	ldr	r3, [pc, #84]	@ (8019878 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019824:	f240 12df 	movw	r2, #479	@ 0x1df
 8019828:	4917      	ldr	r1, [pc, #92]	@ (8019888 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801982a:	4815      	ldr	r0, [pc, #84]	@ (8019880 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801982c:	f000 fdfe 	bl	801a42c <iprintf>
          LWIP_ASSERT("sanity check",
 8019830:	68fb      	ldr	r3, [r7, #12]
 8019832:	685b      	ldr	r3, [r3, #4]
 8019834:	685b      	ldr	r3, [r3, #4]
 8019836:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019838:	429a      	cmp	r2, r3
 801983a:	d106      	bne.n	801984a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801983c:	4b0e      	ldr	r3, [pc, #56]	@ (8019878 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801983e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8019842:	4911      	ldr	r1, [pc, #68]	@ (8019888 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019844:	480e      	ldr	r0, [pc, #56]	@ (8019880 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019846:	f000 fdf1 	bl	801a42c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801984a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801984c:	681b      	ldr	r3, [r3, #0]
 801984e:	2b00      	cmp	r3, #0
 8019850:	d006      	beq.n	8019860 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8019852:	4b09      	ldr	r3, [pc, #36]	@ (8019878 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019854:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8019858:	490c      	ldr	r1, [pc, #48]	@ (801988c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801985a:	4809      	ldr	r0, [pc, #36]	@ (8019880 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801985c:	f000 fde6 	bl	801a42c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8019860:	6a3b      	ldr	r3, [r7, #32]
 8019862:	2b00      	cmp	r3, #0
 8019864:	bf14      	ite	ne
 8019866:	2301      	movne	r3, #1
 8019868:	2300      	moveq	r3, #0
 801986a:	b2db      	uxtb	r3, r3
 801986c:	e000      	b.n	8019870 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801986e:	2300      	movs	r3, #0
}
 8019870:	4618      	mov	r0, r3
 8019872:	3730      	adds	r7, #48	@ 0x30
 8019874:	46bd      	mov	sp, r7
 8019876:	bd80      	pop	{r7, pc}
 8019878:	0801c3b8 	.word	0x0801c3b8
 801987c:	0801c49c 	.word	0x0801c49c
 8019880:	0801c400 	.word	0x0801c400
 8019884:	0801c4bc 	.word	0x0801c4bc
 8019888:	0801c4f4 	.word	0x0801c4f4
 801988c:	0801c504 	.word	0x0801c504

08019890 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8019890:	b580      	push	{r7, lr}
 8019892:	b08e      	sub	sp, #56	@ 0x38
 8019894:	af00      	add	r7, sp, #0
 8019896:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	685b      	ldr	r3, [r3, #4]
 801989c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801989e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80198a0:	781b      	ldrb	r3, [r3, #0]
 80198a2:	f003 030f 	and.w	r3, r3, #15
 80198a6:	b2db      	uxtb	r3, r3
 80198a8:	009b      	lsls	r3, r3, #2
 80198aa:	b2db      	uxtb	r3, r3
 80198ac:	2b14      	cmp	r3, #20
 80198ae:	f040 8171 	bne.w	8019b94 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80198b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80198b4:	88db      	ldrh	r3, [r3, #6]
 80198b6:	b29b      	uxth	r3, r3
 80198b8:	4618      	mov	r0, r3
 80198ba:	f7fb fe47 	bl	801554c <lwip_htons>
 80198be:	4603      	mov	r3, r0
 80198c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80198c4:	b29b      	uxth	r3, r3
 80198c6:	00db      	lsls	r3, r3, #3
 80198c8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80198ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80198cc:	885b      	ldrh	r3, [r3, #2]
 80198ce:	b29b      	uxth	r3, r3
 80198d0:	4618      	mov	r0, r3
 80198d2:	f7fb fe3b 	bl	801554c <lwip_htons>
 80198d6:	4603      	mov	r3, r0
 80198d8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80198da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80198dc:	781b      	ldrb	r3, [r3, #0]
 80198de:	f003 030f 	and.w	r3, r3, #15
 80198e2:	b2db      	uxtb	r3, r3
 80198e4:	009b      	lsls	r3, r3, #2
 80198e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 80198ea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80198ee:	b29b      	uxth	r3, r3
 80198f0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80198f2:	429a      	cmp	r2, r3
 80198f4:	f0c0 8150 	bcc.w	8019b98 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80198f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80198fc:	b29b      	uxth	r3, r3
 80198fe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8019900:	1ad3      	subs	r3, r2, r3
 8019902:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8019904:	6878      	ldr	r0, [r7, #4]
 8019906:	f7fd f911 	bl	8016b2c <pbuf_clen>
 801990a:	4603      	mov	r3, r0
 801990c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801990e:	4b8c      	ldr	r3, [pc, #560]	@ (8019b40 <ip4_reass+0x2b0>)
 8019910:	881b      	ldrh	r3, [r3, #0]
 8019912:	461a      	mov	r2, r3
 8019914:	8c3b      	ldrh	r3, [r7, #32]
 8019916:	4413      	add	r3, r2
 8019918:	2b0a      	cmp	r3, #10
 801991a:	dd10      	ble.n	801993e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801991c:	8c3b      	ldrh	r3, [r7, #32]
 801991e:	4619      	mov	r1, r3
 8019920:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019922:	f7ff fd81 	bl	8019428 <ip_reass_remove_oldest_datagram>
 8019926:	4603      	mov	r3, r0
 8019928:	2b00      	cmp	r3, #0
 801992a:	f000 8137 	beq.w	8019b9c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801992e:	4b84      	ldr	r3, [pc, #528]	@ (8019b40 <ip4_reass+0x2b0>)
 8019930:	881b      	ldrh	r3, [r3, #0]
 8019932:	461a      	mov	r2, r3
 8019934:	8c3b      	ldrh	r3, [r7, #32]
 8019936:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019938:	2b0a      	cmp	r3, #10
 801993a:	f300 812f 	bgt.w	8019b9c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801993e:	4b81      	ldr	r3, [pc, #516]	@ (8019b44 <ip4_reass+0x2b4>)
 8019940:	681b      	ldr	r3, [r3, #0]
 8019942:	633b      	str	r3, [r7, #48]	@ 0x30
 8019944:	e015      	b.n	8019972 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8019946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019948:	695a      	ldr	r2, [r3, #20]
 801994a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801994c:	68db      	ldr	r3, [r3, #12]
 801994e:	429a      	cmp	r2, r3
 8019950:	d10c      	bne.n	801996c <ip4_reass+0xdc>
 8019952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019954:	699a      	ldr	r2, [r3, #24]
 8019956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019958:	691b      	ldr	r3, [r3, #16]
 801995a:	429a      	cmp	r2, r3
 801995c:	d106      	bne.n	801996c <ip4_reass+0xdc>
 801995e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019960:	899a      	ldrh	r2, [r3, #12]
 8019962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019964:	889b      	ldrh	r3, [r3, #4]
 8019966:	b29b      	uxth	r3, r3
 8019968:	429a      	cmp	r2, r3
 801996a:	d006      	beq.n	801997a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801996c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801996e:	681b      	ldr	r3, [r3, #0]
 8019970:	633b      	str	r3, [r7, #48]	@ 0x30
 8019972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019974:	2b00      	cmp	r3, #0
 8019976:	d1e6      	bne.n	8019946 <ip4_reass+0xb6>
 8019978:	e000      	b.n	801997c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801997a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801997c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801997e:	2b00      	cmp	r3, #0
 8019980:	d109      	bne.n	8019996 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8019982:	8c3b      	ldrh	r3, [r7, #32]
 8019984:	4619      	mov	r1, r3
 8019986:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019988:	f7ff fdb0 	bl	80194ec <ip_reass_enqueue_new_datagram>
 801998c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801998e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019990:	2b00      	cmp	r3, #0
 8019992:	d11c      	bne.n	80199ce <ip4_reass+0x13e>
      goto nullreturn;
 8019994:	e105      	b.n	8019ba2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8019996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019998:	88db      	ldrh	r3, [r3, #6]
 801999a:	b29b      	uxth	r3, r3
 801999c:	4618      	mov	r0, r3
 801999e:	f7fb fdd5 	bl	801554c <lwip_htons>
 80199a2:	4603      	mov	r3, r0
 80199a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80199a8:	2b00      	cmp	r3, #0
 80199aa:	d110      	bne.n	80199ce <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80199ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80199ae:	89db      	ldrh	r3, [r3, #14]
 80199b0:	4618      	mov	r0, r3
 80199b2:	f7fb fdcb 	bl	801554c <lwip_htons>
 80199b6:	4603      	mov	r3, r0
 80199b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80199bc:	2b00      	cmp	r3, #0
 80199be:	d006      	beq.n	80199ce <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80199c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80199c2:	3308      	adds	r3, #8
 80199c4:	2214      	movs	r2, #20
 80199c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80199c8:	4618      	mov	r0, r3
 80199ca:	f000 fe1a 	bl	801a602 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80199ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80199d0:	88db      	ldrh	r3, [r3, #6]
 80199d2:	b29b      	uxth	r3, r3
 80199d4:	f003 0320 	and.w	r3, r3, #32
 80199d8:	2b00      	cmp	r3, #0
 80199da:	bf0c      	ite	eq
 80199dc:	2301      	moveq	r3, #1
 80199de:	2300      	movne	r3, #0
 80199e0:	b2db      	uxtb	r3, r3
 80199e2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80199e4:	69fb      	ldr	r3, [r7, #28]
 80199e6:	2b00      	cmp	r3, #0
 80199e8:	d00e      	beq.n	8019a08 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80199ea:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80199ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80199ee:	4413      	add	r3, r2
 80199f0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80199f2:	8b7a      	ldrh	r2, [r7, #26]
 80199f4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80199f6:	429a      	cmp	r2, r3
 80199f8:	f0c0 80a0 	bcc.w	8019b3c <ip4_reass+0x2ac>
 80199fc:	8b7b      	ldrh	r3, [r7, #26]
 80199fe:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8019a02:	4293      	cmp	r3, r2
 8019a04:	f200 809a 	bhi.w	8019b3c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8019a08:	69fa      	ldr	r2, [r7, #28]
 8019a0a:	6879      	ldr	r1, [r7, #4]
 8019a0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019a0e:	f7ff fdd5 	bl	80195bc <ip_reass_chain_frag_into_datagram_and_validate>
 8019a12:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8019a14:	697b      	ldr	r3, [r7, #20]
 8019a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019a1a:	f000 809b 	beq.w	8019b54 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8019a1e:	4b48      	ldr	r3, [pc, #288]	@ (8019b40 <ip4_reass+0x2b0>)
 8019a20:	881a      	ldrh	r2, [r3, #0]
 8019a22:	8c3b      	ldrh	r3, [r7, #32]
 8019a24:	4413      	add	r3, r2
 8019a26:	b29a      	uxth	r2, r3
 8019a28:	4b45      	ldr	r3, [pc, #276]	@ (8019b40 <ip4_reass+0x2b0>)
 8019a2a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8019a2c:	69fb      	ldr	r3, [r7, #28]
 8019a2e:	2b00      	cmp	r3, #0
 8019a30:	d00d      	beq.n	8019a4e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8019a32:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8019a34:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019a36:	4413      	add	r3, r2
 8019a38:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8019a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019a3c:	8a7a      	ldrh	r2, [r7, #18]
 8019a3e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8019a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019a42:	7f9b      	ldrb	r3, [r3, #30]
 8019a44:	f043 0301 	orr.w	r3, r3, #1
 8019a48:	b2da      	uxtb	r2, r3
 8019a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019a4c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8019a4e:	697b      	ldr	r3, [r7, #20]
 8019a50:	2b01      	cmp	r3, #1
 8019a52:	d171      	bne.n	8019b38 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8019a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019a56:	8b9b      	ldrh	r3, [r3, #28]
 8019a58:	3314      	adds	r3, #20
 8019a5a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8019a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019a5e:	685b      	ldr	r3, [r3, #4]
 8019a60:	685b      	ldr	r3, [r3, #4]
 8019a62:	681b      	ldr	r3, [r3, #0]
 8019a64:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8019a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019a68:	685b      	ldr	r3, [r3, #4]
 8019a6a:	685b      	ldr	r3, [r3, #4]
 8019a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8019a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019a70:	3308      	adds	r3, #8
 8019a72:	2214      	movs	r2, #20
 8019a74:	4619      	mov	r1, r3
 8019a76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019a78:	f000 fdc3 	bl	801a602 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8019a7c:	8a3b      	ldrh	r3, [r7, #16]
 8019a7e:	4618      	mov	r0, r3
 8019a80:	f7fb fd64 	bl	801554c <lwip_htons>
 8019a84:	4603      	mov	r3, r0
 8019a86:	461a      	mov	r2, r3
 8019a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a8a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8019a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a8e:	2200      	movs	r2, #0
 8019a90:	719a      	strb	r2, [r3, #6]
 8019a92:	2200      	movs	r2, #0
 8019a94:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8019a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a98:	2200      	movs	r2, #0
 8019a9a:	729a      	strb	r2, [r3, #10]
 8019a9c:	2200      	movs	r2, #0
 8019a9e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8019aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019aa2:	685b      	ldr	r3, [r3, #4]
 8019aa4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8019aa6:	e00d      	b.n	8019ac4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8019aa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019aaa:	685b      	ldr	r3, [r3, #4]
 8019aac:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8019aae:	2114      	movs	r1, #20
 8019ab0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8019ab2:	f7fc ff2d 	bl	8016910 <pbuf_remove_header>
      pbuf_cat(p, r);
 8019ab6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8019ab8:	6878      	ldr	r0, [r7, #4]
 8019aba:	f7fd f871 	bl	8016ba0 <pbuf_cat>
      r = iprh->next_pbuf;
 8019abe:	68fb      	ldr	r3, [r7, #12]
 8019ac0:	681b      	ldr	r3, [r3, #0]
 8019ac2:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8019ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019ac6:	2b00      	cmp	r3, #0
 8019ac8:	d1ee      	bne.n	8019aa8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8019aca:	4b1e      	ldr	r3, [pc, #120]	@ (8019b44 <ip4_reass+0x2b4>)
 8019acc:	681b      	ldr	r3, [r3, #0]
 8019ace:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019ad0:	429a      	cmp	r2, r3
 8019ad2:	d102      	bne.n	8019ada <ip4_reass+0x24a>
      ipr_prev = NULL;
 8019ad4:	2300      	movs	r3, #0
 8019ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019ad8:	e010      	b.n	8019afc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019ada:	4b1a      	ldr	r3, [pc, #104]	@ (8019b44 <ip4_reass+0x2b4>)
 8019adc:	681b      	ldr	r3, [r3, #0]
 8019ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019ae0:	e007      	b.n	8019af2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8019ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019ae4:	681b      	ldr	r3, [r3, #0]
 8019ae6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019ae8:	429a      	cmp	r2, r3
 8019aea:	d006      	beq.n	8019afa <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019aee:	681b      	ldr	r3, [r3, #0]
 8019af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019af4:	2b00      	cmp	r3, #0
 8019af6:	d1f4      	bne.n	8019ae2 <ip4_reass+0x252>
 8019af8:	e000      	b.n	8019afc <ip4_reass+0x26c>
          break;
 8019afa:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8019afc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019afe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019b00:	f7ff fd2e 	bl	8019560 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8019b04:	6878      	ldr	r0, [r7, #4]
 8019b06:	f7fd f811 	bl	8016b2c <pbuf_clen>
 8019b0a:	4603      	mov	r3, r0
 8019b0c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8019b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8019b40 <ip4_reass+0x2b0>)
 8019b10:	881b      	ldrh	r3, [r3, #0]
 8019b12:	8c3a      	ldrh	r2, [r7, #32]
 8019b14:	429a      	cmp	r2, r3
 8019b16:	d906      	bls.n	8019b26 <ip4_reass+0x296>
 8019b18:	4b0b      	ldr	r3, [pc, #44]	@ (8019b48 <ip4_reass+0x2b8>)
 8019b1a:	f240 229b 	movw	r2, #667	@ 0x29b
 8019b1e:	490b      	ldr	r1, [pc, #44]	@ (8019b4c <ip4_reass+0x2bc>)
 8019b20:	480b      	ldr	r0, [pc, #44]	@ (8019b50 <ip4_reass+0x2c0>)
 8019b22:	f000 fc83 	bl	801a42c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8019b26:	4b06      	ldr	r3, [pc, #24]	@ (8019b40 <ip4_reass+0x2b0>)
 8019b28:	881a      	ldrh	r2, [r3, #0]
 8019b2a:	8c3b      	ldrh	r3, [r7, #32]
 8019b2c:	1ad3      	subs	r3, r2, r3
 8019b2e:	b29a      	uxth	r2, r3
 8019b30:	4b03      	ldr	r3, [pc, #12]	@ (8019b40 <ip4_reass+0x2b0>)
 8019b32:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8019b34:	687b      	ldr	r3, [r7, #4]
 8019b36:	e038      	b.n	8019baa <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8019b38:	2300      	movs	r3, #0
 8019b3a:	e036      	b.n	8019baa <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8019b3c:	bf00      	nop
 8019b3e:	e00a      	b.n	8019b56 <ip4_reass+0x2c6>
 8019b40:	200163bc 	.word	0x200163bc
 8019b44:	200163b8 	.word	0x200163b8
 8019b48:	0801c3b8 	.word	0x0801c3b8
 8019b4c:	0801c528 	.word	0x0801c528
 8019b50:	0801c400 	.word	0x0801c400
    goto nullreturn_ipr;
 8019b54:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8019b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019b58:	2b00      	cmp	r3, #0
 8019b5a:	d106      	bne.n	8019b6a <ip4_reass+0x2da>
 8019b5c:	4b15      	ldr	r3, [pc, #84]	@ (8019bb4 <ip4_reass+0x324>)
 8019b5e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8019b62:	4915      	ldr	r1, [pc, #84]	@ (8019bb8 <ip4_reass+0x328>)
 8019b64:	4815      	ldr	r0, [pc, #84]	@ (8019bbc <ip4_reass+0x32c>)
 8019b66:	f000 fc61 	bl	801a42c <iprintf>
  if (ipr->p == NULL) {
 8019b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019b6c:	685b      	ldr	r3, [r3, #4]
 8019b6e:	2b00      	cmp	r3, #0
 8019b70:	d116      	bne.n	8019ba0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8019b72:	4b13      	ldr	r3, [pc, #76]	@ (8019bc0 <ip4_reass+0x330>)
 8019b74:	681b      	ldr	r3, [r3, #0]
 8019b76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019b78:	429a      	cmp	r2, r3
 8019b7a:	d006      	beq.n	8019b8a <ip4_reass+0x2fa>
 8019b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8019bb4 <ip4_reass+0x324>)
 8019b7e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8019b82:	4910      	ldr	r1, [pc, #64]	@ (8019bc4 <ip4_reass+0x334>)
 8019b84:	480d      	ldr	r0, [pc, #52]	@ (8019bbc <ip4_reass+0x32c>)
 8019b86:	f000 fc51 	bl	801a42c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8019b8a:	2100      	movs	r1, #0
 8019b8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019b8e:	f7ff fce7 	bl	8019560 <ip_reass_dequeue_datagram>
 8019b92:	e006      	b.n	8019ba2 <ip4_reass+0x312>
    goto nullreturn;
 8019b94:	bf00      	nop
 8019b96:	e004      	b.n	8019ba2 <ip4_reass+0x312>
    goto nullreturn;
 8019b98:	bf00      	nop
 8019b9a:	e002      	b.n	8019ba2 <ip4_reass+0x312>
      goto nullreturn;
 8019b9c:	bf00      	nop
 8019b9e:	e000      	b.n	8019ba2 <ip4_reass+0x312>
  }

nullreturn:
 8019ba0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8019ba2:	6878      	ldr	r0, [r7, #4]
 8019ba4:	f7fc ff3a 	bl	8016a1c <pbuf_free>
  return NULL;
 8019ba8:	2300      	movs	r3, #0
}
 8019baa:	4618      	mov	r0, r3
 8019bac:	3738      	adds	r7, #56	@ 0x38
 8019bae:	46bd      	mov	sp, r7
 8019bb0:	bd80      	pop	{r7, pc}
 8019bb2:	bf00      	nop
 8019bb4:	0801c3b8 	.word	0x0801c3b8
 8019bb8:	0801c544 	.word	0x0801c544
 8019bbc:	0801c400 	.word	0x0801c400
 8019bc0:	200163b8 	.word	0x200163b8
 8019bc4:	0801c550 	.word	0x0801c550

08019bc8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8019bc8:	b580      	push	{r7, lr}
 8019bca:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8019bcc:	2002      	movs	r0, #2
 8019bce:	f7fc f8f9 	bl	8015dc4 <memp_malloc>
 8019bd2:	4603      	mov	r3, r0
}
 8019bd4:	4618      	mov	r0, r3
 8019bd6:	bd80      	pop	{r7, pc}

08019bd8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8019bd8:	b580      	push	{r7, lr}
 8019bda:	b082      	sub	sp, #8
 8019bdc:	af00      	add	r7, sp, #0
 8019bde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8019be0:	687b      	ldr	r3, [r7, #4]
 8019be2:	2b00      	cmp	r3, #0
 8019be4:	d106      	bne.n	8019bf4 <ip_frag_free_pbuf_custom_ref+0x1c>
 8019be6:	4b07      	ldr	r3, [pc, #28]	@ (8019c04 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8019be8:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8019bec:	4906      	ldr	r1, [pc, #24]	@ (8019c08 <ip_frag_free_pbuf_custom_ref+0x30>)
 8019bee:	4807      	ldr	r0, [pc, #28]	@ (8019c0c <ip_frag_free_pbuf_custom_ref+0x34>)
 8019bf0:	f000 fc1c 	bl	801a42c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8019bf4:	6879      	ldr	r1, [r7, #4]
 8019bf6:	2002      	movs	r0, #2
 8019bf8:	f7fc f930 	bl	8015e5c <memp_free>
}
 8019bfc:	bf00      	nop
 8019bfe:	3708      	adds	r7, #8
 8019c00:	46bd      	mov	sp, r7
 8019c02:	bd80      	pop	{r7, pc}
 8019c04:	0801c3b8 	.word	0x0801c3b8
 8019c08:	0801c570 	.word	0x0801c570
 8019c0c:	0801c400 	.word	0x0801c400

08019c10 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8019c10:	b580      	push	{r7, lr}
 8019c12:	b084      	sub	sp, #16
 8019c14:	af00      	add	r7, sp, #0
 8019c16:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8019c18:	687b      	ldr	r3, [r7, #4]
 8019c1a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8019c1c:	68fb      	ldr	r3, [r7, #12]
 8019c1e:	2b00      	cmp	r3, #0
 8019c20:	d106      	bne.n	8019c30 <ipfrag_free_pbuf_custom+0x20>
 8019c22:	4b11      	ldr	r3, [pc, #68]	@ (8019c68 <ipfrag_free_pbuf_custom+0x58>)
 8019c24:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8019c28:	4910      	ldr	r1, [pc, #64]	@ (8019c6c <ipfrag_free_pbuf_custom+0x5c>)
 8019c2a:	4811      	ldr	r0, [pc, #68]	@ (8019c70 <ipfrag_free_pbuf_custom+0x60>)
 8019c2c:	f000 fbfe 	bl	801a42c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8019c30:	68fa      	ldr	r2, [r7, #12]
 8019c32:	687b      	ldr	r3, [r7, #4]
 8019c34:	429a      	cmp	r2, r3
 8019c36:	d006      	beq.n	8019c46 <ipfrag_free_pbuf_custom+0x36>
 8019c38:	4b0b      	ldr	r3, [pc, #44]	@ (8019c68 <ipfrag_free_pbuf_custom+0x58>)
 8019c3a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8019c3e:	490d      	ldr	r1, [pc, #52]	@ (8019c74 <ipfrag_free_pbuf_custom+0x64>)
 8019c40:	480b      	ldr	r0, [pc, #44]	@ (8019c70 <ipfrag_free_pbuf_custom+0x60>)
 8019c42:	f000 fbf3 	bl	801a42c <iprintf>
  if (pcr->original != NULL) {
 8019c46:	68fb      	ldr	r3, [r7, #12]
 8019c48:	695b      	ldr	r3, [r3, #20]
 8019c4a:	2b00      	cmp	r3, #0
 8019c4c:	d004      	beq.n	8019c58 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8019c4e:	68fb      	ldr	r3, [r7, #12]
 8019c50:	695b      	ldr	r3, [r3, #20]
 8019c52:	4618      	mov	r0, r3
 8019c54:	f7fc fee2 	bl	8016a1c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8019c58:	68f8      	ldr	r0, [r7, #12]
 8019c5a:	f7ff ffbd 	bl	8019bd8 <ip_frag_free_pbuf_custom_ref>
}
 8019c5e:	bf00      	nop
 8019c60:	3710      	adds	r7, #16
 8019c62:	46bd      	mov	sp, r7
 8019c64:	bd80      	pop	{r7, pc}
 8019c66:	bf00      	nop
 8019c68:	0801c3b8 	.word	0x0801c3b8
 8019c6c:	0801c57c 	.word	0x0801c57c
 8019c70:	0801c400 	.word	0x0801c400
 8019c74:	0801c588 	.word	0x0801c588

08019c78 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8019c78:	b580      	push	{r7, lr}
 8019c7a:	b094      	sub	sp, #80	@ 0x50
 8019c7c:	af02      	add	r7, sp, #8
 8019c7e:	60f8      	str	r0, [r7, #12]
 8019c80:	60b9      	str	r1, [r7, #8]
 8019c82:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8019c84:	2300      	movs	r3, #0
 8019c86:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8019c8a:	68bb      	ldr	r3, [r7, #8]
 8019c8c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8019c8e:	3b14      	subs	r3, #20
 8019c90:	2b00      	cmp	r3, #0
 8019c92:	da00      	bge.n	8019c96 <ip4_frag+0x1e>
 8019c94:	3307      	adds	r3, #7
 8019c96:	10db      	asrs	r3, r3, #3
 8019c98:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8019c9a:	2314      	movs	r3, #20
 8019c9c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8019c9e:	68fb      	ldr	r3, [r7, #12]
 8019ca0:	685b      	ldr	r3, [r3, #4]
 8019ca2:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8019ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019ca6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8019ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019caa:	781b      	ldrb	r3, [r3, #0]
 8019cac:	f003 030f 	and.w	r3, r3, #15
 8019cb0:	b2db      	uxtb	r3, r3
 8019cb2:	009b      	lsls	r3, r3, #2
 8019cb4:	b2db      	uxtb	r3, r3
 8019cb6:	2b14      	cmp	r3, #20
 8019cb8:	d002      	beq.n	8019cc0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8019cba:	f06f 0305 	mvn.w	r3, #5
 8019cbe:	e110      	b.n	8019ee2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8019cc0:	68fb      	ldr	r3, [r7, #12]
 8019cc2:	895b      	ldrh	r3, [r3, #10]
 8019cc4:	2b13      	cmp	r3, #19
 8019cc6:	d809      	bhi.n	8019cdc <ip4_frag+0x64>
 8019cc8:	4b88      	ldr	r3, [pc, #544]	@ (8019eec <ip4_frag+0x274>)
 8019cca:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8019cce:	4988      	ldr	r1, [pc, #544]	@ (8019ef0 <ip4_frag+0x278>)
 8019cd0:	4888      	ldr	r0, [pc, #544]	@ (8019ef4 <ip4_frag+0x27c>)
 8019cd2:	f000 fbab 	bl	801a42c <iprintf>
 8019cd6:	f06f 0305 	mvn.w	r3, #5
 8019cda:	e102      	b.n	8019ee2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8019cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019cde:	88db      	ldrh	r3, [r3, #6]
 8019ce0:	b29b      	uxth	r3, r3
 8019ce2:	4618      	mov	r0, r3
 8019ce4:	f7fb fc32 	bl	801554c <lwip_htons>
 8019ce8:	4603      	mov	r3, r0
 8019cea:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8019cec:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019cee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019cf2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8019cf6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019cf8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8019cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8019cfe:	68fb      	ldr	r3, [r7, #12]
 8019d00:	891b      	ldrh	r3, [r3, #8]
 8019d02:	3b14      	subs	r3, #20
 8019d04:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8019d08:	e0e1      	b.n	8019ece <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8019d0a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019d0c:	00db      	lsls	r3, r3, #3
 8019d0e:	b29b      	uxth	r3, r3
 8019d10:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019d14:	4293      	cmp	r3, r2
 8019d16:	bf28      	it	cs
 8019d18:	4613      	movcs	r3, r2
 8019d1a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8019d1c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019d20:	2114      	movs	r1, #20
 8019d22:	200e      	movs	r0, #14
 8019d24:	f7fc fb98 	bl	8016458 <pbuf_alloc>
 8019d28:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8019d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d2c:	2b00      	cmp	r3, #0
 8019d2e:	f000 80d5 	beq.w	8019edc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8019d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d34:	895b      	ldrh	r3, [r3, #10]
 8019d36:	2b13      	cmp	r3, #19
 8019d38:	d806      	bhi.n	8019d48 <ip4_frag+0xd0>
 8019d3a:	4b6c      	ldr	r3, [pc, #432]	@ (8019eec <ip4_frag+0x274>)
 8019d3c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8019d40:	496d      	ldr	r1, [pc, #436]	@ (8019ef8 <ip4_frag+0x280>)
 8019d42:	486c      	ldr	r0, [pc, #432]	@ (8019ef4 <ip4_frag+0x27c>)
 8019d44:	f000 fb72 	bl	801a42c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8019d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d4a:	685b      	ldr	r3, [r3, #4]
 8019d4c:	2214      	movs	r2, #20
 8019d4e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8019d50:	4618      	mov	r0, r3
 8019d52:	f000 fc56 	bl	801a602 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8019d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d58:	685b      	ldr	r3, [r3, #4]
 8019d5a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8019d5c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8019d5e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8019d62:	e064      	b.n	8019e2e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8019d64:	68fb      	ldr	r3, [r7, #12]
 8019d66:	895a      	ldrh	r2, [r3, #10]
 8019d68:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019d6a:	1ad3      	subs	r3, r2, r3
 8019d6c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8019d6e:	68fb      	ldr	r3, [r7, #12]
 8019d70:	895b      	ldrh	r3, [r3, #10]
 8019d72:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8019d74:	429a      	cmp	r2, r3
 8019d76:	d906      	bls.n	8019d86 <ip4_frag+0x10e>
 8019d78:	4b5c      	ldr	r3, [pc, #368]	@ (8019eec <ip4_frag+0x274>)
 8019d7a:	f240 322d 	movw	r2, #813	@ 0x32d
 8019d7e:	495f      	ldr	r1, [pc, #380]	@ (8019efc <ip4_frag+0x284>)
 8019d80:	485c      	ldr	r0, [pc, #368]	@ (8019ef4 <ip4_frag+0x27c>)
 8019d82:	f000 fb53 	bl	801a42c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8019d86:	8bfa      	ldrh	r2, [r7, #30]
 8019d88:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8019d8c:	4293      	cmp	r3, r2
 8019d8e:	bf28      	it	cs
 8019d90:	4613      	movcs	r3, r2
 8019d92:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8019d96:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8019d9a:	2b00      	cmp	r3, #0
 8019d9c:	d105      	bne.n	8019daa <ip4_frag+0x132>
        poff = 0;
 8019d9e:	2300      	movs	r3, #0
 8019da0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8019da2:	68fb      	ldr	r3, [r7, #12]
 8019da4:	681b      	ldr	r3, [r3, #0]
 8019da6:	60fb      	str	r3, [r7, #12]
        continue;
 8019da8:	e041      	b.n	8019e2e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8019daa:	f7ff ff0d 	bl	8019bc8 <ip_frag_alloc_pbuf_custom_ref>
 8019dae:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8019db0:	69bb      	ldr	r3, [r7, #24]
 8019db2:	2b00      	cmp	r3, #0
 8019db4:	d103      	bne.n	8019dbe <ip4_frag+0x146>
        pbuf_free(rambuf);
 8019db6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019db8:	f7fc fe30 	bl	8016a1c <pbuf_free>
        goto memerr;
 8019dbc:	e08f      	b.n	8019ede <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019dbe:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8019dc0:	68fb      	ldr	r3, [r7, #12]
 8019dc2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019dc4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019dc6:	4413      	add	r3, r2
 8019dc8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8019dcc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8019dd0:	9201      	str	r2, [sp, #4]
 8019dd2:	9300      	str	r3, [sp, #0]
 8019dd4:	4603      	mov	r3, r0
 8019dd6:	2241      	movs	r2, #65	@ 0x41
 8019dd8:	2000      	movs	r0, #0
 8019dda:	f7fc fc65 	bl	80166a8 <pbuf_alloced_custom>
 8019dde:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8019de0:	697b      	ldr	r3, [r7, #20]
 8019de2:	2b00      	cmp	r3, #0
 8019de4:	d106      	bne.n	8019df4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8019de6:	69b8      	ldr	r0, [r7, #24]
 8019de8:	f7ff fef6 	bl	8019bd8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8019dec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019dee:	f7fc fe15 	bl	8016a1c <pbuf_free>
        goto memerr;
 8019df2:	e074      	b.n	8019ede <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8019df4:	68f8      	ldr	r0, [r7, #12]
 8019df6:	f7fc feb1 	bl	8016b5c <pbuf_ref>
      pcr->original = p;
 8019dfa:	69bb      	ldr	r3, [r7, #24]
 8019dfc:	68fa      	ldr	r2, [r7, #12]
 8019dfe:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8019e00:	69bb      	ldr	r3, [r7, #24]
 8019e02:	4a3f      	ldr	r2, [pc, #252]	@ (8019f00 <ip4_frag+0x288>)
 8019e04:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8019e06:	6979      	ldr	r1, [r7, #20]
 8019e08:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019e0a:	f7fc fec9 	bl	8016ba0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8019e0e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8019e12:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8019e16:	1ad3      	subs	r3, r2, r3
 8019e18:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8019e1c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8019e20:	2b00      	cmp	r3, #0
 8019e22:	d004      	beq.n	8019e2e <ip4_frag+0x1b6>
        poff = 0;
 8019e24:	2300      	movs	r3, #0
 8019e26:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8019e28:	68fb      	ldr	r3, [r7, #12]
 8019e2a:	681b      	ldr	r3, [r3, #0]
 8019e2c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8019e2e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8019e32:	2b00      	cmp	r3, #0
 8019e34:	d196      	bne.n	8019d64 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8019e36:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8019e38:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8019e3c:	4413      	add	r3, r2
 8019e3e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8019e40:	68bb      	ldr	r3, [r7, #8]
 8019e42:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8019e44:	f1a3 0213 	sub.w	r2, r3, #19
 8019e48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019e4c:	429a      	cmp	r2, r3
 8019e4e:	bfcc      	ite	gt
 8019e50:	2301      	movgt	r3, #1
 8019e52:	2300      	movle	r3, #0
 8019e54:	b2db      	uxtb	r3, r3
 8019e56:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8019e58:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019e5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019e60:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8019e62:	6a3b      	ldr	r3, [r7, #32]
 8019e64:	2b00      	cmp	r3, #0
 8019e66:	d002      	beq.n	8019e6e <ip4_frag+0x1f6>
 8019e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e6a:	2b00      	cmp	r3, #0
 8019e6c:	d003      	beq.n	8019e76 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8019e6e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019e70:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8019e74:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8019e76:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019e78:	4618      	mov	r0, r3
 8019e7a:	f7fb fb67 	bl	801554c <lwip_htons>
 8019e7e:	4603      	mov	r3, r0
 8019e80:	461a      	mov	r2, r3
 8019e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019e84:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8019e86:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8019e88:	3314      	adds	r3, #20
 8019e8a:	b29b      	uxth	r3, r3
 8019e8c:	4618      	mov	r0, r3
 8019e8e:	f7fb fb5d 	bl	801554c <lwip_htons>
 8019e92:	4603      	mov	r3, r0
 8019e94:	461a      	mov	r2, r3
 8019e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019e98:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8019e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019e9c:	2200      	movs	r2, #0
 8019e9e:	729a      	strb	r2, [r3, #10]
 8019ea0:	2200      	movs	r2, #0
 8019ea2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8019ea4:	68bb      	ldr	r3, [r7, #8]
 8019ea6:	695b      	ldr	r3, [r3, #20]
 8019ea8:	687a      	ldr	r2, [r7, #4]
 8019eaa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8019eac:	68b8      	ldr	r0, [r7, #8]
 8019eae:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8019eb0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019eb2:	f7fc fdb3 	bl	8016a1c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8019eb6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019eba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8019ebc:	1ad3      	subs	r3, r2, r3
 8019ebe:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8019ec2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8019ec6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019ec8:	4413      	add	r3, r2
 8019eca:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8019ece:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019ed2:	2b00      	cmp	r3, #0
 8019ed4:	f47f af19 	bne.w	8019d0a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8019ed8:	2300      	movs	r3, #0
 8019eda:	e002      	b.n	8019ee2 <ip4_frag+0x26a>
      goto memerr;
 8019edc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8019ede:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019ee2:	4618      	mov	r0, r3
 8019ee4:	3748      	adds	r7, #72	@ 0x48
 8019ee6:	46bd      	mov	sp, r7
 8019ee8:	bd80      	pop	{r7, pc}
 8019eea:	bf00      	nop
 8019eec:	0801c3b8 	.word	0x0801c3b8
 8019ef0:	0801c594 	.word	0x0801c594
 8019ef4:	0801c400 	.word	0x0801c400
 8019ef8:	0801c5b0 	.word	0x0801c5b0
 8019efc:	0801c5d0 	.word	0x0801c5d0
 8019f00:	08019c11 	.word	0x08019c11

08019f04 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8019f04:	b580      	push	{r7, lr}
 8019f06:	b086      	sub	sp, #24
 8019f08:	af00      	add	r7, sp, #0
 8019f0a:	6078      	str	r0, [r7, #4]
 8019f0c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8019f0e:	230e      	movs	r3, #14
 8019f10:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8019f12:	687b      	ldr	r3, [r7, #4]
 8019f14:	895b      	ldrh	r3, [r3, #10]
 8019f16:	2b0e      	cmp	r3, #14
 8019f18:	d96e      	bls.n	8019ff8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8019f1a:	687b      	ldr	r3, [r7, #4]
 8019f1c:	7bdb      	ldrb	r3, [r3, #15]
 8019f1e:	2b00      	cmp	r3, #0
 8019f20:	d106      	bne.n	8019f30 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8019f22:	683b      	ldr	r3, [r7, #0]
 8019f24:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019f28:	3301      	adds	r3, #1
 8019f2a:	b2da      	uxtb	r2, r3
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8019f30:	687b      	ldr	r3, [r7, #4]
 8019f32:	685b      	ldr	r3, [r3, #4]
 8019f34:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8019f36:	693b      	ldr	r3, [r7, #16]
 8019f38:	7b1a      	ldrb	r2, [r3, #12]
 8019f3a:	7b5b      	ldrb	r3, [r3, #13]
 8019f3c:	021b      	lsls	r3, r3, #8
 8019f3e:	4313      	orrs	r3, r2
 8019f40:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8019f42:	693b      	ldr	r3, [r7, #16]
 8019f44:	781b      	ldrb	r3, [r3, #0]
 8019f46:	f003 0301 	and.w	r3, r3, #1
 8019f4a:	2b00      	cmp	r3, #0
 8019f4c:	d023      	beq.n	8019f96 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8019f4e:	693b      	ldr	r3, [r7, #16]
 8019f50:	781b      	ldrb	r3, [r3, #0]
 8019f52:	2b01      	cmp	r3, #1
 8019f54:	d10f      	bne.n	8019f76 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019f56:	693b      	ldr	r3, [r7, #16]
 8019f58:	785b      	ldrb	r3, [r3, #1]
 8019f5a:	2b00      	cmp	r3, #0
 8019f5c:	d11b      	bne.n	8019f96 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8019f5e:	693b      	ldr	r3, [r7, #16]
 8019f60:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019f62:	2b5e      	cmp	r3, #94	@ 0x5e
 8019f64:	d117      	bne.n	8019f96 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8019f66:	687b      	ldr	r3, [r7, #4]
 8019f68:	7b5b      	ldrb	r3, [r3, #13]
 8019f6a:	f043 0310 	orr.w	r3, r3, #16
 8019f6e:	b2da      	uxtb	r2, r3
 8019f70:	687b      	ldr	r3, [r7, #4]
 8019f72:	735a      	strb	r2, [r3, #13]
 8019f74:	e00f      	b.n	8019f96 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8019f76:	693b      	ldr	r3, [r7, #16]
 8019f78:	2206      	movs	r2, #6
 8019f7a:	4928      	ldr	r1, [pc, #160]	@ (801a01c <ethernet_input+0x118>)
 8019f7c:	4618      	mov	r0, r3
 8019f7e:	f000 faaa 	bl	801a4d6 <memcmp>
 8019f82:	4603      	mov	r3, r0
 8019f84:	2b00      	cmp	r3, #0
 8019f86:	d106      	bne.n	8019f96 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8019f88:	687b      	ldr	r3, [r7, #4]
 8019f8a:	7b5b      	ldrb	r3, [r3, #13]
 8019f8c:	f043 0308 	orr.w	r3, r3, #8
 8019f90:	b2da      	uxtb	r2, r3
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8019f96:	89fb      	ldrh	r3, [r7, #14]
 8019f98:	2b08      	cmp	r3, #8
 8019f9a:	d003      	beq.n	8019fa4 <ethernet_input+0xa0>
 8019f9c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8019fa0:	d014      	beq.n	8019fcc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8019fa2:	e032      	b.n	801a00a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019fa4:	683b      	ldr	r3, [r7, #0]
 8019fa6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019faa:	f003 0308 	and.w	r3, r3, #8
 8019fae:	2b00      	cmp	r3, #0
 8019fb0:	d024      	beq.n	8019ffc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8019fb2:	8afb      	ldrh	r3, [r7, #22]
 8019fb4:	4619      	mov	r1, r3
 8019fb6:	6878      	ldr	r0, [r7, #4]
 8019fb8:	f7fc fcaa 	bl	8016910 <pbuf_remove_header>
 8019fbc:	4603      	mov	r3, r0
 8019fbe:	2b00      	cmp	r3, #0
 8019fc0:	d11e      	bne.n	801a000 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8019fc2:	6839      	ldr	r1, [r7, #0]
 8019fc4:	6878      	ldr	r0, [r7, #4]
 8019fc6:	f7fe ff2b 	bl	8018e20 <ip4_input>
      break;
 8019fca:	e013      	b.n	8019ff4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019fcc:	683b      	ldr	r3, [r7, #0]
 8019fce:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019fd2:	f003 0308 	and.w	r3, r3, #8
 8019fd6:	2b00      	cmp	r3, #0
 8019fd8:	d014      	beq.n	801a004 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8019fda:	8afb      	ldrh	r3, [r7, #22]
 8019fdc:	4619      	mov	r1, r3
 8019fde:	6878      	ldr	r0, [r7, #4]
 8019fe0:	f7fc fc96 	bl	8016910 <pbuf_remove_header>
 8019fe4:	4603      	mov	r3, r0
 8019fe6:	2b00      	cmp	r3, #0
 8019fe8:	d10e      	bne.n	801a008 <ethernet_input+0x104>
        etharp_input(p, netif);
 8019fea:	6839      	ldr	r1, [r7, #0]
 8019fec:	6878      	ldr	r0, [r7, #4]
 8019fee:	f7fe f8cb 	bl	8018188 <etharp_input>
      break;
 8019ff2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8019ff4:	2300      	movs	r3, #0
 8019ff6:	e00c      	b.n	801a012 <ethernet_input+0x10e>
    goto free_and_return;
 8019ff8:	bf00      	nop
 8019ffa:	e006      	b.n	801a00a <ethernet_input+0x106>
        goto free_and_return;
 8019ffc:	bf00      	nop
 8019ffe:	e004      	b.n	801a00a <ethernet_input+0x106>
        goto free_and_return;
 801a000:	bf00      	nop
 801a002:	e002      	b.n	801a00a <ethernet_input+0x106>
        goto free_and_return;
 801a004:	bf00      	nop
 801a006:	e000      	b.n	801a00a <ethernet_input+0x106>
        goto free_and_return;
 801a008:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801a00a:	6878      	ldr	r0, [r7, #4]
 801a00c:	f7fc fd06 	bl	8016a1c <pbuf_free>
  return ERR_OK;
 801a010:	2300      	movs	r3, #0
}
 801a012:	4618      	mov	r0, r3
 801a014:	3718      	adds	r7, #24
 801a016:	46bd      	mov	sp, r7
 801a018:	bd80      	pop	{r7, pc}
 801a01a:	bf00      	nop
 801a01c:	0801c6f8 	.word	0x0801c6f8

0801a020 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801a020:	b580      	push	{r7, lr}
 801a022:	b086      	sub	sp, #24
 801a024:	af00      	add	r7, sp, #0
 801a026:	60f8      	str	r0, [r7, #12]
 801a028:	60b9      	str	r1, [r7, #8]
 801a02a:	607a      	str	r2, [r7, #4]
 801a02c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801a02e:	8c3b      	ldrh	r3, [r7, #32]
 801a030:	4618      	mov	r0, r3
 801a032:	f7fb fa8b 	bl	801554c <lwip_htons>
 801a036:	4603      	mov	r3, r0
 801a038:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801a03a:	210e      	movs	r1, #14
 801a03c:	68b8      	ldr	r0, [r7, #8]
 801a03e:	f7fc fc57 	bl	80168f0 <pbuf_add_header>
 801a042:	4603      	mov	r3, r0
 801a044:	2b00      	cmp	r3, #0
 801a046:	d125      	bne.n	801a094 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801a048:	68bb      	ldr	r3, [r7, #8]
 801a04a:	685b      	ldr	r3, [r3, #4]
 801a04c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801a04e:	693b      	ldr	r3, [r7, #16]
 801a050:	8afa      	ldrh	r2, [r7, #22]
 801a052:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801a054:	693b      	ldr	r3, [r7, #16]
 801a056:	2206      	movs	r2, #6
 801a058:	6839      	ldr	r1, [r7, #0]
 801a05a:	4618      	mov	r0, r3
 801a05c:	f000 fad1 	bl	801a602 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801a060:	693b      	ldr	r3, [r7, #16]
 801a062:	3306      	adds	r3, #6
 801a064:	2206      	movs	r2, #6
 801a066:	6879      	ldr	r1, [r7, #4]
 801a068:	4618      	mov	r0, r3
 801a06a:	f000 faca 	bl	801a602 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801a06e:	68fb      	ldr	r3, [r7, #12]
 801a070:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801a074:	2b06      	cmp	r3, #6
 801a076:	d006      	beq.n	801a086 <ethernet_output+0x66>
 801a078:	4b0a      	ldr	r3, [pc, #40]	@ (801a0a4 <ethernet_output+0x84>)
 801a07a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801a07e:	490a      	ldr	r1, [pc, #40]	@ (801a0a8 <ethernet_output+0x88>)
 801a080:	480a      	ldr	r0, [pc, #40]	@ (801a0ac <ethernet_output+0x8c>)
 801a082:	f000 f9d3 	bl	801a42c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801a086:	68fb      	ldr	r3, [r7, #12]
 801a088:	699b      	ldr	r3, [r3, #24]
 801a08a:	68b9      	ldr	r1, [r7, #8]
 801a08c:	68f8      	ldr	r0, [r7, #12]
 801a08e:	4798      	blx	r3
 801a090:	4603      	mov	r3, r0
 801a092:	e002      	b.n	801a09a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801a094:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801a096:	f06f 0301 	mvn.w	r3, #1
}
 801a09a:	4618      	mov	r0, r3
 801a09c:	3718      	adds	r7, #24
 801a09e:	46bd      	mov	sp, r7
 801a0a0:	bd80      	pop	{r7, pc}
 801a0a2:	bf00      	nop
 801a0a4:	0801c5e0 	.word	0x0801c5e0
 801a0a8:	0801c618 	.word	0x0801c618
 801a0ac:	0801c64c 	.word	0x0801c64c

0801a0b0 <malloc>:
 801a0b0:	4b02      	ldr	r3, [pc, #8]	@ (801a0bc <malloc+0xc>)
 801a0b2:	4601      	mov	r1, r0
 801a0b4:	6818      	ldr	r0, [r3, #0]
 801a0b6:	f000 b82d 	b.w	801a114 <_malloc_r>
 801a0ba:	bf00      	nop
 801a0bc:	20000018 	.word	0x20000018

0801a0c0 <free>:
 801a0c0:	4b02      	ldr	r3, [pc, #8]	@ (801a0cc <free+0xc>)
 801a0c2:	4601      	mov	r1, r0
 801a0c4:	6818      	ldr	r0, [r3, #0]
 801a0c6:	f000 bac9 	b.w	801a65c <_free_r>
 801a0ca:	bf00      	nop
 801a0cc:	20000018 	.word	0x20000018

0801a0d0 <sbrk_aligned>:
 801a0d0:	b570      	push	{r4, r5, r6, lr}
 801a0d2:	4e0f      	ldr	r6, [pc, #60]	@ (801a110 <sbrk_aligned+0x40>)
 801a0d4:	460c      	mov	r4, r1
 801a0d6:	6831      	ldr	r1, [r6, #0]
 801a0d8:	4605      	mov	r5, r0
 801a0da:	b911      	cbnz	r1, 801a0e2 <sbrk_aligned+0x12>
 801a0dc:	f000 fa48 	bl	801a570 <_sbrk_r>
 801a0e0:	6030      	str	r0, [r6, #0]
 801a0e2:	4621      	mov	r1, r4
 801a0e4:	4628      	mov	r0, r5
 801a0e6:	f000 fa43 	bl	801a570 <_sbrk_r>
 801a0ea:	1c43      	adds	r3, r0, #1
 801a0ec:	d103      	bne.n	801a0f6 <sbrk_aligned+0x26>
 801a0ee:	f04f 34ff 	mov.w	r4, #4294967295
 801a0f2:	4620      	mov	r0, r4
 801a0f4:	bd70      	pop	{r4, r5, r6, pc}
 801a0f6:	1cc4      	adds	r4, r0, #3
 801a0f8:	f024 0403 	bic.w	r4, r4, #3
 801a0fc:	42a0      	cmp	r0, r4
 801a0fe:	d0f8      	beq.n	801a0f2 <sbrk_aligned+0x22>
 801a100:	1a21      	subs	r1, r4, r0
 801a102:	4628      	mov	r0, r5
 801a104:	f000 fa34 	bl	801a570 <_sbrk_r>
 801a108:	3001      	adds	r0, #1
 801a10a:	d1f2      	bne.n	801a0f2 <sbrk_aligned+0x22>
 801a10c:	e7ef      	b.n	801a0ee <sbrk_aligned+0x1e>
 801a10e:	bf00      	nop
 801a110:	200163c0 	.word	0x200163c0

0801a114 <_malloc_r>:
 801a114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a118:	1ccd      	adds	r5, r1, #3
 801a11a:	f025 0503 	bic.w	r5, r5, #3
 801a11e:	3508      	adds	r5, #8
 801a120:	2d0c      	cmp	r5, #12
 801a122:	bf38      	it	cc
 801a124:	250c      	movcc	r5, #12
 801a126:	2d00      	cmp	r5, #0
 801a128:	4606      	mov	r6, r0
 801a12a:	db01      	blt.n	801a130 <_malloc_r+0x1c>
 801a12c:	42a9      	cmp	r1, r5
 801a12e:	d904      	bls.n	801a13a <_malloc_r+0x26>
 801a130:	230c      	movs	r3, #12
 801a132:	6033      	str	r3, [r6, #0]
 801a134:	2000      	movs	r0, #0
 801a136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a13a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801a210 <_malloc_r+0xfc>
 801a13e:	f000 f869 	bl	801a214 <__malloc_lock>
 801a142:	f8d8 3000 	ldr.w	r3, [r8]
 801a146:	461c      	mov	r4, r3
 801a148:	bb44      	cbnz	r4, 801a19c <_malloc_r+0x88>
 801a14a:	4629      	mov	r1, r5
 801a14c:	4630      	mov	r0, r6
 801a14e:	f7ff ffbf 	bl	801a0d0 <sbrk_aligned>
 801a152:	1c43      	adds	r3, r0, #1
 801a154:	4604      	mov	r4, r0
 801a156:	d158      	bne.n	801a20a <_malloc_r+0xf6>
 801a158:	f8d8 4000 	ldr.w	r4, [r8]
 801a15c:	4627      	mov	r7, r4
 801a15e:	2f00      	cmp	r7, #0
 801a160:	d143      	bne.n	801a1ea <_malloc_r+0xd6>
 801a162:	2c00      	cmp	r4, #0
 801a164:	d04b      	beq.n	801a1fe <_malloc_r+0xea>
 801a166:	6823      	ldr	r3, [r4, #0]
 801a168:	4639      	mov	r1, r7
 801a16a:	4630      	mov	r0, r6
 801a16c:	eb04 0903 	add.w	r9, r4, r3
 801a170:	f000 f9fe 	bl	801a570 <_sbrk_r>
 801a174:	4581      	cmp	r9, r0
 801a176:	d142      	bne.n	801a1fe <_malloc_r+0xea>
 801a178:	6821      	ldr	r1, [r4, #0]
 801a17a:	1a6d      	subs	r5, r5, r1
 801a17c:	4629      	mov	r1, r5
 801a17e:	4630      	mov	r0, r6
 801a180:	f7ff ffa6 	bl	801a0d0 <sbrk_aligned>
 801a184:	3001      	adds	r0, #1
 801a186:	d03a      	beq.n	801a1fe <_malloc_r+0xea>
 801a188:	6823      	ldr	r3, [r4, #0]
 801a18a:	442b      	add	r3, r5
 801a18c:	6023      	str	r3, [r4, #0]
 801a18e:	f8d8 3000 	ldr.w	r3, [r8]
 801a192:	685a      	ldr	r2, [r3, #4]
 801a194:	bb62      	cbnz	r2, 801a1f0 <_malloc_r+0xdc>
 801a196:	f8c8 7000 	str.w	r7, [r8]
 801a19a:	e00f      	b.n	801a1bc <_malloc_r+0xa8>
 801a19c:	6822      	ldr	r2, [r4, #0]
 801a19e:	1b52      	subs	r2, r2, r5
 801a1a0:	d420      	bmi.n	801a1e4 <_malloc_r+0xd0>
 801a1a2:	2a0b      	cmp	r2, #11
 801a1a4:	d917      	bls.n	801a1d6 <_malloc_r+0xc2>
 801a1a6:	1961      	adds	r1, r4, r5
 801a1a8:	42a3      	cmp	r3, r4
 801a1aa:	6025      	str	r5, [r4, #0]
 801a1ac:	bf18      	it	ne
 801a1ae:	6059      	strne	r1, [r3, #4]
 801a1b0:	6863      	ldr	r3, [r4, #4]
 801a1b2:	bf08      	it	eq
 801a1b4:	f8c8 1000 	streq.w	r1, [r8]
 801a1b8:	5162      	str	r2, [r4, r5]
 801a1ba:	604b      	str	r3, [r1, #4]
 801a1bc:	4630      	mov	r0, r6
 801a1be:	f000 f82f 	bl	801a220 <__malloc_unlock>
 801a1c2:	f104 000b 	add.w	r0, r4, #11
 801a1c6:	1d23      	adds	r3, r4, #4
 801a1c8:	f020 0007 	bic.w	r0, r0, #7
 801a1cc:	1ac2      	subs	r2, r0, r3
 801a1ce:	bf1c      	itt	ne
 801a1d0:	1a1b      	subne	r3, r3, r0
 801a1d2:	50a3      	strne	r3, [r4, r2]
 801a1d4:	e7af      	b.n	801a136 <_malloc_r+0x22>
 801a1d6:	6862      	ldr	r2, [r4, #4]
 801a1d8:	42a3      	cmp	r3, r4
 801a1da:	bf0c      	ite	eq
 801a1dc:	f8c8 2000 	streq.w	r2, [r8]
 801a1e0:	605a      	strne	r2, [r3, #4]
 801a1e2:	e7eb      	b.n	801a1bc <_malloc_r+0xa8>
 801a1e4:	4623      	mov	r3, r4
 801a1e6:	6864      	ldr	r4, [r4, #4]
 801a1e8:	e7ae      	b.n	801a148 <_malloc_r+0x34>
 801a1ea:	463c      	mov	r4, r7
 801a1ec:	687f      	ldr	r7, [r7, #4]
 801a1ee:	e7b6      	b.n	801a15e <_malloc_r+0x4a>
 801a1f0:	461a      	mov	r2, r3
 801a1f2:	685b      	ldr	r3, [r3, #4]
 801a1f4:	42a3      	cmp	r3, r4
 801a1f6:	d1fb      	bne.n	801a1f0 <_malloc_r+0xdc>
 801a1f8:	2300      	movs	r3, #0
 801a1fa:	6053      	str	r3, [r2, #4]
 801a1fc:	e7de      	b.n	801a1bc <_malloc_r+0xa8>
 801a1fe:	230c      	movs	r3, #12
 801a200:	6033      	str	r3, [r6, #0]
 801a202:	4630      	mov	r0, r6
 801a204:	f000 f80c 	bl	801a220 <__malloc_unlock>
 801a208:	e794      	b.n	801a134 <_malloc_r+0x20>
 801a20a:	6005      	str	r5, [r0, #0]
 801a20c:	e7d6      	b.n	801a1bc <_malloc_r+0xa8>
 801a20e:	bf00      	nop
 801a210:	200163c4 	.word	0x200163c4

0801a214 <__malloc_lock>:
 801a214:	4801      	ldr	r0, [pc, #4]	@ (801a21c <__malloc_lock+0x8>)
 801a216:	f000 b9f2 	b.w	801a5fe <__retarget_lock_acquire_recursive>
 801a21a:	bf00      	nop
 801a21c:	20016508 	.word	0x20016508

0801a220 <__malloc_unlock>:
 801a220:	4801      	ldr	r0, [pc, #4]	@ (801a228 <__malloc_unlock+0x8>)
 801a222:	f000 b9ed 	b.w	801a600 <__retarget_lock_release_recursive>
 801a226:	bf00      	nop
 801a228:	20016508 	.word	0x20016508

0801a22c <rand>:
 801a22c:	4b16      	ldr	r3, [pc, #88]	@ (801a288 <rand+0x5c>)
 801a22e:	b510      	push	{r4, lr}
 801a230:	681c      	ldr	r4, [r3, #0]
 801a232:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a234:	b9b3      	cbnz	r3, 801a264 <rand+0x38>
 801a236:	2018      	movs	r0, #24
 801a238:	f7ff ff3a 	bl	801a0b0 <malloc>
 801a23c:	4602      	mov	r2, r0
 801a23e:	6320      	str	r0, [r4, #48]	@ 0x30
 801a240:	b920      	cbnz	r0, 801a24c <rand+0x20>
 801a242:	4b12      	ldr	r3, [pc, #72]	@ (801a28c <rand+0x60>)
 801a244:	4812      	ldr	r0, [pc, #72]	@ (801a290 <rand+0x64>)
 801a246:	2152      	movs	r1, #82	@ 0x52
 801a248:	f000 f9ea 	bl	801a620 <__assert_func>
 801a24c:	4911      	ldr	r1, [pc, #68]	@ (801a294 <rand+0x68>)
 801a24e:	4b12      	ldr	r3, [pc, #72]	@ (801a298 <rand+0x6c>)
 801a250:	e9c0 1300 	strd	r1, r3, [r0]
 801a254:	4b11      	ldr	r3, [pc, #68]	@ (801a29c <rand+0x70>)
 801a256:	6083      	str	r3, [r0, #8]
 801a258:	230b      	movs	r3, #11
 801a25a:	8183      	strh	r3, [r0, #12]
 801a25c:	2100      	movs	r1, #0
 801a25e:	2001      	movs	r0, #1
 801a260:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801a264:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801a266:	480e      	ldr	r0, [pc, #56]	@ (801a2a0 <rand+0x74>)
 801a268:	690b      	ldr	r3, [r1, #16]
 801a26a:	694c      	ldr	r4, [r1, #20]
 801a26c:	4a0d      	ldr	r2, [pc, #52]	@ (801a2a4 <rand+0x78>)
 801a26e:	4358      	muls	r0, r3
 801a270:	fb02 0004 	mla	r0, r2, r4, r0
 801a274:	fba3 3202 	umull	r3, r2, r3, r2
 801a278:	3301      	adds	r3, #1
 801a27a:	eb40 0002 	adc.w	r0, r0, r2
 801a27e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801a282:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801a286:	bd10      	pop	{r4, pc}
 801a288:	20000018 	.word	0x20000018
 801a28c:	0801c706 	.word	0x0801c706
 801a290:	0801c71d 	.word	0x0801c71d
 801a294:	abcd330e 	.word	0xabcd330e
 801a298:	e66d1234 	.word	0xe66d1234
 801a29c:	0005deec 	.word	0x0005deec
 801a2a0:	5851f42d 	.word	0x5851f42d
 801a2a4:	4c957f2d 	.word	0x4c957f2d

0801a2a8 <std>:
 801a2a8:	2300      	movs	r3, #0
 801a2aa:	b510      	push	{r4, lr}
 801a2ac:	4604      	mov	r4, r0
 801a2ae:	e9c0 3300 	strd	r3, r3, [r0]
 801a2b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a2b6:	6083      	str	r3, [r0, #8]
 801a2b8:	8181      	strh	r1, [r0, #12]
 801a2ba:	6643      	str	r3, [r0, #100]	@ 0x64
 801a2bc:	81c2      	strh	r2, [r0, #14]
 801a2be:	6183      	str	r3, [r0, #24]
 801a2c0:	4619      	mov	r1, r3
 801a2c2:	2208      	movs	r2, #8
 801a2c4:	305c      	adds	r0, #92	@ 0x5c
 801a2c6:	f000 f916 	bl	801a4f6 <memset>
 801a2ca:	4b0d      	ldr	r3, [pc, #52]	@ (801a300 <std+0x58>)
 801a2cc:	6263      	str	r3, [r4, #36]	@ 0x24
 801a2ce:	4b0d      	ldr	r3, [pc, #52]	@ (801a304 <std+0x5c>)
 801a2d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 801a2d2:	4b0d      	ldr	r3, [pc, #52]	@ (801a308 <std+0x60>)
 801a2d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801a2d6:	4b0d      	ldr	r3, [pc, #52]	@ (801a30c <std+0x64>)
 801a2d8:	6323      	str	r3, [r4, #48]	@ 0x30
 801a2da:	4b0d      	ldr	r3, [pc, #52]	@ (801a310 <std+0x68>)
 801a2dc:	6224      	str	r4, [r4, #32]
 801a2de:	429c      	cmp	r4, r3
 801a2e0:	d006      	beq.n	801a2f0 <std+0x48>
 801a2e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801a2e6:	4294      	cmp	r4, r2
 801a2e8:	d002      	beq.n	801a2f0 <std+0x48>
 801a2ea:	33d0      	adds	r3, #208	@ 0xd0
 801a2ec:	429c      	cmp	r4, r3
 801a2ee:	d105      	bne.n	801a2fc <std+0x54>
 801a2f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801a2f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a2f8:	f000 b980 	b.w	801a5fc <__retarget_lock_init_recursive>
 801a2fc:	bd10      	pop	{r4, pc}
 801a2fe:	bf00      	nop
 801a300:	0801a451 	.word	0x0801a451
 801a304:	0801a473 	.word	0x0801a473
 801a308:	0801a4ab 	.word	0x0801a4ab
 801a30c:	0801a4cf 	.word	0x0801a4cf
 801a310:	200163c8 	.word	0x200163c8

0801a314 <stdio_exit_handler>:
 801a314:	4a02      	ldr	r2, [pc, #8]	@ (801a320 <stdio_exit_handler+0xc>)
 801a316:	4903      	ldr	r1, [pc, #12]	@ (801a324 <stdio_exit_handler+0x10>)
 801a318:	4803      	ldr	r0, [pc, #12]	@ (801a328 <stdio_exit_handler+0x14>)
 801a31a:	f000 b869 	b.w	801a3f0 <_fwalk_sglue>
 801a31e:	bf00      	nop
 801a320:	2000000c 	.word	0x2000000c
 801a324:	0801ad95 	.word	0x0801ad95
 801a328:	2000001c 	.word	0x2000001c

0801a32c <cleanup_stdio>:
 801a32c:	6841      	ldr	r1, [r0, #4]
 801a32e:	4b0c      	ldr	r3, [pc, #48]	@ (801a360 <cleanup_stdio+0x34>)
 801a330:	4299      	cmp	r1, r3
 801a332:	b510      	push	{r4, lr}
 801a334:	4604      	mov	r4, r0
 801a336:	d001      	beq.n	801a33c <cleanup_stdio+0x10>
 801a338:	f000 fd2c 	bl	801ad94 <_fflush_r>
 801a33c:	68a1      	ldr	r1, [r4, #8]
 801a33e:	4b09      	ldr	r3, [pc, #36]	@ (801a364 <cleanup_stdio+0x38>)
 801a340:	4299      	cmp	r1, r3
 801a342:	d002      	beq.n	801a34a <cleanup_stdio+0x1e>
 801a344:	4620      	mov	r0, r4
 801a346:	f000 fd25 	bl	801ad94 <_fflush_r>
 801a34a:	68e1      	ldr	r1, [r4, #12]
 801a34c:	4b06      	ldr	r3, [pc, #24]	@ (801a368 <cleanup_stdio+0x3c>)
 801a34e:	4299      	cmp	r1, r3
 801a350:	d004      	beq.n	801a35c <cleanup_stdio+0x30>
 801a352:	4620      	mov	r0, r4
 801a354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a358:	f000 bd1c 	b.w	801ad94 <_fflush_r>
 801a35c:	bd10      	pop	{r4, pc}
 801a35e:	bf00      	nop
 801a360:	200163c8 	.word	0x200163c8
 801a364:	20016430 	.word	0x20016430
 801a368:	20016498 	.word	0x20016498

0801a36c <global_stdio_init.part.0>:
 801a36c:	b510      	push	{r4, lr}
 801a36e:	4b0b      	ldr	r3, [pc, #44]	@ (801a39c <global_stdio_init.part.0+0x30>)
 801a370:	4c0b      	ldr	r4, [pc, #44]	@ (801a3a0 <global_stdio_init.part.0+0x34>)
 801a372:	4a0c      	ldr	r2, [pc, #48]	@ (801a3a4 <global_stdio_init.part.0+0x38>)
 801a374:	601a      	str	r2, [r3, #0]
 801a376:	4620      	mov	r0, r4
 801a378:	2200      	movs	r2, #0
 801a37a:	2104      	movs	r1, #4
 801a37c:	f7ff ff94 	bl	801a2a8 <std>
 801a380:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801a384:	2201      	movs	r2, #1
 801a386:	2109      	movs	r1, #9
 801a388:	f7ff ff8e 	bl	801a2a8 <std>
 801a38c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801a390:	2202      	movs	r2, #2
 801a392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a396:	2112      	movs	r1, #18
 801a398:	f7ff bf86 	b.w	801a2a8 <std>
 801a39c:	20016500 	.word	0x20016500
 801a3a0:	200163c8 	.word	0x200163c8
 801a3a4:	0801a315 	.word	0x0801a315

0801a3a8 <__sfp_lock_acquire>:
 801a3a8:	4801      	ldr	r0, [pc, #4]	@ (801a3b0 <__sfp_lock_acquire+0x8>)
 801a3aa:	f000 b928 	b.w	801a5fe <__retarget_lock_acquire_recursive>
 801a3ae:	bf00      	nop
 801a3b0:	20016509 	.word	0x20016509

0801a3b4 <__sfp_lock_release>:
 801a3b4:	4801      	ldr	r0, [pc, #4]	@ (801a3bc <__sfp_lock_release+0x8>)
 801a3b6:	f000 b923 	b.w	801a600 <__retarget_lock_release_recursive>
 801a3ba:	bf00      	nop
 801a3bc:	20016509 	.word	0x20016509

0801a3c0 <__sinit>:
 801a3c0:	b510      	push	{r4, lr}
 801a3c2:	4604      	mov	r4, r0
 801a3c4:	f7ff fff0 	bl	801a3a8 <__sfp_lock_acquire>
 801a3c8:	6a23      	ldr	r3, [r4, #32]
 801a3ca:	b11b      	cbz	r3, 801a3d4 <__sinit+0x14>
 801a3cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a3d0:	f7ff bff0 	b.w	801a3b4 <__sfp_lock_release>
 801a3d4:	4b04      	ldr	r3, [pc, #16]	@ (801a3e8 <__sinit+0x28>)
 801a3d6:	6223      	str	r3, [r4, #32]
 801a3d8:	4b04      	ldr	r3, [pc, #16]	@ (801a3ec <__sinit+0x2c>)
 801a3da:	681b      	ldr	r3, [r3, #0]
 801a3dc:	2b00      	cmp	r3, #0
 801a3de:	d1f5      	bne.n	801a3cc <__sinit+0xc>
 801a3e0:	f7ff ffc4 	bl	801a36c <global_stdio_init.part.0>
 801a3e4:	e7f2      	b.n	801a3cc <__sinit+0xc>
 801a3e6:	bf00      	nop
 801a3e8:	0801a32d 	.word	0x0801a32d
 801a3ec:	20016500 	.word	0x20016500

0801a3f0 <_fwalk_sglue>:
 801a3f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a3f4:	4607      	mov	r7, r0
 801a3f6:	4688      	mov	r8, r1
 801a3f8:	4614      	mov	r4, r2
 801a3fa:	2600      	movs	r6, #0
 801a3fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a400:	f1b9 0901 	subs.w	r9, r9, #1
 801a404:	d505      	bpl.n	801a412 <_fwalk_sglue+0x22>
 801a406:	6824      	ldr	r4, [r4, #0]
 801a408:	2c00      	cmp	r4, #0
 801a40a:	d1f7      	bne.n	801a3fc <_fwalk_sglue+0xc>
 801a40c:	4630      	mov	r0, r6
 801a40e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a412:	89ab      	ldrh	r3, [r5, #12]
 801a414:	2b01      	cmp	r3, #1
 801a416:	d907      	bls.n	801a428 <_fwalk_sglue+0x38>
 801a418:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a41c:	3301      	adds	r3, #1
 801a41e:	d003      	beq.n	801a428 <_fwalk_sglue+0x38>
 801a420:	4629      	mov	r1, r5
 801a422:	4638      	mov	r0, r7
 801a424:	47c0      	blx	r8
 801a426:	4306      	orrs	r6, r0
 801a428:	3568      	adds	r5, #104	@ 0x68
 801a42a:	e7e9      	b.n	801a400 <_fwalk_sglue+0x10>

0801a42c <iprintf>:
 801a42c:	b40f      	push	{r0, r1, r2, r3}
 801a42e:	b507      	push	{r0, r1, r2, lr}
 801a430:	4906      	ldr	r1, [pc, #24]	@ (801a44c <iprintf+0x20>)
 801a432:	ab04      	add	r3, sp, #16
 801a434:	6808      	ldr	r0, [r1, #0]
 801a436:	f853 2b04 	ldr.w	r2, [r3], #4
 801a43a:	6881      	ldr	r1, [r0, #8]
 801a43c:	9301      	str	r3, [sp, #4]
 801a43e:	f000 f981 	bl	801a744 <_vfiprintf_r>
 801a442:	b003      	add	sp, #12
 801a444:	f85d eb04 	ldr.w	lr, [sp], #4
 801a448:	b004      	add	sp, #16
 801a44a:	4770      	bx	lr
 801a44c:	20000018 	.word	0x20000018

0801a450 <__sread>:
 801a450:	b510      	push	{r4, lr}
 801a452:	460c      	mov	r4, r1
 801a454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a458:	f000 f878 	bl	801a54c <_read_r>
 801a45c:	2800      	cmp	r0, #0
 801a45e:	bfab      	itete	ge
 801a460:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801a462:	89a3      	ldrhlt	r3, [r4, #12]
 801a464:	181b      	addge	r3, r3, r0
 801a466:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801a46a:	bfac      	ite	ge
 801a46c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801a46e:	81a3      	strhlt	r3, [r4, #12]
 801a470:	bd10      	pop	{r4, pc}

0801a472 <__swrite>:
 801a472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a476:	461f      	mov	r7, r3
 801a478:	898b      	ldrh	r3, [r1, #12]
 801a47a:	05db      	lsls	r3, r3, #23
 801a47c:	4605      	mov	r5, r0
 801a47e:	460c      	mov	r4, r1
 801a480:	4616      	mov	r6, r2
 801a482:	d505      	bpl.n	801a490 <__swrite+0x1e>
 801a484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a488:	2302      	movs	r3, #2
 801a48a:	2200      	movs	r2, #0
 801a48c:	f000 f84c 	bl	801a528 <_lseek_r>
 801a490:	89a3      	ldrh	r3, [r4, #12]
 801a492:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a496:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801a49a:	81a3      	strh	r3, [r4, #12]
 801a49c:	4632      	mov	r2, r6
 801a49e:	463b      	mov	r3, r7
 801a4a0:	4628      	mov	r0, r5
 801a4a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a4a6:	f000 b873 	b.w	801a590 <_write_r>

0801a4aa <__sseek>:
 801a4aa:	b510      	push	{r4, lr}
 801a4ac:	460c      	mov	r4, r1
 801a4ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a4b2:	f000 f839 	bl	801a528 <_lseek_r>
 801a4b6:	1c43      	adds	r3, r0, #1
 801a4b8:	89a3      	ldrh	r3, [r4, #12]
 801a4ba:	bf15      	itete	ne
 801a4bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 801a4be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801a4c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801a4c6:	81a3      	strheq	r3, [r4, #12]
 801a4c8:	bf18      	it	ne
 801a4ca:	81a3      	strhne	r3, [r4, #12]
 801a4cc:	bd10      	pop	{r4, pc}

0801a4ce <__sclose>:
 801a4ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a4d2:	f000 b819 	b.w	801a508 <_close_r>

0801a4d6 <memcmp>:
 801a4d6:	b510      	push	{r4, lr}
 801a4d8:	3901      	subs	r1, #1
 801a4da:	4402      	add	r2, r0
 801a4dc:	4290      	cmp	r0, r2
 801a4de:	d101      	bne.n	801a4e4 <memcmp+0xe>
 801a4e0:	2000      	movs	r0, #0
 801a4e2:	e005      	b.n	801a4f0 <memcmp+0x1a>
 801a4e4:	7803      	ldrb	r3, [r0, #0]
 801a4e6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801a4ea:	42a3      	cmp	r3, r4
 801a4ec:	d001      	beq.n	801a4f2 <memcmp+0x1c>
 801a4ee:	1b18      	subs	r0, r3, r4
 801a4f0:	bd10      	pop	{r4, pc}
 801a4f2:	3001      	adds	r0, #1
 801a4f4:	e7f2      	b.n	801a4dc <memcmp+0x6>

0801a4f6 <memset>:
 801a4f6:	4402      	add	r2, r0
 801a4f8:	4603      	mov	r3, r0
 801a4fa:	4293      	cmp	r3, r2
 801a4fc:	d100      	bne.n	801a500 <memset+0xa>
 801a4fe:	4770      	bx	lr
 801a500:	f803 1b01 	strb.w	r1, [r3], #1
 801a504:	e7f9      	b.n	801a4fa <memset+0x4>
	...

0801a508 <_close_r>:
 801a508:	b538      	push	{r3, r4, r5, lr}
 801a50a:	4d06      	ldr	r5, [pc, #24]	@ (801a524 <_close_r+0x1c>)
 801a50c:	2300      	movs	r3, #0
 801a50e:	4604      	mov	r4, r0
 801a510:	4608      	mov	r0, r1
 801a512:	602b      	str	r3, [r5, #0]
 801a514:	f7f6 fe9e 	bl	8011254 <_close>
 801a518:	1c43      	adds	r3, r0, #1
 801a51a:	d102      	bne.n	801a522 <_close_r+0x1a>
 801a51c:	682b      	ldr	r3, [r5, #0]
 801a51e:	b103      	cbz	r3, 801a522 <_close_r+0x1a>
 801a520:	6023      	str	r3, [r4, #0]
 801a522:	bd38      	pop	{r3, r4, r5, pc}
 801a524:	20016504 	.word	0x20016504

0801a528 <_lseek_r>:
 801a528:	b538      	push	{r3, r4, r5, lr}
 801a52a:	4d07      	ldr	r5, [pc, #28]	@ (801a548 <_lseek_r+0x20>)
 801a52c:	4604      	mov	r4, r0
 801a52e:	4608      	mov	r0, r1
 801a530:	4611      	mov	r1, r2
 801a532:	2200      	movs	r2, #0
 801a534:	602a      	str	r2, [r5, #0]
 801a536:	461a      	mov	r2, r3
 801a538:	f7f6 feb3 	bl	80112a2 <_lseek>
 801a53c:	1c43      	adds	r3, r0, #1
 801a53e:	d102      	bne.n	801a546 <_lseek_r+0x1e>
 801a540:	682b      	ldr	r3, [r5, #0]
 801a542:	b103      	cbz	r3, 801a546 <_lseek_r+0x1e>
 801a544:	6023      	str	r3, [r4, #0]
 801a546:	bd38      	pop	{r3, r4, r5, pc}
 801a548:	20016504 	.word	0x20016504

0801a54c <_read_r>:
 801a54c:	b538      	push	{r3, r4, r5, lr}
 801a54e:	4d07      	ldr	r5, [pc, #28]	@ (801a56c <_read_r+0x20>)
 801a550:	4604      	mov	r4, r0
 801a552:	4608      	mov	r0, r1
 801a554:	4611      	mov	r1, r2
 801a556:	2200      	movs	r2, #0
 801a558:	602a      	str	r2, [r5, #0]
 801a55a:	461a      	mov	r2, r3
 801a55c:	f7f6 fe41 	bl	80111e2 <_read>
 801a560:	1c43      	adds	r3, r0, #1
 801a562:	d102      	bne.n	801a56a <_read_r+0x1e>
 801a564:	682b      	ldr	r3, [r5, #0]
 801a566:	b103      	cbz	r3, 801a56a <_read_r+0x1e>
 801a568:	6023      	str	r3, [r4, #0]
 801a56a:	bd38      	pop	{r3, r4, r5, pc}
 801a56c:	20016504 	.word	0x20016504

0801a570 <_sbrk_r>:
 801a570:	b538      	push	{r3, r4, r5, lr}
 801a572:	4d06      	ldr	r5, [pc, #24]	@ (801a58c <_sbrk_r+0x1c>)
 801a574:	2300      	movs	r3, #0
 801a576:	4604      	mov	r4, r0
 801a578:	4608      	mov	r0, r1
 801a57a:	602b      	str	r3, [r5, #0]
 801a57c:	f7f6 fe9e 	bl	80112bc <_sbrk>
 801a580:	1c43      	adds	r3, r0, #1
 801a582:	d102      	bne.n	801a58a <_sbrk_r+0x1a>
 801a584:	682b      	ldr	r3, [r5, #0]
 801a586:	b103      	cbz	r3, 801a58a <_sbrk_r+0x1a>
 801a588:	6023      	str	r3, [r4, #0]
 801a58a:	bd38      	pop	{r3, r4, r5, pc}
 801a58c:	20016504 	.word	0x20016504

0801a590 <_write_r>:
 801a590:	b538      	push	{r3, r4, r5, lr}
 801a592:	4d07      	ldr	r5, [pc, #28]	@ (801a5b0 <_write_r+0x20>)
 801a594:	4604      	mov	r4, r0
 801a596:	4608      	mov	r0, r1
 801a598:	4611      	mov	r1, r2
 801a59a:	2200      	movs	r2, #0
 801a59c:	602a      	str	r2, [r5, #0]
 801a59e:	461a      	mov	r2, r3
 801a5a0:	f7f6 fe3c 	bl	801121c <_write>
 801a5a4:	1c43      	adds	r3, r0, #1
 801a5a6:	d102      	bne.n	801a5ae <_write_r+0x1e>
 801a5a8:	682b      	ldr	r3, [r5, #0]
 801a5aa:	b103      	cbz	r3, 801a5ae <_write_r+0x1e>
 801a5ac:	6023      	str	r3, [r4, #0]
 801a5ae:	bd38      	pop	{r3, r4, r5, pc}
 801a5b0:	20016504 	.word	0x20016504

0801a5b4 <__libc_init_array>:
 801a5b4:	b570      	push	{r4, r5, r6, lr}
 801a5b6:	4d0d      	ldr	r5, [pc, #52]	@ (801a5ec <__libc_init_array+0x38>)
 801a5b8:	4c0d      	ldr	r4, [pc, #52]	@ (801a5f0 <__libc_init_array+0x3c>)
 801a5ba:	1b64      	subs	r4, r4, r5
 801a5bc:	10a4      	asrs	r4, r4, #2
 801a5be:	2600      	movs	r6, #0
 801a5c0:	42a6      	cmp	r6, r4
 801a5c2:	d109      	bne.n	801a5d8 <__libc_init_array+0x24>
 801a5c4:	4d0b      	ldr	r5, [pc, #44]	@ (801a5f4 <__libc_init_array+0x40>)
 801a5c6:	4c0c      	ldr	r4, [pc, #48]	@ (801a5f8 <__libc_init_array+0x44>)
 801a5c8:	f000 fd82 	bl	801b0d0 <_init>
 801a5cc:	1b64      	subs	r4, r4, r5
 801a5ce:	10a4      	asrs	r4, r4, #2
 801a5d0:	2600      	movs	r6, #0
 801a5d2:	42a6      	cmp	r6, r4
 801a5d4:	d105      	bne.n	801a5e2 <__libc_init_array+0x2e>
 801a5d6:	bd70      	pop	{r4, r5, r6, pc}
 801a5d8:	f855 3b04 	ldr.w	r3, [r5], #4
 801a5dc:	4798      	blx	r3
 801a5de:	3601      	adds	r6, #1
 801a5e0:	e7ee      	b.n	801a5c0 <__libc_init_array+0xc>
 801a5e2:	f855 3b04 	ldr.w	r3, [r5], #4
 801a5e6:	4798      	blx	r3
 801a5e8:	3601      	adds	r6, #1
 801a5ea:	e7f2      	b.n	801a5d2 <__libc_init_array+0x1e>
 801a5ec:	0801c7ec 	.word	0x0801c7ec
 801a5f0:	0801c7ec 	.word	0x0801c7ec
 801a5f4:	0801c7ec 	.word	0x0801c7ec
 801a5f8:	0801c7f0 	.word	0x0801c7f0

0801a5fc <__retarget_lock_init_recursive>:
 801a5fc:	4770      	bx	lr

0801a5fe <__retarget_lock_acquire_recursive>:
 801a5fe:	4770      	bx	lr

0801a600 <__retarget_lock_release_recursive>:
 801a600:	4770      	bx	lr

0801a602 <memcpy>:
 801a602:	440a      	add	r2, r1
 801a604:	4291      	cmp	r1, r2
 801a606:	f100 33ff 	add.w	r3, r0, #4294967295
 801a60a:	d100      	bne.n	801a60e <memcpy+0xc>
 801a60c:	4770      	bx	lr
 801a60e:	b510      	push	{r4, lr}
 801a610:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a614:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a618:	4291      	cmp	r1, r2
 801a61a:	d1f9      	bne.n	801a610 <memcpy+0xe>
 801a61c:	bd10      	pop	{r4, pc}
	...

0801a620 <__assert_func>:
 801a620:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a622:	4614      	mov	r4, r2
 801a624:	461a      	mov	r2, r3
 801a626:	4b09      	ldr	r3, [pc, #36]	@ (801a64c <__assert_func+0x2c>)
 801a628:	681b      	ldr	r3, [r3, #0]
 801a62a:	4605      	mov	r5, r0
 801a62c:	68d8      	ldr	r0, [r3, #12]
 801a62e:	b14c      	cbz	r4, 801a644 <__assert_func+0x24>
 801a630:	4b07      	ldr	r3, [pc, #28]	@ (801a650 <__assert_func+0x30>)
 801a632:	9100      	str	r1, [sp, #0]
 801a634:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a638:	4906      	ldr	r1, [pc, #24]	@ (801a654 <__assert_func+0x34>)
 801a63a:	462b      	mov	r3, r5
 801a63c:	f000 fbd2 	bl	801ade4 <fiprintf>
 801a640:	f000 fc76 	bl	801af30 <abort>
 801a644:	4b04      	ldr	r3, [pc, #16]	@ (801a658 <__assert_func+0x38>)
 801a646:	461c      	mov	r4, r3
 801a648:	e7f3      	b.n	801a632 <__assert_func+0x12>
 801a64a:	bf00      	nop
 801a64c:	20000018 	.word	0x20000018
 801a650:	0801c775 	.word	0x0801c775
 801a654:	0801c782 	.word	0x0801c782
 801a658:	0801c7b0 	.word	0x0801c7b0

0801a65c <_free_r>:
 801a65c:	b538      	push	{r3, r4, r5, lr}
 801a65e:	4605      	mov	r5, r0
 801a660:	2900      	cmp	r1, #0
 801a662:	d041      	beq.n	801a6e8 <_free_r+0x8c>
 801a664:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a668:	1f0c      	subs	r4, r1, #4
 801a66a:	2b00      	cmp	r3, #0
 801a66c:	bfb8      	it	lt
 801a66e:	18e4      	addlt	r4, r4, r3
 801a670:	f7ff fdd0 	bl	801a214 <__malloc_lock>
 801a674:	4a1d      	ldr	r2, [pc, #116]	@ (801a6ec <_free_r+0x90>)
 801a676:	6813      	ldr	r3, [r2, #0]
 801a678:	b933      	cbnz	r3, 801a688 <_free_r+0x2c>
 801a67a:	6063      	str	r3, [r4, #4]
 801a67c:	6014      	str	r4, [r2, #0]
 801a67e:	4628      	mov	r0, r5
 801a680:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a684:	f7ff bdcc 	b.w	801a220 <__malloc_unlock>
 801a688:	42a3      	cmp	r3, r4
 801a68a:	d908      	bls.n	801a69e <_free_r+0x42>
 801a68c:	6820      	ldr	r0, [r4, #0]
 801a68e:	1821      	adds	r1, r4, r0
 801a690:	428b      	cmp	r3, r1
 801a692:	bf01      	itttt	eq
 801a694:	6819      	ldreq	r1, [r3, #0]
 801a696:	685b      	ldreq	r3, [r3, #4]
 801a698:	1809      	addeq	r1, r1, r0
 801a69a:	6021      	streq	r1, [r4, #0]
 801a69c:	e7ed      	b.n	801a67a <_free_r+0x1e>
 801a69e:	461a      	mov	r2, r3
 801a6a0:	685b      	ldr	r3, [r3, #4]
 801a6a2:	b10b      	cbz	r3, 801a6a8 <_free_r+0x4c>
 801a6a4:	42a3      	cmp	r3, r4
 801a6a6:	d9fa      	bls.n	801a69e <_free_r+0x42>
 801a6a8:	6811      	ldr	r1, [r2, #0]
 801a6aa:	1850      	adds	r0, r2, r1
 801a6ac:	42a0      	cmp	r0, r4
 801a6ae:	d10b      	bne.n	801a6c8 <_free_r+0x6c>
 801a6b0:	6820      	ldr	r0, [r4, #0]
 801a6b2:	4401      	add	r1, r0
 801a6b4:	1850      	adds	r0, r2, r1
 801a6b6:	4283      	cmp	r3, r0
 801a6b8:	6011      	str	r1, [r2, #0]
 801a6ba:	d1e0      	bne.n	801a67e <_free_r+0x22>
 801a6bc:	6818      	ldr	r0, [r3, #0]
 801a6be:	685b      	ldr	r3, [r3, #4]
 801a6c0:	6053      	str	r3, [r2, #4]
 801a6c2:	4408      	add	r0, r1
 801a6c4:	6010      	str	r0, [r2, #0]
 801a6c6:	e7da      	b.n	801a67e <_free_r+0x22>
 801a6c8:	d902      	bls.n	801a6d0 <_free_r+0x74>
 801a6ca:	230c      	movs	r3, #12
 801a6cc:	602b      	str	r3, [r5, #0]
 801a6ce:	e7d6      	b.n	801a67e <_free_r+0x22>
 801a6d0:	6820      	ldr	r0, [r4, #0]
 801a6d2:	1821      	adds	r1, r4, r0
 801a6d4:	428b      	cmp	r3, r1
 801a6d6:	bf04      	itt	eq
 801a6d8:	6819      	ldreq	r1, [r3, #0]
 801a6da:	685b      	ldreq	r3, [r3, #4]
 801a6dc:	6063      	str	r3, [r4, #4]
 801a6de:	bf04      	itt	eq
 801a6e0:	1809      	addeq	r1, r1, r0
 801a6e2:	6021      	streq	r1, [r4, #0]
 801a6e4:	6054      	str	r4, [r2, #4]
 801a6e6:	e7ca      	b.n	801a67e <_free_r+0x22>
 801a6e8:	bd38      	pop	{r3, r4, r5, pc}
 801a6ea:	bf00      	nop
 801a6ec:	200163c4 	.word	0x200163c4

0801a6f0 <__sfputc_r>:
 801a6f0:	6893      	ldr	r3, [r2, #8]
 801a6f2:	3b01      	subs	r3, #1
 801a6f4:	2b00      	cmp	r3, #0
 801a6f6:	b410      	push	{r4}
 801a6f8:	6093      	str	r3, [r2, #8]
 801a6fa:	da08      	bge.n	801a70e <__sfputc_r+0x1e>
 801a6fc:	6994      	ldr	r4, [r2, #24]
 801a6fe:	42a3      	cmp	r3, r4
 801a700:	db01      	blt.n	801a706 <__sfputc_r+0x16>
 801a702:	290a      	cmp	r1, #10
 801a704:	d103      	bne.n	801a70e <__sfputc_r+0x1e>
 801a706:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a70a:	f000 bb7d 	b.w	801ae08 <__swbuf_r>
 801a70e:	6813      	ldr	r3, [r2, #0]
 801a710:	1c58      	adds	r0, r3, #1
 801a712:	6010      	str	r0, [r2, #0]
 801a714:	7019      	strb	r1, [r3, #0]
 801a716:	4608      	mov	r0, r1
 801a718:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a71c:	4770      	bx	lr

0801a71e <__sfputs_r>:
 801a71e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a720:	4606      	mov	r6, r0
 801a722:	460f      	mov	r7, r1
 801a724:	4614      	mov	r4, r2
 801a726:	18d5      	adds	r5, r2, r3
 801a728:	42ac      	cmp	r4, r5
 801a72a:	d101      	bne.n	801a730 <__sfputs_r+0x12>
 801a72c:	2000      	movs	r0, #0
 801a72e:	e007      	b.n	801a740 <__sfputs_r+0x22>
 801a730:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a734:	463a      	mov	r2, r7
 801a736:	4630      	mov	r0, r6
 801a738:	f7ff ffda 	bl	801a6f0 <__sfputc_r>
 801a73c:	1c43      	adds	r3, r0, #1
 801a73e:	d1f3      	bne.n	801a728 <__sfputs_r+0xa>
 801a740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a744 <_vfiprintf_r>:
 801a744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a748:	460d      	mov	r5, r1
 801a74a:	b09d      	sub	sp, #116	@ 0x74
 801a74c:	4614      	mov	r4, r2
 801a74e:	4698      	mov	r8, r3
 801a750:	4606      	mov	r6, r0
 801a752:	b118      	cbz	r0, 801a75c <_vfiprintf_r+0x18>
 801a754:	6a03      	ldr	r3, [r0, #32]
 801a756:	b90b      	cbnz	r3, 801a75c <_vfiprintf_r+0x18>
 801a758:	f7ff fe32 	bl	801a3c0 <__sinit>
 801a75c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a75e:	07d9      	lsls	r1, r3, #31
 801a760:	d405      	bmi.n	801a76e <_vfiprintf_r+0x2a>
 801a762:	89ab      	ldrh	r3, [r5, #12]
 801a764:	059a      	lsls	r2, r3, #22
 801a766:	d402      	bmi.n	801a76e <_vfiprintf_r+0x2a>
 801a768:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a76a:	f7ff ff48 	bl	801a5fe <__retarget_lock_acquire_recursive>
 801a76e:	89ab      	ldrh	r3, [r5, #12]
 801a770:	071b      	lsls	r3, r3, #28
 801a772:	d501      	bpl.n	801a778 <_vfiprintf_r+0x34>
 801a774:	692b      	ldr	r3, [r5, #16]
 801a776:	b99b      	cbnz	r3, 801a7a0 <_vfiprintf_r+0x5c>
 801a778:	4629      	mov	r1, r5
 801a77a:	4630      	mov	r0, r6
 801a77c:	f000 fb82 	bl	801ae84 <__swsetup_r>
 801a780:	b170      	cbz	r0, 801a7a0 <_vfiprintf_r+0x5c>
 801a782:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a784:	07dc      	lsls	r4, r3, #31
 801a786:	d504      	bpl.n	801a792 <_vfiprintf_r+0x4e>
 801a788:	f04f 30ff 	mov.w	r0, #4294967295
 801a78c:	b01d      	add	sp, #116	@ 0x74
 801a78e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a792:	89ab      	ldrh	r3, [r5, #12]
 801a794:	0598      	lsls	r0, r3, #22
 801a796:	d4f7      	bmi.n	801a788 <_vfiprintf_r+0x44>
 801a798:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a79a:	f7ff ff31 	bl	801a600 <__retarget_lock_release_recursive>
 801a79e:	e7f3      	b.n	801a788 <_vfiprintf_r+0x44>
 801a7a0:	2300      	movs	r3, #0
 801a7a2:	9309      	str	r3, [sp, #36]	@ 0x24
 801a7a4:	2320      	movs	r3, #32
 801a7a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a7aa:	f8cd 800c 	str.w	r8, [sp, #12]
 801a7ae:	2330      	movs	r3, #48	@ 0x30
 801a7b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801a960 <_vfiprintf_r+0x21c>
 801a7b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a7b8:	f04f 0901 	mov.w	r9, #1
 801a7bc:	4623      	mov	r3, r4
 801a7be:	469a      	mov	sl, r3
 801a7c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a7c4:	b10a      	cbz	r2, 801a7ca <_vfiprintf_r+0x86>
 801a7c6:	2a25      	cmp	r2, #37	@ 0x25
 801a7c8:	d1f9      	bne.n	801a7be <_vfiprintf_r+0x7a>
 801a7ca:	ebba 0b04 	subs.w	fp, sl, r4
 801a7ce:	d00b      	beq.n	801a7e8 <_vfiprintf_r+0xa4>
 801a7d0:	465b      	mov	r3, fp
 801a7d2:	4622      	mov	r2, r4
 801a7d4:	4629      	mov	r1, r5
 801a7d6:	4630      	mov	r0, r6
 801a7d8:	f7ff ffa1 	bl	801a71e <__sfputs_r>
 801a7dc:	3001      	adds	r0, #1
 801a7de:	f000 80a7 	beq.w	801a930 <_vfiprintf_r+0x1ec>
 801a7e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a7e4:	445a      	add	r2, fp
 801a7e6:	9209      	str	r2, [sp, #36]	@ 0x24
 801a7e8:	f89a 3000 	ldrb.w	r3, [sl]
 801a7ec:	2b00      	cmp	r3, #0
 801a7ee:	f000 809f 	beq.w	801a930 <_vfiprintf_r+0x1ec>
 801a7f2:	2300      	movs	r3, #0
 801a7f4:	f04f 32ff 	mov.w	r2, #4294967295
 801a7f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a7fc:	f10a 0a01 	add.w	sl, sl, #1
 801a800:	9304      	str	r3, [sp, #16]
 801a802:	9307      	str	r3, [sp, #28]
 801a804:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a808:	931a      	str	r3, [sp, #104]	@ 0x68
 801a80a:	4654      	mov	r4, sl
 801a80c:	2205      	movs	r2, #5
 801a80e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a812:	4853      	ldr	r0, [pc, #332]	@ (801a960 <_vfiprintf_r+0x21c>)
 801a814:	f7f5 fcec 	bl	80101f0 <memchr>
 801a818:	9a04      	ldr	r2, [sp, #16]
 801a81a:	b9d8      	cbnz	r0, 801a854 <_vfiprintf_r+0x110>
 801a81c:	06d1      	lsls	r1, r2, #27
 801a81e:	bf44      	itt	mi
 801a820:	2320      	movmi	r3, #32
 801a822:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a826:	0713      	lsls	r3, r2, #28
 801a828:	bf44      	itt	mi
 801a82a:	232b      	movmi	r3, #43	@ 0x2b
 801a82c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a830:	f89a 3000 	ldrb.w	r3, [sl]
 801a834:	2b2a      	cmp	r3, #42	@ 0x2a
 801a836:	d015      	beq.n	801a864 <_vfiprintf_r+0x120>
 801a838:	9a07      	ldr	r2, [sp, #28]
 801a83a:	4654      	mov	r4, sl
 801a83c:	2000      	movs	r0, #0
 801a83e:	f04f 0c0a 	mov.w	ip, #10
 801a842:	4621      	mov	r1, r4
 801a844:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a848:	3b30      	subs	r3, #48	@ 0x30
 801a84a:	2b09      	cmp	r3, #9
 801a84c:	d94b      	bls.n	801a8e6 <_vfiprintf_r+0x1a2>
 801a84e:	b1b0      	cbz	r0, 801a87e <_vfiprintf_r+0x13a>
 801a850:	9207      	str	r2, [sp, #28]
 801a852:	e014      	b.n	801a87e <_vfiprintf_r+0x13a>
 801a854:	eba0 0308 	sub.w	r3, r0, r8
 801a858:	fa09 f303 	lsl.w	r3, r9, r3
 801a85c:	4313      	orrs	r3, r2
 801a85e:	9304      	str	r3, [sp, #16]
 801a860:	46a2      	mov	sl, r4
 801a862:	e7d2      	b.n	801a80a <_vfiprintf_r+0xc6>
 801a864:	9b03      	ldr	r3, [sp, #12]
 801a866:	1d19      	adds	r1, r3, #4
 801a868:	681b      	ldr	r3, [r3, #0]
 801a86a:	9103      	str	r1, [sp, #12]
 801a86c:	2b00      	cmp	r3, #0
 801a86e:	bfbb      	ittet	lt
 801a870:	425b      	neglt	r3, r3
 801a872:	f042 0202 	orrlt.w	r2, r2, #2
 801a876:	9307      	strge	r3, [sp, #28]
 801a878:	9307      	strlt	r3, [sp, #28]
 801a87a:	bfb8      	it	lt
 801a87c:	9204      	strlt	r2, [sp, #16]
 801a87e:	7823      	ldrb	r3, [r4, #0]
 801a880:	2b2e      	cmp	r3, #46	@ 0x2e
 801a882:	d10a      	bne.n	801a89a <_vfiprintf_r+0x156>
 801a884:	7863      	ldrb	r3, [r4, #1]
 801a886:	2b2a      	cmp	r3, #42	@ 0x2a
 801a888:	d132      	bne.n	801a8f0 <_vfiprintf_r+0x1ac>
 801a88a:	9b03      	ldr	r3, [sp, #12]
 801a88c:	1d1a      	adds	r2, r3, #4
 801a88e:	681b      	ldr	r3, [r3, #0]
 801a890:	9203      	str	r2, [sp, #12]
 801a892:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a896:	3402      	adds	r4, #2
 801a898:	9305      	str	r3, [sp, #20]
 801a89a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801a970 <_vfiprintf_r+0x22c>
 801a89e:	7821      	ldrb	r1, [r4, #0]
 801a8a0:	2203      	movs	r2, #3
 801a8a2:	4650      	mov	r0, sl
 801a8a4:	f7f5 fca4 	bl	80101f0 <memchr>
 801a8a8:	b138      	cbz	r0, 801a8ba <_vfiprintf_r+0x176>
 801a8aa:	9b04      	ldr	r3, [sp, #16]
 801a8ac:	eba0 000a 	sub.w	r0, r0, sl
 801a8b0:	2240      	movs	r2, #64	@ 0x40
 801a8b2:	4082      	lsls	r2, r0
 801a8b4:	4313      	orrs	r3, r2
 801a8b6:	3401      	adds	r4, #1
 801a8b8:	9304      	str	r3, [sp, #16]
 801a8ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a8be:	4829      	ldr	r0, [pc, #164]	@ (801a964 <_vfiprintf_r+0x220>)
 801a8c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a8c4:	2206      	movs	r2, #6
 801a8c6:	f7f5 fc93 	bl	80101f0 <memchr>
 801a8ca:	2800      	cmp	r0, #0
 801a8cc:	d03f      	beq.n	801a94e <_vfiprintf_r+0x20a>
 801a8ce:	4b26      	ldr	r3, [pc, #152]	@ (801a968 <_vfiprintf_r+0x224>)
 801a8d0:	bb1b      	cbnz	r3, 801a91a <_vfiprintf_r+0x1d6>
 801a8d2:	9b03      	ldr	r3, [sp, #12]
 801a8d4:	3307      	adds	r3, #7
 801a8d6:	f023 0307 	bic.w	r3, r3, #7
 801a8da:	3308      	adds	r3, #8
 801a8dc:	9303      	str	r3, [sp, #12]
 801a8de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a8e0:	443b      	add	r3, r7
 801a8e2:	9309      	str	r3, [sp, #36]	@ 0x24
 801a8e4:	e76a      	b.n	801a7bc <_vfiprintf_r+0x78>
 801a8e6:	fb0c 3202 	mla	r2, ip, r2, r3
 801a8ea:	460c      	mov	r4, r1
 801a8ec:	2001      	movs	r0, #1
 801a8ee:	e7a8      	b.n	801a842 <_vfiprintf_r+0xfe>
 801a8f0:	2300      	movs	r3, #0
 801a8f2:	3401      	adds	r4, #1
 801a8f4:	9305      	str	r3, [sp, #20]
 801a8f6:	4619      	mov	r1, r3
 801a8f8:	f04f 0c0a 	mov.w	ip, #10
 801a8fc:	4620      	mov	r0, r4
 801a8fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a902:	3a30      	subs	r2, #48	@ 0x30
 801a904:	2a09      	cmp	r2, #9
 801a906:	d903      	bls.n	801a910 <_vfiprintf_r+0x1cc>
 801a908:	2b00      	cmp	r3, #0
 801a90a:	d0c6      	beq.n	801a89a <_vfiprintf_r+0x156>
 801a90c:	9105      	str	r1, [sp, #20]
 801a90e:	e7c4      	b.n	801a89a <_vfiprintf_r+0x156>
 801a910:	fb0c 2101 	mla	r1, ip, r1, r2
 801a914:	4604      	mov	r4, r0
 801a916:	2301      	movs	r3, #1
 801a918:	e7f0      	b.n	801a8fc <_vfiprintf_r+0x1b8>
 801a91a:	ab03      	add	r3, sp, #12
 801a91c:	9300      	str	r3, [sp, #0]
 801a91e:	462a      	mov	r2, r5
 801a920:	4b12      	ldr	r3, [pc, #72]	@ (801a96c <_vfiprintf_r+0x228>)
 801a922:	a904      	add	r1, sp, #16
 801a924:	4630      	mov	r0, r6
 801a926:	f3af 8000 	nop.w
 801a92a:	4607      	mov	r7, r0
 801a92c:	1c78      	adds	r0, r7, #1
 801a92e:	d1d6      	bne.n	801a8de <_vfiprintf_r+0x19a>
 801a930:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a932:	07d9      	lsls	r1, r3, #31
 801a934:	d405      	bmi.n	801a942 <_vfiprintf_r+0x1fe>
 801a936:	89ab      	ldrh	r3, [r5, #12]
 801a938:	059a      	lsls	r2, r3, #22
 801a93a:	d402      	bmi.n	801a942 <_vfiprintf_r+0x1fe>
 801a93c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a93e:	f7ff fe5f 	bl	801a600 <__retarget_lock_release_recursive>
 801a942:	89ab      	ldrh	r3, [r5, #12]
 801a944:	065b      	lsls	r3, r3, #25
 801a946:	f53f af1f 	bmi.w	801a788 <_vfiprintf_r+0x44>
 801a94a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a94c:	e71e      	b.n	801a78c <_vfiprintf_r+0x48>
 801a94e:	ab03      	add	r3, sp, #12
 801a950:	9300      	str	r3, [sp, #0]
 801a952:	462a      	mov	r2, r5
 801a954:	4b05      	ldr	r3, [pc, #20]	@ (801a96c <_vfiprintf_r+0x228>)
 801a956:	a904      	add	r1, sp, #16
 801a958:	4630      	mov	r0, r6
 801a95a:	f000 f879 	bl	801aa50 <_printf_i>
 801a95e:	e7e4      	b.n	801a92a <_vfiprintf_r+0x1e6>
 801a960:	0801c7b1 	.word	0x0801c7b1
 801a964:	0801c7bb 	.word	0x0801c7bb
 801a968:	00000000 	.word	0x00000000
 801a96c:	0801a71f 	.word	0x0801a71f
 801a970:	0801c7b7 	.word	0x0801c7b7

0801a974 <_printf_common>:
 801a974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a978:	4616      	mov	r6, r2
 801a97a:	4698      	mov	r8, r3
 801a97c:	688a      	ldr	r2, [r1, #8]
 801a97e:	690b      	ldr	r3, [r1, #16]
 801a980:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a984:	4293      	cmp	r3, r2
 801a986:	bfb8      	it	lt
 801a988:	4613      	movlt	r3, r2
 801a98a:	6033      	str	r3, [r6, #0]
 801a98c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801a990:	4607      	mov	r7, r0
 801a992:	460c      	mov	r4, r1
 801a994:	b10a      	cbz	r2, 801a99a <_printf_common+0x26>
 801a996:	3301      	adds	r3, #1
 801a998:	6033      	str	r3, [r6, #0]
 801a99a:	6823      	ldr	r3, [r4, #0]
 801a99c:	0699      	lsls	r1, r3, #26
 801a99e:	bf42      	ittt	mi
 801a9a0:	6833      	ldrmi	r3, [r6, #0]
 801a9a2:	3302      	addmi	r3, #2
 801a9a4:	6033      	strmi	r3, [r6, #0]
 801a9a6:	6825      	ldr	r5, [r4, #0]
 801a9a8:	f015 0506 	ands.w	r5, r5, #6
 801a9ac:	d106      	bne.n	801a9bc <_printf_common+0x48>
 801a9ae:	f104 0a19 	add.w	sl, r4, #25
 801a9b2:	68e3      	ldr	r3, [r4, #12]
 801a9b4:	6832      	ldr	r2, [r6, #0]
 801a9b6:	1a9b      	subs	r3, r3, r2
 801a9b8:	42ab      	cmp	r3, r5
 801a9ba:	dc26      	bgt.n	801aa0a <_printf_common+0x96>
 801a9bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801a9c0:	6822      	ldr	r2, [r4, #0]
 801a9c2:	3b00      	subs	r3, #0
 801a9c4:	bf18      	it	ne
 801a9c6:	2301      	movne	r3, #1
 801a9c8:	0692      	lsls	r2, r2, #26
 801a9ca:	d42b      	bmi.n	801aa24 <_printf_common+0xb0>
 801a9cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801a9d0:	4641      	mov	r1, r8
 801a9d2:	4638      	mov	r0, r7
 801a9d4:	47c8      	blx	r9
 801a9d6:	3001      	adds	r0, #1
 801a9d8:	d01e      	beq.n	801aa18 <_printf_common+0xa4>
 801a9da:	6823      	ldr	r3, [r4, #0]
 801a9dc:	6922      	ldr	r2, [r4, #16]
 801a9de:	f003 0306 	and.w	r3, r3, #6
 801a9e2:	2b04      	cmp	r3, #4
 801a9e4:	bf02      	ittt	eq
 801a9e6:	68e5      	ldreq	r5, [r4, #12]
 801a9e8:	6833      	ldreq	r3, [r6, #0]
 801a9ea:	1aed      	subeq	r5, r5, r3
 801a9ec:	68a3      	ldr	r3, [r4, #8]
 801a9ee:	bf0c      	ite	eq
 801a9f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a9f4:	2500      	movne	r5, #0
 801a9f6:	4293      	cmp	r3, r2
 801a9f8:	bfc4      	itt	gt
 801a9fa:	1a9b      	subgt	r3, r3, r2
 801a9fc:	18ed      	addgt	r5, r5, r3
 801a9fe:	2600      	movs	r6, #0
 801aa00:	341a      	adds	r4, #26
 801aa02:	42b5      	cmp	r5, r6
 801aa04:	d11a      	bne.n	801aa3c <_printf_common+0xc8>
 801aa06:	2000      	movs	r0, #0
 801aa08:	e008      	b.n	801aa1c <_printf_common+0xa8>
 801aa0a:	2301      	movs	r3, #1
 801aa0c:	4652      	mov	r2, sl
 801aa0e:	4641      	mov	r1, r8
 801aa10:	4638      	mov	r0, r7
 801aa12:	47c8      	blx	r9
 801aa14:	3001      	adds	r0, #1
 801aa16:	d103      	bne.n	801aa20 <_printf_common+0xac>
 801aa18:	f04f 30ff 	mov.w	r0, #4294967295
 801aa1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aa20:	3501      	adds	r5, #1
 801aa22:	e7c6      	b.n	801a9b2 <_printf_common+0x3e>
 801aa24:	18e1      	adds	r1, r4, r3
 801aa26:	1c5a      	adds	r2, r3, #1
 801aa28:	2030      	movs	r0, #48	@ 0x30
 801aa2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801aa2e:	4422      	add	r2, r4
 801aa30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801aa34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801aa38:	3302      	adds	r3, #2
 801aa3a:	e7c7      	b.n	801a9cc <_printf_common+0x58>
 801aa3c:	2301      	movs	r3, #1
 801aa3e:	4622      	mov	r2, r4
 801aa40:	4641      	mov	r1, r8
 801aa42:	4638      	mov	r0, r7
 801aa44:	47c8      	blx	r9
 801aa46:	3001      	adds	r0, #1
 801aa48:	d0e6      	beq.n	801aa18 <_printf_common+0xa4>
 801aa4a:	3601      	adds	r6, #1
 801aa4c:	e7d9      	b.n	801aa02 <_printf_common+0x8e>
	...

0801aa50 <_printf_i>:
 801aa50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801aa54:	7e0f      	ldrb	r7, [r1, #24]
 801aa56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801aa58:	2f78      	cmp	r7, #120	@ 0x78
 801aa5a:	4691      	mov	r9, r2
 801aa5c:	4680      	mov	r8, r0
 801aa5e:	460c      	mov	r4, r1
 801aa60:	469a      	mov	sl, r3
 801aa62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801aa66:	d807      	bhi.n	801aa78 <_printf_i+0x28>
 801aa68:	2f62      	cmp	r7, #98	@ 0x62
 801aa6a:	d80a      	bhi.n	801aa82 <_printf_i+0x32>
 801aa6c:	2f00      	cmp	r7, #0
 801aa6e:	f000 80d1 	beq.w	801ac14 <_printf_i+0x1c4>
 801aa72:	2f58      	cmp	r7, #88	@ 0x58
 801aa74:	f000 80b8 	beq.w	801abe8 <_printf_i+0x198>
 801aa78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801aa7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801aa80:	e03a      	b.n	801aaf8 <_printf_i+0xa8>
 801aa82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801aa86:	2b15      	cmp	r3, #21
 801aa88:	d8f6      	bhi.n	801aa78 <_printf_i+0x28>
 801aa8a:	a101      	add	r1, pc, #4	@ (adr r1, 801aa90 <_printf_i+0x40>)
 801aa8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801aa90:	0801aae9 	.word	0x0801aae9
 801aa94:	0801aafd 	.word	0x0801aafd
 801aa98:	0801aa79 	.word	0x0801aa79
 801aa9c:	0801aa79 	.word	0x0801aa79
 801aaa0:	0801aa79 	.word	0x0801aa79
 801aaa4:	0801aa79 	.word	0x0801aa79
 801aaa8:	0801aafd 	.word	0x0801aafd
 801aaac:	0801aa79 	.word	0x0801aa79
 801aab0:	0801aa79 	.word	0x0801aa79
 801aab4:	0801aa79 	.word	0x0801aa79
 801aab8:	0801aa79 	.word	0x0801aa79
 801aabc:	0801abfb 	.word	0x0801abfb
 801aac0:	0801ab27 	.word	0x0801ab27
 801aac4:	0801abb5 	.word	0x0801abb5
 801aac8:	0801aa79 	.word	0x0801aa79
 801aacc:	0801aa79 	.word	0x0801aa79
 801aad0:	0801ac1d 	.word	0x0801ac1d
 801aad4:	0801aa79 	.word	0x0801aa79
 801aad8:	0801ab27 	.word	0x0801ab27
 801aadc:	0801aa79 	.word	0x0801aa79
 801aae0:	0801aa79 	.word	0x0801aa79
 801aae4:	0801abbd 	.word	0x0801abbd
 801aae8:	6833      	ldr	r3, [r6, #0]
 801aaea:	1d1a      	adds	r2, r3, #4
 801aaec:	681b      	ldr	r3, [r3, #0]
 801aaee:	6032      	str	r2, [r6, #0]
 801aaf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801aaf4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801aaf8:	2301      	movs	r3, #1
 801aafa:	e09c      	b.n	801ac36 <_printf_i+0x1e6>
 801aafc:	6833      	ldr	r3, [r6, #0]
 801aafe:	6820      	ldr	r0, [r4, #0]
 801ab00:	1d19      	adds	r1, r3, #4
 801ab02:	6031      	str	r1, [r6, #0]
 801ab04:	0606      	lsls	r6, r0, #24
 801ab06:	d501      	bpl.n	801ab0c <_printf_i+0xbc>
 801ab08:	681d      	ldr	r5, [r3, #0]
 801ab0a:	e003      	b.n	801ab14 <_printf_i+0xc4>
 801ab0c:	0645      	lsls	r5, r0, #25
 801ab0e:	d5fb      	bpl.n	801ab08 <_printf_i+0xb8>
 801ab10:	f9b3 5000 	ldrsh.w	r5, [r3]
 801ab14:	2d00      	cmp	r5, #0
 801ab16:	da03      	bge.n	801ab20 <_printf_i+0xd0>
 801ab18:	232d      	movs	r3, #45	@ 0x2d
 801ab1a:	426d      	negs	r5, r5
 801ab1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ab20:	4858      	ldr	r0, [pc, #352]	@ (801ac84 <_printf_i+0x234>)
 801ab22:	230a      	movs	r3, #10
 801ab24:	e011      	b.n	801ab4a <_printf_i+0xfa>
 801ab26:	6821      	ldr	r1, [r4, #0]
 801ab28:	6833      	ldr	r3, [r6, #0]
 801ab2a:	0608      	lsls	r0, r1, #24
 801ab2c:	f853 5b04 	ldr.w	r5, [r3], #4
 801ab30:	d402      	bmi.n	801ab38 <_printf_i+0xe8>
 801ab32:	0649      	lsls	r1, r1, #25
 801ab34:	bf48      	it	mi
 801ab36:	b2ad      	uxthmi	r5, r5
 801ab38:	2f6f      	cmp	r7, #111	@ 0x6f
 801ab3a:	4852      	ldr	r0, [pc, #328]	@ (801ac84 <_printf_i+0x234>)
 801ab3c:	6033      	str	r3, [r6, #0]
 801ab3e:	bf14      	ite	ne
 801ab40:	230a      	movne	r3, #10
 801ab42:	2308      	moveq	r3, #8
 801ab44:	2100      	movs	r1, #0
 801ab46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801ab4a:	6866      	ldr	r6, [r4, #4]
 801ab4c:	60a6      	str	r6, [r4, #8]
 801ab4e:	2e00      	cmp	r6, #0
 801ab50:	db05      	blt.n	801ab5e <_printf_i+0x10e>
 801ab52:	6821      	ldr	r1, [r4, #0]
 801ab54:	432e      	orrs	r6, r5
 801ab56:	f021 0104 	bic.w	r1, r1, #4
 801ab5a:	6021      	str	r1, [r4, #0]
 801ab5c:	d04b      	beq.n	801abf6 <_printf_i+0x1a6>
 801ab5e:	4616      	mov	r6, r2
 801ab60:	fbb5 f1f3 	udiv	r1, r5, r3
 801ab64:	fb03 5711 	mls	r7, r3, r1, r5
 801ab68:	5dc7      	ldrb	r7, [r0, r7]
 801ab6a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ab6e:	462f      	mov	r7, r5
 801ab70:	42bb      	cmp	r3, r7
 801ab72:	460d      	mov	r5, r1
 801ab74:	d9f4      	bls.n	801ab60 <_printf_i+0x110>
 801ab76:	2b08      	cmp	r3, #8
 801ab78:	d10b      	bne.n	801ab92 <_printf_i+0x142>
 801ab7a:	6823      	ldr	r3, [r4, #0]
 801ab7c:	07df      	lsls	r7, r3, #31
 801ab7e:	d508      	bpl.n	801ab92 <_printf_i+0x142>
 801ab80:	6923      	ldr	r3, [r4, #16]
 801ab82:	6861      	ldr	r1, [r4, #4]
 801ab84:	4299      	cmp	r1, r3
 801ab86:	bfde      	ittt	le
 801ab88:	2330      	movle	r3, #48	@ 0x30
 801ab8a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ab8e:	f106 36ff 	addle.w	r6, r6, #4294967295
 801ab92:	1b92      	subs	r2, r2, r6
 801ab94:	6122      	str	r2, [r4, #16]
 801ab96:	f8cd a000 	str.w	sl, [sp]
 801ab9a:	464b      	mov	r3, r9
 801ab9c:	aa03      	add	r2, sp, #12
 801ab9e:	4621      	mov	r1, r4
 801aba0:	4640      	mov	r0, r8
 801aba2:	f7ff fee7 	bl	801a974 <_printf_common>
 801aba6:	3001      	adds	r0, #1
 801aba8:	d14a      	bne.n	801ac40 <_printf_i+0x1f0>
 801abaa:	f04f 30ff 	mov.w	r0, #4294967295
 801abae:	b004      	add	sp, #16
 801abb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801abb4:	6823      	ldr	r3, [r4, #0]
 801abb6:	f043 0320 	orr.w	r3, r3, #32
 801abba:	6023      	str	r3, [r4, #0]
 801abbc:	4832      	ldr	r0, [pc, #200]	@ (801ac88 <_printf_i+0x238>)
 801abbe:	2778      	movs	r7, #120	@ 0x78
 801abc0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801abc4:	6823      	ldr	r3, [r4, #0]
 801abc6:	6831      	ldr	r1, [r6, #0]
 801abc8:	061f      	lsls	r7, r3, #24
 801abca:	f851 5b04 	ldr.w	r5, [r1], #4
 801abce:	d402      	bmi.n	801abd6 <_printf_i+0x186>
 801abd0:	065f      	lsls	r7, r3, #25
 801abd2:	bf48      	it	mi
 801abd4:	b2ad      	uxthmi	r5, r5
 801abd6:	6031      	str	r1, [r6, #0]
 801abd8:	07d9      	lsls	r1, r3, #31
 801abda:	bf44      	itt	mi
 801abdc:	f043 0320 	orrmi.w	r3, r3, #32
 801abe0:	6023      	strmi	r3, [r4, #0]
 801abe2:	b11d      	cbz	r5, 801abec <_printf_i+0x19c>
 801abe4:	2310      	movs	r3, #16
 801abe6:	e7ad      	b.n	801ab44 <_printf_i+0xf4>
 801abe8:	4826      	ldr	r0, [pc, #152]	@ (801ac84 <_printf_i+0x234>)
 801abea:	e7e9      	b.n	801abc0 <_printf_i+0x170>
 801abec:	6823      	ldr	r3, [r4, #0]
 801abee:	f023 0320 	bic.w	r3, r3, #32
 801abf2:	6023      	str	r3, [r4, #0]
 801abf4:	e7f6      	b.n	801abe4 <_printf_i+0x194>
 801abf6:	4616      	mov	r6, r2
 801abf8:	e7bd      	b.n	801ab76 <_printf_i+0x126>
 801abfa:	6833      	ldr	r3, [r6, #0]
 801abfc:	6825      	ldr	r5, [r4, #0]
 801abfe:	6961      	ldr	r1, [r4, #20]
 801ac00:	1d18      	adds	r0, r3, #4
 801ac02:	6030      	str	r0, [r6, #0]
 801ac04:	062e      	lsls	r6, r5, #24
 801ac06:	681b      	ldr	r3, [r3, #0]
 801ac08:	d501      	bpl.n	801ac0e <_printf_i+0x1be>
 801ac0a:	6019      	str	r1, [r3, #0]
 801ac0c:	e002      	b.n	801ac14 <_printf_i+0x1c4>
 801ac0e:	0668      	lsls	r0, r5, #25
 801ac10:	d5fb      	bpl.n	801ac0a <_printf_i+0x1ba>
 801ac12:	8019      	strh	r1, [r3, #0]
 801ac14:	2300      	movs	r3, #0
 801ac16:	6123      	str	r3, [r4, #16]
 801ac18:	4616      	mov	r6, r2
 801ac1a:	e7bc      	b.n	801ab96 <_printf_i+0x146>
 801ac1c:	6833      	ldr	r3, [r6, #0]
 801ac1e:	1d1a      	adds	r2, r3, #4
 801ac20:	6032      	str	r2, [r6, #0]
 801ac22:	681e      	ldr	r6, [r3, #0]
 801ac24:	6862      	ldr	r2, [r4, #4]
 801ac26:	2100      	movs	r1, #0
 801ac28:	4630      	mov	r0, r6
 801ac2a:	f7f5 fae1 	bl	80101f0 <memchr>
 801ac2e:	b108      	cbz	r0, 801ac34 <_printf_i+0x1e4>
 801ac30:	1b80      	subs	r0, r0, r6
 801ac32:	6060      	str	r0, [r4, #4]
 801ac34:	6863      	ldr	r3, [r4, #4]
 801ac36:	6123      	str	r3, [r4, #16]
 801ac38:	2300      	movs	r3, #0
 801ac3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ac3e:	e7aa      	b.n	801ab96 <_printf_i+0x146>
 801ac40:	6923      	ldr	r3, [r4, #16]
 801ac42:	4632      	mov	r2, r6
 801ac44:	4649      	mov	r1, r9
 801ac46:	4640      	mov	r0, r8
 801ac48:	47d0      	blx	sl
 801ac4a:	3001      	adds	r0, #1
 801ac4c:	d0ad      	beq.n	801abaa <_printf_i+0x15a>
 801ac4e:	6823      	ldr	r3, [r4, #0]
 801ac50:	079b      	lsls	r3, r3, #30
 801ac52:	d413      	bmi.n	801ac7c <_printf_i+0x22c>
 801ac54:	68e0      	ldr	r0, [r4, #12]
 801ac56:	9b03      	ldr	r3, [sp, #12]
 801ac58:	4298      	cmp	r0, r3
 801ac5a:	bfb8      	it	lt
 801ac5c:	4618      	movlt	r0, r3
 801ac5e:	e7a6      	b.n	801abae <_printf_i+0x15e>
 801ac60:	2301      	movs	r3, #1
 801ac62:	4632      	mov	r2, r6
 801ac64:	4649      	mov	r1, r9
 801ac66:	4640      	mov	r0, r8
 801ac68:	47d0      	blx	sl
 801ac6a:	3001      	adds	r0, #1
 801ac6c:	d09d      	beq.n	801abaa <_printf_i+0x15a>
 801ac6e:	3501      	adds	r5, #1
 801ac70:	68e3      	ldr	r3, [r4, #12]
 801ac72:	9903      	ldr	r1, [sp, #12]
 801ac74:	1a5b      	subs	r3, r3, r1
 801ac76:	42ab      	cmp	r3, r5
 801ac78:	dcf2      	bgt.n	801ac60 <_printf_i+0x210>
 801ac7a:	e7eb      	b.n	801ac54 <_printf_i+0x204>
 801ac7c:	2500      	movs	r5, #0
 801ac7e:	f104 0619 	add.w	r6, r4, #25
 801ac82:	e7f5      	b.n	801ac70 <_printf_i+0x220>
 801ac84:	0801c7c2 	.word	0x0801c7c2
 801ac88:	0801c7d3 	.word	0x0801c7d3

0801ac8c <__sflush_r>:
 801ac8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ac90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac94:	0716      	lsls	r6, r2, #28
 801ac96:	4605      	mov	r5, r0
 801ac98:	460c      	mov	r4, r1
 801ac9a:	d454      	bmi.n	801ad46 <__sflush_r+0xba>
 801ac9c:	684b      	ldr	r3, [r1, #4]
 801ac9e:	2b00      	cmp	r3, #0
 801aca0:	dc02      	bgt.n	801aca8 <__sflush_r+0x1c>
 801aca2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801aca4:	2b00      	cmp	r3, #0
 801aca6:	dd48      	ble.n	801ad3a <__sflush_r+0xae>
 801aca8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801acaa:	2e00      	cmp	r6, #0
 801acac:	d045      	beq.n	801ad3a <__sflush_r+0xae>
 801acae:	2300      	movs	r3, #0
 801acb0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801acb4:	682f      	ldr	r7, [r5, #0]
 801acb6:	6a21      	ldr	r1, [r4, #32]
 801acb8:	602b      	str	r3, [r5, #0]
 801acba:	d030      	beq.n	801ad1e <__sflush_r+0x92>
 801acbc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801acbe:	89a3      	ldrh	r3, [r4, #12]
 801acc0:	0759      	lsls	r1, r3, #29
 801acc2:	d505      	bpl.n	801acd0 <__sflush_r+0x44>
 801acc4:	6863      	ldr	r3, [r4, #4]
 801acc6:	1ad2      	subs	r2, r2, r3
 801acc8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801acca:	b10b      	cbz	r3, 801acd0 <__sflush_r+0x44>
 801accc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801acce:	1ad2      	subs	r2, r2, r3
 801acd0:	2300      	movs	r3, #0
 801acd2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801acd4:	6a21      	ldr	r1, [r4, #32]
 801acd6:	4628      	mov	r0, r5
 801acd8:	47b0      	blx	r6
 801acda:	1c43      	adds	r3, r0, #1
 801acdc:	89a3      	ldrh	r3, [r4, #12]
 801acde:	d106      	bne.n	801acee <__sflush_r+0x62>
 801ace0:	6829      	ldr	r1, [r5, #0]
 801ace2:	291d      	cmp	r1, #29
 801ace4:	d82b      	bhi.n	801ad3e <__sflush_r+0xb2>
 801ace6:	4a2a      	ldr	r2, [pc, #168]	@ (801ad90 <__sflush_r+0x104>)
 801ace8:	40ca      	lsrs	r2, r1
 801acea:	07d6      	lsls	r6, r2, #31
 801acec:	d527      	bpl.n	801ad3e <__sflush_r+0xb2>
 801acee:	2200      	movs	r2, #0
 801acf0:	6062      	str	r2, [r4, #4]
 801acf2:	04d9      	lsls	r1, r3, #19
 801acf4:	6922      	ldr	r2, [r4, #16]
 801acf6:	6022      	str	r2, [r4, #0]
 801acf8:	d504      	bpl.n	801ad04 <__sflush_r+0x78>
 801acfa:	1c42      	adds	r2, r0, #1
 801acfc:	d101      	bne.n	801ad02 <__sflush_r+0x76>
 801acfe:	682b      	ldr	r3, [r5, #0]
 801ad00:	b903      	cbnz	r3, 801ad04 <__sflush_r+0x78>
 801ad02:	6560      	str	r0, [r4, #84]	@ 0x54
 801ad04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ad06:	602f      	str	r7, [r5, #0]
 801ad08:	b1b9      	cbz	r1, 801ad3a <__sflush_r+0xae>
 801ad0a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ad0e:	4299      	cmp	r1, r3
 801ad10:	d002      	beq.n	801ad18 <__sflush_r+0x8c>
 801ad12:	4628      	mov	r0, r5
 801ad14:	f7ff fca2 	bl	801a65c <_free_r>
 801ad18:	2300      	movs	r3, #0
 801ad1a:	6363      	str	r3, [r4, #52]	@ 0x34
 801ad1c:	e00d      	b.n	801ad3a <__sflush_r+0xae>
 801ad1e:	2301      	movs	r3, #1
 801ad20:	4628      	mov	r0, r5
 801ad22:	47b0      	blx	r6
 801ad24:	4602      	mov	r2, r0
 801ad26:	1c50      	adds	r0, r2, #1
 801ad28:	d1c9      	bne.n	801acbe <__sflush_r+0x32>
 801ad2a:	682b      	ldr	r3, [r5, #0]
 801ad2c:	2b00      	cmp	r3, #0
 801ad2e:	d0c6      	beq.n	801acbe <__sflush_r+0x32>
 801ad30:	2b1d      	cmp	r3, #29
 801ad32:	d001      	beq.n	801ad38 <__sflush_r+0xac>
 801ad34:	2b16      	cmp	r3, #22
 801ad36:	d11e      	bne.n	801ad76 <__sflush_r+0xea>
 801ad38:	602f      	str	r7, [r5, #0]
 801ad3a:	2000      	movs	r0, #0
 801ad3c:	e022      	b.n	801ad84 <__sflush_r+0xf8>
 801ad3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ad42:	b21b      	sxth	r3, r3
 801ad44:	e01b      	b.n	801ad7e <__sflush_r+0xf2>
 801ad46:	690f      	ldr	r7, [r1, #16]
 801ad48:	2f00      	cmp	r7, #0
 801ad4a:	d0f6      	beq.n	801ad3a <__sflush_r+0xae>
 801ad4c:	0793      	lsls	r3, r2, #30
 801ad4e:	680e      	ldr	r6, [r1, #0]
 801ad50:	bf08      	it	eq
 801ad52:	694b      	ldreq	r3, [r1, #20]
 801ad54:	600f      	str	r7, [r1, #0]
 801ad56:	bf18      	it	ne
 801ad58:	2300      	movne	r3, #0
 801ad5a:	eba6 0807 	sub.w	r8, r6, r7
 801ad5e:	608b      	str	r3, [r1, #8]
 801ad60:	f1b8 0f00 	cmp.w	r8, #0
 801ad64:	dde9      	ble.n	801ad3a <__sflush_r+0xae>
 801ad66:	6a21      	ldr	r1, [r4, #32]
 801ad68:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801ad6a:	4643      	mov	r3, r8
 801ad6c:	463a      	mov	r2, r7
 801ad6e:	4628      	mov	r0, r5
 801ad70:	47b0      	blx	r6
 801ad72:	2800      	cmp	r0, #0
 801ad74:	dc08      	bgt.n	801ad88 <__sflush_r+0xfc>
 801ad76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ad7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ad7e:	81a3      	strh	r3, [r4, #12]
 801ad80:	f04f 30ff 	mov.w	r0, #4294967295
 801ad84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad88:	4407      	add	r7, r0
 801ad8a:	eba8 0800 	sub.w	r8, r8, r0
 801ad8e:	e7e7      	b.n	801ad60 <__sflush_r+0xd4>
 801ad90:	20400001 	.word	0x20400001

0801ad94 <_fflush_r>:
 801ad94:	b538      	push	{r3, r4, r5, lr}
 801ad96:	690b      	ldr	r3, [r1, #16]
 801ad98:	4605      	mov	r5, r0
 801ad9a:	460c      	mov	r4, r1
 801ad9c:	b913      	cbnz	r3, 801ada4 <_fflush_r+0x10>
 801ad9e:	2500      	movs	r5, #0
 801ada0:	4628      	mov	r0, r5
 801ada2:	bd38      	pop	{r3, r4, r5, pc}
 801ada4:	b118      	cbz	r0, 801adae <_fflush_r+0x1a>
 801ada6:	6a03      	ldr	r3, [r0, #32]
 801ada8:	b90b      	cbnz	r3, 801adae <_fflush_r+0x1a>
 801adaa:	f7ff fb09 	bl	801a3c0 <__sinit>
 801adae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801adb2:	2b00      	cmp	r3, #0
 801adb4:	d0f3      	beq.n	801ad9e <_fflush_r+0xa>
 801adb6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801adb8:	07d0      	lsls	r0, r2, #31
 801adba:	d404      	bmi.n	801adc6 <_fflush_r+0x32>
 801adbc:	0599      	lsls	r1, r3, #22
 801adbe:	d402      	bmi.n	801adc6 <_fflush_r+0x32>
 801adc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801adc2:	f7ff fc1c 	bl	801a5fe <__retarget_lock_acquire_recursive>
 801adc6:	4628      	mov	r0, r5
 801adc8:	4621      	mov	r1, r4
 801adca:	f7ff ff5f 	bl	801ac8c <__sflush_r>
 801adce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801add0:	07da      	lsls	r2, r3, #31
 801add2:	4605      	mov	r5, r0
 801add4:	d4e4      	bmi.n	801ada0 <_fflush_r+0xc>
 801add6:	89a3      	ldrh	r3, [r4, #12]
 801add8:	059b      	lsls	r3, r3, #22
 801adda:	d4e1      	bmi.n	801ada0 <_fflush_r+0xc>
 801addc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801adde:	f7ff fc0f 	bl	801a600 <__retarget_lock_release_recursive>
 801ade2:	e7dd      	b.n	801ada0 <_fflush_r+0xc>

0801ade4 <fiprintf>:
 801ade4:	b40e      	push	{r1, r2, r3}
 801ade6:	b503      	push	{r0, r1, lr}
 801ade8:	4601      	mov	r1, r0
 801adea:	ab03      	add	r3, sp, #12
 801adec:	4805      	ldr	r0, [pc, #20]	@ (801ae04 <fiprintf+0x20>)
 801adee:	f853 2b04 	ldr.w	r2, [r3], #4
 801adf2:	6800      	ldr	r0, [r0, #0]
 801adf4:	9301      	str	r3, [sp, #4]
 801adf6:	f7ff fca5 	bl	801a744 <_vfiprintf_r>
 801adfa:	b002      	add	sp, #8
 801adfc:	f85d eb04 	ldr.w	lr, [sp], #4
 801ae00:	b003      	add	sp, #12
 801ae02:	4770      	bx	lr
 801ae04:	20000018 	.word	0x20000018

0801ae08 <__swbuf_r>:
 801ae08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae0a:	460e      	mov	r6, r1
 801ae0c:	4614      	mov	r4, r2
 801ae0e:	4605      	mov	r5, r0
 801ae10:	b118      	cbz	r0, 801ae1a <__swbuf_r+0x12>
 801ae12:	6a03      	ldr	r3, [r0, #32]
 801ae14:	b90b      	cbnz	r3, 801ae1a <__swbuf_r+0x12>
 801ae16:	f7ff fad3 	bl	801a3c0 <__sinit>
 801ae1a:	69a3      	ldr	r3, [r4, #24]
 801ae1c:	60a3      	str	r3, [r4, #8]
 801ae1e:	89a3      	ldrh	r3, [r4, #12]
 801ae20:	071a      	lsls	r2, r3, #28
 801ae22:	d501      	bpl.n	801ae28 <__swbuf_r+0x20>
 801ae24:	6923      	ldr	r3, [r4, #16]
 801ae26:	b943      	cbnz	r3, 801ae3a <__swbuf_r+0x32>
 801ae28:	4621      	mov	r1, r4
 801ae2a:	4628      	mov	r0, r5
 801ae2c:	f000 f82a 	bl	801ae84 <__swsetup_r>
 801ae30:	b118      	cbz	r0, 801ae3a <__swbuf_r+0x32>
 801ae32:	f04f 37ff 	mov.w	r7, #4294967295
 801ae36:	4638      	mov	r0, r7
 801ae38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ae3a:	6823      	ldr	r3, [r4, #0]
 801ae3c:	6922      	ldr	r2, [r4, #16]
 801ae3e:	1a98      	subs	r0, r3, r2
 801ae40:	6963      	ldr	r3, [r4, #20]
 801ae42:	b2f6      	uxtb	r6, r6
 801ae44:	4283      	cmp	r3, r0
 801ae46:	4637      	mov	r7, r6
 801ae48:	dc05      	bgt.n	801ae56 <__swbuf_r+0x4e>
 801ae4a:	4621      	mov	r1, r4
 801ae4c:	4628      	mov	r0, r5
 801ae4e:	f7ff ffa1 	bl	801ad94 <_fflush_r>
 801ae52:	2800      	cmp	r0, #0
 801ae54:	d1ed      	bne.n	801ae32 <__swbuf_r+0x2a>
 801ae56:	68a3      	ldr	r3, [r4, #8]
 801ae58:	3b01      	subs	r3, #1
 801ae5a:	60a3      	str	r3, [r4, #8]
 801ae5c:	6823      	ldr	r3, [r4, #0]
 801ae5e:	1c5a      	adds	r2, r3, #1
 801ae60:	6022      	str	r2, [r4, #0]
 801ae62:	701e      	strb	r6, [r3, #0]
 801ae64:	6962      	ldr	r2, [r4, #20]
 801ae66:	1c43      	adds	r3, r0, #1
 801ae68:	429a      	cmp	r2, r3
 801ae6a:	d004      	beq.n	801ae76 <__swbuf_r+0x6e>
 801ae6c:	89a3      	ldrh	r3, [r4, #12]
 801ae6e:	07db      	lsls	r3, r3, #31
 801ae70:	d5e1      	bpl.n	801ae36 <__swbuf_r+0x2e>
 801ae72:	2e0a      	cmp	r6, #10
 801ae74:	d1df      	bne.n	801ae36 <__swbuf_r+0x2e>
 801ae76:	4621      	mov	r1, r4
 801ae78:	4628      	mov	r0, r5
 801ae7a:	f7ff ff8b 	bl	801ad94 <_fflush_r>
 801ae7e:	2800      	cmp	r0, #0
 801ae80:	d0d9      	beq.n	801ae36 <__swbuf_r+0x2e>
 801ae82:	e7d6      	b.n	801ae32 <__swbuf_r+0x2a>

0801ae84 <__swsetup_r>:
 801ae84:	b538      	push	{r3, r4, r5, lr}
 801ae86:	4b29      	ldr	r3, [pc, #164]	@ (801af2c <__swsetup_r+0xa8>)
 801ae88:	4605      	mov	r5, r0
 801ae8a:	6818      	ldr	r0, [r3, #0]
 801ae8c:	460c      	mov	r4, r1
 801ae8e:	b118      	cbz	r0, 801ae98 <__swsetup_r+0x14>
 801ae90:	6a03      	ldr	r3, [r0, #32]
 801ae92:	b90b      	cbnz	r3, 801ae98 <__swsetup_r+0x14>
 801ae94:	f7ff fa94 	bl	801a3c0 <__sinit>
 801ae98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ae9c:	0719      	lsls	r1, r3, #28
 801ae9e:	d422      	bmi.n	801aee6 <__swsetup_r+0x62>
 801aea0:	06da      	lsls	r2, r3, #27
 801aea2:	d407      	bmi.n	801aeb4 <__swsetup_r+0x30>
 801aea4:	2209      	movs	r2, #9
 801aea6:	602a      	str	r2, [r5, #0]
 801aea8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801aeac:	81a3      	strh	r3, [r4, #12]
 801aeae:	f04f 30ff 	mov.w	r0, #4294967295
 801aeb2:	e033      	b.n	801af1c <__swsetup_r+0x98>
 801aeb4:	0758      	lsls	r0, r3, #29
 801aeb6:	d512      	bpl.n	801aede <__swsetup_r+0x5a>
 801aeb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801aeba:	b141      	cbz	r1, 801aece <__swsetup_r+0x4a>
 801aebc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801aec0:	4299      	cmp	r1, r3
 801aec2:	d002      	beq.n	801aeca <__swsetup_r+0x46>
 801aec4:	4628      	mov	r0, r5
 801aec6:	f7ff fbc9 	bl	801a65c <_free_r>
 801aeca:	2300      	movs	r3, #0
 801aecc:	6363      	str	r3, [r4, #52]	@ 0x34
 801aece:	89a3      	ldrh	r3, [r4, #12]
 801aed0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801aed4:	81a3      	strh	r3, [r4, #12]
 801aed6:	2300      	movs	r3, #0
 801aed8:	6063      	str	r3, [r4, #4]
 801aeda:	6923      	ldr	r3, [r4, #16]
 801aedc:	6023      	str	r3, [r4, #0]
 801aede:	89a3      	ldrh	r3, [r4, #12]
 801aee0:	f043 0308 	orr.w	r3, r3, #8
 801aee4:	81a3      	strh	r3, [r4, #12]
 801aee6:	6923      	ldr	r3, [r4, #16]
 801aee8:	b94b      	cbnz	r3, 801aefe <__swsetup_r+0x7a>
 801aeea:	89a3      	ldrh	r3, [r4, #12]
 801aeec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801aef0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801aef4:	d003      	beq.n	801aefe <__swsetup_r+0x7a>
 801aef6:	4621      	mov	r1, r4
 801aef8:	4628      	mov	r0, r5
 801aefa:	f000 f846 	bl	801af8a <__smakebuf_r>
 801aefe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801af02:	f013 0201 	ands.w	r2, r3, #1
 801af06:	d00a      	beq.n	801af1e <__swsetup_r+0x9a>
 801af08:	2200      	movs	r2, #0
 801af0a:	60a2      	str	r2, [r4, #8]
 801af0c:	6962      	ldr	r2, [r4, #20]
 801af0e:	4252      	negs	r2, r2
 801af10:	61a2      	str	r2, [r4, #24]
 801af12:	6922      	ldr	r2, [r4, #16]
 801af14:	b942      	cbnz	r2, 801af28 <__swsetup_r+0xa4>
 801af16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801af1a:	d1c5      	bne.n	801aea8 <__swsetup_r+0x24>
 801af1c:	bd38      	pop	{r3, r4, r5, pc}
 801af1e:	0799      	lsls	r1, r3, #30
 801af20:	bf58      	it	pl
 801af22:	6962      	ldrpl	r2, [r4, #20]
 801af24:	60a2      	str	r2, [r4, #8]
 801af26:	e7f4      	b.n	801af12 <__swsetup_r+0x8e>
 801af28:	2000      	movs	r0, #0
 801af2a:	e7f7      	b.n	801af1c <__swsetup_r+0x98>
 801af2c:	20000018 	.word	0x20000018

0801af30 <abort>:
 801af30:	b508      	push	{r3, lr}
 801af32:	2006      	movs	r0, #6
 801af34:	f000 f88e 	bl	801b054 <raise>
 801af38:	2001      	movs	r0, #1
 801af3a:	f7f6 f947 	bl	80111cc <_exit>

0801af3e <__swhatbuf_r>:
 801af3e:	b570      	push	{r4, r5, r6, lr}
 801af40:	460c      	mov	r4, r1
 801af42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801af46:	2900      	cmp	r1, #0
 801af48:	b096      	sub	sp, #88	@ 0x58
 801af4a:	4615      	mov	r5, r2
 801af4c:	461e      	mov	r6, r3
 801af4e:	da0d      	bge.n	801af6c <__swhatbuf_r+0x2e>
 801af50:	89a3      	ldrh	r3, [r4, #12]
 801af52:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801af56:	f04f 0100 	mov.w	r1, #0
 801af5a:	bf14      	ite	ne
 801af5c:	2340      	movne	r3, #64	@ 0x40
 801af5e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801af62:	2000      	movs	r0, #0
 801af64:	6031      	str	r1, [r6, #0]
 801af66:	602b      	str	r3, [r5, #0]
 801af68:	b016      	add	sp, #88	@ 0x58
 801af6a:	bd70      	pop	{r4, r5, r6, pc}
 801af6c:	466a      	mov	r2, sp
 801af6e:	f000 f879 	bl	801b064 <_fstat_r>
 801af72:	2800      	cmp	r0, #0
 801af74:	dbec      	blt.n	801af50 <__swhatbuf_r+0x12>
 801af76:	9901      	ldr	r1, [sp, #4]
 801af78:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801af7c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801af80:	4259      	negs	r1, r3
 801af82:	4159      	adcs	r1, r3
 801af84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801af88:	e7eb      	b.n	801af62 <__swhatbuf_r+0x24>

0801af8a <__smakebuf_r>:
 801af8a:	898b      	ldrh	r3, [r1, #12]
 801af8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801af8e:	079d      	lsls	r5, r3, #30
 801af90:	4606      	mov	r6, r0
 801af92:	460c      	mov	r4, r1
 801af94:	d507      	bpl.n	801afa6 <__smakebuf_r+0x1c>
 801af96:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801af9a:	6023      	str	r3, [r4, #0]
 801af9c:	6123      	str	r3, [r4, #16]
 801af9e:	2301      	movs	r3, #1
 801afa0:	6163      	str	r3, [r4, #20]
 801afa2:	b003      	add	sp, #12
 801afa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801afa6:	ab01      	add	r3, sp, #4
 801afa8:	466a      	mov	r2, sp
 801afaa:	f7ff ffc8 	bl	801af3e <__swhatbuf_r>
 801afae:	9f00      	ldr	r7, [sp, #0]
 801afb0:	4605      	mov	r5, r0
 801afb2:	4639      	mov	r1, r7
 801afb4:	4630      	mov	r0, r6
 801afb6:	f7ff f8ad 	bl	801a114 <_malloc_r>
 801afba:	b948      	cbnz	r0, 801afd0 <__smakebuf_r+0x46>
 801afbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801afc0:	059a      	lsls	r2, r3, #22
 801afc2:	d4ee      	bmi.n	801afa2 <__smakebuf_r+0x18>
 801afc4:	f023 0303 	bic.w	r3, r3, #3
 801afc8:	f043 0302 	orr.w	r3, r3, #2
 801afcc:	81a3      	strh	r3, [r4, #12]
 801afce:	e7e2      	b.n	801af96 <__smakebuf_r+0xc>
 801afd0:	89a3      	ldrh	r3, [r4, #12]
 801afd2:	6020      	str	r0, [r4, #0]
 801afd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801afd8:	81a3      	strh	r3, [r4, #12]
 801afda:	9b01      	ldr	r3, [sp, #4]
 801afdc:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801afe0:	b15b      	cbz	r3, 801affa <__smakebuf_r+0x70>
 801afe2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801afe6:	4630      	mov	r0, r6
 801afe8:	f000 f84e 	bl	801b088 <_isatty_r>
 801afec:	b128      	cbz	r0, 801affa <__smakebuf_r+0x70>
 801afee:	89a3      	ldrh	r3, [r4, #12]
 801aff0:	f023 0303 	bic.w	r3, r3, #3
 801aff4:	f043 0301 	orr.w	r3, r3, #1
 801aff8:	81a3      	strh	r3, [r4, #12]
 801affa:	89a3      	ldrh	r3, [r4, #12]
 801affc:	431d      	orrs	r5, r3
 801affe:	81a5      	strh	r5, [r4, #12]
 801b000:	e7cf      	b.n	801afa2 <__smakebuf_r+0x18>

0801b002 <_raise_r>:
 801b002:	291f      	cmp	r1, #31
 801b004:	b538      	push	{r3, r4, r5, lr}
 801b006:	4605      	mov	r5, r0
 801b008:	460c      	mov	r4, r1
 801b00a:	d904      	bls.n	801b016 <_raise_r+0x14>
 801b00c:	2316      	movs	r3, #22
 801b00e:	6003      	str	r3, [r0, #0]
 801b010:	f04f 30ff 	mov.w	r0, #4294967295
 801b014:	bd38      	pop	{r3, r4, r5, pc}
 801b016:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801b018:	b112      	cbz	r2, 801b020 <_raise_r+0x1e>
 801b01a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b01e:	b94b      	cbnz	r3, 801b034 <_raise_r+0x32>
 801b020:	4628      	mov	r0, r5
 801b022:	f000 f853 	bl	801b0cc <_getpid_r>
 801b026:	4622      	mov	r2, r4
 801b028:	4601      	mov	r1, r0
 801b02a:	4628      	mov	r0, r5
 801b02c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b030:	f000 b83a 	b.w	801b0a8 <_kill_r>
 801b034:	2b01      	cmp	r3, #1
 801b036:	d00a      	beq.n	801b04e <_raise_r+0x4c>
 801b038:	1c59      	adds	r1, r3, #1
 801b03a:	d103      	bne.n	801b044 <_raise_r+0x42>
 801b03c:	2316      	movs	r3, #22
 801b03e:	6003      	str	r3, [r0, #0]
 801b040:	2001      	movs	r0, #1
 801b042:	e7e7      	b.n	801b014 <_raise_r+0x12>
 801b044:	2100      	movs	r1, #0
 801b046:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801b04a:	4620      	mov	r0, r4
 801b04c:	4798      	blx	r3
 801b04e:	2000      	movs	r0, #0
 801b050:	e7e0      	b.n	801b014 <_raise_r+0x12>
	...

0801b054 <raise>:
 801b054:	4b02      	ldr	r3, [pc, #8]	@ (801b060 <raise+0xc>)
 801b056:	4601      	mov	r1, r0
 801b058:	6818      	ldr	r0, [r3, #0]
 801b05a:	f7ff bfd2 	b.w	801b002 <_raise_r>
 801b05e:	bf00      	nop
 801b060:	20000018 	.word	0x20000018

0801b064 <_fstat_r>:
 801b064:	b538      	push	{r3, r4, r5, lr}
 801b066:	4d07      	ldr	r5, [pc, #28]	@ (801b084 <_fstat_r+0x20>)
 801b068:	2300      	movs	r3, #0
 801b06a:	4604      	mov	r4, r0
 801b06c:	4608      	mov	r0, r1
 801b06e:	4611      	mov	r1, r2
 801b070:	602b      	str	r3, [r5, #0]
 801b072:	f7f6 f8fb 	bl	801126c <_fstat>
 801b076:	1c43      	adds	r3, r0, #1
 801b078:	d102      	bne.n	801b080 <_fstat_r+0x1c>
 801b07a:	682b      	ldr	r3, [r5, #0]
 801b07c:	b103      	cbz	r3, 801b080 <_fstat_r+0x1c>
 801b07e:	6023      	str	r3, [r4, #0]
 801b080:	bd38      	pop	{r3, r4, r5, pc}
 801b082:	bf00      	nop
 801b084:	20016504 	.word	0x20016504

0801b088 <_isatty_r>:
 801b088:	b538      	push	{r3, r4, r5, lr}
 801b08a:	4d06      	ldr	r5, [pc, #24]	@ (801b0a4 <_isatty_r+0x1c>)
 801b08c:	2300      	movs	r3, #0
 801b08e:	4604      	mov	r4, r0
 801b090:	4608      	mov	r0, r1
 801b092:	602b      	str	r3, [r5, #0]
 801b094:	f7f6 f8fa 	bl	801128c <_isatty>
 801b098:	1c43      	adds	r3, r0, #1
 801b09a:	d102      	bne.n	801b0a2 <_isatty_r+0x1a>
 801b09c:	682b      	ldr	r3, [r5, #0]
 801b09e:	b103      	cbz	r3, 801b0a2 <_isatty_r+0x1a>
 801b0a0:	6023      	str	r3, [r4, #0]
 801b0a2:	bd38      	pop	{r3, r4, r5, pc}
 801b0a4:	20016504 	.word	0x20016504

0801b0a8 <_kill_r>:
 801b0a8:	b538      	push	{r3, r4, r5, lr}
 801b0aa:	4d07      	ldr	r5, [pc, #28]	@ (801b0c8 <_kill_r+0x20>)
 801b0ac:	2300      	movs	r3, #0
 801b0ae:	4604      	mov	r4, r0
 801b0b0:	4608      	mov	r0, r1
 801b0b2:	4611      	mov	r1, r2
 801b0b4:	602b      	str	r3, [r5, #0]
 801b0b6:	f7f6 f877 	bl	80111a8 <_kill>
 801b0ba:	1c43      	adds	r3, r0, #1
 801b0bc:	d102      	bne.n	801b0c4 <_kill_r+0x1c>
 801b0be:	682b      	ldr	r3, [r5, #0]
 801b0c0:	b103      	cbz	r3, 801b0c4 <_kill_r+0x1c>
 801b0c2:	6023      	str	r3, [r4, #0]
 801b0c4:	bd38      	pop	{r3, r4, r5, pc}
 801b0c6:	bf00      	nop
 801b0c8:	20016504 	.word	0x20016504

0801b0cc <_getpid_r>:
 801b0cc:	f7f6 b864 	b.w	8011198 <_getpid>

0801b0d0 <_init>:
 801b0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b0d2:	bf00      	nop
 801b0d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b0d6:	bc08      	pop	{r3}
 801b0d8:	469e      	mov	lr, r3
 801b0da:	4770      	bx	lr

0801b0dc <_fini>:
 801b0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b0de:	bf00      	nop
 801b0e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b0e2:	bc08      	pop	{r3}
 801b0e4:	469e      	mov	lr, r3
 801b0e6:	4770      	bx	lr
